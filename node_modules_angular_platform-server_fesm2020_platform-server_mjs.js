exports.id = "node_modules_angular_platform-server_fesm2020_platform-server_mjs";
exports.ids = ["node_modules_angular_platform-server_fesm2020_platform-server_mjs"];
exports.modules = {

/***/ 84361:
/*!********************************************************!*\
  !*** ./node_modules/domino/lib/CSSStyleDeclaration.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var parserlib = __webpack_require__(/*! ./cssparser */ 35581);
module.exports = CSSStyleDeclaration;
function CSSStyleDeclaration(elt) {
  this._element = elt;
}

// Utility function for parsing style declarations
// Pass in a string like "margin-left: 5px; border-style: solid"
// and this function returns an object like
// {"margin-left":"5px", "border-style":"solid"}
function parseStyles(s) {
  var parser = new parserlib.css.Parser();
  var result = {
    property: Object.create(null),
    priority: Object.create(null)
  };
  parser.addListener("property", function (e) {
    if (e.invalid) return; // Skip errors
    result.property[e.property.text] = e.value.text;
    if (e.important) result.priority[e.property.text] = 'important';
  });
  s = ('' + s).replace(/^;/, '');
  parser.parseStyleAttribute(s);
  return result;
}
var NO_CHANGE = {}; // Private marker object

CSSStyleDeclaration.prototype = Object.create(Object.prototype, {
  // Return the parsed form of the element's style attribute.
  // If the element's style attribute has never been parsed
  // or if it has changed since the last parse, then reparse it
  // Note that the styles don't get parsed until they're actually needed
  _parsed: {
    get: function () {
      if (!this._parsedStyles || this.cssText !== this._lastParsedText) {
        var text = this.cssText;
        this._parsedStyles = parseStyles(text);
        this._lastParsedText = text;
        delete this._names;
      }
      return this._parsedStyles;
    }
  },
  // Call this method any time the parsed representation of the
  // style changes.  It converts the style properties to a string and
  // sets cssText and the element's style attribute
  _serialize: {
    value: function () {
      var styles = this._parsed;
      var s = "";
      for (var name in styles.property) {
        if (s) s += " ";
        s += name + ": " + styles.property[name];
        if (styles.priority[name]) {
          s += " !" + styles.priority[name];
        }
        s += ";";
      }
      this.cssText = s; // also sets the style attribute
      this._lastParsedText = s; // so we don't reparse
      delete this._names;
    }
  },
  cssText: {
    get: function () {
      // XXX: this is a CSSStyleDeclaration for an element.
      // A different impl might be necessary for a set of styles
      // associated returned by getComputedStyle(), e.g.
      return this._element.getAttribute("style");
    },
    set: function (value) {
      // XXX: I should parse and serialize the value to
      // normalize it and remove errors. FF and chrome do that.
      this._element.setAttribute("style", value);
    }
  },
  length: {
    get: function () {
      if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);
      return this._names.length;
    }
  },
  item: {
    value: function (n) {
      if (!this._names) this._names = Object.getOwnPropertyNames(this._parsed.property);
      return this._names[n];
    }
  },
  getPropertyValue: {
    value: function (property) {
      property = property.toLowerCase();
      return this._parsed.property[property] || "";
    }
  },
  getPropertyPriority: {
    value: function (property) {
      property = property.toLowerCase();
      return this._parsed.priority[property] || "";
    }
  },
  setProperty: {
    value: function (property, value, priority) {
      property = property.toLowerCase();
      if (value === null || value === undefined) {
        value = "";
      }
      if (priority === null || priority === undefined) {
        priority = "";
      }

      // String coercion
      if (value !== NO_CHANGE) {
        value = "" + value;
      }
      if (value === "") {
        this.removeProperty(property);
        return;
      }
      if (priority !== "" && priority !== NO_CHANGE && !/^important$/i.test(priority)) {
        return;
      }
      var styles = this._parsed;
      if (value === NO_CHANGE) {
        if (!styles.property[property]) {
          return; // Not a valid property name.
        }

        if (priority !== "") {
          styles.priority[property] = "important";
        } else {
          delete styles.priority[property];
        }
      } else {
        // We don't just accept the property value.  Instead
        // we parse it to ensure that it is something valid.
        // If it contains a semicolon it is invalid
        if (value.indexOf(";") !== -1) return;
        var newprops = parseStyles(property + ":" + value);
        if (Object.getOwnPropertyNames(newprops.property).length === 0) {
          return; // no valid property found
        }

        if (Object.getOwnPropertyNames(newprops.priority).length !== 0) {
          return; // if the value included '!important' it wasn't valid.
        }

        // XXX handle shorthand properties

        for (var p in newprops.property) {
          styles.property[p] = newprops.property[p];
          if (priority === NO_CHANGE) {
            continue;
          } else if (priority !== "") {
            styles.priority[p] = "important";
          } else if (styles.priority[p]) {
            delete styles.priority[p];
          }
        }
      }

      // Serialize and update cssText and element.style!
      this._serialize();
    }
  },
  setPropertyValue: {
    value: function (property, value) {
      return this.setProperty(property, value, NO_CHANGE);
    }
  },
  setPropertyPriority: {
    value: function (property, priority) {
      return this.setProperty(property, NO_CHANGE, priority);
    }
  },
  removeProperty: {
    value: function (property) {
      property = property.toLowerCase();
      var styles = this._parsed;
      if (property in styles.property) {
        delete styles.property[property];
        delete styles.priority[property];

        // Serialize and update cssText and element.style!
        this._serialize();
      }
    }
  }
});
var cssProperties = {
  alignContent: "align-content",
  alignItems: "align-items",
  alignmentBaseline: "alignment-baseline",
  alignSelf: "align-self",
  animation: "animation",
  animationDelay: "animation-delay",
  animationDirection: "animation-direction",
  animationDuration: "animation-duration",
  animationFillMode: "animation-fill-mode",
  animationIterationCount: "animation-iteration-count",
  animationName: "animation-name",
  animationPlayState: "animation-play-state",
  animationTimingFunction: "animation-timing-function",
  backfaceVisibility: "backface-visibility",
  background: "background",
  backgroundAttachment: "background-attachment",
  backgroundClip: "background-clip",
  backgroundColor: "background-color",
  backgroundImage: "background-image",
  backgroundOrigin: "background-origin",
  backgroundPosition: "background-position",
  backgroundPositionX: "background-position-x",
  backgroundPositionY: "background-position-y",
  backgroundRepeat: "background-repeat",
  backgroundSize: "background-size",
  baselineShift: "baseline-shift",
  border: "border",
  borderBottom: "border-bottom",
  borderBottomColor: "border-bottom-color",
  borderBottomLeftRadius: "border-bottom-left-radius",
  borderBottomRightRadius: "border-bottom-right-radius",
  borderBottomStyle: "border-bottom-style",
  borderBottomWidth: "border-bottom-width",
  borderCollapse: "border-collapse",
  borderColor: "border-color",
  borderImage: "border-image",
  borderImageOutset: "border-image-outset",
  borderImageRepeat: "border-image-repeat",
  borderImageSlice: "border-image-slice",
  borderImageSource: "border-image-source",
  borderImageWidth: "border-image-width",
  borderLeft: "border-left",
  borderLeftColor: "border-left-color",
  borderLeftStyle: "border-left-style",
  borderLeftWidth: "border-left-width",
  borderRadius: "border-radius",
  borderRight: "border-right",
  borderRightColor: "border-right-color",
  borderRightStyle: "border-right-style",
  borderRightWidth: "border-right-width",
  borderSpacing: "border-spacing",
  borderStyle: "border-style",
  borderTop: "border-top",
  borderTopColor: "border-top-color",
  borderTopLeftRadius: "border-top-left-radius",
  borderTopRightRadius: "border-top-right-radius",
  borderTopStyle: "border-top-style",
  borderTopWidth: "border-top-width",
  borderWidth: "border-width",
  bottom: "bottom",
  boxShadow: "box-shadow",
  boxSizing: "box-sizing",
  breakAfter: "break-after",
  breakBefore: "break-before",
  breakInside: "break-inside",
  captionSide: "caption-side",
  clear: "clear",
  clip: "clip",
  clipPath: "clip-path",
  clipRule: "clip-rule",
  color: "color",
  colorInterpolationFilters: "color-interpolation-filters",
  columnCount: "column-count",
  columnFill: "column-fill",
  columnGap: "column-gap",
  columnRule: "column-rule",
  columnRuleColor: "column-rule-color",
  columnRuleStyle: "column-rule-style",
  columnRuleWidth: "column-rule-width",
  columns: "columns",
  columnSpan: "column-span",
  columnWidth: "column-width",
  content: "content",
  counterIncrement: "counter-increment",
  counterReset: "counter-reset",
  cssFloat: "float",
  cursor: "cursor",
  direction: "direction",
  display: "display",
  dominantBaseline: "dominant-baseline",
  emptyCells: "empty-cells",
  enableBackground: "enable-background",
  fill: "fill",
  fillOpacity: "fill-opacity",
  fillRule: "fill-rule",
  filter: "filter",
  flex: "flex",
  flexBasis: "flex-basis",
  flexDirection: "flex-direction",
  flexFlow: "flex-flow",
  flexGrow: "flex-grow",
  flexShrink: "flex-shrink",
  flexWrap: "flex-wrap",
  floodColor: "flood-color",
  floodOpacity: "flood-opacity",
  font: "font",
  fontFamily: "font-family",
  fontFeatureSettings: "font-feature-settings",
  fontSize: "font-size",
  fontSizeAdjust: "font-size-adjust",
  fontStretch: "font-stretch",
  fontStyle: "font-style",
  fontVariant: "font-variant",
  fontWeight: "font-weight",
  glyphOrientationHorizontal: "glyph-orientation-horizontal",
  glyphOrientationVertical: "glyph-orientation-vertical",
  grid: "grid",
  gridArea: "grid-area",
  gridAutoColumns: "grid-auto-columns",
  gridAutoFlow: "grid-auto-flow",
  gridAutoRows: "grid-auto-rows",
  gridColumn: "grid-column",
  gridColumnEnd: "grid-column-end",
  gridColumnGap: "grid-column-gap",
  gridColumnStart: "grid-column-start",
  gridGap: "grid-gap",
  gridRow: "grid-row",
  gridRowEnd: "grid-row-end",
  gridRowGap: "grid-row-gap",
  gridRowStart: "grid-row-start",
  gridTemplate: "grid-template",
  gridTemplateAreas: "grid-template-areas",
  gridTemplateColumns: "grid-template-columns",
  gridTemplateRows: "grid-template-rows",
  height: "height",
  imeMode: "ime-mode",
  justifyContent: "justify-content",
  kerning: "kerning",
  layoutGrid: "layout-grid",
  layoutGridChar: "layout-grid-char",
  layoutGridLine: "layout-grid-line",
  layoutGridMode: "layout-grid-mode",
  layoutGridType: "layout-grid-type",
  left: "left",
  letterSpacing: "letter-spacing",
  lightingColor: "lighting-color",
  lineBreak: "line-break",
  lineHeight: "line-height",
  listStyle: "list-style",
  listStyleImage: "list-style-image",
  listStylePosition: "list-style-position",
  listStyleType: "list-style-type",
  margin: "margin",
  marginBottom: "margin-bottom",
  marginLeft: "margin-left",
  marginRight: "margin-right",
  marginTop: "margin-top",
  marker: "marker",
  markerEnd: "marker-end",
  markerMid: "marker-mid",
  markerStart: "marker-start",
  mask: "mask",
  maxHeight: "max-height",
  maxWidth: "max-width",
  minHeight: "min-height",
  minWidth: "min-width",
  msContentZoomChaining: "-ms-content-zoom-chaining",
  msContentZooming: "-ms-content-zooming",
  msContentZoomLimit: "-ms-content-zoom-limit",
  msContentZoomLimitMax: "-ms-content-zoom-limit-max",
  msContentZoomLimitMin: "-ms-content-zoom-limit-min",
  msContentZoomSnap: "-ms-content-zoom-snap",
  msContentZoomSnapPoints: "-ms-content-zoom-snap-points",
  msContentZoomSnapType: "-ms-content-zoom-snap-type",
  msFlowFrom: "-ms-flow-from",
  msFlowInto: "-ms-flow-into",
  msFontFeatureSettings: "-ms-font-feature-settings",
  msGridColumn: "-ms-grid-column",
  msGridColumnAlign: "-ms-grid-column-align",
  msGridColumns: "-ms-grid-columns",
  msGridColumnSpan: "-ms-grid-column-span",
  msGridRow: "-ms-grid-row",
  msGridRowAlign: "-ms-grid-row-align",
  msGridRows: "-ms-grid-rows",
  msGridRowSpan: "-ms-grid-row-span",
  msHighContrastAdjust: "-ms-high-contrast-adjust",
  msHyphenateLimitChars: "-ms-hyphenate-limit-chars",
  msHyphenateLimitLines: "-ms-hyphenate-limit-lines",
  msHyphenateLimitZone: "-ms-hyphenate-limit-zone",
  msHyphens: "-ms-hyphens",
  msImeAlign: "-ms-ime-align",
  msOverflowStyle: "-ms-overflow-style",
  msScrollChaining: "-ms-scroll-chaining",
  msScrollLimit: "-ms-scroll-limit",
  msScrollLimitXMax: "-ms-scroll-limit-x-max",
  msScrollLimitXMin: "-ms-scroll-limit-x-min",
  msScrollLimitYMax: "-ms-scroll-limit-y-max",
  msScrollLimitYMin: "-ms-scroll-limit-y-min",
  msScrollRails: "-ms-scroll-rails",
  msScrollSnapPointsX: "-ms-scroll-snap-points-x",
  msScrollSnapPointsY: "-ms-scroll-snap-points-y",
  msScrollSnapType: "-ms-scroll-snap-type",
  msScrollSnapX: "-ms-scroll-snap-x",
  msScrollSnapY: "-ms-scroll-snap-y",
  msScrollTranslation: "-ms-scroll-translation",
  msTextCombineHorizontal: "-ms-text-combine-horizontal",
  msTextSizeAdjust: "-ms-text-size-adjust",
  msTouchAction: "-ms-touch-action",
  msTouchSelect: "-ms-touch-select",
  msUserSelect: "-ms-user-select",
  msWrapFlow: "-ms-wrap-flow",
  msWrapMargin: "-ms-wrap-margin",
  msWrapThrough: "-ms-wrap-through",
  opacity: "opacity",
  order: "order",
  orphans: "orphans",
  outline: "outline",
  outlineColor: "outline-color",
  outlineOffset: "outline-offset",
  outlineStyle: "outline-style",
  outlineWidth: "outline-width",
  overflow: "overflow",
  overflowX: "overflow-x",
  overflowY: "overflow-y",
  padding: "padding",
  paddingBottom: "padding-bottom",
  paddingLeft: "padding-left",
  paddingRight: "padding-right",
  paddingTop: "padding-top",
  page: "page",
  pageBreakAfter: "page-break-after",
  pageBreakBefore: "page-break-before",
  pageBreakInside: "page-break-inside",
  perspective: "perspective",
  perspectiveOrigin: "perspective-origin",
  pointerEvents: "pointer-events",
  position: "position",
  quotes: "quotes",
  right: "right",
  rotate: "rotate",
  rubyAlign: "ruby-align",
  rubyOverhang: "ruby-overhang",
  rubyPosition: "ruby-position",
  scale: "scale",
  size: "size",
  stopColor: "stop-color",
  stopOpacity: "stop-opacity",
  stroke: "stroke",
  strokeDasharray: "stroke-dasharray",
  strokeDashoffset: "stroke-dashoffset",
  strokeLinecap: "stroke-linecap",
  strokeLinejoin: "stroke-linejoin",
  strokeMiterlimit: "stroke-miterlimit",
  strokeOpacity: "stroke-opacity",
  strokeWidth: "stroke-width",
  tableLayout: "table-layout",
  textAlign: "text-align",
  textAlignLast: "text-align-last",
  textAnchor: "text-anchor",
  textDecoration: "text-decoration",
  textIndent: "text-indent",
  textJustify: "text-justify",
  textKashida: "text-kashida",
  textKashidaSpace: "text-kashida-space",
  textOverflow: "text-overflow",
  textShadow: "text-shadow",
  textTransform: "text-transform",
  textUnderlinePosition: "text-underline-position",
  top: "top",
  touchAction: "touch-action",
  transform: "transform",
  transformOrigin: "transform-origin",
  transformStyle: "transform-style",
  transition: "transition",
  transitionDelay: "transition-delay",
  transitionDuration: "transition-duration",
  transitionProperty: "transition-property",
  transitionTimingFunction: "transition-timing-function",
  translate: "translate",
  unicodeBidi: "unicode-bidi",
  verticalAlign: "vertical-align",
  visibility: "visibility",
  webkitAlignContent: "-webkit-align-content",
  webkitAlignItems: "-webkit-align-items",
  webkitAlignSelf: "-webkit-align-self",
  webkitAnimation: "-webkit-animation",
  webkitAnimationDelay: "-webkit-animation-delay",
  webkitAnimationDirection: "-webkit-animation-direction",
  webkitAnimationDuration: "-webkit-animation-duration",
  webkitAnimationFillMode: "-webkit-animation-fill-mode",
  webkitAnimationIterationCount: "-webkit-animation-iteration-count",
  webkitAnimationName: "-webkit-animation-name",
  webkitAnimationPlayState: "-webkit-animation-play-state",
  webkitAnimationTimingFunction: "-webkit-animation-timing-funciton",
  webkitAppearance: "-webkit-appearance",
  webkitBackfaceVisibility: "-webkit-backface-visibility",
  webkitBackgroundClip: "-webkit-background-clip",
  webkitBackgroundOrigin: "-webkit-background-origin",
  webkitBackgroundSize: "-webkit-background-size",
  webkitBorderBottomLeftRadius: "-webkit-border-bottom-left-radius",
  webkitBorderBottomRightRadius: "-webkit-border-bottom-right-radius",
  webkitBorderImage: "-webkit-border-image",
  webkitBorderRadius: "-webkit-border-radius",
  webkitBorderTopLeftRadius: "-webkit-border-top-left-radius",
  webkitBorderTopRightRadius: "-webkit-border-top-right-radius",
  webkitBoxAlign: "-webkit-box-align",
  webkitBoxDirection: "-webkit-box-direction",
  webkitBoxFlex: "-webkit-box-flex",
  webkitBoxOrdinalGroup: "-webkit-box-ordinal-group",
  webkitBoxOrient: "-webkit-box-orient",
  webkitBoxPack: "-webkit-box-pack",
  webkitBoxSizing: "-webkit-box-sizing",
  webkitColumnBreakAfter: "-webkit-column-break-after",
  webkitColumnBreakBefore: "-webkit-column-break-before",
  webkitColumnBreakInside: "-webkit-column-break-inside",
  webkitColumnCount: "-webkit-column-count",
  webkitColumnGap: "-webkit-column-gap",
  webkitColumnRule: "-webkit-column-rule",
  webkitColumnRuleColor: "-webkit-column-rule-color",
  webkitColumnRuleStyle: "-webkit-column-rule-style",
  webkitColumnRuleWidth: "-webkit-column-rule-width",
  webkitColumns: "-webkit-columns",
  webkitColumnSpan: "-webkit-column-span",
  webkitColumnWidth: "-webkit-column-width",
  webkitFilter: "-webkit-filter",
  webkitFlex: "-webkit-flex",
  webkitFlexBasis: "-webkit-flex-basis",
  webkitFlexDirection: "-webkit-flex-direction",
  webkitFlexFlow: "-webkit-flex-flow",
  webkitFlexGrow: "-webkit-flex-grow",
  webkitFlexShrink: "-webkit-flex-shrink",
  webkitFlexWrap: "-webkit-flex-wrap",
  webkitJustifyContent: "-webkit-justify-content",
  webkitOrder: "-webkit-order",
  webkitPerspective: "-webkit-perspective-origin",
  webkitPerspectiveOrigin: "-webkit-perspective-origin",
  webkitTapHighlightColor: "-webkit-tap-highlight-color",
  webkitTextFillColor: "-webkit-text-fill-color",
  webkitTextSizeAdjust: "-webkit-text-size-adjust",
  webkitTextStroke: "-webkit-text-stroke",
  webkitTextStrokeColor: "-webkit-text-stroke-color",
  webkitTextStrokeWidth: "-webkit-text-stroke-width",
  webkitTransform: "-webkit-transform",
  webkitTransformOrigin: "-webkit-transform-origin",
  webkitTransformStyle: "-webkit-transform-style",
  webkitTransition: "-webkit-transition",
  webkitTransitionDelay: "-webkit-transition-delay",
  webkitTransitionDuration: "-webkit-transition-duration",
  webkitTransitionProperty: "-webkit-transition-property",
  webkitTransitionTimingFunction: "-webkit-transition-timing-function",
  webkitUserModify: "-webkit-user-modify",
  webkitUserSelect: "-webkit-user-select",
  webkitWritingMode: "-webkit-writing-mode",
  whiteSpace: "white-space",
  widows: "widows",
  width: "width",
  wordBreak: "word-break",
  wordSpacing: "word-spacing",
  wordWrap: "word-wrap",
  writingMode: "writing-mode",
  zIndex: "z-index",
  zoom: "zoom",
  resize: "resize",
  userSelect: "user-select"
};
for (var prop in cssProperties) defineStyleProperty(prop);
function defineStyleProperty(jsname) {
  var cssname = cssProperties[jsname];
  Object.defineProperty(CSSStyleDeclaration.prototype, jsname, {
    get: function () {
      return this.getPropertyValue(cssname);
    },
    set: function (value) {
      this.setProperty(cssname, value);
    }
  });
  if (!CSSStyleDeclaration.prototype.hasOwnProperty(cssname)) {
    Object.defineProperty(CSSStyleDeclaration.prototype, cssname, {
      get: function () {
        return this.getPropertyValue(cssname);
      },
      set: function (value) {
        this.setProperty(cssname, value);
      }
    });
  }
}

/***/ }),

/***/ 2482:
/*!**************************************************!*\
  !*** ./node_modules/domino/lib/CharacterData.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/* jshint bitwise: false */


module.exports = CharacterData;
var Leaf = __webpack_require__(/*! ./Leaf */ 86269);
var utils = __webpack_require__(/*! ./utils */ 7976);
var ChildNode = __webpack_require__(/*! ./ChildNode */ 27063);
var NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ 26005);
function CharacterData() {
  Leaf.call(this);
}
CharacterData.prototype = Object.create(Leaf.prototype, {
  // DOMString substringData(unsigned long offset,
  //               unsigned long count);
  // The substringData(offset, count) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     If offset+count is greater than the context
  //     object's length, return a DOMString whose value is
  //     the UTF-16 code units from the offsetth UTF-16 code
  //     unit to the end of data.
  //
  //     Return a DOMString whose value is the UTF-16 code
  //     units from the offsetth UTF-16 code unit to the
  //     offset+countth UTF-16 code unit in data.
  substringData: {
    value: function substringData(offset, count) {
      if (arguments.length < 2) {
        throw new TypeError("Not enough arguments");
      }
      // Convert arguments to WebIDL "unsigned long"
      offset = offset >>> 0;
      count = count >>> 0;
      if (offset > this.data.length || offset < 0 || count < 0) {
        utils.IndexSizeError();
      }
      return this.data.substring(offset, offset + count);
    }
  },
  // void appendData(DOMString data);
  // The appendData(data) method must append data to the context
  // object's data.
  appendData: {
    value: function appendData(data) {
      if (arguments.length < 1) {
        throw new TypeError("Not enough arguments");
      }
      this.data += String(data);
    }
  },
  // void insertData(unsigned long offset, DOMString data);
  // The insertData(offset, data) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     Insert data into the context object's data after
  //     offset UTF-16 code units.
  //
  insertData: {
    value: function insertData(offset, data) {
      return this.replaceData(offset, 0, data);
    }
  },
  // void deleteData(unsigned long offset, unsigned long count);
  // The deleteData(offset, count) method must run these steps:
  //
  //     If offset is greater than the context object's
  //     length, throw an INDEX_SIZE_ERR exception and
  //     terminate these steps.
  //
  //     If offset+count is greater than the context
  //     object's length var count be length-offset.
  //
  //     Starting from offset UTF-16 code units remove count
  //     UTF-16 code units from the context object's data.
  deleteData: {
    value: function deleteData(offset, count) {
      return this.replaceData(offset, count, '');
    }
  },
  // void replaceData(unsigned long offset, unsigned long count,
  //          DOMString data);
  //
  // The replaceData(offset, count, data) method must act as
  // if the deleteData() method is invoked with offset and
  // count as arguments followed by the insertData() method
  // with offset and data as arguments and re-throw any
  // exceptions these methods might have thrown.
  replaceData: {
    value: function replaceData(offset, count, data) {
      var curtext = this.data,
        len = curtext.length;
      // Convert arguments to correct WebIDL type
      offset = offset >>> 0;
      count = count >>> 0;
      data = String(data);
      if (offset > len || offset < 0) utils.IndexSizeError();
      if (offset + count > len) count = len - offset;
      var prefix = curtext.substring(0, offset),
        suffix = curtext.substring(offset + count);
      this.data = prefix + data + suffix;
    }
  },
  // Utility method that Node.isEqualNode() calls to test Text and
  // Comment nodes for equality.  It is okay to put it here, since
  // Node will have already verified that nodeType is equal
  isEqual: {
    value: function isEqual(n) {
      return this._data === n._data;
    }
  },
  length: {
    get: function () {
      return this.data.length;
    }
  }
});
Object.defineProperties(CharacterData.prototype, ChildNode);
Object.defineProperties(CharacterData.prototype, NonDocumentTypeChildNode);

/***/ }),

/***/ 27063:
/*!**********************************************!*\
  !*** ./node_modules/domino/lib/ChildNode.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var Node = __webpack_require__(/*! ./Node */ 88869);
var LinkedList = __webpack_require__(/*! ./LinkedList */ 48516);
var createDocumentFragmentFromArguments = function (document, args) {
  var docFrag = document.createDocumentFragment();
  for (var i = 0; i < args.length; i++) {
    var argItem = args[i];
    var isNode = argItem instanceof Node;
    docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
  }
  return docFrag;
};

// The ChildNode interface contains methods that are particular to `Node`
// objects that can have a parent.  It is implemented by `Element`,
// `DocumentType`, and `CharacterData` objects.
var ChildNode = {
  // Inserts a set of Node or String objects in the children list of this
  // ChildNode's parent, just after this ChildNode.  String objects are
  // inserted as the equivalent Text nodes.
  after: {
    value: function after() {
      var argArr = Array.prototype.slice.call(arguments);
      var parentNode = this.parentNode,
        nextSibling = this.nextSibling;
      if (parentNode === null) {
        return;
      }
      // Find "viable next sibling"; that is, next one not in argArr
      while (nextSibling && argArr.some(function (v) {
        return v === nextSibling;
      })) nextSibling = nextSibling.nextSibling;
      // ok, parent and sibling are saved away since this node could itself
      // appear in argArr and we're about to move argArr to a document fragment.
      var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);
      parentNode.insertBefore(docFrag, nextSibling);
    }
  },
  // Inserts a set of Node or String objects in the children list of this
  // ChildNode's parent, just before this ChildNode.  String objects are
  // inserted as the equivalent Text nodes.
  before: {
    value: function before() {
      var argArr = Array.prototype.slice.call(arguments);
      var parentNode = this.parentNode,
        prevSibling = this.previousSibling;
      if (parentNode === null) {
        return;
      }
      // Find "viable prev sibling"; that is, prev one not in argArr
      while (prevSibling && argArr.some(function (v) {
        return v === prevSibling;
      })) prevSibling = prevSibling.previousSibling;
      // ok, parent and sibling are saved away since this node could itself
      // appear in argArr and we're about to move argArr to a document fragment.
      var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);
      var nextSibling = prevSibling ? prevSibling.nextSibling : parentNode.firstChild;
      parentNode.insertBefore(docFrag, nextSibling);
    }
  },
  // Remove this node from its parent
  remove: {
    value: function remove() {
      if (this.parentNode === null) return;

      // Send mutation events if necessary
      if (this.doc) {
        this.doc._preremoveNodeIterators(this);
        if (this.rooted) {
          this.doc.mutateRemove(this);
        }
      }

      // Remove this node from its parents array of children
      // and update the structure id for all ancestors
      this._remove();

      // Forget this node's parent
      this.parentNode = null;
    }
  },
  // Remove this node w/o uprooting or sending mutation events
  // (But do update the structure id for all ancestors)
  _remove: {
    value: function _remove() {
      var parent = this.parentNode;
      if (parent === null) return;
      if (parent._childNodes) {
        parent._childNodes.splice(this.index, 1);
      } else if (parent._firstChild === this) {
        if (this._nextSibling === this) {
          parent._firstChild = null;
        } else {
          parent._firstChild = this._nextSibling;
        }
      }
      LinkedList.remove(this);
      parent.modify();
    }
  },
  // Replace this node with the nodes or strings provided as arguments.
  replaceWith: {
    value: function replaceWith() {
      var argArr = Array.prototype.slice.call(arguments);
      var parentNode = this.parentNode,
        nextSibling = this.nextSibling;
      if (parentNode === null) {
        return;
      }
      // Find "viable next sibling"; that is, next one not in argArr
      while (nextSibling && argArr.some(function (v) {
        return v === nextSibling;
      })) nextSibling = nextSibling.nextSibling;
      // ok, parent and sibling are saved away since this node could itself
      // appear in argArr and we're about to move argArr to a document fragment.
      var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);
      if (this.parentNode === parentNode) {
        parentNode.replaceChild(docFrag, this);
      } else {
        // `this` was inserted into docFrag
        parentNode.insertBefore(docFrag, nextSibling);
      }
    }
  }
};
module.exports = ChildNode;

/***/ }),

/***/ 63512:
/*!********************************************!*\
  !*** ./node_modules/domino/lib/Comment.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Comment;
var Node = __webpack_require__(/*! ./Node */ 88869);
var CharacterData = __webpack_require__(/*! ./CharacterData */ 2482);
function Comment(doc, data) {
  CharacterData.call(this);
  this.nodeType = Node.COMMENT_NODE;
  this.ownerDocument = doc;
  this._data = data;
}
var nodeValue = {
  get: function () {
    return this._data;
  },
  set: function (v) {
    if (v === null || v === undefined) {
      v = '';
    } else {
      v = String(v);
    }
    this._data = v;
    if (this.rooted) this.ownerDocument.mutateValue(this);
  }
};
Comment.prototype = Object.create(CharacterData.prototype, {
  nodeName: {
    value: '#comment'
  },
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: {
    get: nodeValue.get,
    set: function (v) {
      nodeValue.set.call(this, v === null ? '' : String(v));
    }
  },
  // Utility methods
  clone: {
    value: function clone() {
      return new Comment(this.ownerDocument, this._data);
    }
  }
});

/***/ }),

/***/ 33886:
/*!**************************************************!*\
  !*** ./node_modules/domino/lib/ContainerNode.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = ContainerNode;
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeList = __webpack_require__(/*! ./NodeList */ 48649);

// This class defines common functionality for node subtypes that
// can have children

function ContainerNode() {
  Node.call(this);
  this._firstChild = this._childNodes = null;
}

// Primary representation is a circular linked list of siblings
ContainerNode.prototype = Object.create(Node.prototype, {
  hasChildNodes: {
    value: function () {
      if (this._childNodes) {
        return this._childNodes.length > 0;
      }
      return this._firstChild !== null;
    }
  },
  childNodes: {
    get: function () {
      this._ensureChildNodes();
      return this._childNodes;
    }
  },
  firstChild: {
    get: function () {
      if (this._childNodes) {
        return this._childNodes.length === 0 ? null : this._childNodes[0];
      }
      return this._firstChild;
    }
  },
  lastChild: {
    get: function () {
      var kids = this._childNodes,
        first;
      if (kids) {
        return kids.length === 0 ? null : kids[kids.length - 1];
      }
      first = this._firstChild;
      if (first === null) {
        return null;
      }
      return first._previousSibling; // circular linked list
    }
  },

  _ensureChildNodes: {
    value: function () {
      if (this._childNodes) {
        return;
      }
      var first = this._firstChild,
        kid = first,
        childNodes = this._childNodes = new NodeList();
      if (first) do {
        childNodes.push(kid);
        kid = kid._nextSibling;
      } while (kid !== first); // circular linked list
      this._firstChild = null; // free memory
    }
  },

  // Remove all of this node's children.  This is a minor
  // optimization that only calls modify() once.
  removeChildren: {
    value: function removeChildren() {
      var root = this.rooted ? this.ownerDocument : null,
        next = this.firstChild,
        kid;
      while (next !== null) {
        kid = next;
        next = kid.nextSibling;
        if (root) root.mutateRemove(kid);
        kid.parentNode = null;
      }
      if (this._childNodes) {
        this._childNodes.length = 0;
      } else {
        this._firstChild = null;
      }
      this.modify(); // Update last modified type once only
    }
  }
});

/***/ }),

/***/ 68468:
/*!************************************************!*\
  !*** ./node_modules/domino/lib/CustomEvent.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = CustomEvent;
var Event = __webpack_require__(/*! ./Event */ 76165);
function CustomEvent(type, dictionary) {
  // Just use the superclass constructor to initialize
  Event.call(this, type, dictionary);
}
CustomEvent.prototype = Object.create(Event.prototype, {
  constructor: {
    value: CustomEvent
  }
});

/***/ }),

/***/ 90864:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/DOMException.js ***!
  \*************************************************/
/***/ (function(module) {

"use strict";


module.exports = DOMException;
var INDEX_SIZE_ERR = 1;
var HIERARCHY_REQUEST_ERR = 3;
var WRONG_DOCUMENT_ERR = 4;
var INVALID_CHARACTER_ERR = 5;
var NO_MODIFICATION_ALLOWED_ERR = 7;
var NOT_FOUND_ERR = 8;
var NOT_SUPPORTED_ERR = 9;
var INVALID_STATE_ERR = 11;
var SYNTAX_ERR = 12;
var INVALID_MODIFICATION_ERR = 13;
var NAMESPACE_ERR = 14;
var INVALID_ACCESS_ERR = 15;
var TYPE_MISMATCH_ERR = 17;
var SECURITY_ERR = 18;
var NETWORK_ERR = 19;
var ABORT_ERR = 20;
var URL_MISMATCH_ERR = 21;
var QUOTA_EXCEEDED_ERR = 22;
var TIMEOUT_ERR = 23;
var INVALID_NODE_TYPE_ERR = 24;
var DATA_CLONE_ERR = 25;

// Code to name
var names = [null,
// No error with code 0
'INDEX_SIZE_ERR', null,
// historical
'HIERARCHY_REQUEST_ERR', 'WRONG_DOCUMENT_ERR', 'INVALID_CHARACTER_ERR', null,
// historical
'NO_MODIFICATION_ALLOWED_ERR', 'NOT_FOUND_ERR', 'NOT_SUPPORTED_ERR', 'INUSE_ATTRIBUTE_ERR',
// historical
'INVALID_STATE_ERR', 'SYNTAX_ERR', 'INVALID_MODIFICATION_ERR', 'NAMESPACE_ERR', 'INVALID_ACCESS_ERR', null,
// historical
'TYPE_MISMATCH_ERR', 'SECURITY_ERR', 'NETWORK_ERR', 'ABORT_ERR', 'URL_MISMATCH_ERR', 'QUOTA_EXCEEDED_ERR', 'TIMEOUT_ERR', 'INVALID_NODE_TYPE_ERR', 'DATA_CLONE_ERR'];

// Code to message
// These strings are from the 13 May 2011 Editor's Draft of DOM Core.
// http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html
// Copyright © 2011 W3C® (MIT, ERCIM, Keio), All Rights Reserved.
// Used under the terms of the W3C Document License:
// http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231
var messages = [null,
// No error with code 0
'INDEX_SIZE_ERR (1): the index is not in the allowed range', null, 'HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model', 'WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required', 'INVALID_CHARACTER_ERR (5): the string contains invalid characters', null, 'NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified', 'NOT_FOUND_ERR (8): the object can not be found here', 'NOT_SUPPORTED_ERR (9): this operation is not supported', 'INUSE_ATTRIBUTE_ERR (10): setAttributeNode called on owned Attribute', 'INVALID_STATE_ERR (11): the object is in an invalid state', 'SYNTAX_ERR (12): the string did not match the expected pattern', 'INVALID_MODIFICATION_ERR (13): the object can not be modified in this way', 'NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML', 'INVALID_ACCESS_ERR (15): the object does not support the operation or argument', null, 'TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type', 'SECURITY_ERR (18): the operation is insecure', 'NETWORK_ERR (19): a network error occurred', 'ABORT_ERR (20): the user aborted an operation', 'URL_MISMATCH_ERR (21): the given URL does not match another URL', 'QUOTA_EXCEEDED_ERR (22): the quota has been exceeded', 'TIMEOUT_ERR (23): a timeout occurred', 'INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation', 'DATA_CLONE_ERR (25): the object can not be cloned.'];

// Name to code
var constants = {
  INDEX_SIZE_ERR: INDEX_SIZE_ERR,
  DOMSTRING_SIZE_ERR: 2,
  // historical
  HIERARCHY_REQUEST_ERR: HIERARCHY_REQUEST_ERR,
  WRONG_DOCUMENT_ERR: WRONG_DOCUMENT_ERR,
  INVALID_CHARACTER_ERR: INVALID_CHARACTER_ERR,
  NO_DATA_ALLOWED_ERR: 6,
  // historical
  NO_MODIFICATION_ALLOWED_ERR: NO_MODIFICATION_ALLOWED_ERR,
  NOT_FOUND_ERR: NOT_FOUND_ERR,
  NOT_SUPPORTED_ERR: NOT_SUPPORTED_ERR,
  INUSE_ATTRIBUTE_ERR: 10,
  // historical
  INVALID_STATE_ERR: INVALID_STATE_ERR,
  SYNTAX_ERR: SYNTAX_ERR,
  INVALID_MODIFICATION_ERR: INVALID_MODIFICATION_ERR,
  NAMESPACE_ERR: NAMESPACE_ERR,
  INVALID_ACCESS_ERR: INVALID_ACCESS_ERR,
  VALIDATION_ERR: 16,
  // historical
  TYPE_MISMATCH_ERR: TYPE_MISMATCH_ERR,
  SECURITY_ERR: SECURITY_ERR,
  NETWORK_ERR: NETWORK_ERR,
  ABORT_ERR: ABORT_ERR,
  URL_MISMATCH_ERR: URL_MISMATCH_ERR,
  QUOTA_EXCEEDED_ERR: QUOTA_EXCEEDED_ERR,
  TIMEOUT_ERR: TIMEOUT_ERR,
  INVALID_NODE_TYPE_ERR: INVALID_NODE_TYPE_ERR,
  DATA_CLONE_ERR: DATA_CLONE_ERR
};
function DOMException(code) {
  Error.call(this);
  Error.captureStackTrace(this, this.constructor);
  this.code = code;
  this.message = messages[code];
  this.name = names[code];
}
DOMException.prototype.__proto__ = Error.prototype;

// Initialize the constants on DOMException and DOMException.prototype
for (var c in constants) {
  var v = {
    value: constants[c]
  };
  Object.defineProperty(DOMException, c, v);
  Object.defineProperty(DOMException.prototype, c, v);
}

/***/ }),

/***/ 94711:
/*!******************************************************!*\
  !*** ./node_modules/domino/lib/DOMImplementation.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = DOMImplementation;
var Document = __webpack_require__(/*! ./Document */ 30168);
var DocumentType = __webpack_require__(/*! ./DocumentType */ 35840);
var HTMLParser = __webpack_require__(/*! ./HTMLParser */ 95643);
var utils = __webpack_require__(/*! ./utils */ 7976);
var xml = __webpack_require__(/*! ./xmlnames */ 71018);

// Each document must have its own instance of the domimplementation object
function DOMImplementation(contextObject) {
  this.contextObject = contextObject;
}

// Feature/version pairs that DOMImplementation.hasFeature() returns
// true for.  It returns false for anything else.
var supportedFeatures = {
  'xml': {
    '': true,
    '1.0': true,
    '2.0': true
  },
  // DOM Core
  'core': {
    '': true,
    '2.0': true
  },
  // DOM Core
  'html': {
    '': true,
    '1.0': true,
    '2.0': true
  },
  // HTML
  'xhtml': {
    '': true,
    '1.0': true,
    '2.0': true
  } // HTML
};

DOMImplementation.prototype = {
  hasFeature: function hasFeature(feature, version) {
    var f = supportedFeatures[(feature || '').toLowerCase()];
    return f && f[version || ''] || false;
  },
  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {
    if (!xml.isValidQName(qualifiedName)) utils.InvalidCharacterError();
    return new DocumentType(this.contextObject, qualifiedName, publicId, systemId);
  },
  createDocument: function createDocument(namespace, qualifiedName, doctype) {
    //
    // Note that the current DOMCore spec makes it impossible to
    // create an HTML document with this function, even if the
    // namespace and doctype are propertly set.  See this thread:
    // http://lists.w3.org/Archives/Public/www-dom/2011AprJun/0132.html
    //
    var d = new Document(false, null);
    var e;
    if (qualifiedName) e = d.createElementNS(namespace, qualifiedName);else e = null;
    if (doctype) {
      d.appendChild(doctype);
    }
    if (e) d.appendChild(e);
    if (namespace === utils.NAMESPACE.HTML) {
      d._contentType = 'application/xhtml+xml';
    } else if (namespace === utils.NAMESPACE.SVG) {
      d._contentType = 'image/svg+xml';
    } else {
      d._contentType = 'application/xml';
    }
    return d;
  },
  createHTMLDocument: function createHTMLDocument(titleText) {
    var d = new Document(true, null);
    d.appendChild(new DocumentType(d, 'html'));
    var html = d.createElement('html');
    d.appendChild(html);
    var head = d.createElement('head');
    html.appendChild(head);
    if (titleText !== undefined) {
      var title = d.createElement('title');
      head.appendChild(title);
      title.appendChild(d.createTextNode(titleText));
    }
    html.appendChild(d.createElement('body'));
    d.modclock = 1; // Start tracking modifications
    return d;
  },
  mozSetOutputMutationHandler: function (doc, handler) {
    doc.mutationHandler = handler;
  },
  mozGetInputMutationHandler: function (doc) {
    utils.nyi();
  },
  mozHTMLParser: HTMLParser
};

/***/ }),

/***/ 30020:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/DOMTokenList.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


// DOMTokenList implementation based on https://github.com/Raynos/DOM-shim
var utils = __webpack_require__(/*! ./utils */ 7976);
module.exports = DOMTokenList;
function DOMTokenList(getter, setter) {
  this._getString = getter;
  this._setString = setter;
  this._length = 0;
  this._lastStringValue = '';
  this._update();
}
Object.defineProperties(DOMTokenList.prototype, {
  length: {
    get: function () {
      return this._length;
    }
  },
  item: {
    value: function (index) {
      var list = getList(this);
      if (index < 0 || index >= list.length) {
        return null;
      }
      return list[index];
    }
  },
  contains: {
    value: function (token) {
      token = String(token); // no error checking for contains()
      var list = getList(this);
      return list.indexOf(token) > -1;
    }
  },
  add: {
    value: function () {
      var list = getList(this);
      for (var i = 0, len = arguments.length; i < len; i++) {
        var token = handleErrors(arguments[i]);
        if (list.indexOf(token) < 0) {
          list.push(token);
        }
      }
      // Note: as per spec, if handleErrors() throws any errors, we never
      // make it here and none of the changes take effect.
      // Also per spec: we run the "update steps" even if no change was
      // made (ie, if the token already existed)
      this._update(list);
    }
  },
  remove: {
    value: function () {
      var list = getList(this);
      for (var i = 0, len = arguments.length; i < len; i++) {
        var token = handleErrors(arguments[i]);
        var index = list.indexOf(token);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
      // Note: as per spec, if handleErrors() throws any errors, we never
      // make it here and none of the changes take effect.
      // Also per spec: we run the "update steps" even if no change was
      // made (ie, if the token wasn't previously present)
      this._update(list);
    }
  },
  toggle: {
    value: function toggle(token, force) {
      token = handleErrors(token);
      if (this.contains(token)) {
        if (force === undefined || force === false) {
          this.remove(token);
          return false;
        }
        return true;
      } else {
        if (force === undefined || force === true) {
          this.add(token);
          return true;
        }
        return false;
      }
    }
  },
  replace: {
    value: function replace(token, newToken) {
      // weird corner case of spec: if `token` contains whitespace, but
      // `newToken` is the empty string, we must throw SyntaxError not
      // InvalidCharacterError (sigh)
      if (String(newToken) === '') {
        utils.SyntaxError();
      }
      token = handleErrors(token);
      newToken = handleErrors(newToken);
      var list = getList(this);
      var idx = list.indexOf(token);
      if (idx < 0) {
        // Note that, per spec, we do not run the update steps on this path.
        return false;
      }
      var idx2 = list.indexOf(newToken);
      if (idx2 < 0) {
        list[idx] = newToken;
      } else {
        // "replace the first instance of either `token` or `newToken` with
        // `newToken` and remove all other instances"
        if (idx < idx2) {
          list[idx] = newToken;
          list.splice(idx2, 1);
        } else {
          // idx2 is already `newToken`
          list.splice(idx, 1);
        }
      }
      this._update(list);
      return true;
    }
  },
  toString: {
    value: function () {
      return this._getString();
    }
  },
  value: {
    get: function () {
      return this._getString();
    },
    set: function (v) {
      this._setString(v);
      this._update();
    }
  },
  // Called when the setter is called from outside this interface.
  _update: {
    value: function (list) {
      if (list) {
        fixIndex(this, list);
        this._setString(list.join(" ").trim());
      } else {
        fixIndex(this, getList(this));
      }
      this._lastStringValue = this._getString();
    }
  }
});
function fixIndex(clist, list) {
  var oldLength = clist._length;
  var i;
  clist._length = list.length;
  for (i = 0; i < list.length; i++) {
    clist[i] = list[i];
  }
  // Clear/free old entries.
  for (; i < oldLength; i++) {
    clist[i] = undefined;
  }
}
function handleErrors(token) {
  token = String(token);
  if (token === "") {
    utils.SyntaxError();
  }
  if (/[ \t\r\n\f]/.test(token)) {
    utils.InvalidCharacterError();
  }
  return token;
}
function toArray(clist) {
  var length = clist._length;
  var arr = Array(length);
  for (var i = 0; i < length; i++) {
    arr[i] = clist[i];
  }
  return arr;
}
function getList(clist) {
  var strProp = clist._getString();
  if (strProp === clist._lastStringValue) {
    return toArray(clist);
  }
  var str = strProp.replace(/(^[ \t\r\n\f]+)|([ \t\r\n\f]+$)/g, '');
  if (str === "") {
    return [];
  } else {
    var seen = Object.create(null);
    return str.split(/[ \t\r\n\f]+/g).filter(function (n) {
      var key = '$' + n;
      if (seen[key]) {
        return false;
      }
      seen[key] = true;
      return true;
    });
  }
}

/***/ }),

/***/ 30168:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/Document.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Document;
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeList = __webpack_require__(/*! ./NodeList */ 48649);
var ContainerNode = __webpack_require__(/*! ./ContainerNode */ 33886);
var Element = __webpack_require__(/*! ./Element */ 60601);
var Text = __webpack_require__(/*! ./Text */ 17182);
var Comment = __webpack_require__(/*! ./Comment */ 63512);
var Event = __webpack_require__(/*! ./Event */ 76165);
var DocumentFragment = __webpack_require__(/*! ./DocumentFragment */ 80312);
var ProcessingInstruction = __webpack_require__(/*! ./ProcessingInstruction */ 72860);
var DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ 94711);
var TreeWalker = __webpack_require__(/*! ./TreeWalker */ 82687);
var NodeIterator = __webpack_require__(/*! ./NodeIterator */ 1815);
var NodeFilter = __webpack_require__(/*! ./NodeFilter */ 62659);
var URL = __webpack_require__(/*! ./URL */ 81052);
var select = __webpack_require__(/*! ./select */ 6201);
var events = __webpack_require__(/*! ./events */ 15440);
var xml = __webpack_require__(/*! ./xmlnames */ 71018);
var html = __webpack_require__(/*! ./htmlelts */ 8024);
var svg = __webpack_require__(/*! ./svg */ 5923);
var utils = __webpack_require__(/*! ./utils */ 7976);
var MUTATE = __webpack_require__(/*! ./MutationConstants */ 50485);
var NAMESPACE = utils.NAMESPACE;
var isApiWritable = (__webpack_require__(/*! ./config */ 63535).isApiWritable);
function Document(isHTML, address) {
  ContainerNode.call(this);
  this.nodeType = Node.DOCUMENT_NODE;
  this.isHTML = isHTML;
  this._address = address || 'about:blank';
  this.readyState = 'loading';
  this.implementation = new DOMImplementation(this);

  // DOMCore says that documents are always associated with themselves
  this.ownerDocument = null; // ... but W3C tests expect null
  this._contentType = isHTML ? 'text/html' : 'application/xml';

  // These will be initialized by our custom versions of
  // appendChild and insertBefore that override the inherited
  // Node methods.
  // XXX: override those methods!
  this.doctype = null;
  this.documentElement = null;

  // "Associated inert template document"
  this._templateDocCache = null;
  // List of active NodeIterators, see NodeIterator#_preremove()
  this._nodeIterators = null;

  // Documents are always rooted, by definition
  this._nid = 1;
  this._nextnid = 2; // For numbering children of the document
  this._nodes = [null, this]; // nid to node map

  // This maintains the mapping from element ids to element nodes.
  // We may need to update this mapping every time a node is rooted
  // or uprooted, and any time an attribute is added, removed or changed
  // on a rooted element.
  this.byId = Object.create(null);

  // This property holds a monotonically increasing value akin to
  // a timestamp used to record the last modification time of nodes
  // and their subtrees. See the lastModTime attribute and modify()
  // method of the Node class. And see FilteredElementList for an example
  // of the use of lastModTime
  this.modclock = 0;
}

// Map from lowercase event category names (used as arguments to
// createEvent()) to the property name in the impl object of the
// event constructor.
var supportedEvents = {
  event: 'Event',
  customevent: 'CustomEvent',
  uievent: 'UIEvent',
  mouseevent: 'MouseEvent'
};

// Certain arguments to document.createEvent() must be treated specially
var replacementEvent = {
  events: 'event',
  htmlevents: 'event',
  mouseevents: 'mouseevent',
  mutationevents: 'mutationevent',
  uievents: 'uievent'
};
var mirrorAttr = function (f, name, defaultValue) {
  return {
    get: function () {
      var o = f.call(this);
      if (o) {
        return o[name];
      }
      return defaultValue;
    },
    set: function (value) {
      var o = f.call(this);
      if (o) {
        o[name] = value;
      }
    }
  };
};

/** @spec https://dom.spec.whatwg.org/#validate-and-extract */
function validateAndExtract(namespace, qualifiedName) {
  var prefix, localName, pos;
  if (namespace === '') {
    namespace = null;
  }
  // See https://github.com/whatwg/dom/issues/671
  // and https://github.com/whatwg/dom/issues/319
  if (!xml.isValidQName(qualifiedName)) {
    utils.InvalidCharacterError();
  }
  prefix = null;
  localName = qualifiedName;
  pos = qualifiedName.indexOf(':');
  if (pos >= 0) {
    prefix = qualifiedName.substring(0, pos);
    localName = qualifiedName.substring(pos + 1);
  }
  if (prefix !== null && namespace === null) {
    utils.NamespaceError();
  }
  if (prefix === 'xml' && namespace !== NAMESPACE.XML) {
    utils.NamespaceError();
  }
  if ((prefix === 'xmlns' || qualifiedName === 'xmlns') && namespace !== NAMESPACE.XMLNS) {
    utils.NamespaceError();
  }
  if (namespace === NAMESPACE.XMLNS && !(prefix === 'xmlns' || qualifiedName === 'xmlns')) {
    utils.NamespaceError();
  }
  return {
    namespace: namespace,
    prefix: prefix,
    localName: localName
  };
}
Document.prototype = Object.create(ContainerNode.prototype, {
  // This method allows dom.js to communicate with a renderer
  // that displays the document in some way
  // XXX: I should probably move this to the window object
  _setMutationHandler: {
    value: function (handler) {
      this.mutationHandler = handler;
    }
  },
  // This method allows dom.js to receive event notifications
  // from the renderer.
  // XXX: I should probably move this to the window object
  _dispatchRendererEvent: {
    value: function (targetNid, type, details) {
      var target = this._nodes[targetNid];
      if (!target) return;
      target._dispatchEvent(new Event(type, details), true);
    }
  },
  nodeName: {
    value: '#document'
  },
  nodeValue: {
    get: function () {
      return null;
    },
    set: function () {}
  },
  // XXX: DOMCore may remove documentURI, so it is NYI for now
  documentURI: {
    get: function () {
      return this._address;
    },
    set: utils.nyi
  },
  compatMode: {
    get: function () {
      // The _quirks property is set by the HTML parser
      return this._quirks ? 'BackCompat' : 'CSS1Compat';
    }
  },
  createTextNode: {
    value: function (data) {
      return new Text(this, String(data));
    }
  },
  createComment: {
    value: function (data) {
      return new Comment(this, data);
    }
  },
  createDocumentFragment: {
    value: function () {
      return new DocumentFragment(this);
    }
  },
  createProcessingInstruction: {
    value: function (target, data) {
      if (!xml.isValidName(target) || data.indexOf('?>') !== -1) utils.InvalidCharacterError();
      return new ProcessingInstruction(this, target, data);
    }
  },
  createAttribute: {
    value: function (localName) {
      localName = String(localName);
      if (!xml.isValidName(localName)) utils.InvalidCharacterError();
      if (this.isHTML) {
        localName = utils.toASCIILowerCase(localName);
      }
      return new Element._Attr(null, localName, null, null, '');
    }
  },
  createAttributeNS: {
    value: function (namespace, qualifiedName) {
      // Convert parameter types according to WebIDL
      namespace = namespace === null || namespace === undefined || namespace === '' ? null : String(namespace);
      qualifiedName = String(qualifiedName);
      var ve = validateAndExtract(namespace, qualifiedName);
      return new Element._Attr(null, ve.localName, ve.prefix, ve.namespace, '');
    }
  },
  createElement: {
    value: function (localName) {
      localName = String(localName);
      if (!xml.isValidName(localName)) utils.InvalidCharacterError();
      // Per spec, namespace should be HTML namespace if "context object is
      // an HTML document or context object's content type is
      // "application/xhtml+xml", and null otherwise.
      if (this.isHTML) {
        if (/[A-Z]/.test(localName)) localName = utils.toASCIILowerCase(localName);
        return html.createElement(this, localName, null);
      } else if (this.contentType === 'application/xhtml+xml') {
        return html.createElement(this, localName, null);
      } else {
        return new Element(this, localName, null, null);
      }
    },
    writable: isApiWritable
  },
  createElementNS: {
    value: function (namespace, qualifiedName) {
      // Convert parameter types according to WebIDL
      namespace = namespace === null || namespace === undefined || namespace === '' ? null : String(namespace);
      qualifiedName = String(qualifiedName);
      var ve = validateAndExtract(namespace, qualifiedName);
      return this._createElementNS(ve.localName, ve.namespace, ve.prefix);
    },
    writable: isApiWritable
  },
  // This is used directly by HTML parser, which allows it to create
  // elements with localNames containing ':' and non-default namespaces
  _createElementNS: {
    value: function (localName, namespace, prefix) {
      if (namespace === NAMESPACE.HTML) {
        return html.createElement(this, localName, prefix);
      } else if (namespace === NAMESPACE.SVG) {
        return svg.createElement(this, localName, prefix);
      }
      return new Element(this, localName, namespace, prefix);
    }
  },
  createEvent: {
    value: function createEvent(interfaceName) {
      interfaceName = interfaceName.toLowerCase();
      var name = replacementEvent[interfaceName] || interfaceName;
      var constructor = events[supportedEvents[name]];
      if (constructor) {
        var e = new constructor();
        e._initialized = false;
        return e;
      } else {
        utils.NotSupportedError();
      }
    }
  },
  // See: http://www.w3.org/TR/dom/#dom-document-createtreewalker
  createTreeWalker: {
    value: function (root, whatToShow, filter) {
      if (!root) {
        throw new TypeError("root argument is required");
      }
      if (!(root instanceof Node)) {
        throw new TypeError("root not a node");
      }
      whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : +whatToShow;
      filter = filter === undefined ? null : filter;
      return new TreeWalker(root, whatToShow, filter);
    }
  },
  // See: http://www.w3.org/TR/dom/#dom-document-createnodeiterator
  createNodeIterator: {
    value: function (root, whatToShow, filter) {
      if (!root) {
        throw new TypeError("root argument is required");
      }
      if (!(root instanceof Node)) {
        throw new TypeError("root not a node");
      }
      whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : +whatToShow;
      filter = filter === undefined ? null : filter;
      return new NodeIterator(root, whatToShow, filter);
    }
  },
  _attachNodeIterator: {
    value: function (ni) {
      // XXX ideally this should be a weak reference from Document to NodeIterator
      if (!this._nodeIterators) {
        this._nodeIterators = [];
      }
      this._nodeIterators.push(ni);
    }
  },
  _detachNodeIterator: {
    value: function (ni) {
      // ni should always be in list of node iterators
      var idx = this._nodeIterators.indexOf(ni);
      this._nodeIterators.splice(idx, 1);
    }
  },
  _preremoveNodeIterators: {
    value: function (toBeRemoved) {
      if (this._nodeIterators) {
        this._nodeIterators.forEach(function (ni) {
          ni._preremove(toBeRemoved);
        });
      }
    }
  },
  // Maintain the documentElement and
  // doctype properties of the document.  Each of the following
  // methods chains to the Node implementation of the method
  // to do the actual inserting, removal or replacement.

  _updateDocTypeElement: {
    value: function _updateDocTypeElement() {
      this.doctype = this.documentElement = null;
      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
        if (kid.nodeType === Node.DOCUMENT_TYPE_NODE) this.doctype = kid;else if (kid.nodeType === Node.ELEMENT_NODE) this.documentElement = kid;
      }
    }
  },
  insertBefore: {
    value: function insertBefore(child, refChild) {
      Node.prototype.insertBefore.call(this, child, refChild);
      this._updateDocTypeElement();
      return child;
    }
  },
  replaceChild: {
    value: function replaceChild(node, child) {
      Node.prototype.replaceChild.call(this, node, child);
      this._updateDocTypeElement();
      return child;
    }
  },
  removeChild: {
    value: function removeChild(child) {
      Node.prototype.removeChild.call(this, child);
      this._updateDocTypeElement();
      return child;
    }
  },
  getElementById: {
    value: function (id) {
      var n = this.byId[id];
      if (!n) return null;
      if (n instanceof MultiId) {
        // there was more than one element with this id
        return n.getFirst();
      }
      return n;
    }
  },
  _hasMultipleElementsWithId: {
    value: function (id) {
      // Used internally by querySelectorAll optimization
      return this.byId[id] instanceof MultiId;
    }
  },
  // Just copy this method from the Element prototype
  getElementsByName: {
    value: Element.prototype.getElementsByName
  },
  getElementsByTagName: {
    value: Element.prototype.getElementsByTagName
  },
  getElementsByTagNameNS: {
    value: Element.prototype.getElementsByTagNameNS
  },
  getElementsByClassName: {
    value: Element.prototype.getElementsByClassName
  },
  adoptNode: {
    value: function adoptNode(node) {
      if (node.nodeType === Node.DOCUMENT_NODE) utils.NotSupportedError();
      if (node.nodeType === Node.ATTRIBUTE_NODE) {
        return node;
      }
      if (node.parentNode) node.parentNode.removeChild(node);
      if (node.ownerDocument !== this) recursivelySetOwner(node, this);
      return node;
    }
  },
  importNode: {
    value: function importNode(node, deep) {
      return this.adoptNode(node.cloneNode(deep));
    },
    writable: isApiWritable
  },
  // The following attributes and methods are from the HTML spec
  origin: {
    get: function origin() {
      return null;
    }
  },
  characterSet: {
    get: function characterSet() {
      return "UTF-8";
    }
  },
  contentType: {
    get: function contentType() {
      return this._contentType;
    }
  },
  URL: {
    get: function URL() {
      return this._address;
    }
  },
  domain: {
    get: utils.nyi,
    set: utils.nyi
  },
  referrer: {
    get: utils.nyi
  },
  cookie: {
    get: utils.nyi,
    set: utils.nyi
  },
  lastModified: {
    get: utils.nyi
  },
  location: {
    get: function () {
      return this.defaultView ? this.defaultView.location : null; // gh #75
    },

    set: utils.nyi
  },
  _titleElement: {
    get: function () {
      // The title element of a document is the first title element in the
      // document in tree order, if there is one, or null otherwise.
      return this.getElementsByTagName('title').item(0) || null;
    }
  },
  title: {
    get: function () {
      var elt = this._titleElement;
      // The child text content of the title element, or '' if null.
      var value = elt ? elt.textContent : '';
      // Strip and collapse whitespace in value
      return value.replace(/[ \t\n\r\f]+/g, ' ').replace(/(^ )|( $)/g, '');
    },
    set: function (value) {
      var elt = this._titleElement;
      var head = this.head;
      if (!elt && !head) {
        return; /* according to spec */
      }
      if (!elt) {
        elt = this.createElement('title');
        head.appendChild(elt);
      }
      elt.textContent = value;
    }
  },
  dir: mirrorAttr(function () {
    var htmlElement = this.documentElement;
    if (htmlElement && htmlElement.tagName === 'HTML') {
      return htmlElement;
    }
  }, 'dir', ''),
  fgColor: mirrorAttr(function () {
    return this.body;
  }, 'text', ''),
  linkColor: mirrorAttr(function () {
    return this.body;
  }, 'link', ''),
  vlinkColor: mirrorAttr(function () {
    return this.body;
  }, 'vLink', ''),
  alinkColor: mirrorAttr(function () {
    return this.body;
  }, 'aLink', ''),
  bgColor: mirrorAttr(function () {
    return this.body;
  }, 'bgColor', ''),
  // Historical aliases of Document#characterSet
  charset: {
    get: function () {
      return this.characterSet;
    }
  },
  inputEncoding: {
    get: function () {
      return this.characterSet;
    }
  },
  scrollingElement: {
    get: function () {
      return this._quirks ? this.body : this.documentElement;
    }
  },
  // Return the first <body> child of the document element.
  // XXX For now, setting this attribute is not implemented.
  body: {
    get: function () {
      return namedHTMLChild(this.documentElement, 'body');
    },
    set: utils.nyi
  },
  // Return the first <head> child of the document element.
  head: {
    get: function () {
      return namedHTMLChild(this.documentElement, 'head');
    }
  },
  images: {
    get: utils.nyi
  },
  embeds: {
    get: utils.nyi
  },
  plugins: {
    get: utils.nyi
  },
  links: {
    get: utils.nyi
  },
  forms: {
    get: utils.nyi
  },
  scripts: {
    get: utils.nyi
  },
  applets: {
    get: function () {
      return [];
    }
  },
  activeElement: {
    get: function () {
      return null;
    }
  },
  innerHTML: {
    get: function () {
      return this.serialize();
    },
    set: utils.nyi
  },
  outerHTML: {
    get: function () {
      return this.serialize();
    },
    set: utils.nyi
  },
  write: {
    value: function (args) {
      if (!this.isHTML) utils.InvalidStateError();

      // XXX: still have to implement the ignore part
      if (!this._parser /* && this._ignore_destructive_writes > 0 */) return;
      if (!this._parser) {
        // XXX call document.open, etc.
      }
      var s = arguments.join('');

      // If the Document object's reload override flag is set, then
      // append the string consisting of the concatenation of all the
      // arguments to the method to the Document's reload override
      // buffer.
      // XXX: don't know what this is about.  Still have to do it

      // If there is no pending parsing-blocking script, have the
      // tokenizer process the characters that were inserted, one at a
      // time, processing resulting tokens as they are emitted, and
      // stopping when the tokenizer reaches the insertion point or when
      // the processing of the tokenizer is aborted by the tree
      // construction stage (this can happen if a script end tag token is
      // emitted by the tokenizer).

      // XXX: still have to do the above. Sounds as if we don't
      // always call parse() here.  If we're blocked, then we just
      // insert the text into the stream but don't parse it reentrantly...

      // Invoke the parser reentrantly
      this._parser.parse(s);
    }
  },
  writeln: {
    value: function writeln(args) {
      this.write(Array.prototype.join.call(arguments, '') + '\n');
    }
  },
  open: {
    value: function () {
      this.documentElement = null;
    }
  },
  close: {
    value: function () {
      this.readyState = 'interactive';
      this._dispatchEvent(new Event('readystatechange'), true);
      this._dispatchEvent(new Event('DOMContentLoaded'), true);
      this.readyState = 'complete';
      this._dispatchEvent(new Event('readystatechange'), true);
      if (this.defaultView) {
        this.defaultView._dispatchEvent(new Event('load'), true);
      }
    }
  },
  // Utility methods
  clone: {
    value: function clone() {
      var d = new Document(this.isHTML, this._address);
      d._quirks = this._quirks;
      d._contentType = this._contentType;
      return d;
    }
  },
  // We need to adopt the nodes if we do a deep clone
  cloneNode: {
    value: function cloneNode(deep) {
      var clone = Node.prototype.cloneNode.call(this, false);
      if (deep) {
        for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
          clone._appendChild(clone.importNode(kid, true));
        }
      }
      clone._updateDocTypeElement();
      return clone;
    }
  },
  isEqual: {
    value: function isEqual(n) {
      // Any two documents are shallowly equal.
      // Node.isEqualNode will also test the children
      return true;
    }
  },
  // Implementation-specific function.  Called when a text, comment,
  // or pi value changes.
  mutateValue: {
    value: function (node) {
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.VALUE,
          target: node,
          data: node.data
        });
      }
    }
  },
  // Invoked when an attribute's value changes. Attr holds the new
  // value.  oldval is the old value.  Attribute mutations can also
  // involve changes to the prefix (and therefore the qualified name)
  mutateAttr: {
    value: function (attr, oldval) {
      // Manage id->element mapping for getElementsById()
      // XXX: this special case id handling should not go here,
      // but in the attribute declaration for the id attribute
      /*
      if (attr.localName === 'id' && attr.namespaceURI === null) {
        if (oldval) delId(oldval, attr.ownerElement);
        addId(attr.value, attr.ownerElement);
      }
      */
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.ATTR,
          target: attr.ownerElement,
          attr: attr
        });
      }
    }
  },
  // Used by removeAttribute and removeAttributeNS for attributes.
  mutateRemoveAttr: {
    value: function (attr) {
      /*
      * This is now handled in Attributes.js
          // Manage id to element mapping
          if (attr.localName === 'id' && attr.namespaceURI === null) {
            this.delId(attr.value, attr.ownerElement);
          }
      */
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.REMOVE_ATTR,
          target: attr.ownerElement,
          attr: attr
        });
      }
    }
  },
  // Called by Node.removeChild, etc. to remove a rooted element from
  // the tree. Only needs to generate a single mutation event when a
  // node is removed, but must recursively mark all descendants as not
  // rooted.
  mutateRemove: {
    value: function (node) {
      // Send a single mutation event
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.REMOVE,
          target: node.parentNode,
          node: node
        });
      }

      // Mark this and all descendants as not rooted
      recursivelyUproot(node);
    }
  },
  // Called when a new element becomes rooted.  It must recursively
  // generate mutation events for each of the children, and mark them all
  // as rooted.
  mutateInsert: {
    value: function (node) {
      // Mark node and its descendants as rooted
      recursivelyRoot(node);

      // Send a single mutation event
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.INSERT,
          target: node.parentNode,
          node: node
        });
      }
    }
  },
  // Called when a rooted element is moved within the document
  mutateMove: {
    value: function (node) {
      if (this.mutationHandler) {
        this.mutationHandler({
          type: MUTATE.MOVE,
          target: node
        });
      }
    }
  },
  // Add a mapping from  id to n for n.ownerDocument
  addId: {
    value: function addId(id, n) {
      var val = this.byId[id];
      if (!val) {
        this.byId[id] = n;
      } else {
        // TODO: Add a way to opt-out console warnings
        //console.warn('Duplicate element id ' + id);
        if (!(val instanceof MultiId)) {
          val = new MultiId(val);
          this.byId[id] = val;
        }
        val.add(n);
      }
    }
  },
  // Delete the mapping from id to n for n.ownerDocument
  delId: {
    value: function delId(id, n) {
      var val = this.byId[id];
      utils.assert(val);
      if (val instanceof MultiId) {
        val.del(n);
        if (val.length === 1) {
          // convert back to a single node
          this.byId[id] = val.downgrade();
        }
      } else {
        this.byId[id] = undefined;
      }
    }
  },
  _resolve: {
    value: function (href) {
      //XXX: Cache the URL
      return new URL(this._documentBaseURL).resolve(href);
    }
  },
  _documentBaseURL: {
    get: function () {
      // XXX: This is not implemented correctly yet
      var url = this._address;
      if (url === 'about:blank') url = '/';
      var base = this.querySelector('base[href]');
      if (base) {
        return new URL(url).resolve(base.getAttribute('href'));
      }
      return url;

      // The document base URL of a Document object is the
      // absolute URL obtained by running these substeps:

      //     Let fallback base url be the document's address.

      //     If fallback base url is about:blank, and the
      //     Document's browsing context has a creator browsing
      //     context, then let fallback base url be the document
      //     base URL of the creator Document instead.

      //     If the Document is an iframe srcdoc document, then
      //     let fallback base url be the document base URL of
      //     the Document's browsing context's browsing context
      //     container's Document instead.

      //     If there is no base element that has an href
      //     attribute, then the document base URL is fallback
      //     base url; abort these steps. Otherwise, let url be
      //     the value of the href attribute of the first such
      //     element.

      //     Resolve url relative to fallback base url (thus,
      //     the base href attribute isn't affected by xml:base
      //     attributes).

      //     The document base URL is the result of the previous
      //     step if it was successful; otherwise it is fallback
      //     base url.
    }
  },

  _templateDoc: {
    get: function () {
      if (!this._templateDocCache) {
        // "associated inert template document"
        var newDoc = new Document(this.isHTML, this._address);
        this._templateDocCache = newDoc._templateDocCache = newDoc;
      }
      return this._templateDocCache;
    }
  },
  querySelector: {
    value: function (selector) {
      return select(selector, this)[0];
    }
  },
  querySelectorAll: {
    value: function (selector) {
      var nodes = select(selector, this);
      return nodes.item ? nodes : new NodeList(nodes);
    }
  }
});
var eventHandlerTypes = ['abort', 'canplay', 'canplaythrough', 'change', 'click', 'contextmenu', 'cuechange', 'dblclick', 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart', 'drop', 'durationchange', 'emptied', 'ended', 'input', 'invalid', 'keydown', 'keypress', 'keyup', 'loadeddata', 'loadedmetadata', 'loadstart', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'pause', 'play', 'playing', 'progress', 'ratechange', 'readystatechange', 'reset', 'seeked', 'seeking', 'select', 'show', 'stalled', 'submit', 'suspend', 'timeupdate', 'volumechange', 'waiting', 'blur', 'error', 'focus', 'load', 'scroll'];

// Add event handler idl attribute getters and setters to Document
eventHandlerTypes.forEach(function (type) {
  // Define the event handler registration IDL attribute for this type
  Object.defineProperty(Document.prototype, 'on' + type, {
    get: function () {
      return this._getEventHandler(type);
    },
    set: function (v) {
      this._setEventHandler(type, v);
    }
  });
});
function namedHTMLChild(parent, name) {
  if (parent && parent.isHTML) {
    for (var kid = parent.firstChild; kid !== null; kid = kid.nextSibling) {
      if (kid.nodeType === Node.ELEMENT_NODE && kid.localName === name && kid.namespaceURI === NAMESPACE.HTML) {
        return kid;
      }
    }
  }
  return null;
}
function root(n) {
  n._nid = n.ownerDocument._nextnid++;
  n.ownerDocument._nodes[n._nid] = n;
  // Manage id to element mapping
  if (n.nodeType === Node.ELEMENT_NODE) {
    var id = n.getAttribute('id');
    if (id) n.ownerDocument.addId(id, n);

    // Script elements need to know when they're inserted
    // into the document
    if (n._roothook) n._roothook();
  }
}
function uproot(n) {
  // Manage id to element mapping
  if (n.nodeType === Node.ELEMENT_NODE) {
    var id = n.getAttribute('id');
    if (id) n.ownerDocument.delId(id, n);
  }
  n.ownerDocument._nodes[n._nid] = undefined;
  n._nid = undefined;
}
function recursivelyRoot(node) {
  root(node);
  // XXX:
  // accessing childNodes on a leaf node creates a new array the
  // first time, so be careful to write this loop so that it
  // doesn't do that. node is polymorphic, so maybe this is hard to
  // optimize?  Try switching on nodeType?
  /*
    if (node.hasChildNodes()) {
      var kids = node.childNodes;
      for(var i = 0, n = kids.length;  i < n; i++)
        recursivelyRoot(kids[i]);
    }
  */
  if (node.nodeType === Node.ELEMENT_NODE) {
    for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling) recursivelyRoot(kid);
  }
}
function recursivelyUproot(node) {
  uproot(node);
  for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling) recursivelyUproot(kid);
}
function recursivelySetOwner(node, owner) {
  node.ownerDocument = owner;
  node._lastModTime = undefined; // mod times are document-based
  if (Object.prototype.hasOwnProperty.call(node, '_tagName')) {
    node._tagName = undefined; // Element subclasses might need to change case
  }

  for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling) recursivelySetOwner(kid, owner);
}

// A class for storing multiple nodes with the same ID
function MultiId(node) {
  this.nodes = Object.create(null);
  this.nodes[node._nid] = node;
  this.length = 1;
  this.firstNode = undefined;
}

// Add a node to the list, with O(1) time
MultiId.prototype.add = function (node) {
  if (!this.nodes[node._nid]) {
    this.nodes[node._nid] = node;
    this.length++;
    this.firstNode = undefined;
  }
};

// Remove a node from the list, with O(1) time
MultiId.prototype.del = function (node) {
  if (this.nodes[node._nid]) {
    delete this.nodes[node._nid];
    this.length--;
    this.firstNode = undefined;
  }
};

// Get the first node from the list, in the document order
// Takes O(N) time in the size of the list, with a cache that is invalidated
// when the list is modified.
MultiId.prototype.getFirst = function () {
  /* jshint bitwise: false */
  if (!this.firstNode) {
    var nid;
    for (nid in this.nodes) {
      if (this.firstNode === undefined || this.firstNode.compareDocumentPosition(this.nodes[nid]) & Node.DOCUMENT_POSITION_PRECEDING) {
        this.firstNode = this.nodes[nid];
      }
    }
  }
  return this.firstNode;
};

// If there is only one node left, return it. Otherwise return "this".
MultiId.prototype.downgrade = function () {
  if (this.length === 1) {
    var nid;
    for (nid in this.nodes) {
      return this.nodes[nid];
    }
  }
  return this;
};

/***/ }),

/***/ 80312:
/*!*****************************************************!*\
  !*** ./node_modules/domino/lib/DocumentFragment.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = DocumentFragment;
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeList = __webpack_require__(/*! ./NodeList */ 48649);
var ContainerNode = __webpack_require__(/*! ./ContainerNode */ 33886);
var Element = __webpack_require__(/*! ./Element */ 60601);
var select = __webpack_require__(/*! ./select */ 6201);
var utils = __webpack_require__(/*! ./utils */ 7976);
function DocumentFragment(doc) {
  ContainerNode.call(this);
  this.nodeType = Node.DOCUMENT_FRAGMENT_NODE;
  this.ownerDocument = doc;
}
DocumentFragment.prototype = Object.create(ContainerNode.prototype, {
  nodeName: {
    value: '#document-fragment'
  },
  nodeValue: {
    get: function () {
      return null;
    },
    set: function () {}
  },
  // Copy the text content getter/setter from Element
  textContent: Object.getOwnPropertyDescriptor(Element.prototype, 'textContent'),
  querySelector: {
    value: function (selector) {
      // implement in terms of querySelectorAll
      var nodes = this.querySelectorAll(selector);
      return nodes.length ? nodes[0] : null;
    }
  },
  querySelectorAll: {
    value: function (selector) {
      // create a context
      var context = Object.create(this);
      // add some methods to the context for zest implementation, without
      // adding them to the public DocumentFragment API
      context.isHTML = true; // in HTML namespace (case-insensitive match)
      context.getElementsByTagName = Element.prototype.getElementsByTagName;
      context.nextElement = Object.getOwnPropertyDescriptor(Element.prototype, 'firstElementChild').get;
      // invoke zest
      var nodes = select(selector, context);
      return nodes.item ? nodes : new NodeList(nodes);
    }
  },
  // Utility methods
  clone: {
    value: function clone() {
      return new DocumentFragment(this.ownerDocument);
    }
  },
  isEqual: {
    value: function isEqual(n) {
      // Any two document fragments are shallowly equal.
      // Node.isEqualNode() will test their children for equality
      return true;
    }
  },
  // Non-standard, but useful (github issue #73)
  innerHTML: {
    get: function () {
      return this.serialize();
    },
    set: utils.nyi
  },
  outerHTML: {
    get: function () {
      return this.serialize();
    },
    set: utils.nyi
  }
});

/***/ }),

/***/ 35840:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/DocumentType.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = DocumentType;
var Node = __webpack_require__(/*! ./Node */ 88869);
var Leaf = __webpack_require__(/*! ./Leaf */ 86269);
var ChildNode = __webpack_require__(/*! ./ChildNode */ 27063);
function DocumentType(ownerDocument, name, publicId, systemId) {
  Leaf.call(this);
  this.nodeType = Node.DOCUMENT_TYPE_NODE;
  this.ownerDocument = ownerDocument || null;
  this.name = name;
  this.publicId = publicId || "";
  this.systemId = systemId || "";
}
DocumentType.prototype = Object.create(Leaf.prototype, {
  nodeName: {
    get: function () {
      return this.name;
    }
  },
  nodeValue: {
    get: function () {
      return null;
    },
    set: function () {}
  },
  // Utility methods
  clone: {
    value: function clone() {
      return new DocumentType(this.ownerDocument, this.name, this.publicId, this.systemId);
    }
  },
  isEqual: {
    value: function isEqual(n) {
      return this.name === n.name && this.publicId === n.publicId && this.systemId === n.systemId;
    }
  }
});
Object.defineProperties(DocumentType.prototype, ChildNode);

/***/ }),

/***/ 60601:
/*!********************************************!*\
  !*** ./node_modules/domino/lib/Element.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Element;
var xml = __webpack_require__(/*! ./xmlnames */ 71018);
var utils = __webpack_require__(/*! ./utils */ 7976);
var NAMESPACE = utils.NAMESPACE;
var attributes = __webpack_require__(/*! ./attributes */ 38208);
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeList = __webpack_require__(/*! ./NodeList */ 48649);
var NodeUtils = __webpack_require__(/*! ./NodeUtils */ 62444);
var FilteredElementList = __webpack_require__(/*! ./FilteredElementList */ 46112);
var DOMException = __webpack_require__(/*! ./DOMException */ 90864);
var DOMTokenList = __webpack_require__(/*! ./DOMTokenList */ 30020);
var select = __webpack_require__(/*! ./select */ 6201);
var ContainerNode = __webpack_require__(/*! ./ContainerNode */ 33886);
var ChildNode = __webpack_require__(/*! ./ChildNode */ 27063);
var NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ 26005);
var NamedNodeMap = __webpack_require__(/*! ./NamedNodeMap */ 83600);
var uppercaseCache = Object.create(null);
function Element(doc, localName, namespaceURI, prefix) {
  ContainerNode.call(this);
  this.nodeType = Node.ELEMENT_NODE;
  this.ownerDocument = doc;
  this.localName = localName;
  this.namespaceURI = namespaceURI;
  this.prefix = prefix;
  this._tagName = undefined;

  // These properties maintain the set of attributes
  this._attrsByQName = Object.create(null); // The qname->Attr map
  this._attrsByLName = Object.create(null); // The ns|lname->Attr map
  this._attrKeys = []; // attr index -> ns|lname
}

function recursiveGetText(node, a) {
  if (node.nodeType === Node.TEXT_NODE) {
    a.push(node._data);
  } else {
    for (var i = 0, n = node.childNodes.length; i < n; i++) recursiveGetText(node.childNodes[i], a);
  }
}
Element.prototype = Object.create(ContainerNode.prototype, {
  isHTML: {
    get: function isHTML() {
      return this.namespaceURI === NAMESPACE.HTML && this.ownerDocument.isHTML;
    }
  },
  tagName: {
    get: function tagName() {
      if (this._tagName === undefined) {
        var tn;
        if (this.prefix === null) {
          tn = this.localName;
        } else {
          tn = this.prefix + ':' + this.localName;
        }
        if (this.isHTML) {
          var up = uppercaseCache[tn];
          if (!up) {
            // Converting to uppercase can be slow, so cache the conversion.
            uppercaseCache[tn] = up = utils.toASCIIUpperCase(tn);
          }
          tn = up;
        }
        this._tagName = tn;
      }
      return this._tagName;
    }
  },
  nodeName: {
    get: function () {
      return this.tagName;
    }
  },
  nodeValue: {
    get: function () {
      return null;
    },
    set: function () {}
  },
  textContent: {
    get: function () {
      var strings = [];
      recursiveGetText(this, strings);
      return strings.join('');
    },
    set: function (newtext) {
      this.removeChildren();
      if (newtext !== null && newtext !== undefined && newtext !== '') {
        this._appendChild(this.ownerDocument.createTextNode(newtext));
      }
    }
  },
  innerHTML: {
    get: function () {
      return this.serialize();
    },
    set: utils.nyi
  },
  outerHTML: {
    get: function () {
      // "the attribute must return the result of running the HTML fragment
      // serialization algorithm on a fictional node whose only child is
      // the context object"
      //
      // The serialization logic is intentionally implemented in a separate
      // `NodeUtils` helper instead of the more obvious choice of a private
      // `_serializeOne()` method on the `Node.prototype` in order to avoid
      // the megamorphic `this._serializeOne` property access, which reduces
      // performance unnecessarily. If you need specialized behavior for a
      // certain subclass, you'll need to implement that in `NodeUtils`.
      // See https://github.com/fgnass/domino/pull/142 for more information.
      return NodeUtils.serializeOne(this, {
        nodeType: 0
      });
    },
    set: function (v) {
      var document = this.ownerDocument;
      var parent = this.parentNode;
      if (parent === null) {
        return;
      }
      if (parent.nodeType === Node.DOCUMENT_NODE) {
        utils.NoModificationAllowedError();
      }
      if (parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        parent = parent.ownerDocument.createElement("body");
      }
      var parser = document.implementation.mozHTMLParser(document._address, parent);
      parser.parse(v === null ? '' : String(v), true);
      this.replaceWith(parser._asDocumentFragment());
    }
  },
  _insertAdjacent: {
    value: function _insertAdjacent(position, node) {
      var first = false;
      switch (position) {
        case 'beforebegin':
          first = true;
        /* falls through */
        case 'afterend':
          var parent = this.parentNode;
          if (parent === null) {
            return null;
          }
          return parent.insertBefore(node, first ? this : this.nextSibling);
        case 'afterbegin':
          first = true;
        /* falls through */
        case 'beforeend':
          return this.insertBefore(node, first ? this.firstChild : null);
        default:
          return utils.SyntaxError();
      }
    }
  },
  insertAdjacentElement: {
    value: function insertAdjacentElement(position, element) {
      if (element.nodeType !== Node.ELEMENT_NODE) {
        throw new TypeError('not an element');
      }
      position = utils.toASCIILowerCase(String(position));
      return this._insertAdjacent(position, element);
    }
  },
  insertAdjacentText: {
    value: function insertAdjacentText(position, data) {
      var textNode = this.ownerDocument.createTextNode(data);
      position = utils.toASCIILowerCase(String(position));
      this._insertAdjacent(position, textNode);
      // "This method returns nothing because it existed before we had a chance
      // to design it."
    }
  },

  insertAdjacentHTML: {
    value: function insertAdjacentHTML(position, text) {
      position = utils.toASCIILowerCase(String(position));
      text = String(text);
      var context;
      switch (position) {
        case 'beforebegin':
        case 'afterend':
          context = this.parentNode;
          if (context === null || context.nodeType === Node.DOCUMENT_NODE) {
            utils.NoModificationAllowedError();
          }
          break;
        case 'afterbegin':
        case 'beforeend':
          context = this;
          break;
        default:
          utils.SyntaxError();
      }
      if (!(context instanceof Element) || context.ownerDocument.isHTML && context.localName === 'html' && context.namespaceURI === NAMESPACE.HTML) {
        context = context.ownerDocument.createElementNS(NAMESPACE.HTML, 'body');
      }
      var parser = this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address, context);
      parser.parse(text, true);
      this._insertAdjacent(position, parser._asDocumentFragment());
    }
  },
  children: {
    get: function () {
      if (!this._children) {
        this._children = new ChildrenCollection(this);
      }
      return this._children;
    }
  },
  attributes: {
    get: function () {
      if (!this._attributes) {
        this._attributes = new AttributesArray(this);
      }
      return this._attributes;
    }
  },
  firstElementChild: {
    get: function () {
      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
        if (kid.nodeType === Node.ELEMENT_NODE) return kid;
      }
      return null;
    }
  },
  lastElementChild: {
    get: function () {
      for (var kid = this.lastChild; kid !== null; kid = kid.previousSibling) {
        if (kid.nodeType === Node.ELEMENT_NODE) return kid;
      }
      return null;
    }
  },
  childElementCount: {
    get: function () {
      return this.children.length;
    }
  },
  // Return the next element, in source order, after this one or
  // null if there are no more.  If root element is specified,
  // then don't traverse beyond its subtree.
  //
  // This is not a DOM method, but is convenient for
  // lazy traversals of the tree.
  nextElement: {
    value: function (root) {
      if (!root) root = this.ownerDocument.documentElement;
      var next = this.firstElementChild;
      if (!next) {
        // don't use sibling if we're at root
        if (this === root) return null;
        next = this.nextElementSibling;
      }
      if (next) return next;

      // If we can't go down or across, then we have to go up
      // and across to the parent sibling or another ancestor's
      // sibling.  Be careful, though: if we reach the root
      // element, or if we reach the documentElement, then
      // the traversal ends.
      for (var parent = this.parentElement; parent && parent !== root; parent = parent.parentElement) {
        next = parent.nextElementSibling;
        if (next) return next;
      }
      return null;
    }
  },
  // XXX:
  // Tests are currently failing for this function.
  // Awaiting resolution of:
  // http://lists.w3.org/Archives/Public/www-dom/2011JulSep/0016.html
  getElementsByTagName: {
    value: function getElementsByTagName(lname) {
      var filter;
      if (!lname) return new NodeList();
      if (lname === '*') filter = function () {
        return true;
      };else if (this.isHTML) filter = htmlLocalNameElementFilter(lname);else filter = localNameElementFilter(lname);
      return new FilteredElementList(this, filter);
    }
  },
  getElementsByTagNameNS: {
    value: function getElementsByTagNameNS(ns, lname) {
      var filter;
      if (ns === '*' && lname === '*') filter = function () {
        return true;
      };else if (ns === '*') filter = localNameElementFilter(lname);else if (lname === '*') filter = namespaceElementFilter(ns);else filter = namespaceLocalNameElementFilter(ns, lname);
      return new FilteredElementList(this, filter);
    }
  },
  getElementsByClassName: {
    value: function getElementsByClassName(names) {
      names = String(names).trim();
      if (names === '') {
        var result = new NodeList(); // Empty node list
        return result;
      }
      names = names.split(/[ \t\r\n\f]+/); // Split on ASCII whitespace
      return new FilteredElementList(this, classNamesElementFilter(names));
    }
  },
  getElementsByName: {
    value: function getElementsByName(name) {
      return new FilteredElementList(this, elementNameFilter(String(name)));
    }
  },
  // Utility methods used by the public API methods above
  clone: {
    value: function clone() {
      var e;

      // XXX:
      // Modify this to use the constructor directly or
      // avoid error checking in some other way. In case we try
      // to clone an invalid node that the parser inserted.
      //
      if (this.namespaceURI !== NAMESPACE.HTML || this.prefix || !this.ownerDocument.isHTML) {
        e = this.ownerDocument.createElementNS(this.namespaceURI, this.prefix !== null ? this.prefix + ':' + this.localName : this.localName);
      } else {
        e = this.ownerDocument.createElement(this.localName);
      }
      for (var i = 0, n = this._attrKeys.length; i < n; i++) {
        var lname = this._attrKeys[i];
        var a = this._attrsByLName[lname];
        var b = a.cloneNode();
        b._setOwnerElement(e);
        e._attrsByLName[lname] = b;
        e._addQName(b);
      }
      e._attrKeys = this._attrKeys.concat();
      return e;
    }
  },
  isEqual: {
    value: function isEqual(that) {
      if (this.localName !== that.localName || this.namespaceURI !== that.namespaceURI || this.prefix !== that.prefix || this._numattrs !== that._numattrs) return false;

      // Compare the sets of attributes, ignoring order
      // and ignoring attribute prefixes.
      for (var i = 0, n = this._numattrs; i < n; i++) {
        var a = this._attr(i);
        if (!that.hasAttributeNS(a.namespaceURI, a.localName)) return false;
        if (that.getAttributeNS(a.namespaceURI, a.localName) !== a.value) return false;
      }
      return true;
    }
  },
  // This is the 'locate a namespace prefix' algorithm from the
  // DOM specification.  It is used by Node.lookupPrefix()
  // (Be sure to compare DOM3 and DOM4 versions of spec.)
  _lookupNamespacePrefix: {
    value: function _lookupNamespacePrefix(ns, originalElement) {
      if (this.namespaceURI && this.namespaceURI === ns && this.prefix !== null && originalElement.lookupNamespaceURI(this.prefix) === ns) {
        return this.prefix;
      }
      for (var i = 0, n = this._numattrs; i < n; i++) {
        var a = this._attr(i);
        if (a.prefix === 'xmlns' && a.value === ns && originalElement.lookupNamespaceURI(a.localName) === ns) {
          return a.localName;
        }
      }
      var parent = this.parentElement;
      return parent ? parent._lookupNamespacePrefix(ns, originalElement) : null;
    }
  },
  // This is the 'locate a namespace' algorithm for Element nodes
  // from the DOM Core spec.  It is used by Node#lookupNamespaceURI()
  lookupNamespaceURI: {
    value: function lookupNamespaceURI(prefix) {
      if (prefix === '' || prefix === undefined) {
        prefix = null;
      }
      if (this.namespaceURI !== null && this.prefix === prefix) return this.namespaceURI;
      for (var i = 0, n = this._numattrs; i < n; i++) {
        var a = this._attr(i);
        if (a.namespaceURI === NAMESPACE.XMLNS) {
          if (a.prefix === 'xmlns' && a.localName === prefix || prefix === null && a.prefix === null && a.localName === 'xmlns') {
            return a.value || null;
          }
        }
      }
      var parent = this.parentElement;
      return parent ? parent.lookupNamespaceURI(prefix) : null;
    }
  },
  //
  // Attribute handling methods and utilities
  //

  /*
   * Attributes in the DOM are tricky:
   *
   * - there are the 8 basic get/set/has/removeAttribute{NS} methods
   *
   * - but many HTML attributes are also 'reflected' through IDL
   *   attributes which means that they can be queried and set through
   *   regular properties of the element.  There is just one attribute
   *   value, but two ways to get and set it.
   *
   * - Different HTML element types have different sets of reflected
     attributes.
   *
   * - attributes can also be queried and set through the .attributes
   *   property of an element.  This property behaves like an array of
   *   Attr objects.  The value property of each Attr is writeable, so
   *   this is a third way to read and write attributes.
   *
   * - for efficiency, we really want to store attributes in some kind
   *   of name->attr map.  But the attributes[] array is an array, not a
   *   map, which is kind of unnatural.
   *
   * - When using namespaces and prefixes, and mixing the NS methods
   *   with the non-NS methods, it is apparently actually possible for
   *   an attributes[] array to have more than one attribute with the
   *   same qualified name.  And certain methods must operate on only
   *   the first attribute with such a name.  So for these methods, an
   *   inefficient array-like data structure would be easier to
   *   implement.
   *
   * - The attributes[] array is live, not a snapshot, so changes to the
   *   attributes must be immediately visible through existing arrays.
   *
   * - When attributes are queried and set through IDL properties
   *   (instead of the get/setAttributes() method or the attributes[]
   *   array) they may be subject to type conversions, URL
   *   normalization, etc., so some extra processing is required in that
   *   case.
   *
   * - But access through IDL properties is probably the most common
   *   case, so we'd like that to be as fast as possible.
   *
   * - We can't just store attribute values in their parsed idl form,
   *   because setAttribute() has to return whatever string is passed to
   *   getAttribute even if it is not a legal, parseable value. So
   *   attribute values must be stored in unparsed string form.
   *
   * - We need to be able to send change notifications or mutation
   *   events of some sort to the renderer whenever an attribute value
   *   changes, regardless of the way in which it changes.
   *
   * - Some attributes, such as id and class affect other parts of the
   *   DOM API, like getElementById and getElementsByClassName and so
   *   for efficiency, we need to specially track changes to these
   *   special attributes.
   *
   * - Some attributes like class have different names (className) when
   *   reflected.
   *
   * - Attributes whose names begin with the string 'data-' are treated
     specially.
   *
   * - Reflected attributes that have a boolean type in IDL have special
   *   behavior: setting them to false (in IDL) is the same as removing
   *   them with removeAttribute()
   *
   * - numeric attributes (like HTMLElement.tabIndex) can have default
   *   values that must be returned by the idl getter even if the
   *   content attribute does not exist. (The default tabIndex value
   *   actually varies based on the type of the element, so that is a
   *   tricky one).
   *
   * See
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#reflect
   * for rules on how attributes are reflected.
   *
   */

  getAttribute: {
    value: function getAttribute(qname) {
      var attr = this.getAttributeNode(qname);
      return attr ? attr.value : null;
    }
  },
  getAttributeNS: {
    value: function getAttributeNS(ns, lname) {
      var attr = this.getAttributeNodeNS(ns, lname);
      return attr ? attr.value : null;
    }
  },
  getAttributeNode: {
    value: function getAttributeNode(qname) {
      qname = String(qname);
      if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);
      var attr = this._attrsByQName[qname];
      if (!attr) return null;
      if (Array.isArray(attr))
        // If there is more than one
        attr = attr[0]; // use the first

      return attr;
    }
  },
  getAttributeNodeNS: {
    value: function getAttributeNodeNS(ns, lname) {
      ns = ns === undefined || ns === null ? '' : String(ns);
      lname = String(lname);
      var attr = this._attrsByLName[ns + '|' + lname];
      return attr ? attr : null;
    }
  },
  hasAttribute: {
    value: function hasAttribute(qname) {
      qname = String(qname);
      if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);
      return this._attrsByQName[qname] !== undefined;
    }
  },
  hasAttributeNS: {
    value: function hasAttributeNS(ns, lname) {
      ns = ns === undefined || ns === null ? '' : String(ns);
      lname = String(lname);
      var key = ns + '|' + lname;
      return this._attrsByLName[key] !== undefined;
    }
  },
  hasAttributes: {
    value: function hasAttributes() {
      return this._numattrs > 0;
    }
  },
  toggleAttribute: {
    value: function toggleAttribute(qname, force) {
      qname = String(qname);
      if (!xml.isValidName(qname)) utils.InvalidCharacterError();
      if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);
      var a = this._attrsByQName[qname];
      if (a === undefined) {
        if (force === undefined || force === true) {
          this._setAttribute(qname, '');
          return true;
        }
        return false;
      } else {
        if (force === undefined || force === false) {
          this.removeAttribute(qname);
          return false;
        }
        return true;
      }
    }
  },
  // Set the attribute without error checking. The parser uses this.
  _setAttribute: {
    value: function _setAttribute(qname, value) {
      // XXX: the spec says that this next search should be done
      // on the local name, but I think that is an error.
      // email pending on www-dom about it.
      var attr = this._attrsByQName[qname];
      var isnew;
      if (!attr) {
        attr = this._newattr(qname);
        isnew = true;
      } else {
        if (Array.isArray(attr)) attr = attr[0];
      }

      // Now set the attribute value on the new or existing Attr object.
      // The Attr.value setter method handles mutation events, etc.
      attr.value = value;
      if (this._attributes) this._attributes[qname] = attr;
      if (isnew && this._newattrhook) this._newattrhook(qname, value);
    }
  },
  // Check for errors, and then set the attribute
  setAttribute: {
    value: function setAttribute(qname, value) {
      qname = String(qname);
      if (!xml.isValidName(qname)) utils.InvalidCharacterError();
      if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);
      this._setAttribute(qname, String(value));
    }
  },
  // The version with no error checking used by the parser
  _setAttributeNS: {
    value: function _setAttributeNS(ns, qname, value) {
      var pos = qname.indexOf(':'),
        prefix,
        lname;
      if (pos < 0) {
        prefix = null;
        lname = qname;
      } else {
        prefix = qname.substring(0, pos);
        lname = qname.substring(pos + 1);
      }
      if (ns === '' || ns === undefined) ns = null;
      var key = (ns === null ? '' : ns) + '|' + lname;
      var attr = this._attrsByLName[key];
      var isnew;
      if (!attr) {
        attr = new Attr(this, lname, prefix, ns);
        isnew = true;
        this._attrsByLName[key] = attr;
        if (this._attributes) {
          this._attributes[this._attrKeys.length] = attr;
        }
        this._attrKeys.push(key);

        // We also have to make the attr searchable by qname.
        // But we have to be careful because there may already
        // be an attr with this qname.
        this._addQName(attr);
      } else if (false /* changed in DOM 4 */) {}
      attr.value = value; // Automatically sends mutation event
      if (isnew && this._newattrhook) this._newattrhook(qname, value);
    }
  },
  // Do error checking then call _setAttributeNS
  setAttributeNS: {
    value: function setAttributeNS(ns, qname, value) {
      // Convert parameter types according to WebIDL
      ns = ns === null || ns === undefined || ns === '' ? null : String(ns);
      qname = String(qname);
      if (!xml.isValidQName(qname)) utils.InvalidCharacterError();
      var pos = qname.indexOf(':');
      var prefix = pos < 0 ? null : qname.substring(0, pos);
      if (prefix !== null && ns === null || prefix === 'xml' && ns !== NAMESPACE.XML || (qname === 'xmlns' || prefix === 'xmlns') && ns !== NAMESPACE.XMLNS || ns === NAMESPACE.XMLNS && !(qname === 'xmlns' || prefix === 'xmlns')) utils.NamespaceError();
      this._setAttributeNS(ns, qname, String(value));
    }
  },
  setAttributeNode: {
    value: function setAttributeNode(attr) {
      if (attr.ownerElement !== null && attr.ownerElement !== this) {
        throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);
      }
      var result = null;
      var oldAttrs = this._attrsByQName[attr.name];
      if (oldAttrs) {
        if (!Array.isArray(oldAttrs)) {
          oldAttrs = [oldAttrs];
        }
        if (oldAttrs.some(function (a) {
          return a === attr;
        })) {
          return attr;
        } else if (attr.ownerElement !== null) {
          throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);
        }
        oldAttrs.forEach(function (a) {
          this.removeAttributeNode(a);
        }, this);
        result = oldAttrs[0];
      }
      this.setAttributeNodeNS(attr);
      return result;
    }
  },
  setAttributeNodeNS: {
    value: function setAttributeNodeNS(attr) {
      if (attr.ownerElement !== null) {
        throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);
      }
      var ns = attr.namespaceURI;
      var key = (ns === null ? '' : ns) + '|' + attr.localName;
      var oldAttr = this._attrsByLName[key];
      if (oldAttr) {
        this.removeAttributeNode(oldAttr);
      }
      attr._setOwnerElement(this);
      this._attrsByLName[key] = attr;
      if (this._attributes) {
        this._attributes[this._attrKeys.length] = attr;
      }
      this._attrKeys.push(key);
      this._addQName(attr);
      if (this._newattrhook) this._newattrhook(attr.name, attr.value);
      return oldAttr || null;
    }
  },
  removeAttribute: {
    value: function removeAttribute(qname) {
      qname = String(qname);
      if (/[A-Z]/.test(qname) && this.isHTML) qname = utils.toASCIILowerCase(qname);
      var attr = this._attrsByQName[qname];
      if (!attr) return;

      // If there is more than one match for this qname
      // so don't delete the qname mapping, just remove the first
      // element from it.
      if (Array.isArray(attr)) {
        if (attr.length > 2) {
          attr = attr.shift(); // remove it from the array
        } else {
          this._attrsByQName[qname] = attr[1];
          attr = attr[0];
        }
      } else {
        // only a single match, so remove the qname mapping
        this._attrsByQName[qname] = undefined;
      }
      var ns = attr.namespaceURI;
      // Now attr is the removed attribute.  Figure out its
      // ns+lname key and remove it from the other mapping as well.
      var key = (ns === null ? '' : ns) + '|' + attr.localName;
      this._attrsByLName[key] = undefined;
      var i = this._attrKeys.indexOf(key);
      if (this._attributes) {
        Array.prototype.splice.call(this._attributes, i, 1);
        this._attributes[qname] = undefined;
      }
      this._attrKeys.splice(i, 1);

      // Onchange handler for the attribute
      var onchange = attr.onchange;
      attr._setOwnerElement(null);
      if (onchange) {
        onchange.call(attr, this, attr.localName, attr.value, null);
      }
      // Mutation event
      if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);
    }
  },
  removeAttributeNS: {
    value: function removeAttributeNS(ns, lname) {
      ns = ns === undefined || ns === null ? '' : String(ns);
      lname = String(lname);
      var key = ns + '|' + lname;
      var attr = this._attrsByLName[key];
      if (!attr) return;
      this._attrsByLName[key] = undefined;
      var i = this._attrKeys.indexOf(key);
      if (this._attributes) {
        Array.prototype.splice.call(this._attributes, i, 1);
      }
      this._attrKeys.splice(i, 1);

      // Now find the same Attr object in the qname mapping and remove it
      // But be careful because there may be more than one match.
      this._removeQName(attr);

      // Onchange handler for the attribute
      var onchange = attr.onchange;
      attr._setOwnerElement(null);
      if (onchange) {
        onchange.call(attr, this, attr.localName, attr.value, null);
      }
      // Mutation event
      if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);
    }
  },
  removeAttributeNode: {
    value: function removeAttributeNode(attr) {
      var ns = attr.namespaceURI;
      var key = (ns === null ? '' : ns) + '|' + attr.localName;
      if (this._attrsByLName[key] !== attr) {
        utils.NotFoundError();
      }
      this.removeAttributeNS(ns, attr.localName);
      return attr;
    }
  },
  getAttributeNames: {
    value: function getAttributeNames() {
      var elt = this;
      return this._attrKeys.map(function (key) {
        return elt._attrsByLName[key].name;
      });
    }
  },
  // This 'raw' version of getAttribute is used by the getter functions
  // of reflected attributes. It skips some error checking and
  // namespace steps
  _getattr: {
    value: function _getattr(qname) {
      // Assume that qname is already lowercased, so don't do it here.
      // Also don't check whether attr is an array: a qname with no
      // prefix will never have two matching Attr objects (because
      // setAttributeNS doesn't allow a non-null namespace with a
      // null prefix.
      var attr = this._attrsByQName[qname];
      return attr ? attr.value : null;
    }
  },
  // The raw version of setAttribute for reflected idl attributes.
  _setattr: {
    value: function _setattr(qname, value) {
      var attr = this._attrsByQName[qname];
      var isnew;
      if (!attr) {
        attr = this._newattr(qname);
        isnew = true;
      }
      attr.value = String(value);
      if (this._attributes) this._attributes[qname] = attr;
      if (isnew && this._newattrhook) this._newattrhook(qname, value);
    }
  },
  // Create a new Attr object, insert it, and return it.
  // Used by setAttribute() and by set()
  _newattr: {
    value: function _newattr(qname) {
      var attr = new Attr(this, qname, null, null);
      var key = '|' + qname;
      this._attrsByQName[qname] = attr;
      this._attrsByLName[key] = attr;
      if (this._attributes) {
        this._attributes[this._attrKeys.length] = attr;
      }
      this._attrKeys.push(key);
      return attr;
    }
  },
  // Add a qname->Attr mapping to the _attrsByQName object, taking into
  // account that there may be more than one attr object with the
  // same qname
  _addQName: {
    value: function (attr) {
      var qname = attr.name;
      var existing = this._attrsByQName[qname];
      if (!existing) {
        this._attrsByQName[qname] = attr;
      } else if (Array.isArray(existing)) {
        existing.push(attr);
      } else {
        this._attrsByQName[qname] = [existing, attr];
      }
      if (this._attributes) this._attributes[qname] = attr;
    }
  },
  // Remove a qname->Attr mapping to the _attrsByQName object, taking into
  // account that there may be more than one attr object with the
  // same qname
  _removeQName: {
    value: function (attr) {
      var qname = attr.name;
      var target = this._attrsByQName[qname];
      if (Array.isArray(target)) {
        var idx = target.indexOf(attr);
        utils.assert(idx !== -1); // It must be here somewhere
        if (target.length === 2) {
          this._attrsByQName[qname] = target[1 - idx];
          if (this._attributes) {
            this._attributes[qname] = this._attrsByQName[qname];
          }
        } else {
          target.splice(idx, 1);
          if (this._attributes && this._attributes[qname] === attr) {
            this._attributes[qname] = target[0];
          }
        }
      } else {
        utils.assert(target === attr); // If only one, it must match
        this._attrsByQName[qname] = undefined;
        if (this._attributes) {
          this._attributes[qname] = undefined;
        }
      }
    }
  },
  // Return the number of attributes
  _numattrs: {
    get: function () {
      return this._attrKeys.length;
    }
  },
  // Return the nth Attr object
  _attr: {
    value: function (n) {
      return this._attrsByLName[this._attrKeys[n]];
    }
  },
  // Define getters and setters for an 'id' property that reflects
  // the content attribute 'id'.
  id: attributes.property({
    name: 'id'
  }),
  // Define getters and setters for a 'className' property that reflects
  // the content attribute 'class'.
  className: attributes.property({
    name: 'class'
  }),
  classList: {
    get: function () {
      var self = this;
      if (this._classList) {
        return this._classList;
      }
      var dtlist = new DOMTokenList(function () {
        return self.className || "";
      }, function (v) {
        self.className = v;
      });
      this._classList = dtlist;
      return dtlist;
    },
    set: function (v) {
      this.className = v;
    }
  },
  matches: {
    value: function (selector) {
      return select.matches(this, selector);
    }
  },
  closest: {
    value: function (selector) {
      var el = this;
      do {
        if (el.matches && el.matches(selector)) {
          return el;
        }
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === Node.ELEMENT_NODE);
      return null;
    }
  },
  querySelector: {
    value: function (selector) {
      return select(selector, this)[0];
    }
  },
  querySelectorAll: {
    value: function (selector) {
      var nodes = select(selector, this);
      return nodes.item ? nodes : new NodeList(nodes);
    }
  }
});
Object.defineProperties(Element.prototype, ChildNode);
Object.defineProperties(Element.prototype, NonDocumentTypeChildNode);

// Register special handling for the id attribute
attributes.registerChangeHandler(Element, 'id', function (element, lname, oldval, newval) {
  if (element.rooted) {
    if (oldval) {
      element.ownerDocument.delId(oldval, element);
    }
    if (newval) {
      element.ownerDocument.addId(newval, element);
    }
  }
});
attributes.registerChangeHandler(Element, 'class', function (element, lname, oldval, newval) {
  if (element._classList) {
    element._classList._update();
  }
});

// The Attr class represents a single attribute.  The values in
// _attrsByQName and _attrsByLName are instances of this class.
function Attr(elt, lname, prefix, namespace, value) {
  // localName and namespace are constant for any attr object.
  // But value may change.  And so can prefix, and so, therefore can name.
  this.localName = lname;
  this.prefix = prefix === null || prefix === '' ? null : '' + prefix;
  this.namespaceURI = namespace === null || namespace === '' ? null : '' + namespace;
  this.data = value;
  // Set ownerElement last to ensure it is hooked up to onchange handler
  this._setOwnerElement(elt);
}

// In DOM 3 Attr was supposed to extend Node; in DOM 4 that was abandoned.
Attr.prototype = Object.create(Object.prototype, {
  ownerElement: {
    get: function () {
      return this._ownerElement;
    }
  },
  _setOwnerElement: {
    value: function _setOwnerElement(elt) {
      this._ownerElement = elt;
      if (this.prefix === null && this.namespaceURI === null && elt) {
        this.onchange = elt._attributeChangeHandlers[this.localName];
      } else {
        this.onchange = null;
      }
    }
  },
  name: {
    get: function () {
      return this.prefix ? this.prefix + ':' + this.localName : this.localName;
    }
  },
  specified: {
    get: function () {
      // Deprecated
      return true;
    }
  },
  value: {
    get: function () {
      return this.data;
    },
    set: function (value) {
      var oldval = this.data;
      value = value === undefined ? '' : value + '';
      if (value === oldval) return;
      this.data = value;

      // Run the onchange hook for the attribute
      // if there is one.
      if (this.ownerElement) {
        if (this.onchange) this.onchange(this.ownerElement, this.localName, oldval, value);

        // Generate a mutation event if the element is rooted
        if (this.ownerElement.rooted) this.ownerElement.ownerDocument.mutateAttr(this, oldval);
      }
    }
  },
  cloneNode: {
    value: function cloneNode(deep) {
      // Both this method and Document#createAttribute*() create unowned Attrs
      return new Attr(null, this.localName, this.prefix, this.namespaceURI, this.data);
    }
  },
  // Legacy aliases (see gh#70 and https://dom.spec.whatwg.org/#interface-attr)
  nodeType: {
    get: function () {
      return Node.ATTRIBUTE_NODE;
    }
  },
  nodeName: {
    get: function () {
      return this.name;
    }
  },
  nodeValue: {
    get: function () {
      return this.value;
    },
    set: function (v) {
      this.value = v;
    }
  },
  textContent: {
    get: function () {
      return this.value;
    },
    set: function (v) {
      if (v === null || v === undefined) {
        v = '';
      }
      this.value = v;
    }
  }
});
// Sneakily export this class for use by Document.createAttribute()
Element._Attr = Attr;

// The attributes property of an Element will be an instance of this class.
// This class is really just a dummy, though. It only defines a length
// property and an item() method. The AttrArrayProxy that
// defines the public API just uses the Element object itself.
function AttributesArray(elt) {
  NamedNodeMap.call(this, elt);
  for (var name in elt._attrsByQName) {
    this[name] = elt._attrsByQName[name];
  }
  for (var i = 0; i < elt._attrKeys.length; i++) {
    this[i] = elt._attrsByLName[elt._attrKeys[i]];
  }
}
AttributesArray.prototype = Object.create(NamedNodeMap.prototype, {
  length: {
    get: function () {
      return this.element._attrKeys.length;
    },
    set: function () {/* ignore */}
  },
  item: {
    value: function (n) {
      /* jshint bitwise: false */
      n = n >>> 0;
      if (n >= this.length) {
        return null;
      }
      return this.element._attrsByLName[this.element._attrKeys[n]];
      /* jshint bitwise: true */
    }
  }
});

// We can't make direct array access work (without Proxies, node >=6)
// but we can make `Array.from(node.attributes)` and for-of loops work.
if (global.Symbol && global.Symbol.iterator) {
  AttributesArray.prototype[global.Symbol.iterator] = function () {
    var i = 0,
      n = this.length,
      self = this;
    return {
      next: function () {
        if (i < n) return {
          value: self.item(i++)
        };
        return {
          done: true
        };
      }
    };
  };
}

// The children property of an Element will be an instance of this class.
// It defines length, item() and namedItem() and will be wrapped by an
// HTMLCollection when exposed through the DOM.
function ChildrenCollection(e) {
  this.element = e;
  this.updateCache();
}
ChildrenCollection.prototype = Object.create(Object.prototype, {
  length: {
    get: function () {
      this.updateCache();
      return this.childrenByNumber.length;
    }
  },
  item: {
    value: function item(n) {
      this.updateCache();
      return this.childrenByNumber[n] || null;
    }
  },
  namedItem: {
    value: function namedItem(name) {
      this.updateCache();
      return this.childrenByName[name] || null;
    }
  },
  // This attribute returns the entire name->element map.
  // It is not part of the HTMLCollection API, but we need it in
  // src/HTMLCollectionProxy
  namedItems: {
    get: function () {
      this.updateCache();
      return this.childrenByName;
    }
  },
  updateCache: {
    value: function updateCache() {
      var namedElts = /^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;
      if (this.lastModTime !== this.element.lastModTime) {
        this.lastModTime = this.element.lastModTime;
        var n = this.childrenByNumber && this.childrenByNumber.length || 0;
        for (var i = 0; i < n; i++) {
          this[i] = undefined;
        }
        this.childrenByNumber = [];
        this.childrenByName = Object.create(null);
        for (var c = this.element.firstChild; c !== null; c = c.nextSibling) {
          if (c.nodeType === Node.ELEMENT_NODE) {
            this[this.childrenByNumber.length] = c;
            this.childrenByNumber.push(c);

            // XXX Are there any requirements about the namespace
            // of the id property?
            var id = c.getAttribute('id');

            // If there is an id that is not already in use...
            if (id && !this.childrenByName[id]) this.childrenByName[id] = c;

            // For certain HTML elements we check the name attribute
            var name = c.getAttribute('name');
            if (name && this.element.namespaceURI === NAMESPACE.HTML && namedElts.test(this.element.localName) && !this.childrenByName[name]) this.childrenByName[id] = c;
          }
        }
      }
    }
  }
});

// These functions return predicates for filtering elements.
// They're used by the Document and Element classes for methods like
// getElementsByTagName and getElementsByClassName

function localNameElementFilter(lname) {
  return function (e) {
    return e.localName === lname;
  };
}
function htmlLocalNameElementFilter(lname) {
  var lclname = utils.toASCIILowerCase(lname);
  if (lclname === lname) return localNameElementFilter(lname);
  return function (e) {
    return e.isHTML ? e.localName === lclname : e.localName === lname;
  };
}
function namespaceElementFilter(ns) {
  return function (e) {
    return e.namespaceURI === ns;
  };
}
function namespaceLocalNameElementFilter(ns, lname) {
  return function (e) {
    return e.namespaceURI === ns && e.localName === lname;
  };
}
function classNamesElementFilter(names) {
  return function (e) {
    return names.every(function (n) {
      return e.classList.contains(n);
    });
  };
}
function elementNameFilter(name) {
  return function (e) {
    // All the *HTML elements* in the document with the given name attribute
    if (e.namespaceURI !== NAMESPACE.HTML) {
      return false;
    }
    return e.getAttribute('name') === name;
  };
}

/***/ }),

/***/ 76165:
/*!******************************************!*\
  !*** ./node_modules/domino/lib/Event.js ***!
  \******************************************/
/***/ (function(module) {

"use strict";


module.exports = Event;
Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;
function Event(type, dictionary) {
  // Initialize basic event properties
  this.type = '';
  this.target = null;
  this.currentTarget = null;
  this.eventPhase = Event.AT_TARGET;
  this.bubbles = false;
  this.cancelable = false;
  this.isTrusted = false;
  this.defaultPrevented = false;
  this.timeStamp = Date.now();

  // Initialize internal flags
  // XXX: Would it be better to inherit these defaults from the prototype?
  this._propagationStopped = false;
  this._immediatePropagationStopped = false;
  this._initialized = true;
  this._dispatching = false;

  // Now initialize based on the constructor arguments (if any)
  if (type) this.type = type;
  if (dictionary) {
    for (var p in dictionary) {
      this[p] = dictionary[p];
    }
  }
}
Event.prototype = Object.create(Object.prototype, {
  constructor: {
    value: Event
  },
  stopPropagation: {
    value: function stopPropagation() {
      this._propagationStopped = true;
    }
  },
  stopImmediatePropagation: {
    value: function stopImmediatePropagation() {
      this._propagationStopped = true;
      this._immediatePropagationStopped = true;
    }
  },
  preventDefault: {
    value: function preventDefault() {
      if (this.cancelable) this.defaultPrevented = true;
    }
  },
  initEvent: {
    value: function initEvent(type, bubbles, cancelable) {
      this._initialized = true;
      if (this._dispatching) return;
      this._propagationStopped = false;
      this._immediatePropagationStopped = false;
      this.defaultPrevented = false;
      this.isTrusted = false;
      this.target = null;
      this.type = type;
      this.bubbles = bubbles;
      this.cancelable = cancelable;
    }
  }
});

/***/ }),

/***/ 36648:
/*!************************************************!*\
  !*** ./node_modules/domino/lib/EventTarget.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var Event = __webpack_require__(/*! ./Event */ 76165);
var MouseEvent = __webpack_require__(/*! ./MouseEvent */ 77068);
var utils = __webpack_require__(/*! ./utils */ 7976);
module.exports = EventTarget;
function EventTarget() {}
EventTarget.prototype = {
  // XXX
  // See WebIDL §4.8 for details on object event handlers
  // and how they should behave.  We actually have to accept
  // any object to addEventListener... Can't type check it.
  // on registration.

  // XXX:
  // Capturing event listeners are sort of rare.  I think I can optimize
  // them so that dispatchEvent can skip the capturing phase (or much of
  // it).  Each time a capturing listener is added, increment a flag on
  // the target node and each of its ancestors.  Decrement when removed.
  // And update the counter when nodes are added and removed from the
  // tree as well.  Then, in dispatch event, the capturing phase can
  // abort if it sees any node with a zero count.
  addEventListener: function addEventListener(type, listener, capture) {
    if (!listener) return;
    if (capture === undefined) capture = false;
    if (!this._listeners) this._listeners = Object.create(null);
    if (!this._listeners[type]) this._listeners[type] = [];
    var list = this._listeners[type];

    // If this listener has already been registered, just return
    for (var i = 0, n = list.length; i < n; i++) {
      var l = list[i];
      if (l.listener === listener && l.capture === capture) return;
    }

    // Add an object to the list of listeners
    var obj = {
      listener: listener,
      capture: capture
    };
    if (typeof listener === 'function') obj.f = listener;
    list.push(obj);
  },
  removeEventListener: function removeEventListener(type, listener, capture) {
    if (capture === undefined) capture = false;
    if (this._listeners) {
      var list = this._listeners[type];
      if (list) {
        // Find the listener in the list and remove it
        for (var i = 0, n = list.length; i < n; i++) {
          var l = list[i];
          if (l.listener === listener && l.capture === capture) {
            if (list.length === 1) {
              this._listeners[type] = undefined;
            } else {
              list.splice(i, 1);
            }
            return;
          }
        }
      }
    }
  },
  // This is the public API for dispatching untrusted public events.
  // See _dispatchEvent for the implementation
  dispatchEvent: function dispatchEvent(event) {
    // Dispatch an untrusted event
    return this._dispatchEvent(event, false);
  },
  //
  // See DOMCore §4.4
  // XXX: I'll probably need another version of this method for
  // internal use, one that does not set isTrusted to false.
  // XXX: see Document._dispatchEvent: perhaps that and this could
  // call a common internal function with different settings of
  // a trusted boolean argument
  //
  // XXX:
  // The spec has changed in how to deal with handlers registered
  // on idl or content attributes rather than with addEventListener.
  // Used to say that they always ran first.  That's how webkit does it
  // Spec now says that they run in a position determined by
  // when they were first set.  FF does it that way.  See:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#event-handlers
  //
  _dispatchEvent: function _dispatchEvent(event, trusted) {
    if (typeof trusted !== 'boolean') trusted = false;
    function invoke(target, event) {
      var type = event.type,
        phase = event.eventPhase;
      event.currentTarget = target;

      // If there was an individual handler defined, invoke it first
      // XXX: see comment above: this shouldn't always be first.
      if (phase !== Event.CAPTURING_PHASE && target._handlers && target._handlers[type]) {
        var handler = target._handlers[type];
        var rv;
        if (typeof handler === 'function') {
          rv = handler.call(event.currentTarget, event);
        } else {
          var f = handler.handleEvent;
          if (typeof f !== 'function') throw new TypeError('handleEvent property of ' + 'event handler object is' + 'not a function.');
          rv = f.call(handler, event);
        }
        switch (event.type) {
          case 'mouseover':
            if (rv === true)
              // Historical baggage
              event.preventDefault();
            break;
          case 'beforeunload':
          // XXX: eventually we need a special case here
          /* falls through */
          default:
            if (rv === false) event.preventDefault();
            break;
        }
      }

      // Now invoke list list of listeners for this target and type
      var list = target._listeners && target._listeners[type];
      if (!list) return;
      list = list.slice();
      for (var i = 0, n = list.length; i < n; i++) {
        if (event._immediatePropagationStopped) return;
        var l = list[i];
        if (phase === Event.CAPTURING_PHASE && !l.capture || phase === Event.BUBBLING_PHASE && l.capture) continue;
        if (l.f) {
          l.f.call(event.currentTarget, event);
        } else {
          var fn = l.listener.handleEvent;
          if (typeof fn !== 'function') throw new TypeError('handleEvent property of event listener object is not a function.');
          fn.call(l.listener, event);
        }
      }
    }
    if (!event._initialized || event._dispatching) utils.InvalidStateError();
    event.isTrusted = trusted;

    // Begin dispatching the event now
    event._dispatching = true;
    event.target = this;

    // Build the list of targets for the capturing and bubbling phases
    // XXX: we'll eventually have to add Window to this list.
    var ancestors = [];
    for (var n = this.parentNode; n; n = n.parentNode) ancestors.push(n);

    // Capturing phase
    event.eventPhase = Event.CAPTURING_PHASE;
    for (var i = ancestors.length - 1; i >= 0; i--) {
      invoke(ancestors[i], event);
      if (event._propagationStopped) break;
    }

    // At target phase
    if (!event._propagationStopped) {
      event.eventPhase = Event.AT_TARGET;
      invoke(this, event);
    }

    // Bubbling phase
    if (event.bubbles && !event._propagationStopped) {
      event.eventPhase = Event.BUBBLING_PHASE;
      for (var ii = 0, nn = ancestors.length; ii < nn; ii++) {
        invoke(ancestors[ii], event);
        if (event._propagationStopped) break;
      }
    }
    event._dispatching = false;
    event.eventPhase = Event.AT_TARGET;
    event.currentTarget = null;

    // Deal with mouse events and figure out when
    // a click has happened
    if (trusted && !event.defaultPrevented && event instanceof MouseEvent) {
      switch (event.type) {
        case 'mousedown':
          this._armed = {
            x: event.clientX,
            y: event.clientY,
            t: event.timeStamp
          };
          break;
        case 'mouseout':
        case 'mouseover':
          this._armed = null;
          break;
        case 'mouseup':
          if (this._isClick(event)) this._doClick(event);
          this._armed = null;
          break;
      }
    }
    return !event.defaultPrevented;
  },
  // Determine whether a click occurred
  // XXX We don't support double clicks for now
  _isClick: function (event) {
    return this._armed !== null && event.type === 'mouseup' && event.isTrusted && event.button === 0 && event.timeStamp - this._armed.t < 1000 && Math.abs(event.clientX - this._armed.x) < 10 && Math.abs(event.clientY - this._armed.Y) < 10;
  },
  // Clicks are handled like this:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#interactive-content-0
  //
  // Note that this method is similar to the HTMLElement.click() method
  // The event argument must be the trusted mouseup event
  _doClick: function (event) {
    if (this._click_in_progress) return;
    this._click_in_progress = true;

    // Find the nearest enclosing element that is activatable
    // An element is activatable if it has a
    // _post_click_activation_steps hook
    var activated = this;
    while (activated && !activated._post_click_activation_steps) activated = activated.parentNode;
    if (activated && activated._pre_click_activation_steps) {
      activated._pre_click_activation_steps();
    }
    var click = this.ownerDocument.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true, this.ownerDocument.defaultView, 1, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, null);
    var result = this._dispatchEvent(click, true);
    if (activated) {
      if (result) {
        // This is where hyperlinks get followed, for example.
        if (activated._post_click_activation_steps) activated._post_click_activation_steps(click);
      } else {
        if (activated._cancelled_activation_steps) activated._cancelled_activation_steps();
      }
    }
  },
  //
  // An event handler is like an event listener, but it registered
  // by setting an IDL or content attribute like onload or onclick.
  // There can only be one of these at a time for any event type.
  // This is an internal method for the attribute accessors and
  // content attribute handlers that need to register events handlers.
  // The type argument is the same as in addEventListener().
  // The handler argument is the same as listeners in addEventListener:
  // it can be a function or an object. Pass null to remove any existing
  // handler.  Handlers are always invoked before any listeners of
  // the same type.  They are not invoked during the capturing phase
  // of event dispatch.
  //
  _setEventHandler: function _setEventHandler(type, handler) {
    if (!this._handlers) this._handlers = Object.create(null);
    this._handlers[type] = handler;
  },
  _getEventHandler: function _getEventHandler(type) {
    return this._handlers && this._handlers[type] || null;
  }
};

/***/ }),

/***/ 46112:
/*!********************************************************!*\
  !*** ./node_modules/domino/lib/FilteredElementList.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = FilteredElementList;
var Node = __webpack_require__(/*! ./Node */ 88869);

//
// This file defines node list implementation that lazily traverses
// the document tree (or a subtree rooted at any element) and includes
// only those elements for which a specified filter function returns true.
// It is used to implement the
// {Document,Element}.getElementsBy{TagName,ClassName}{,NS} methods.
//
// XXX this should inherit from NodeList

function FilteredElementList(root, filter) {
  this.root = root;
  this.filter = filter;
  this.lastModTime = root.lastModTime;
  this.done = false;
  this.cache = [];
  this.traverse();
}
FilteredElementList.prototype = Object.create(Object.prototype, {
  length: {
    get: function () {
      this.checkcache();
      if (!this.done) this.traverse();
      return this.cache.length;
    }
  },
  item: {
    value: function (n) {
      this.checkcache();
      if (!this.done && n >= this.cache.length) {
        // This can lead to O(N^2) behavior if we stop when we get to n
        // and the caller is iterating through the items in order; so
        // be sure to do the full traverse here.
        this.traverse( /*n*/);
      }
      return this.cache[n];
    }
  },
  checkcache: {
    value: function () {
      if (this.lastModTime !== this.root.lastModTime) {
        // subtree has changed, so invalidate cache
        for (var i = this.cache.length - 1; i >= 0; i--) {
          this[i] = undefined;
        }
        this.cache.length = 0;
        this.done = false;
        this.lastModTime = this.root.lastModTime;
      }
    }
  },
  // If n is specified, then traverse the tree until we've found the nth
  // item (or until we've found all items).  If n is not specified,
  // traverse until we've found all items.
  traverse: {
    value: function (n) {
      // increment n so we can compare to length, and so it is never falsy
      if (n !== undefined) n++;
      var elt;
      while ((elt = this.next()) !== null) {
        this[this.cache.length] = elt; //XXX Use proxy instead
        this.cache.push(elt);
        if (n && this.cache.length === n) return;
      }

      // no next element, so we've found everything
      this.done = true;
    }
  },
  // Return the next element under root that matches filter
  next: {
    value: function () {
      var start = this.cache.length === 0 ? this.root // Start at the root or at
      : this.cache[this.cache.length - 1]; // the last element we found

      var elt;
      if (start.nodeType === Node.DOCUMENT_NODE) elt = start.documentElement;else elt = start.nextElement(this.root);
      while (elt) {
        if (this.filter(elt)) {
          return elt;
        }
        elt = elt.nextElement(this.root);
      }
      return null;
    }
  }
});

/***/ }),

/***/ 95643:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/HTMLParser.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = HTMLParser;
var Document = __webpack_require__(/*! ./Document */ 30168);
var DocumentType = __webpack_require__(/*! ./DocumentType */ 35840);
var Node = __webpack_require__(/*! ./Node */ 88869);
var NAMESPACE = (__webpack_require__(/*! ./utils */ 7976).NAMESPACE);
var html = __webpack_require__(/*! ./htmlelts */ 8024);
var impl = html.elements;
var pushAll = Function.prototype.apply.bind(Array.prototype.push);

/*
 * This file contains an implementation of the HTML parsing algorithm.
 * The algorithm and the implementation are complex because HTML
 * explicitly defines how the parser should behave for all possible
 * valid and invalid inputs.
 *
 * Usage:
 *
 * The file defines a single HTMLParser() function, which dom.js exposes
 * publicly as document.implementation.mozHTMLParser(). This is a
 * factory function, not a constructor.
 *
 * When you call document.implementation.mozHTMLParser(), it returns
 * an object that has parse() and document() methods. To parse HTML text,
 * pass the text (in one or more chunks) to the parse() method.  When
 * you've passed all the text (on the last chunk, or afterward) pass
 * true as the second argument to parse() to tell the parser that there
 * is no more coming. Call document() to get the document object that
 * the parser is parsing into.  You can call this at any time, before
 * or after calling parse().
 *
 * The first argument to mozHTMLParser is the absolute URL of the document.
 *
 * The second argument is optional and is for internal use only.  Pass an
 * element as the fragmentContext to do innerHTML parsing for the
 * element.  To do innerHTML parsing on a document, pass null. Otherwise,
 * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note
 * that if you pass a context element, the end() method will return an
 * unwrapped document instead of a wrapped one.
 *
 * Implementation details:
 *
 * This is a long file of almost 7000 lines. It is structured as one
 * big function nested within another big function.  The outer
 * function defines a bunch of constant data, utility functions
 * that use that data, and a couple of classes used by the parser.
 * The outer function also defines and returns the
 * inner function. This inner function is the HTMLParser factory
 * function that implements the parser and holds all the parser state
 * as local variables.  The HTMLParser function is quite big because
 * it defines many nested functions that use those local variables.
 *
 * There are three tightly coupled parser stages: a scanner, a
 * tokenizer and a tree builder. In a (possibly misguided) attempt at
 * efficiency, the stages are not implemented as separate classes:
 * everything shares state and is (mostly) implemented in imperative
 * (rather than OO) style.
 *
 * The stages of the parser work like this: When the client code calls
 * the parser's parse() method, the specified string is passed to
 * scanChars(). The scanner loops through that string and passes characters
 * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.
 * The tokenizer groups the characters into tokens: tags, endtags, runs
 * of text, comments, doctype declarations, and the end-of-file (EOF)
 * token.  These tokens are then passed to the tree building stage via
 * the insertToken() function.  The tree building stage builds up the
 * document tree.
 *
 * The tokenizer stage is a finite state machine.  Each state is
 * implemented as a function with a name that ends in "_state".  The
 * initial state is data_state(). The current tokenizer state is stored
 * in the variable 'tokenizer'.  Most state functions expect a single
 * integer argument which represents a single UTF-16 codepoint.  Some
 * states want more characters and set a lookahead property on
 * themselves.  The scanChars() function in the scanner checks for this
 * lookahead property.  If it doesn't exist, then scanChars() just passes
 * the next input character to the current tokenizer state function.
 * Otherwise, scanChars() looks ahead (a given # of characters, or for a
 * matching string, or for a matching regexp) and passes a string of
 * characters to the current tokenizer state function.
 *
 * As a shortcut, certain states of the tokenizer use regular expressions
 * to look ahead in the scanner's input buffer for runs of text, simple
 * tags and attributes.  For well-formed input, these shortcuts skip a
 * lot of state transitions and speed things up a bit.
 *
 * When a tokenizer state function has consumed a complete token, it
 * emits that token, by calling insertToken(), or by calling a utility
 * function that itself calls insertToken().  These tokens are passed to
 * the tree building stage, which is also a state machine.  Like the
 * tokenizer, the tree building states are implemented as functions, and
 * these functions have names that end with _mode (because the HTML spec
 * refers to them as insertion modes). The current insertion mode is held
 * by the 'parser' variable.  Each insertion mode function takes up to 4
 * arguments.  The first is a token type, represented by the constants
 * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is
 * the value of the token: the text or comment data, or tagname or
 * doctype.  For tags, the 3rd argument is an array of attributes.  For
 * DOCTYPES it is the optional public id.  For tags, the 4th argument is
 * true if the tag is self-closing. For doctypes, the 4th argument is the
 * optional system id.
 *
 * Search for "***" to find the major sub-divisions in the code.
 */

/***
 * Data prolog.  Lots of constants declared here, including some
 * very large objects.  They're used throughout the code that follows
 */
// Token types for the tree builder.
var EOF = -1;
var TEXT = 1;
var TAG = 2;
var ENDTAG = 3;
var COMMENT = 4;
var DOCTYPE = 5;

// A re-usable empty array
var NOATTRS = [];

// These DTD public ids put the browser in quirks mode
var quirkyPublicIds = /^HTML$|^-\/\/W3O\/\/DTD W3 HTML Strict 3\.0\/\/EN\/\/$|^-\/W3C\/DTD HTML 4\.0 Transitional\/EN$|^\+\/\/Silmaril\/\/dtd html Pro v0r11 19970101\/\/|^-\/\/AdvaSoft Ltd\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/AS\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict\/\/|^-\/\/IETF\/\/DTD HTML 2\.0\/\/|^-\/\/IETF\/\/DTD HTML 2\.1E\/\/|^-\/\/IETF\/\/DTD HTML 3\.0\/\/|^-\/\/IETF\/\/DTD HTML 3\.2 Final\/\/|^-\/\/IETF\/\/DTD HTML 3\.2\/\/|^-\/\/IETF\/\/DTD HTML 3\/\/|^-\/\/IETF\/\/DTD HTML Level 0\/\/|^-\/\/IETF\/\/DTD HTML Level 1\/\/|^-\/\/IETF\/\/DTD HTML Level 2\/\/|^-\/\/IETF\/\/DTD HTML Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 0\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict\/\/|^-\/\/IETF\/\/DTD HTML\/\/|^-\/\/Metrius\/\/DTD Metrius Presentational\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 Tables\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 Tables\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD HTML\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD Strict HTML\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML 2\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended 1\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended Relaxed 1\.0\/\/|^-\/\/SoftQuad Software\/\/DTD HoTMetaL PRO 6\.0::19990601::extensions to HTML 4\.0\/\/|^-\/\/SoftQuad\/\/DTD HoTMetaL PRO 4\.0::19971010::extensions to HTML 4\.0\/\/|^-\/\/Spyglass\/\/DTD HTML 2\.0 Extended\/\/|^-\/\/SQ\/\/DTD HTML 2\.0 HoTMetaL \+ extensions\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava HTML\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava Strict HTML\/\/|^-\/\/W3C\/\/DTD HTML 3 1995-03-24\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Draft\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Final\/\/|^-\/\/W3C\/\/DTD HTML 3\.2\/\/|^-\/\/W3C\/\/DTD HTML 3\.2S Draft\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Transitional\/\/|^-\/\/W3C\/\/DTD HTML Experimental 19960712\/\/|^-\/\/W3C\/\/DTD HTML Experimental 970421\/\/|^-\/\/W3C\/\/DTD W3 HTML\/\/|^-\/\/W3O\/\/DTD W3 HTML 3\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML 2\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML\/\//i;
var quirkySystemId = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
var conditionallyQuirkyPublicIds = /^-\/\/W3C\/\/DTD HTML 4\.01 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.01 Transitional\/\//i;

// These DTD public ids put the browser in limited quirks mode
var limitedQuirkyPublicIds = /^-\/\/W3C\/\/DTD XHTML 1\.0 Frameset\/\/|^-\/\/W3C\/\/DTD XHTML 1\.0 Transitional\/\//i;

// Element sets below. See the isA() function for a way to test
// whether an element is a member of a set
var specialSet = Object.create(null);
specialSet[NAMESPACE.HTML] = {
  __proto__: null,
  "address": true,
  "applet": true,
  "area": true,
  "article": true,
  "aside": true,
  "base": true,
  "basefont": true,
  "bgsound": true,
  "blockquote": true,
  "body": true,
  "br": true,
  "button": true,
  "caption": true,
  "center": true,
  "col": true,
  "colgroup": true,
  "dd": true,
  "details": true,
  "dir": true,
  "div": true,
  "dl": true,
  "dt": true,
  "embed": true,
  "fieldset": true,
  "figcaption": true,
  "figure": true,
  "footer": true,
  "form": true,
  "frame": true,
  "frameset": true,
  "h1": true,
  "h2": true,
  "h3": true,
  "h4": true,
  "h5": true,
  "h6": true,
  "head": true,
  "header": true,
  "hgroup": true,
  "hr": true,
  "html": true,
  "iframe": true,
  "img": true,
  "input": true,
  "li": true,
  "link": true,
  "listing": true,
  "main": true,
  "marquee": true,
  "menu": true,
  "meta": true,
  "nav": true,
  "noembed": true,
  "noframes": true,
  "noscript": true,
  "object": true,
  "ol": true,
  "p": true,
  "param": true,
  "plaintext": true,
  "pre": true,
  "script": true,
  "section": true,
  "select": true,
  "source": true,
  "style": true,
  "summary": true,
  "table": true,
  "tbody": true,
  "td": true,
  "template": true,
  "textarea": true,
  "tfoot": true,
  "th": true,
  "thead": true,
  "title": true,
  "tr": true,
  "track": true,
  // Note that "xmp" was removed from the "special" set in the latest
  // spec, apparently by accident; see
  // https://github.com/whatwg/html/pull/1919
  "ul": true,
  "wbr": true,
  "xmp": true
};
specialSet[NAMESPACE.SVG] = {
  __proto__: null,
  "foreignObject": true,
  "desc": true,
  "title": true
};
specialSet[NAMESPACE.MATHML] = {
  __proto__: null,
  "mi": true,
  "mo": true,
  "mn": true,
  "ms": true,
  "mtext": true,
  "annotation-xml": true
};

// The set of address, div, and p HTML tags
var addressdivpSet = Object.create(null);
addressdivpSet[NAMESPACE.HTML] = {
  __proto__: null,
  "address": true,
  "div": true,
  "p": true
};
var dddtSet = Object.create(null);
dddtSet[NAMESPACE.HTML] = {
  __proto__: null,
  "dd": true,
  "dt": true
};
var tablesectionrowSet = Object.create(null);
tablesectionrowSet[NAMESPACE.HTML] = {
  __proto__: null,
  "table": true,
  "thead": true,
  "tbody": true,
  "tfoot": true,
  "tr": true
};
var impliedEndTagsSet = Object.create(null);
impliedEndTagsSet[NAMESPACE.HTML] = {
  __proto__: null,
  "dd": true,
  "dt": true,
  "li": true,
  "menuitem": true,
  "optgroup": true,
  "option": true,
  "p": true,
  "rb": true,
  "rp": true,
  "rt": true,
  "rtc": true
};
var thoroughImpliedEndTagsSet = Object.create(null);
thoroughImpliedEndTagsSet[NAMESPACE.HTML] = {
  __proto__: null,
  "caption": true,
  "colgroup": true,
  "dd": true,
  "dt": true,
  "li": true,
  "optgroup": true,
  "option": true,
  "p": true,
  "rb": true,
  "rp": true,
  "rt": true,
  "rtc": true,
  "tbody": true,
  "td": true,
  "tfoot": true,
  "th": true,
  "thead": true,
  "tr": true
};
var tableContextSet = Object.create(null);
tableContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "table": true,
  "template": true,
  "html": true
};
var tableBodyContextSet = Object.create(null);
tableBodyContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "tbody": true,
  "tfoot": true,
  "thead": true,
  "template": true,
  "html": true
};
var tableRowContextSet = Object.create(null);
tableRowContextSet[NAMESPACE.HTML] = {
  __proto__: null,
  "tr": true,
  "template": true,
  "html": true
};

// See http://www.w3.org/TR/html5/forms.html#form-associated-element
var formassociatedSet = Object.create(null);
formassociatedSet[NAMESPACE.HTML] = {
  __proto__: null,
  "button": true,
  "fieldset": true,
  "input": true,
  "keygen": true,
  "object": true,
  "output": true,
  "select": true,
  "textarea": true,
  "img": true
};
var inScopeSet = Object.create(null);
inScopeSet[NAMESPACE.HTML] = {
  __proto__: null,
  "applet": true,
  "caption": true,
  "html": true,
  "table": true,
  "td": true,
  "th": true,
  "marquee": true,
  "object": true,
  "template": true
};
inScopeSet[NAMESPACE.MATHML] = {
  __proto__: null,
  "mi": true,
  "mo": true,
  "mn": true,
  "ms": true,
  "mtext": true,
  "annotation-xml": true
};
inScopeSet[NAMESPACE.SVG] = {
  __proto__: null,
  "foreignObject": true,
  "desc": true,
  "title": true
};
var inListItemScopeSet = Object.create(inScopeSet);
inListItemScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);
inListItemScopeSet[NAMESPACE.HTML].ol = true;
inListItemScopeSet[NAMESPACE.HTML].ul = true;
var inButtonScopeSet = Object.create(inScopeSet);
inButtonScopeSet[NAMESPACE.HTML] = Object.create(inScopeSet[NAMESPACE.HTML]);
inButtonScopeSet[NAMESPACE.HTML].button = true;
var inTableScopeSet = Object.create(null);
inTableScopeSet[NAMESPACE.HTML] = {
  __proto__: null,
  "html": true,
  "table": true,
  "template": true
};

// The set of elements for select scope is the everything *except* these
var invertedSelectScopeSet = Object.create(null);
invertedSelectScopeSet[NAMESPACE.HTML] = {
  __proto__: null,
  "optgroup": true,
  "option": true
};
var mathmlTextIntegrationPointSet = Object.create(null);
mathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {
  __proto__: null,
  mi: true,
  mo: true,
  mn: true,
  ms: true,
  mtext: true
};
var htmlIntegrationPointSet = Object.create(null);
htmlIntegrationPointSet[NAMESPACE.SVG] = {
  __proto__: null,
  foreignObject: true,
  desc: true,
  title: true
};
var foreignAttributes = {
  __proto__: null,
  "xlink:actuate": NAMESPACE.XLINK,
  "xlink:arcrole": NAMESPACE.XLINK,
  "xlink:href": NAMESPACE.XLINK,
  "xlink:role": NAMESPACE.XLINK,
  "xlink:show": NAMESPACE.XLINK,
  "xlink:title": NAMESPACE.XLINK,
  "xlink:type": NAMESPACE.XLINK,
  "xml:base": NAMESPACE.XML,
  "xml:lang": NAMESPACE.XML,
  "xml:space": NAMESPACE.XML,
  "xmlns": NAMESPACE.XMLNS,
  "xmlns:xlink": NAMESPACE.XMLNS
};

// Lowercase to mixed case mapping for SVG attributes and tagnames
var svgAttrAdjustments = {
  __proto__: null,
  attributename: "attributeName",
  attributetype: "attributeType",
  basefrequency: "baseFrequency",
  baseprofile: "baseProfile",
  calcmode: "calcMode",
  clippathunits: "clipPathUnits",
  diffuseconstant: "diffuseConstant",
  edgemode: "edgeMode",
  filterunits: "filterUnits",
  glyphref: "glyphRef",
  gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits",
  kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength",
  keypoints: "keyPoints",
  keysplines: "keySplines",
  keytimes: "keyTimes",
  lengthadjust: "lengthAdjust",
  limitingconeangle: "limitingConeAngle",
  markerheight: "markerHeight",
  markerunits: "markerUnits",
  markerwidth: "markerWidth",
  maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits",
  numoctaves: "numOctaves",
  pathlength: "pathLength",
  patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform",
  patternunits: "patternUnits",
  pointsatx: "pointsAtX",
  pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ",
  preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits",
  refx: "refX",
  refy: "refY",
  repeatcount: "repeatCount",
  repeatdur: "repeatDur",
  requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent",
  spreadmethod: "spreadMethod",
  startoffset: "startOffset",
  stddeviation: "stdDeviation",
  stitchtiles: "stitchTiles",
  surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage",
  tablevalues: "tableValues",
  targetx: "targetX",
  targety: "targetY",
  textlength: "textLength",
  viewbox: "viewBox",
  viewtarget: "viewTarget",
  xchannelselector: "xChannelSelector",
  ychannelselector: "yChannelSelector",
  zoomandpan: "zoomAndPan"
};
var svgTagNameAdjustments = {
  __proto__: null,
  altglyph: "altGlyph",
  altglyphdef: "altGlyphDef",
  altglyphitem: "altGlyphItem",
  animatecolor: "animateColor",
  animatemotion: "animateMotion",
  animatetransform: "animateTransform",
  clippath: "clipPath",
  feblend: "feBlend",
  fecolormatrix: "feColorMatrix",
  fecomponenttransfer: "feComponentTransfer",
  fecomposite: "feComposite",
  feconvolvematrix: "feConvolveMatrix",
  fediffuselighting: "feDiffuseLighting",
  fedisplacementmap: "feDisplacementMap",
  fedistantlight: "feDistantLight",
  feflood: "feFlood",
  fefunca: "feFuncA",
  fefuncb: "feFuncB",
  fefuncg: "feFuncG",
  fefuncr: "feFuncR",
  fegaussianblur: "feGaussianBlur",
  feimage: "feImage",
  femerge: "feMerge",
  femergenode: "feMergeNode",
  femorphology: "feMorphology",
  feoffset: "feOffset",
  fepointlight: "fePointLight",
  fespecularlighting: "feSpecularLighting",
  fespotlight: "feSpotLight",
  fetile: "feTile",
  feturbulence: "feTurbulence",
  foreignobject: "foreignObject",
  glyphref: "glyphRef",
  lineargradient: "linearGradient",
  radialgradient: "radialGradient",
  textpath: "textPath"
};

// Data for parsing numeric and named character references
// These next 3 objects are direct translations of tables
// in the HTML spec into JavaScript object format
var numericCharRefReplacements = {
  __proto__: null,
  0x00: 0xFFFD,
  0x80: 0x20AC,
  0x82: 0x201A,
  0x83: 0x0192,
  0x84: 0x201E,
  0x85: 0x2026,
  0x86: 0x2020,
  0x87: 0x2021,
  0x88: 0x02C6,
  0x89: 0x2030,
  0x8A: 0x0160,
  0x8B: 0x2039,
  0x8C: 0x0152,
  0x8E: 0x017D,
  0x91: 0x2018,
  0x92: 0x2019,
  0x93: 0x201C,
  0x94: 0x201D,
  0x95: 0x2022,
  0x96: 0x2013,
  0x97: 0x2014,
  0x98: 0x02DC,
  0x99: 0x2122,
  0x9A: 0x0161,
  0x9B: 0x203A,
  0x9C: 0x0153,
  0x9E: 0x017E,
  0x9F: 0x0178
};

/*
 * This table is generated with test/tools/update-entities.js
 */
var namedCharRefs = {
  __proto__: null,
  "AElig": 0xc6,
  "AElig;": 0xc6,
  "AMP": 0x26,
  "AMP;": 0x26,
  "Aacute": 0xc1,
  "Aacute;": 0xc1,
  "Abreve;": 0x102,
  "Acirc": 0xc2,
  "Acirc;": 0xc2,
  "Acy;": 0x410,
  "Afr;": [0xd835, 0xdd04],
  "Agrave": 0xc0,
  "Agrave;": 0xc0,
  "Alpha;": 0x391,
  "Amacr;": 0x100,
  "And;": 0x2a53,
  "Aogon;": 0x104,
  "Aopf;": [0xd835, 0xdd38],
  "ApplyFunction;": 0x2061,
  "Aring": 0xc5,
  "Aring;": 0xc5,
  "Ascr;": [0xd835, 0xdc9c],
  "Assign;": 0x2254,
  "Atilde": 0xc3,
  "Atilde;": 0xc3,
  "Auml": 0xc4,
  "Auml;": 0xc4,
  "Backslash;": 0x2216,
  "Barv;": 0x2ae7,
  "Barwed;": 0x2306,
  "Bcy;": 0x411,
  "Because;": 0x2235,
  "Bernoullis;": 0x212c,
  "Beta;": 0x392,
  "Bfr;": [0xd835, 0xdd05],
  "Bopf;": [0xd835, 0xdd39],
  "Breve;": 0x2d8,
  "Bscr;": 0x212c,
  "Bumpeq;": 0x224e,
  "CHcy;": 0x427,
  "COPY": 0xa9,
  "COPY;": 0xa9,
  "Cacute;": 0x106,
  "Cap;": 0x22d2,
  "CapitalDifferentialD;": 0x2145,
  "Cayleys;": 0x212d,
  "Ccaron;": 0x10c,
  "Ccedil": 0xc7,
  "Ccedil;": 0xc7,
  "Ccirc;": 0x108,
  "Cconint;": 0x2230,
  "Cdot;": 0x10a,
  "Cedilla;": 0xb8,
  "CenterDot;": 0xb7,
  "Cfr;": 0x212d,
  "Chi;": 0x3a7,
  "CircleDot;": 0x2299,
  "CircleMinus;": 0x2296,
  "CirclePlus;": 0x2295,
  "CircleTimes;": 0x2297,
  "ClockwiseContourIntegral;": 0x2232,
  "CloseCurlyDoubleQuote;": 0x201d,
  "CloseCurlyQuote;": 0x2019,
  "Colon;": 0x2237,
  "Colone;": 0x2a74,
  "Congruent;": 0x2261,
  "Conint;": 0x222f,
  "ContourIntegral;": 0x222e,
  "Copf;": 0x2102,
  "Coproduct;": 0x2210,
  "CounterClockwiseContourIntegral;": 0x2233,
  "Cross;": 0x2a2f,
  "Cscr;": [0xd835, 0xdc9e],
  "Cup;": 0x22d3,
  "CupCap;": 0x224d,
  "DD;": 0x2145,
  "DDotrahd;": 0x2911,
  "DJcy;": 0x402,
  "DScy;": 0x405,
  "DZcy;": 0x40f,
  "Dagger;": 0x2021,
  "Darr;": 0x21a1,
  "Dashv;": 0x2ae4,
  "Dcaron;": 0x10e,
  "Dcy;": 0x414,
  "Del;": 0x2207,
  "Delta;": 0x394,
  "Dfr;": [0xd835, 0xdd07],
  "DiacriticalAcute;": 0xb4,
  "DiacriticalDot;": 0x2d9,
  "DiacriticalDoubleAcute;": 0x2dd,
  "DiacriticalGrave;": 0x60,
  "DiacriticalTilde;": 0x2dc,
  "Diamond;": 0x22c4,
  "DifferentialD;": 0x2146,
  "Dopf;": [0xd835, 0xdd3b],
  "Dot;": 0xa8,
  "DotDot;": 0x20dc,
  "DotEqual;": 0x2250,
  "DoubleContourIntegral;": 0x222f,
  "DoubleDot;": 0xa8,
  "DoubleDownArrow;": 0x21d3,
  "DoubleLeftArrow;": 0x21d0,
  "DoubleLeftRightArrow;": 0x21d4,
  "DoubleLeftTee;": 0x2ae4,
  "DoubleLongLeftArrow;": 0x27f8,
  "DoubleLongLeftRightArrow;": 0x27fa,
  "DoubleLongRightArrow;": 0x27f9,
  "DoubleRightArrow;": 0x21d2,
  "DoubleRightTee;": 0x22a8,
  "DoubleUpArrow;": 0x21d1,
  "DoubleUpDownArrow;": 0x21d5,
  "DoubleVerticalBar;": 0x2225,
  "DownArrow;": 0x2193,
  "DownArrowBar;": 0x2913,
  "DownArrowUpArrow;": 0x21f5,
  "DownBreve;": 0x311,
  "DownLeftRightVector;": 0x2950,
  "DownLeftTeeVector;": 0x295e,
  "DownLeftVector;": 0x21bd,
  "DownLeftVectorBar;": 0x2956,
  "DownRightTeeVector;": 0x295f,
  "DownRightVector;": 0x21c1,
  "DownRightVectorBar;": 0x2957,
  "DownTee;": 0x22a4,
  "DownTeeArrow;": 0x21a7,
  "Downarrow;": 0x21d3,
  "Dscr;": [0xd835, 0xdc9f],
  "Dstrok;": 0x110,
  "ENG;": 0x14a,
  "ETH": 0xd0,
  "ETH;": 0xd0,
  "Eacute": 0xc9,
  "Eacute;": 0xc9,
  "Ecaron;": 0x11a,
  "Ecirc": 0xca,
  "Ecirc;": 0xca,
  "Ecy;": 0x42d,
  "Edot;": 0x116,
  "Efr;": [0xd835, 0xdd08],
  "Egrave": 0xc8,
  "Egrave;": 0xc8,
  "Element;": 0x2208,
  "Emacr;": 0x112,
  "EmptySmallSquare;": 0x25fb,
  "EmptyVerySmallSquare;": 0x25ab,
  "Eogon;": 0x118,
  "Eopf;": [0xd835, 0xdd3c],
  "Epsilon;": 0x395,
  "Equal;": 0x2a75,
  "EqualTilde;": 0x2242,
  "Equilibrium;": 0x21cc,
  "Escr;": 0x2130,
  "Esim;": 0x2a73,
  "Eta;": 0x397,
  "Euml": 0xcb,
  "Euml;": 0xcb,
  "Exists;": 0x2203,
  "ExponentialE;": 0x2147,
  "Fcy;": 0x424,
  "Ffr;": [0xd835, 0xdd09],
  "FilledSmallSquare;": 0x25fc,
  "FilledVerySmallSquare;": 0x25aa,
  "Fopf;": [0xd835, 0xdd3d],
  "ForAll;": 0x2200,
  "Fouriertrf;": 0x2131,
  "Fscr;": 0x2131,
  "GJcy;": 0x403,
  "GT": 0x3e,
  "GT;": 0x3e,
  "Gamma;": 0x393,
  "Gammad;": 0x3dc,
  "Gbreve;": 0x11e,
  "Gcedil;": 0x122,
  "Gcirc;": 0x11c,
  "Gcy;": 0x413,
  "Gdot;": 0x120,
  "Gfr;": [0xd835, 0xdd0a],
  "Gg;": 0x22d9,
  "Gopf;": [0xd835, 0xdd3e],
  "GreaterEqual;": 0x2265,
  "GreaterEqualLess;": 0x22db,
  "GreaterFullEqual;": 0x2267,
  "GreaterGreater;": 0x2aa2,
  "GreaterLess;": 0x2277,
  "GreaterSlantEqual;": 0x2a7e,
  "GreaterTilde;": 0x2273,
  "Gscr;": [0xd835, 0xdca2],
  "Gt;": 0x226b,
  "HARDcy;": 0x42a,
  "Hacek;": 0x2c7,
  "Hat;": 0x5e,
  "Hcirc;": 0x124,
  "Hfr;": 0x210c,
  "HilbertSpace;": 0x210b,
  "Hopf;": 0x210d,
  "HorizontalLine;": 0x2500,
  "Hscr;": 0x210b,
  "Hstrok;": 0x126,
  "HumpDownHump;": 0x224e,
  "HumpEqual;": 0x224f,
  "IEcy;": 0x415,
  "IJlig;": 0x132,
  "IOcy;": 0x401,
  "Iacute": 0xcd,
  "Iacute;": 0xcd,
  "Icirc": 0xce,
  "Icirc;": 0xce,
  "Icy;": 0x418,
  "Idot;": 0x130,
  "Ifr;": 0x2111,
  "Igrave": 0xcc,
  "Igrave;": 0xcc,
  "Im;": 0x2111,
  "Imacr;": 0x12a,
  "ImaginaryI;": 0x2148,
  "Implies;": 0x21d2,
  "Int;": 0x222c,
  "Integral;": 0x222b,
  "Intersection;": 0x22c2,
  "InvisibleComma;": 0x2063,
  "InvisibleTimes;": 0x2062,
  "Iogon;": 0x12e,
  "Iopf;": [0xd835, 0xdd40],
  "Iota;": 0x399,
  "Iscr;": 0x2110,
  "Itilde;": 0x128,
  "Iukcy;": 0x406,
  "Iuml": 0xcf,
  "Iuml;": 0xcf,
  "Jcirc;": 0x134,
  "Jcy;": 0x419,
  "Jfr;": [0xd835, 0xdd0d],
  "Jopf;": [0xd835, 0xdd41],
  "Jscr;": [0xd835, 0xdca5],
  "Jsercy;": 0x408,
  "Jukcy;": 0x404,
  "KHcy;": 0x425,
  "KJcy;": 0x40c,
  "Kappa;": 0x39a,
  "Kcedil;": 0x136,
  "Kcy;": 0x41a,
  "Kfr;": [0xd835, 0xdd0e],
  "Kopf;": [0xd835, 0xdd42],
  "Kscr;": [0xd835, 0xdca6],
  "LJcy;": 0x409,
  "LT": 0x3c,
  "LT;": 0x3c,
  "Lacute;": 0x139,
  "Lambda;": 0x39b,
  "Lang;": 0x27ea,
  "Laplacetrf;": 0x2112,
  "Larr;": 0x219e,
  "Lcaron;": 0x13d,
  "Lcedil;": 0x13b,
  "Lcy;": 0x41b,
  "LeftAngleBracket;": 0x27e8,
  "LeftArrow;": 0x2190,
  "LeftArrowBar;": 0x21e4,
  "LeftArrowRightArrow;": 0x21c6,
  "LeftCeiling;": 0x2308,
  "LeftDoubleBracket;": 0x27e6,
  "LeftDownTeeVector;": 0x2961,
  "LeftDownVector;": 0x21c3,
  "LeftDownVectorBar;": 0x2959,
  "LeftFloor;": 0x230a,
  "LeftRightArrow;": 0x2194,
  "LeftRightVector;": 0x294e,
  "LeftTee;": 0x22a3,
  "LeftTeeArrow;": 0x21a4,
  "LeftTeeVector;": 0x295a,
  "LeftTriangle;": 0x22b2,
  "LeftTriangleBar;": 0x29cf,
  "LeftTriangleEqual;": 0x22b4,
  "LeftUpDownVector;": 0x2951,
  "LeftUpTeeVector;": 0x2960,
  "LeftUpVector;": 0x21bf,
  "LeftUpVectorBar;": 0x2958,
  "LeftVector;": 0x21bc,
  "LeftVectorBar;": 0x2952,
  "Leftarrow;": 0x21d0,
  "Leftrightarrow;": 0x21d4,
  "LessEqualGreater;": 0x22da,
  "LessFullEqual;": 0x2266,
  "LessGreater;": 0x2276,
  "LessLess;": 0x2aa1,
  "LessSlantEqual;": 0x2a7d,
  "LessTilde;": 0x2272,
  "Lfr;": [0xd835, 0xdd0f],
  "Ll;": 0x22d8,
  "Lleftarrow;": 0x21da,
  "Lmidot;": 0x13f,
  "LongLeftArrow;": 0x27f5,
  "LongLeftRightArrow;": 0x27f7,
  "LongRightArrow;": 0x27f6,
  "Longleftarrow;": 0x27f8,
  "Longleftrightarrow;": 0x27fa,
  "Longrightarrow;": 0x27f9,
  "Lopf;": [0xd835, 0xdd43],
  "LowerLeftArrow;": 0x2199,
  "LowerRightArrow;": 0x2198,
  "Lscr;": 0x2112,
  "Lsh;": 0x21b0,
  "Lstrok;": 0x141,
  "Lt;": 0x226a,
  "Map;": 0x2905,
  "Mcy;": 0x41c,
  "MediumSpace;": 0x205f,
  "Mellintrf;": 0x2133,
  "Mfr;": [0xd835, 0xdd10],
  "MinusPlus;": 0x2213,
  "Mopf;": [0xd835, 0xdd44],
  "Mscr;": 0x2133,
  "Mu;": 0x39c,
  "NJcy;": 0x40a,
  "Nacute;": 0x143,
  "Ncaron;": 0x147,
  "Ncedil;": 0x145,
  "Ncy;": 0x41d,
  "NegativeMediumSpace;": 0x200b,
  "NegativeThickSpace;": 0x200b,
  "NegativeThinSpace;": 0x200b,
  "NegativeVeryThinSpace;": 0x200b,
  "NestedGreaterGreater;": 0x226b,
  "NestedLessLess;": 0x226a,
  "NewLine;": 0xa,
  "Nfr;": [0xd835, 0xdd11],
  "NoBreak;": 0x2060,
  "NonBreakingSpace;": 0xa0,
  "Nopf;": 0x2115,
  "Not;": 0x2aec,
  "NotCongruent;": 0x2262,
  "NotCupCap;": 0x226d,
  "NotDoubleVerticalBar;": 0x2226,
  "NotElement;": 0x2209,
  "NotEqual;": 0x2260,
  "NotEqualTilde;": [0x2242, 0x338],
  "NotExists;": 0x2204,
  "NotGreater;": 0x226f,
  "NotGreaterEqual;": 0x2271,
  "NotGreaterFullEqual;": [0x2267, 0x338],
  "NotGreaterGreater;": [0x226b, 0x338],
  "NotGreaterLess;": 0x2279,
  "NotGreaterSlantEqual;": [0x2a7e, 0x338],
  "NotGreaterTilde;": 0x2275,
  "NotHumpDownHump;": [0x224e, 0x338],
  "NotHumpEqual;": [0x224f, 0x338],
  "NotLeftTriangle;": 0x22ea,
  "NotLeftTriangleBar;": [0x29cf, 0x338],
  "NotLeftTriangleEqual;": 0x22ec,
  "NotLess;": 0x226e,
  "NotLessEqual;": 0x2270,
  "NotLessGreater;": 0x2278,
  "NotLessLess;": [0x226a, 0x338],
  "NotLessSlantEqual;": [0x2a7d, 0x338],
  "NotLessTilde;": 0x2274,
  "NotNestedGreaterGreater;": [0x2aa2, 0x338],
  "NotNestedLessLess;": [0x2aa1, 0x338],
  "NotPrecedes;": 0x2280,
  "NotPrecedesEqual;": [0x2aaf, 0x338],
  "NotPrecedesSlantEqual;": 0x22e0,
  "NotReverseElement;": 0x220c,
  "NotRightTriangle;": 0x22eb,
  "NotRightTriangleBar;": [0x29d0, 0x338],
  "NotRightTriangleEqual;": 0x22ed,
  "NotSquareSubset;": [0x228f, 0x338],
  "NotSquareSubsetEqual;": 0x22e2,
  "NotSquareSuperset;": [0x2290, 0x338],
  "NotSquareSupersetEqual;": 0x22e3,
  "NotSubset;": [0x2282, 0x20d2],
  "NotSubsetEqual;": 0x2288,
  "NotSucceeds;": 0x2281,
  "NotSucceedsEqual;": [0x2ab0, 0x338],
  "NotSucceedsSlantEqual;": 0x22e1,
  "NotSucceedsTilde;": [0x227f, 0x338],
  "NotSuperset;": [0x2283, 0x20d2],
  "NotSupersetEqual;": 0x2289,
  "NotTilde;": 0x2241,
  "NotTildeEqual;": 0x2244,
  "NotTildeFullEqual;": 0x2247,
  "NotTildeTilde;": 0x2249,
  "NotVerticalBar;": 0x2224,
  "Nscr;": [0xd835, 0xdca9],
  "Ntilde": 0xd1,
  "Ntilde;": 0xd1,
  "Nu;": 0x39d,
  "OElig;": 0x152,
  "Oacute": 0xd3,
  "Oacute;": 0xd3,
  "Ocirc": 0xd4,
  "Ocirc;": 0xd4,
  "Ocy;": 0x41e,
  "Odblac;": 0x150,
  "Ofr;": [0xd835, 0xdd12],
  "Ograve": 0xd2,
  "Ograve;": 0xd2,
  "Omacr;": 0x14c,
  "Omega;": 0x3a9,
  "Omicron;": 0x39f,
  "Oopf;": [0xd835, 0xdd46],
  "OpenCurlyDoubleQuote;": 0x201c,
  "OpenCurlyQuote;": 0x2018,
  "Or;": 0x2a54,
  "Oscr;": [0xd835, 0xdcaa],
  "Oslash": 0xd8,
  "Oslash;": 0xd8,
  "Otilde": 0xd5,
  "Otilde;": 0xd5,
  "Otimes;": 0x2a37,
  "Ouml": 0xd6,
  "Ouml;": 0xd6,
  "OverBar;": 0x203e,
  "OverBrace;": 0x23de,
  "OverBracket;": 0x23b4,
  "OverParenthesis;": 0x23dc,
  "PartialD;": 0x2202,
  "Pcy;": 0x41f,
  "Pfr;": [0xd835, 0xdd13],
  "Phi;": 0x3a6,
  "Pi;": 0x3a0,
  "PlusMinus;": 0xb1,
  "Poincareplane;": 0x210c,
  "Popf;": 0x2119,
  "Pr;": 0x2abb,
  "Precedes;": 0x227a,
  "PrecedesEqual;": 0x2aaf,
  "PrecedesSlantEqual;": 0x227c,
  "PrecedesTilde;": 0x227e,
  "Prime;": 0x2033,
  "Product;": 0x220f,
  "Proportion;": 0x2237,
  "Proportional;": 0x221d,
  "Pscr;": [0xd835, 0xdcab],
  "Psi;": 0x3a8,
  "QUOT": 0x22,
  "QUOT;": 0x22,
  "Qfr;": [0xd835, 0xdd14],
  "Qopf;": 0x211a,
  "Qscr;": [0xd835, 0xdcac],
  "RBarr;": 0x2910,
  "REG": 0xae,
  "REG;": 0xae,
  "Racute;": 0x154,
  "Rang;": 0x27eb,
  "Rarr;": 0x21a0,
  "Rarrtl;": 0x2916,
  "Rcaron;": 0x158,
  "Rcedil;": 0x156,
  "Rcy;": 0x420,
  "Re;": 0x211c,
  "ReverseElement;": 0x220b,
  "ReverseEquilibrium;": 0x21cb,
  "ReverseUpEquilibrium;": 0x296f,
  "Rfr;": 0x211c,
  "Rho;": 0x3a1,
  "RightAngleBracket;": 0x27e9,
  "RightArrow;": 0x2192,
  "RightArrowBar;": 0x21e5,
  "RightArrowLeftArrow;": 0x21c4,
  "RightCeiling;": 0x2309,
  "RightDoubleBracket;": 0x27e7,
  "RightDownTeeVector;": 0x295d,
  "RightDownVector;": 0x21c2,
  "RightDownVectorBar;": 0x2955,
  "RightFloor;": 0x230b,
  "RightTee;": 0x22a2,
  "RightTeeArrow;": 0x21a6,
  "RightTeeVector;": 0x295b,
  "RightTriangle;": 0x22b3,
  "RightTriangleBar;": 0x29d0,
  "RightTriangleEqual;": 0x22b5,
  "RightUpDownVector;": 0x294f,
  "RightUpTeeVector;": 0x295c,
  "RightUpVector;": 0x21be,
  "RightUpVectorBar;": 0x2954,
  "RightVector;": 0x21c0,
  "RightVectorBar;": 0x2953,
  "Rightarrow;": 0x21d2,
  "Ropf;": 0x211d,
  "RoundImplies;": 0x2970,
  "Rrightarrow;": 0x21db,
  "Rscr;": 0x211b,
  "Rsh;": 0x21b1,
  "RuleDelayed;": 0x29f4,
  "SHCHcy;": 0x429,
  "SHcy;": 0x428,
  "SOFTcy;": 0x42c,
  "Sacute;": 0x15a,
  "Sc;": 0x2abc,
  "Scaron;": 0x160,
  "Scedil;": 0x15e,
  "Scirc;": 0x15c,
  "Scy;": 0x421,
  "Sfr;": [0xd835, 0xdd16],
  "ShortDownArrow;": 0x2193,
  "ShortLeftArrow;": 0x2190,
  "ShortRightArrow;": 0x2192,
  "ShortUpArrow;": 0x2191,
  "Sigma;": 0x3a3,
  "SmallCircle;": 0x2218,
  "Sopf;": [0xd835, 0xdd4a],
  "Sqrt;": 0x221a,
  "Square;": 0x25a1,
  "SquareIntersection;": 0x2293,
  "SquareSubset;": 0x228f,
  "SquareSubsetEqual;": 0x2291,
  "SquareSuperset;": 0x2290,
  "SquareSupersetEqual;": 0x2292,
  "SquareUnion;": 0x2294,
  "Sscr;": [0xd835, 0xdcae],
  "Star;": 0x22c6,
  "Sub;": 0x22d0,
  "Subset;": 0x22d0,
  "SubsetEqual;": 0x2286,
  "Succeeds;": 0x227b,
  "SucceedsEqual;": 0x2ab0,
  "SucceedsSlantEqual;": 0x227d,
  "SucceedsTilde;": 0x227f,
  "SuchThat;": 0x220b,
  "Sum;": 0x2211,
  "Sup;": 0x22d1,
  "Superset;": 0x2283,
  "SupersetEqual;": 0x2287,
  "Supset;": 0x22d1,
  "THORN": 0xde,
  "THORN;": 0xde,
  "TRADE;": 0x2122,
  "TSHcy;": 0x40b,
  "TScy;": 0x426,
  "Tab;": 0x9,
  "Tau;": 0x3a4,
  "Tcaron;": 0x164,
  "Tcedil;": 0x162,
  "Tcy;": 0x422,
  "Tfr;": [0xd835, 0xdd17],
  "Therefore;": 0x2234,
  "Theta;": 0x398,
  "ThickSpace;": [0x205f, 0x200a],
  "ThinSpace;": 0x2009,
  "Tilde;": 0x223c,
  "TildeEqual;": 0x2243,
  "TildeFullEqual;": 0x2245,
  "TildeTilde;": 0x2248,
  "Topf;": [0xd835, 0xdd4b],
  "TripleDot;": 0x20db,
  "Tscr;": [0xd835, 0xdcaf],
  "Tstrok;": 0x166,
  "Uacute": 0xda,
  "Uacute;": 0xda,
  "Uarr;": 0x219f,
  "Uarrocir;": 0x2949,
  "Ubrcy;": 0x40e,
  "Ubreve;": 0x16c,
  "Ucirc": 0xdb,
  "Ucirc;": 0xdb,
  "Ucy;": 0x423,
  "Udblac;": 0x170,
  "Ufr;": [0xd835, 0xdd18],
  "Ugrave": 0xd9,
  "Ugrave;": 0xd9,
  "Umacr;": 0x16a,
  "UnderBar;": 0x5f,
  "UnderBrace;": 0x23df,
  "UnderBracket;": 0x23b5,
  "UnderParenthesis;": 0x23dd,
  "Union;": 0x22c3,
  "UnionPlus;": 0x228e,
  "Uogon;": 0x172,
  "Uopf;": [0xd835, 0xdd4c],
  "UpArrow;": 0x2191,
  "UpArrowBar;": 0x2912,
  "UpArrowDownArrow;": 0x21c5,
  "UpDownArrow;": 0x2195,
  "UpEquilibrium;": 0x296e,
  "UpTee;": 0x22a5,
  "UpTeeArrow;": 0x21a5,
  "Uparrow;": 0x21d1,
  "Updownarrow;": 0x21d5,
  "UpperLeftArrow;": 0x2196,
  "UpperRightArrow;": 0x2197,
  "Upsi;": 0x3d2,
  "Upsilon;": 0x3a5,
  "Uring;": 0x16e,
  "Uscr;": [0xd835, 0xdcb0],
  "Utilde;": 0x168,
  "Uuml": 0xdc,
  "Uuml;": 0xdc,
  "VDash;": 0x22ab,
  "Vbar;": 0x2aeb,
  "Vcy;": 0x412,
  "Vdash;": 0x22a9,
  "Vdashl;": 0x2ae6,
  "Vee;": 0x22c1,
  "Verbar;": 0x2016,
  "Vert;": 0x2016,
  "VerticalBar;": 0x2223,
  "VerticalLine;": 0x7c,
  "VerticalSeparator;": 0x2758,
  "VerticalTilde;": 0x2240,
  "VeryThinSpace;": 0x200a,
  "Vfr;": [0xd835, 0xdd19],
  "Vopf;": [0xd835, 0xdd4d],
  "Vscr;": [0xd835, 0xdcb1],
  "Vvdash;": 0x22aa,
  "Wcirc;": 0x174,
  "Wedge;": 0x22c0,
  "Wfr;": [0xd835, 0xdd1a],
  "Wopf;": [0xd835, 0xdd4e],
  "Wscr;": [0xd835, 0xdcb2],
  "Xfr;": [0xd835, 0xdd1b],
  "Xi;": 0x39e,
  "Xopf;": [0xd835, 0xdd4f],
  "Xscr;": [0xd835, 0xdcb3],
  "YAcy;": 0x42f,
  "YIcy;": 0x407,
  "YUcy;": 0x42e,
  "Yacute": 0xdd,
  "Yacute;": 0xdd,
  "Ycirc;": 0x176,
  "Ycy;": 0x42b,
  "Yfr;": [0xd835, 0xdd1c],
  "Yopf;": [0xd835, 0xdd50],
  "Yscr;": [0xd835, 0xdcb4],
  "Yuml;": 0x178,
  "ZHcy;": 0x416,
  "Zacute;": 0x179,
  "Zcaron;": 0x17d,
  "Zcy;": 0x417,
  "Zdot;": 0x17b,
  "ZeroWidthSpace;": 0x200b,
  "Zeta;": 0x396,
  "Zfr;": 0x2128,
  "Zopf;": 0x2124,
  "Zscr;": [0xd835, 0xdcb5],
  "aacute": 0xe1,
  "aacute;": 0xe1,
  "abreve;": 0x103,
  "ac;": 0x223e,
  "acE;": [0x223e, 0x333],
  "acd;": 0x223f,
  "acirc": 0xe2,
  "acirc;": 0xe2,
  "acute": 0xb4,
  "acute;": 0xb4,
  "acy;": 0x430,
  "aelig": 0xe6,
  "aelig;": 0xe6,
  "af;": 0x2061,
  "afr;": [0xd835, 0xdd1e],
  "agrave": 0xe0,
  "agrave;": 0xe0,
  "alefsym;": 0x2135,
  "aleph;": 0x2135,
  "alpha;": 0x3b1,
  "amacr;": 0x101,
  "amalg;": 0x2a3f,
  "amp": 0x26,
  "amp;": 0x26,
  "and;": 0x2227,
  "andand;": 0x2a55,
  "andd;": 0x2a5c,
  "andslope;": 0x2a58,
  "andv;": 0x2a5a,
  "ang;": 0x2220,
  "ange;": 0x29a4,
  "angle;": 0x2220,
  "angmsd;": 0x2221,
  "angmsdaa;": 0x29a8,
  "angmsdab;": 0x29a9,
  "angmsdac;": 0x29aa,
  "angmsdad;": 0x29ab,
  "angmsdae;": 0x29ac,
  "angmsdaf;": 0x29ad,
  "angmsdag;": 0x29ae,
  "angmsdah;": 0x29af,
  "angrt;": 0x221f,
  "angrtvb;": 0x22be,
  "angrtvbd;": 0x299d,
  "angsph;": 0x2222,
  "angst;": 0xc5,
  "angzarr;": 0x237c,
  "aogon;": 0x105,
  "aopf;": [0xd835, 0xdd52],
  "ap;": 0x2248,
  "apE;": 0x2a70,
  "apacir;": 0x2a6f,
  "ape;": 0x224a,
  "apid;": 0x224b,
  "apos;": 0x27,
  "approx;": 0x2248,
  "approxeq;": 0x224a,
  "aring": 0xe5,
  "aring;": 0xe5,
  "ascr;": [0xd835, 0xdcb6],
  "ast;": 0x2a,
  "asymp;": 0x2248,
  "asympeq;": 0x224d,
  "atilde": 0xe3,
  "atilde;": 0xe3,
  "auml": 0xe4,
  "auml;": 0xe4,
  "awconint;": 0x2233,
  "awint;": 0x2a11,
  "bNot;": 0x2aed,
  "backcong;": 0x224c,
  "backepsilon;": 0x3f6,
  "backprime;": 0x2035,
  "backsim;": 0x223d,
  "backsimeq;": 0x22cd,
  "barvee;": 0x22bd,
  "barwed;": 0x2305,
  "barwedge;": 0x2305,
  "bbrk;": 0x23b5,
  "bbrktbrk;": 0x23b6,
  "bcong;": 0x224c,
  "bcy;": 0x431,
  "bdquo;": 0x201e,
  "becaus;": 0x2235,
  "because;": 0x2235,
  "bemptyv;": 0x29b0,
  "bepsi;": 0x3f6,
  "bernou;": 0x212c,
  "beta;": 0x3b2,
  "beth;": 0x2136,
  "between;": 0x226c,
  "bfr;": [0xd835, 0xdd1f],
  "bigcap;": 0x22c2,
  "bigcirc;": 0x25ef,
  "bigcup;": 0x22c3,
  "bigodot;": 0x2a00,
  "bigoplus;": 0x2a01,
  "bigotimes;": 0x2a02,
  "bigsqcup;": 0x2a06,
  "bigstar;": 0x2605,
  "bigtriangledown;": 0x25bd,
  "bigtriangleup;": 0x25b3,
  "biguplus;": 0x2a04,
  "bigvee;": 0x22c1,
  "bigwedge;": 0x22c0,
  "bkarow;": 0x290d,
  "blacklozenge;": 0x29eb,
  "blacksquare;": 0x25aa,
  "blacktriangle;": 0x25b4,
  "blacktriangledown;": 0x25be,
  "blacktriangleleft;": 0x25c2,
  "blacktriangleright;": 0x25b8,
  "blank;": 0x2423,
  "blk12;": 0x2592,
  "blk14;": 0x2591,
  "blk34;": 0x2593,
  "block;": 0x2588,
  "bne;": [0x3d, 0x20e5],
  "bnequiv;": [0x2261, 0x20e5],
  "bnot;": 0x2310,
  "bopf;": [0xd835, 0xdd53],
  "bot;": 0x22a5,
  "bottom;": 0x22a5,
  "bowtie;": 0x22c8,
  "boxDL;": 0x2557,
  "boxDR;": 0x2554,
  "boxDl;": 0x2556,
  "boxDr;": 0x2553,
  "boxH;": 0x2550,
  "boxHD;": 0x2566,
  "boxHU;": 0x2569,
  "boxHd;": 0x2564,
  "boxHu;": 0x2567,
  "boxUL;": 0x255d,
  "boxUR;": 0x255a,
  "boxUl;": 0x255c,
  "boxUr;": 0x2559,
  "boxV;": 0x2551,
  "boxVH;": 0x256c,
  "boxVL;": 0x2563,
  "boxVR;": 0x2560,
  "boxVh;": 0x256b,
  "boxVl;": 0x2562,
  "boxVr;": 0x255f,
  "boxbox;": 0x29c9,
  "boxdL;": 0x2555,
  "boxdR;": 0x2552,
  "boxdl;": 0x2510,
  "boxdr;": 0x250c,
  "boxh;": 0x2500,
  "boxhD;": 0x2565,
  "boxhU;": 0x2568,
  "boxhd;": 0x252c,
  "boxhu;": 0x2534,
  "boxminus;": 0x229f,
  "boxplus;": 0x229e,
  "boxtimes;": 0x22a0,
  "boxuL;": 0x255b,
  "boxuR;": 0x2558,
  "boxul;": 0x2518,
  "boxur;": 0x2514,
  "boxv;": 0x2502,
  "boxvH;": 0x256a,
  "boxvL;": 0x2561,
  "boxvR;": 0x255e,
  "boxvh;": 0x253c,
  "boxvl;": 0x2524,
  "boxvr;": 0x251c,
  "bprime;": 0x2035,
  "breve;": 0x2d8,
  "brvbar": 0xa6,
  "brvbar;": 0xa6,
  "bscr;": [0xd835, 0xdcb7],
  "bsemi;": 0x204f,
  "bsim;": 0x223d,
  "bsime;": 0x22cd,
  "bsol;": 0x5c,
  "bsolb;": 0x29c5,
  "bsolhsub;": 0x27c8,
  "bull;": 0x2022,
  "bullet;": 0x2022,
  "bump;": 0x224e,
  "bumpE;": 0x2aae,
  "bumpe;": 0x224f,
  "bumpeq;": 0x224f,
  "cacute;": 0x107,
  "cap;": 0x2229,
  "capand;": 0x2a44,
  "capbrcup;": 0x2a49,
  "capcap;": 0x2a4b,
  "capcup;": 0x2a47,
  "capdot;": 0x2a40,
  "caps;": [0x2229, 0xfe00],
  "caret;": 0x2041,
  "caron;": 0x2c7,
  "ccaps;": 0x2a4d,
  "ccaron;": 0x10d,
  "ccedil": 0xe7,
  "ccedil;": 0xe7,
  "ccirc;": 0x109,
  "ccups;": 0x2a4c,
  "ccupssm;": 0x2a50,
  "cdot;": 0x10b,
  "cedil": 0xb8,
  "cedil;": 0xb8,
  "cemptyv;": 0x29b2,
  "cent": 0xa2,
  "cent;": 0xa2,
  "centerdot;": 0xb7,
  "cfr;": [0xd835, 0xdd20],
  "chcy;": 0x447,
  "check;": 0x2713,
  "checkmark;": 0x2713,
  "chi;": 0x3c7,
  "cir;": 0x25cb,
  "cirE;": 0x29c3,
  "circ;": 0x2c6,
  "circeq;": 0x2257,
  "circlearrowleft;": 0x21ba,
  "circlearrowright;": 0x21bb,
  "circledR;": 0xae,
  "circledS;": 0x24c8,
  "circledast;": 0x229b,
  "circledcirc;": 0x229a,
  "circleddash;": 0x229d,
  "cire;": 0x2257,
  "cirfnint;": 0x2a10,
  "cirmid;": 0x2aef,
  "cirscir;": 0x29c2,
  "clubs;": 0x2663,
  "clubsuit;": 0x2663,
  "colon;": 0x3a,
  "colone;": 0x2254,
  "coloneq;": 0x2254,
  "comma;": 0x2c,
  "commat;": 0x40,
  "comp;": 0x2201,
  "compfn;": 0x2218,
  "complement;": 0x2201,
  "complexes;": 0x2102,
  "cong;": 0x2245,
  "congdot;": 0x2a6d,
  "conint;": 0x222e,
  "copf;": [0xd835, 0xdd54],
  "coprod;": 0x2210,
  "copy": 0xa9,
  "copy;": 0xa9,
  "copysr;": 0x2117,
  "crarr;": 0x21b5,
  "cross;": 0x2717,
  "cscr;": [0xd835, 0xdcb8],
  "csub;": 0x2acf,
  "csube;": 0x2ad1,
  "csup;": 0x2ad0,
  "csupe;": 0x2ad2,
  "ctdot;": 0x22ef,
  "cudarrl;": 0x2938,
  "cudarrr;": 0x2935,
  "cuepr;": 0x22de,
  "cuesc;": 0x22df,
  "cularr;": 0x21b6,
  "cularrp;": 0x293d,
  "cup;": 0x222a,
  "cupbrcap;": 0x2a48,
  "cupcap;": 0x2a46,
  "cupcup;": 0x2a4a,
  "cupdot;": 0x228d,
  "cupor;": 0x2a45,
  "cups;": [0x222a, 0xfe00],
  "curarr;": 0x21b7,
  "curarrm;": 0x293c,
  "curlyeqprec;": 0x22de,
  "curlyeqsucc;": 0x22df,
  "curlyvee;": 0x22ce,
  "curlywedge;": 0x22cf,
  "curren": 0xa4,
  "curren;": 0xa4,
  "curvearrowleft;": 0x21b6,
  "curvearrowright;": 0x21b7,
  "cuvee;": 0x22ce,
  "cuwed;": 0x22cf,
  "cwconint;": 0x2232,
  "cwint;": 0x2231,
  "cylcty;": 0x232d,
  "dArr;": 0x21d3,
  "dHar;": 0x2965,
  "dagger;": 0x2020,
  "daleth;": 0x2138,
  "darr;": 0x2193,
  "dash;": 0x2010,
  "dashv;": 0x22a3,
  "dbkarow;": 0x290f,
  "dblac;": 0x2dd,
  "dcaron;": 0x10f,
  "dcy;": 0x434,
  "dd;": 0x2146,
  "ddagger;": 0x2021,
  "ddarr;": 0x21ca,
  "ddotseq;": 0x2a77,
  "deg": 0xb0,
  "deg;": 0xb0,
  "delta;": 0x3b4,
  "demptyv;": 0x29b1,
  "dfisht;": 0x297f,
  "dfr;": [0xd835, 0xdd21],
  "dharl;": 0x21c3,
  "dharr;": 0x21c2,
  "diam;": 0x22c4,
  "diamond;": 0x22c4,
  "diamondsuit;": 0x2666,
  "diams;": 0x2666,
  "die;": 0xa8,
  "digamma;": 0x3dd,
  "disin;": 0x22f2,
  "div;": 0xf7,
  "divide": 0xf7,
  "divide;": 0xf7,
  "divideontimes;": 0x22c7,
  "divonx;": 0x22c7,
  "djcy;": 0x452,
  "dlcorn;": 0x231e,
  "dlcrop;": 0x230d,
  "dollar;": 0x24,
  "dopf;": [0xd835, 0xdd55],
  "dot;": 0x2d9,
  "doteq;": 0x2250,
  "doteqdot;": 0x2251,
  "dotminus;": 0x2238,
  "dotplus;": 0x2214,
  "dotsquare;": 0x22a1,
  "doublebarwedge;": 0x2306,
  "downarrow;": 0x2193,
  "downdownarrows;": 0x21ca,
  "downharpoonleft;": 0x21c3,
  "downharpoonright;": 0x21c2,
  "drbkarow;": 0x2910,
  "drcorn;": 0x231f,
  "drcrop;": 0x230c,
  "dscr;": [0xd835, 0xdcb9],
  "dscy;": 0x455,
  "dsol;": 0x29f6,
  "dstrok;": 0x111,
  "dtdot;": 0x22f1,
  "dtri;": 0x25bf,
  "dtrif;": 0x25be,
  "duarr;": 0x21f5,
  "duhar;": 0x296f,
  "dwangle;": 0x29a6,
  "dzcy;": 0x45f,
  "dzigrarr;": 0x27ff,
  "eDDot;": 0x2a77,
  "eDot;": 0x2251,
  "eacute": 0xe9,
  "eacute;": 0xe9,
  "easter;": 0x2a6e,
  "ecaron;": 0x11b,
  "ecir;": 0x2256,
  "ecirc": 0xea,
  "ecirc;": 0xea,
  "ecolon;": 0x2255,
  "ecy;": 0x44d,
  "edot;": 0x117,
  "ee;": 0x2147,
  "efDot;": 0x2252,
  "efr;": [0xd835, 0xdd22],
  "eg;": 0x2a9a,
  "egrave": 0xe8,
  "egrave;": 0xe8,
  "egs;": 0x2a96,
  "egsdot;": 0x2a98,
  "el;": 0x2a99,
  "elinters;": 0x23e7,
  "ell;": 0x2113,
  "els;": 0x2a95,
  "elsdot;": 0x2a97,
  "emacr;": 0x113,
  "empty;": 0x2205,
  "emptyset;": 0x2205,
  "emptyv;": 0x2205,
  "emsp13;": 0x2004,
  "emsp14;": 0x2005,
  "emsp;": 0x2003,
  "eng;": 0x14b,
  "ensp;": 0x2002,
  "eogon;": 0x119,
  "eopf;": [0xd835, 0xdd56],
  "epar;": 0x22d5,
  "eparsl;": 0x29e3,
  "eplus;": 0x2a71,
  "epsi;": 0x3b5,
  "epsilon;": 0x3b5,
  "epsiv;": 0x3f5,
  "eqcirc;": 0x2256,
  "eqcolon;": 0x2255,
  "eqsim;": 0x2242,
  "eqslantgtr;": 0x2a96,
  "eqslantless;": 0x2a95,
  "equals;": 0x3d,
  "equest;": 0x225f,
  "equiv;": 0x2261,
  "equivDD;": 0x2a78,
  "eqvparsl;": 0x29e5,
  "erDot;": 0x2253,
  "erarr;": 0x2971,
  "escr;": 0x212f,
  "esdot;": 0x2250,
  "esim;": 0x2242,
  "eta;": 0x3b7,
  "eth": 0xf0,
  "eth;": 0xf0,
  "euml": 0xeb,
  "euml;": 0xeb,
  "euro;": 0x20ac,
  "excl;": 0x21,
  "exist;": 0x2203,
  "expectation;": 0x2130,
  "exponentiale;": 0x2147,
  "fallingdotseq;": 0x2252,
  "fcy;": 0x444,
  "female;": 0x2640,
  "ffilig;": 0xfb03,
  "fflig;": 0xfb00,
  "ffllig;": 0xfb04,
  "ffr;": [0xd835, 0xdd23],
  "filig;": 0xfb01,
  "fjlig;": [0x66, 0x6a],
  "flat;": 0x266d,
  "fllig;": 0xfb02,
  "fltns;": 0x25b1,
  "fnof;": 0x192,
  "fopf;": [0xd835, 0xdd57],
  "forall;": 0x2200,
  "fork;": 0x22d4,
  "forkv;": 0x2ad9,
  "fpartint;": 0x2a0d,
  "frac12": 0xbd,
  "frac12;": 0xbd,
  "frac13;": 0x2153,
  "frac14": 0xbc,
  "frac14;": 0xbc,
  "frac15;": 0x2155,
  "frac16;": 0x2159,
  "frac18;": 0x215b,
  "frac23;": 0x2154,
  "frac25;": 0x2156,
  "frac34": 0xbe,
  "frac34;": 0xbe,
  "frac35;": 0x2157,
  "frac38;": 0x215c,
  "frac45;": 0x2158,
  "frac56;": 0x215a,
  "frac58;": 0x215d,
  "frac78;": 0x215e,
  "frasl;": 0x2044,
  "frown;": 0x2322,
  "fscr;": [0xd835, 0xdcbb],
  "gE;": 0x2267,
  "gEl;": 0x2a8c,
  "gacute;": 0x1f5,
  "gamma;": 0x3b3,
  "gammad;": 0x3dd,
  "gap;": 0x2a86,
  "gbreve;": 0x11f,
  "gcirc;": 0x11d,
  "gcy;": 0x433,
  "gdot;": 0x121,
  "ge;": 0x2265,
  "gel;": 0x22db,
  "geq;": 0x2265,
  "geqq;": 0x2267,
  "geqslant;": 0x2a7e,
  "ges;": 0x2a7e,
  "gescc;": 0x2aa9,
  "gesdot;": 0x2a80,
  "gesdoto;": 0x2a82,
  "gesdotol;": 0x2a84,
  "gesl;": [0x22db, 0xfe00],
  "gesles;": 0x2a94,
  "gfr;": [0xd835, 0xdd24],
  "gg;": 0x226b,
  "ggg;": 0x22d9,
  "gimel;": 0x2137,
  "gjcy;": 0x453,
  "gl;": 0x2277,
  "glE;": 0x2a92,
  "gla;": 0x2aa5,
  "glj;": 0x2aa4,
  "gnE;": 0x2269,
  "gnap;": 0x2a8a,
  "gnapprox;": 0x2a8a,
  "gne;": 0x2a88,
  "gneq;": 0x2a88,
  "gneqq;": 0x2269,
  "gnsim;": 0x22e7,
  "gopf;": [0xd835, 0xdd58],
  "grave;": 0x60,
  "gscr;": 0x210a,
  "gsim;": 0x2273,
  "gsime;": 0x2a8e,
  "gsiml;": 0x2a90,
  "gt": 0x3e,
  "gt;": 0x3e,
  "gtcc;": 0x2aa7,
  "gtcir;": 0x2a7a,
  "gtdot;": 0x22d7,
  "gtlPar;": 0x2995,
  "gtquest;": 0x2a7c,
  "gtrapprox;": 0x2a86,
  "gtrarr;": 0x2978,
  "gtrdot;": 0x22d7,
  "gtreqless;": 0x22db,
  "gtreqqless;": 0x2a8c,
  "gtrless;": 0x2277,
  "gtrsim;": 0x2273,
  "gvertneqq;": [0x2269, 0xfe00],
  "gvnE;": [0x2269, 0xfe00],
  "hArr;": 0x21d4,
  "hairsp;": 0x200a,
  "half;": 0xbd,
  "hamilt;": 0x210b,
  "hardcy;": 0x44a,
  "harr;": 0x2194,
  "harrcir;": 0x2948,
  "harrw;": 0x21ad,
  "hbar;": 0x210f,
  "hcirc;": 0x125,
  "hearts;": 0x2665,
  "heartsuit;": 0x2665,
  "hellip;": 0x2026,
  "hercon;": 0x22b9,
  "hfr;": [0xd835, 0xdd25],
  "hksearow;": 0x2925,
  "hkswarow;": 0x2926,
  "hoarr;": 0x21ff,
  "homtht;": 0x223b,
  "hookleftarrow;": 0x21a9,
  "hookrightarrow;": 0x21aa,
  "hopf;": [0xd835, 0xdd59],
  "horbar;": 0x2015,
  "hscr;": [0xd835, 0xdcbd],
  "hslash;": 0x210f,
  "hstrok;": 0x127,
  "hybull;": 0x2043,
  "hyphen;": 0x2010,
  "iacute": 0xed,
  "iacute;": 0xed,
  "ic;": 0x2063,
  "icirc": 0xee,
  "icirc;": 0xee,
  "icy;": 0x438,
  "iecy;": 0x435,
  "iexcl": 0xa1,
  "iexcl;": 0xa1,
  "iff;": 0x21d4,
  "ifr;": [0xd835, 0xdd26],
  "igrave": 0xec,
  "igrave;": 0xec,
  "ii;": 0x2148,
  "iiiint;": 0x2a0c,
  "iiint;": 0x222d,
  "iinfin;": 0x29dc,
  "iiota;": 0x2129,
  "ijlig;": 0x133,
  "imacr;": 0x12b,
  "image;": 0x2111,
  "imagline;": 0x2110,
  "imagpart;": 0x2111,
  "imath;": 0x131,
  "imof;": 0x22b7,
  "imped;": 0x1b5,
  "in;": 0x2208,
  "incare;": 0x2105,
  "infin;": 0x221e,
  "infintie;": 0x29dd,
  "inodot;": 0x131,
  "int;": 0x222b,
  "intcal;": 0x22ba,
  "integers;": 0x2124,
  "intercal;": 0x22ba,
  "intlarhk;": 0x2a17,
  "intprod;": 0x2a3c,
  "iocy;": 0x451,
  "iogon;": 0x12f,
  "iopf;": [0xd835, 0xdd5a],
  "iota;": 0x3b9,
  "iprod;": 0x2a3c,
  "iquest": 0xbf,
  "iquest;": 0xbf,
  "iscr;": [0xd835, 0xdcbe],
  "isin;": 0x2208,
  "isinE;": 0x22f9,
  "isindot;": 0x22f5,
  "isins;": 0x22f4,
  "isinsv;": 0x22f3,
  "isinv;": 0x2208,
  "it;": 0x2062,
  "itilde;": 0x129,
  "iukcy;": 0x456,
  "iuml": 0xef,
  "iuml;": 0xef,
  "jcirc;": 0x135,
  "jcy;": 0x439,
  "jfr;": [0xd835, 0xdd27],
  "jmath;": 0x237,
  "jopf;": [0xd835, 0xdd5b],
  "jscr;": [0xd835, 0xdcbf],
  "jsercy;": 0x458,
  "jukcy;": 0x454,
  "kappa;": 0x3ba,
  "kappav;": 0x3f0,
  "kcedil;": 0x137,
  "kcy;": 0x43a,
  "kfr;": [0xd835, 0xdd28],
  "kgreen;": 0x138,
  "khcy;": 0x445,
  "kjcy;": 0x45c,
  "kopf;": [0xd835, 0xdd5c],
  "kscr;": [0xd835, 0xdcc0],
  "lAarr;": 0x21da,
  "lArr;": 0x21d0,
  "lAtail;": 0x291b,
  "lBarr;": 0x290e,
  "lE;": 0x2266,
  "lEg;": 0x2a8b,
  "lHar;": 0x2962,
  "lacute;": 0x13a,
  "laemptyv;": 0x29b4,
  "lagran;": 0x2112,
  "lambda;": 0x3bb,
  "lang;": 0x27e8,
  "langd;": 0x2991,
  "langle;": 0x27e8,
  "lap;": 0x2a85,
  "laquo": 0xab,
  "laquo;": 0xab,
  "larr;": 0x2190,
  "larrb;": 0x21e4,
  "larrbfs;": 0x291f,
  "larrfs;": 0x291d,
  "larrhk;": 0x21a9,
  "larrlp;": 0x21ab,
  "larrpl;": 0x2939,
  "larrsim;": 0x2973,
  "larrtl;": 0x21a2,
  "lat;": 0x2aab,
  "latail;": 0x2919,
  "late;": 0x2aad,
  "lates;": [0x2aad, 0xfe00],
  "lbarr;": 0x290c,
  "lbbrk;": 0x2772,
  "lbrace;": 0x7b,
  "lbrack;": 0x5b,
  "lbrke;": 0x298b,
  "lbrksld;": 0x298f,
  "lbrkslu;": 0x298d,
  "lcaron;": 0x13e,
  "lcedil;": 0x13c,
  "lceil;": 0x2308,
  "lcub;": 0x7b,
  "lcy;": 0x43b,
  "ldca;": 0x2936,
  "ldquo;": 0x201c,
  "ldquor;": 0x201e,
  "ldrdhar;": 0x2967,
  "ldrushar;": 0x294b,
  "ldsh;": 0x21b2,
  "le;": 0x2264,
  "leftarrow;": 0x2190,
  "leftarrowtail;": 0x21a2,
  "leftharpoondown;": 0x21bd,
  "leftharpoonup;": 0x21bc,
  "leftleftarrows;": 0x21c7,
  "leftrightarrow;": 0x2194,
  "leftrightarrows;": 0x21c6,
  "leftrightharpoons;": 0x21cb,
  "leftrightsquigarrow;": 0x21ad,
  "leftthreetimes;": 0x22cb,
  "leg;": 0x22da,
  "leq;": 0x2264,
  "leqq;": 0x2266,
  "leqslant;": 0x2a7d,
  "les;": 0x2a7d,
  "lescc;": 0x2aa8,
  "lesdot;": 0x2a7f,
  "lesdoto;": 0x2a81,
  "lesdotor;": 0x2a83,
  "lesg;": [0x22da, 0xfe00],
  "lesges;": 0x2a93,
  "lessapprox;": 0x2a85,
  "lessdot;": 0x22d6,
  "lesseqgtr;": 0x22da,
  "lesseqqgtr;": 0x2a8b,
  "lessgtr;": 0x2276,
  "lesssim;": 0x2272,
  "lfisht;": 0x297c,
  "lfloor;": 0x230a,
  "lfr;": [0xd835, 0xdd29],
  "lg;": 0x2276,
  "lgE;": 0x2a91,
  "lhard;": 0x21bd,
  "lharu;": 0x21bc,
  "lharul;": 0x296a,
  "lhblk;": 0x2584,
  "ljcy;": 0x459,
  "ll;": 0x226a,
  "llarr;": 0x21c7,
  "llcorner;": 0x231e,
  "llhard;": 0x296b,
  "lltri;": 0x25fa,
  "lmidot;": 0x140,
  "lmoust;": 0x23b0,
  "lmoustache;": 0x23b0,
  "lnE;": 0x2268,
  "lnap;": 0x2a89,
  "lnapprox;": 0x2a89,
  "lne;": 0x2a87,
  "lneq;": 0x2a87,
  "lneqq;": 0x2268,
  "lnsim;": 0x22e6,
  "loang;": 0x27ec,
  "loarr;": 0x21fd,
  "lobrk;": 0x27e6,
  "longleftarrow;": 0x27f5,
  "longleftrightarrow;": 0x27f7,
  "longmapsto;": 0x27fc,
  "longrightarrow;": 0x27f6,
  "looparrowleft;": 0x21ab,
  "looparrowright;": 0x21ac,
  "lopar;": 0x2985,
  "lopf;": [0xd835, 0xdd5d],
  "loplus;": 0x2a2d,
  "lotimes;": 0x2a34,
  "lowast;": 0x2217,
  "lowbar;": 0x5f,
  "loz;": 0x25ca,
  "lozenge;": 0x25ca,
  "lozf;": 0x29eb,
  "lpar;": 0x28,
  "lparlt;": 0x2993,
  "lrarr;": 0x21c6,
  "lrcorner;": 0x231f,
  "lrhar;": 0x21cb,
  "lrhard;": 0x296d,
  "lrm;": 0x200e,
  "lrtri;": 0x22bf,
  "lsaquo;": 0x2039,
  "lscr;": [0xd835, 0xdcc1],
  "lsh;": 0x21b0,
  "lsim;": 0x2272,
  "lsime;": 0x2a8d,
  "lsimg;": 0x2a8f,
  "lsqb;": 0x5b,
  "lsquo;": 0x2018,
  "lsquor;": 0x201a,
  "lstrok;": 0x142,
  "lt": 0x3c,
  "lt;": 0x3c,
  "ltcc;": 0x2aa6,
  "ltcir;": 0x2a79,
  "ltdot;": 0x22d6,
  "lthree;": 0x22cb,
  "ltimes;": 0x22c9,
  "ltlarr;": 0x2976,
  "ltquest;": 0x2a7b,
  "ltrPar;": 0x2996,
  "ltri;": 0x25c3,
  "ltrie;": 0x22b4,
  "ltrif;": 0x25c2,
  "lurdshar;": 0x294a,
  "luruhar;": 0x2966,
  "lvertneqq;": [0x2268, 0xfe00],
  "lvnE;": [0x2268, 0xfe00],
  "mDDot;": 0x223a,
  "macr": 0xaf,
  "macr;": 0xaf,
  "male;": 0x2642,
  "malt;": 0x2720,
  "maltese;": 0x2720,
  "map;": 0x21a6,
  "mapsto;": 0x21a6,
  "mapstodown;": 0x21a7,
  "mapstoleft;": 0x21a4,
  "mapstoup;": 0x21a5,
  "marker;": 0x25ae,
  "mcomma;": 0x2a29,
  "mcy;": 0x43c,
  "mdash;": 0x2014,
  "measuredangle;": 0x2221,
  "mfr;": [0xd835, 0xdd2a],
  "mho;": 0x2127,
  "micro": 0xb5,
  "micro;": 0xb5,
  "mid;": 0x2223,
  "midast;": 0x2a,
  "midcir;": 0x2af0,
  "middot": 0xb7,
  "middot;": 0xb7,
  "minus;": 0x2212,
  "minusb;": 0x229f,
  "minusd;": 0x2238,
  "minusdu;": 0x2a2a,
  "mlcp;": 0x2adb,
  "mldr;": 0x2026,
  "mnplus;": 0x2213,
  "models;": 0x22a7,
  "mopf;": [0xd835, 0xdd5e],
  "mp;": 0x2213,
  "mscr;": [0xd835, 0xdcc2],
  "mstpos;": 0x223e,
  "mu;": 0x3bc,
  "multimap;": 0x22b8,
  "mumap;": 0x22b8,
  "nGg;": [0x22d9, 0x338],
  "nGt;": [0x226b, 0x20d2],
  "nGtv;": [0x226b, 0x338],
  "nLeftarrow;": 0x21cd,
  "nLeftrightarrow;": 0x21ce,
  "nLl;": [0x22d8, 0x338],
  "nLt;": [0x226a, 0x20d2],
  "nLtv;": [0x226a, 0x338],
  "nRightarrow;": 0x21cf,
  "nVDash;": 0x22af,
  "nVdash;": 0x22ae,
  "nabla;": 0x2207,
  "nacute;": 0x144,
  "nang;": [0x2220, 0x20d2],
  "nap;": 0x2249,
  "napE;": [0x2a70, 0x338],
  "napid;": [0x224b, 0x338],
  "napos;": 0x149,
  "napprox;": 0x2249,
  "natur;": 0x266e,
  "natural;": 0x266e,
  "naturals;": 0x2115,
  "nbsp": 0xa0,
  "nbsp;": 0xa0,
  "nbump;": [0x224e, 0x338],
  "nbumpe;": [0x224f, 0x338],
  "ncap;": 0x2a43,
  "ncaron;": 0x148,
  "ncedil;": 0x146,
  "ncong;": 0x2247,
  "ncongdot;": [0x2a6d, 0x338],
  "ncup;": 0x2a42,
  "ncy;": 0x43d,
  "ndash;": 0x2013,
  "ne;": 0x2260,
  "neArr;": 0x21d7,
  "nearhk;": 0x2924,
  "nearr;": 0x2197,
  "nearrow;": 0x2197,
  "nedot;": [0x2250, 0x338],
  "nequiv;": 0x2262,
  "nesear;": 0x2928,
  "nesim;": [0x2242, 0x338],
  "nexist;": 0x2204,
  "nexists;": 0x2204,
  "nfr;": [0xd835, 0xdd2b],
  "ngE;": [0x2267, 0x338],
  "nge;": 0x2271,
  "ngeq;": 0x2271,
  "ngeqq;": [0x2267, 0x338],
  "ngeqslant;": [0x2a7e, 0x338],
  "nges;": [0x2a7e, 0x338],
  "ngsim;": 0x2275,
  "ngt;": 0x226f,
  "ngtr;": 0x226f,
  "nhArr;": 0x21ce,
  "nharr;": 0x21ae,
  "nhpar;": 0x2af2,
  "ni;": 0x220b,
  "nis;": 0x22fc,
  "nisd;": 0x22fa,
  "niv;": 0x220b,
  "njcy;": 0x45a,
  "nlArr;": 0x21cd,
  "nlE;": [0x2266, 0x338],
  "nlarr;": 0x219a,
  "nldr;": 0x2025,
  "nle;": 0x2270,
  "nleftarrow;": 0x219a,
  "nleftrightarrow;": 0x21ae,
  "nleq;": 0x2270,
  "nleqq;": [0x2266, 0x338],
  "nleqslant;": [0x2a7d, 0x338],
  "nles;": [0x2a7d, 0x338],
  "nless;": 0x226e,
  "nlsim;": 0x2274,
  "nlt;": 0x226e,
  "nltri;": 0x22ea,
  "nltrie;": 0x22ec,
  "nmid;": 0x2224,
  "nopf;": [0xd835, 0xdd5f],
  "not": 0xac,
  "not;": 0xac,
  "notin;": 0x2209,
  "notinE;": [0x22f9, 0x338],
  "notindot;": [0x22f5, 0x338],
  "notinva;": 0x2209,
  "notinvb;": 0x22f7,
  "notinvc;": 0x22f6,
  "notni;": 0x220c,
  "notniva;": 0x220c,
  "notnivb;": 0x22fe,
  "notnivc;": 0x22fd,
  "npar;": 0x2226,
  "nparallel;": 0x2226,
  "nparsl;": [0x2afd, 0x20e5],
  "npart;": [0x2202, 0x338],
  "npolint;": 0x2a14,
  "npr;": 0x2280,
  "nprcue;": 0x22e0,
  "npre;": [0x2aaf, 0x338],
  "nprec;": 0x2280,
  "npreceq;": [0x2aaf, 0x338],
  "nrArr;": 0x21cf,
  "nrarr;": 0x219b,
  "nrarrc;": [0x2933, 0x338],
  "nrarrw;": [0x219d, 0x338],
  "nrightarrow;": 0x219b,
  "nrtri;": 0x22eb,
  "nrtrie;": 0x22ed,
  "nsc;": 0x2281,
  "nsccue;": 0x22e1,
  "nsce;": [0x2ab0, 0x338],
  "nscr;": [0xd835, 0xdcc3],
  "nshortmid;": 0x2224,
  "nshortparallel;": 0x2226,
  "nsim;": 0x2241,
  "nsime;": 0x2244,
  "nsimeq;": 0x2244,
  "nsmid;": 0x2224,
  "nspar;": 0x2226,
  "nsqsube;": 0x22e2,
  "nsqsupe;": 0x22e3,
  "nsub;": 0x2284,
  "nsubE;": [0x2ac5, 0x338],
  "nsube;": 0x2288,
  "nsubset;": [0x2282, 0x20d2],
  "nsubseteq;": 0x2288,
  "nsubseteqq;": [0x2ac5, 0x338],
  "nsucc;": 0x2281,
  "nsucceq;": [0x2ab0, 0x338],
  "nsup;": 0x2285,
  "nsupE;": [0x2ac6, 0x338],
  "nsupe;": 0x2289,
  "nsupset;": [0x2283, 0x20d2],
  "nsupseteq;": 0x2289,
  "nsupseteqq;": [0x2ac6, 0x338],
  "ntgl;": 0x2279,
  "ntilde": 0xf1,
  "ntilde;": 0xf1,
  "ntlg;": 0x2278,
  "ntriangleleft;": 0x22ea,
  "ntrianglelefteq;": 0x22ec,
  "ntriangleright;": 0x22eb,
  "ntrianglerighteq;": 0x22ed,
  "nu;": 0x3bd,
  "num;": 0x23,
  "numero;": 0x2116,
  "numsp;": 0x2007,
  "nvDash;": 0x22ad,
  "nvHarr;": 0x2904,
  "nvap;": [0x224d, 0x20d2],
  "nvdash;": 0x22ac,
  "nvge;": [0x2265, 0x20d2],
  "nvgt;": [0x3e, 0x20d2],
  "nvinfin;": 0x29de,
  "nvlArr;": 0x2902,
  "nvle;": [0x2264, 0x20d2],
  "nvlt;": [0x3c, 0x20d2],
  "nvltrie;": [0x22b4, 0x20d2],
  "nvrArr;": 0x2903,
  "nvrtrie;": [0x22b5, 0x20d2],
  "nvsim;": [0x223c, 0x20d2],
  "nwArr;": 0x21d6,
  "nwarhk;": 0x2923,
  "nwarr;": 0x2196,
  "nwarrow;": 0x2196,
  "nwnear;": 0x2927,
  "oS;": 0x24c8,
  "oacute": 0xf3,
  "oacute;": 0xf3,
  "oast;": 0x229b,
  "ocir;": 0x229a,
  "ocirc": 0xf4,
  "ocirc;": 0xf4,
  "ocy;": 0x43e,
  "odash;": 0x229d,
  "odblac;": 0x151,
  "odiv;": 0x2a38,
  "odot;": 0x2299,
  "odsold;": 0x29bc,
  "oelig;": 0x153,
  "ofcir;": 0x29bf,
  "ofr;": [0xd835, 0xdd2c],
  "ogon;": 0x2db,
  "ograve": 0xf2,
  "ograve;": 0xf2,
  "ogt;": 0x29c1,
  "ohbar;": 0x29b5,
  "ohm;": 0x3a9,
  "oint;": 0x222e,
  "olarr;": 0x21ba,
  "olcir;": 0x29be,
  "olcross;": 0x29bb,
  "oline;": 0x203e,
  "olt;": 0x29c0,
  "omacr;": 0x14d,
  "omega;": 0x3c9,
  "omicron;": 0x3bf,
  "omid;": 0x29b6,
  "ominus;": 0x2296,
  "oopf;": [0xd835, 0xdd60],
  "opar;": 0x29b7,
  "operp;": 0x29b9,
  "oplus;": 0x2295,
  "or;": 0x2228,
  "orarr;": 0x21bb,
  "ord;": 0x2a5d,
  "order;": 0x2134,
  "orderof;": 0x2134,
  "ordf": 0xaa,
  "ordf;": 0xaa,
  "ordm": 0xba,
  "ordm;": 0xba,
  "origof;": 0x22b6,
  "oror;": 0x2a56,
  "orslope;": 0x2a57,
  "orv;": 0x2a5b,
  "oscr;": 0x2134,
  "oslash": 0xf8,
  "oslash;": 0xf8,
  "osol;": 0x2298,
  "otilde": 0xf5,
  "otilde;": 0xf5,
  "otimes;": 0x2297,
  "otimesas;": 0x2a36,
  "ouml": 0xf6,
  "ouml;": 0xf6,
  "ovbar;": 0x233d,
  "par;": 0x2225,
  "para": 0xb6,
  "para;": 0xb6,
  "parallel;": 0x2225,
  "parsim;": 0x2af3,
  "parsl;": 0x2afd,
  "part;": 0x2202,
  "pcy;": 0x43f,
  "percnt;": 0x25,
  "period;": 0x2e,
  "permil;": 0x2030,
  "perp;": 0x22a5,
  "pertenk;": 0x2031,
  "pfr;": [0xd835, 0xdd2d],
  "phi;": 0x3c6,
  "phiv;": 0x3d5,
  "phmmat;": 0x2133,
  "phone;": 0x260e,
  "pi;": 0x3c0,
  "pitchfork;": 0x22d4,
  "piv;": 0x3d6,
  "planck;": 0x210f,
  "planckh;": 0x210e,
  "plankv;": 0x210f,
  "plus;": 0x2b,
  "plusacir;": 0x2a23,
  "plusb;": 0x229e,
  "pluscir;": 0x2a22,
  "plusdo;": 0x2214,
  "plusdu;": 0x2a25,
  "pluse;": 0x2a72,
  "plusmn": 0xb1,
  "plusmn;": 0xb1,
  "plussim;": 0x2a26,
  "plustwo;": 0x2a27,
  "pm;": 0xb1,
  "pointint;": 0x2a15,
  "popf;": [0xd835, 0xdd61],
  "pound": 0xa3,
  "pound;": 0xa3,
  "pr;": 0x227a,
  "prE;": 0x2ab3,
  "prap;": 0x2ab7,
  "prcue;": 0x227c,
  "pre;": 0x2aaf,
  "prec;": 0x227a,
  "precapprox;": 0x2ab7,
  "preccurlyeq;": 0x227c,
  "preceq;": 0x2aaf,
  "precnapprox;": 0x2ab9,
  "precneqq;": 0x2ab5,
  "precnsim;": 0x22e8,
  "precsim;": 0x227e,
  "prime;": 0x2032,
  "primes;": 0x2119,
  "prnE;": 0x2ab5,
  "prnap;": 0x2ab9,
  "prnsim;": 0x22e8,
  "prod;": 0x220f,
  "profalar;": 0x232e,
  "profline;": 0x2312,
  "profsurf;": 0x2313,
  "prop;": 0x221d,
  "propto;": 0x221d,
  "prsim;": 0x227e,
  "prurel;": 0x22b0,
  "pscr;": [0xd835, 0xdcc5],
  "psi;": 0x3c8,
  "puncsp;": 0x2008,
  "qfr;": [0xd835, 0xdd2e],
  "qint;": 0x2a0c,
  "qopf;": [0xd835, 0xdd62],
  "qprime;": 0x2057,
  "qscr;": [0xd835, 0xdcc6],
  "quaternions;": 0x210d,
  "quatint;": 0x2a16,
  "quest;": 0x3f,
  "questeq;": 0x225f,
  "quot": 0x22,
  "quot;": 0x22,
  "rAarr;": 0x21db,
  "rArr;": 0x21d2,
  "rAtail;": 0x291c,
  "rBarr;": 0x290f,
  "rHar;": 0x2964,
  "race;": [0x223d, 0x331],
  "racute;": 0x155,
  "radic;": 0x221a,
  "raemptyv;": 0x29b3,
  "rang;": 0x27e9,
  "rangd;": 0x2992,
  "range;": 0x29a5,
  "rangle;": 0x27e9,
  "raquo": 0xbb,
  "raquo;": 0xbb,
  "rarr;": 0x2192,
  "rarrap;": 0x2975,
  "rarrb;": 0x21e5,
  "rarrbfs;": 0x2920,
  "rarrc;": 0x2933,
  "rarrfs;": 0x291e,
  "rarrhk;": 0x21aa,
  "rarrlp;": 0x21ac,
  "rarrpl;": 0x2945,
  "rarrsim;": 0x2974,
  "rarrtl;": 0x21a3,
  "rarrw;": 0x219d,
  "ratail;": 0x291a,
  "ratio;": 0x2236,
  "rationals;": 0x211a,
  "rbarr;": 0x290d,
  "rbbrk;": 0x2773,
  "rbrace;": 0x7d,
  "rbrack;": 0x5d,
  "rbrke;": 0x298c,
  "rbrksld;": 0x298e,
  "rbrkslu;": 0x2990,
  "rcaron;": 0x159,
  "rcedil;": 0x157,
  "rceil;": 0x2309,
  "rcub;": 0x7d,
  "rcy;": 0x440,
  "rdca;": 0x2937,
  "rdldhar;": 0x2969,
  "rdquo;": 0x201d,
  "rdquor;": 0x201d,
  "rdsh;": 0x21b3,
  "real;": 0x211c,
  "realine;": 0x211b,
  "realpart;": 0x211c,
  "reals;": 0x211d,
  "rect;": 0x25ad,
  "reg": 0xae,
  "reg;": 0xae,
  "rfisht;": 0x297d,
  "rfloor;": 0x230b,
  "rfr;": [0xd835, 0xdd2f],
  "rhard;": 0x21c1,
  "rharu;": 0x21c0,
  "rharul;": 0x296c,
  "rho;": 0x3c1,
  "rhov;": 0x3f1,
  "rightarrow;": 0x2192,
  "rightarrowtail;": 0x21a3,
  "rightharpoondown;": 0x21c1,
  "rightharpoonup;": 0x21c0,
  "rightleftarrows;": 0x21c4,
  "rightleftharpoons;": 0x21cc,
  "rightrightarrows;": 0x21c9,
  "rightsquigarrow;": 0x219d,
  "rightthreetimes;": 0x22cc,
  "ring;": 0x2da,
  "risingdotseq;": 0x2253,
  "rlarr;": 0x21c4,
  "rlhar;": 0x21cc,
  "rlm;": 0x200f,
  "rmoust;": 0x23b1,
  "rmoustache;": 0x23b1,
  "rnmid;": 0x2aee,
  "roang;": 0x27ed,
  "roarr;": 0x21fe,
  "robrk;": 0x27e7,
  "ropar;": 0x2986,
  "ropf;": [0xd835, 0xdd63],
  "roplus;": 0x2a2e,
  "rotimes;": 0x2a35,
  "rpar;": 0x29,
  "rpargt;": 0x2994,
  "rppolint;": 0x2a12,
  "rrarr;": 0x21c9,
  "rsaquo;": 0x203a,
  "rscr;": [0xd835, 0xdcc7],
  "rsh;": 0x21b1,
  "rsqb;": 0x5d,
  "rsquo;": 0x2019,
  "rsquor;": 0x2019,
  "rthree;": 0x22cc,
  "rtimes;": 0x22ca,
  "rtri;": 0x25b9,
  "rtrie;": 0x22b5,
  "rtrif;": 0x25b8,
  "rtriltri;": 0x29ce,
  "ruluhar;": 0x2968,
  "rx;": 0x211e,
  "sacute;": 0x15b,
  "sbquo;": 0x201a,
  "sc;": 0x227b,
  "scE;": 0x2ab4,
  "scap;": 0x2ab8,
  "scaron;": 0x161,
  "sccue;": 0x227d,
  "sce;": 0x2ab0,
  "scedil;": 0x15f,
  "scirc;": 0x15d,
  "scnE;": 0x2ab6,
  "scnap;": 0x2aba,
  "scnsim;": 0x22e9,
  "scpolint;": 0x2a13,
  "scsim;": 0x227f,
  "scy;": 0x441,
  "sdot;": 0x22c5,
  "sdotb;": 0x22a1,
  "sdote;": 0x2a66,
  "seArr;": 0x21d8,
  "searhk;": 0x2925,
  "searr;": 0x2198,
  "searrow;": 0x2198,
  "sect": 0xa7,
  "sect;": 0xa7,
  "semi;": 0x3b,
  "seswar;": 0x2929,
  "setminus;": 0x2216,
  "setmn;": 0x2216,
  "sext;": 0x2736,
  "sfr;": [0xd835, 0xdd30],
  "sfrown;": 0x2322,
  "sharp;": 0x266f,
  "shchcy;": 0x449,
  "shcy;": 0x448,
  "shortmid;": 0x2223,
  "shortparallel;": 0x2225,
  "shy": 0xad,
  "shy;": 0xad,
  "sigma;": 0x3c3,
  "sigmaf;": 0x3c2,
  "sigmav;": 0x3c2,
  "sim;": 0x223c,
  "simdot;": 0x2a6a,
  "sime;": 0x2243,
  "simeq;": 0x2243,
  "simg;": 0x2a9e,
  "simgE;": 0x2aa0,
  "siml;": 0x2a9d,
  "simlE;": 0x2a9f,
  "simne;": 0x2246,
  "simplus;": 0x2a24,
  "simrarr;": 0x2972,
  "slarr;": 0x2190,
  "smallsetminus;": 0x2216,
  "smashp;": 0x2a33,
  "smeparsl;": 0x29e4,
  "smid;": 0x2223,
  "smile;": 0x2323,
  "smt;": 0x2aaa,
  "smte;": 0x2aac,
  "smtes;": [0x2aac, 0xfe00],
  "softcy;": 0x44c,
  "sol;": 0x2f,
  "solb;": 0x29c4,
  "solbar;": 0x233f,
  "sopf;": [0xd835, 0xdd64],
  "spades;": 0x2660,
  "spadesuit;": 0x2660,
  "spar;": 0x2225,
  "sqcap;": 0x2293,
  "sqcaps;": [0x2293, 0xfe00],
  "sqcup;": 0x2294,
  "sqcups;": [0x2294, 0xfe00],
  "sqsub;": 0x228f,
  "sqsube;": 0x2291,
  "sqsubset;": 0x228f,
  "sqsubseteq;": 0x2291,
  "sqsup;": 0x2290,
  "sqsupe;": 0x2292,
  "sqsupset;": 0x2290,
  "sqsupseteq;": 0x2292,
  "squ;": 0x25a1,
  "square;": 0x25a1,
  "squarf;": 0x25aa,
  "squf;": 0x25aa,
  "srarr;": 0x2192,
  "sscr;": [0xd835, 0xdcc8],
  "ssetmn;": 0x2216,
  "ssmile;": 0x2323,
  "sstarf;": 0x22c6,
  "star;": 0x2606,
  "starf;": 0x2605,
  "straightepsilon;": 0x3f5,
  "straightphi;": 0x3d5,
  "strns;": 0xaf,
  "sub;": 0x2282,
  "subE;": 0x2ac5,
  "subdot;": 0x2abd,
  "sube;": 0x2286,
  "subedot;": 0x2ac3,
  "submult;": 0x2ac1,
  "subnE;": 0x2acb,
  "subne;": 0x228a,
  "subplus;": 0x2abf,
  "subrarr;": 0x2979,
  "subset;": 0x2282,
  "subseteq;": 0x2286,
  "subseteqq;": 0x2ac5,
  "subsetneq;": 0x228a,
  "subsetneqq;": 0x2acb,
  "subsim;": 0x2ac7,
  "subsub;": 0x2ad5,
  "subsup;": 0x2ad3,
  "succ;": 0x227b,
  "succapprox;": 0x2ab8,
  "succcurlyeq;": 0x227d,
  "succeq;": 0x2ab0,
  "succnapprox;": 0x2aba,
  "succneqq;": 0x2ab6,
  "succnsim;": 0x22e9,
  "succsim;": 0x227f,
  "sum;": 0x2211,
  "sung;": 0x266a,
  "sup1": 0xb9,
  "sup1;": 0xb9,
  "sup2": 0xb2,
  "sup2;": 0xb2,
  "sup3": 0xb3,
  "sup3;": 0xb3,
  "sup;": 0x2283,
  "supE;": 0x2ac6,
  "supdot;": 0x2abe,
  "supdsub;": 0x2ad8,
  "supe;": 0x2287,
  "supedot;": 0x2ac4,
  "suphsol;": 0x27c9,
  "suphsub;": 0x2ad7,
  "suplarr;": 0x297b,
  "supmult;": 0x2ac2,
  "supnE;": 0x2acc,
  "supne;": 0x228b,
  "supplus;": 0x2ac0,
  "supset;": 0x2283,
  "supseteq;": 0x2287,
  "supseteqq;": 0x2ac6,
  "supsetneq;": 0x228b,
  "supsetneqq;": 0x2acc,
  "supsim;": 0x2ac8,
  "supsub;": 0x2ad4,
  "supsup;": 0x2ad6,
  "swArr;": 0x21d9,
  "swarhk;": 0x2926,
  "swarr;": 0x2199,
  "swarrow;": 0x2199,
  "swnwar;": 0x292a,
  "szlig": 0xdf,
  "szlig;": 0xdf,
  "target;": 0x2316,
  "tau;": 0x3c4,
  "tbrk;": 0x23b4,
  "tcaron;": 0x165,
  "tcedil;": 0x163,
  "tcy;": 0x442,
  "tdot;": 0x20db,
  "telrec;": 0x2315,
  "tfr;": [0xd835, 0xdd31],
  "there4;": 0x2234,
  "therefore;": 0x2234,
  "theta;": 0x3b8,
  "thetasym;": 0x3d1,
  "thetav;": 0x3d1,
  "thickapprox;": 0x2248,
  "thicksim;": 0x223c,
  "thinsp;": 0x2009,
  "thkap;": 0x2248,
  "thksim;": 0x223c,
  "thorn": 0xfe,
  "thorn;": 0xfe,
  "tilde;": 0x2dc,
  "times": 0xd7,
  "times;": 0xd7,
  "timesb;": 0x22a0,
  "timesbar;": 0x2a31,
  "timesd;": 0x2a30,
  "tint;": 0x222d,
  "toea;": 0x2928,
  "top;": 0x22a4,
  "topbot;": 0x2336,
  "topcir;": 0x2af1,
  "topf;": [0xd835, 0xdd65],
  "topfork;": 0x2ada,
  "tosa;": 0x2929,
  "tprime;": 0x2034,
  "trade;": 0x2122,
  "triangle;": 0x25b5,
  "triangledown;": 0x25bf,
  "triangleleft;": 0x25c3,
  "trianglelefteq;": 0x22b4,
  "triangleq;": 0x225c,
  "triangleright;": 0x25b9,
  "trianglerighteq;": 0x22b5,
  "tridot;": 0x25ec,
  "trie;": 0x225c,
  "triminus;": 0x2a3a,
  "triplus;": 0x2a39,
  "trisb;": 0x29cd,
  "tritime;": 0x2a3b,
  "trpezium;": 0x23e2,
  "tscr;": [0xd835, 0xdcc9],
  "tscy;": 0x446,
  "tshcy;": 0x45b,
  "tstrok;": 0x167,
  "twixt;": 0x226c,
  "twoheadleftarrow;": 0x219e,
  "twoheadrightarrow;": 0x21a0,
  "uArr;": 0x21d1,
  "uHar;": 0x2963,
  "uacute": 0xfa,
  "uacute;": 0xfa,
  "uarr;": 0x2191,
  "ubrcy;": 0x45e,
  "ubreve;": 0x16d,
  "ucirc": 0xfb,
  "ucirc;": 0xfb,
  "ucy;": 0x443,
  "udarr;": 0x21c5,
  "udblac;": 0x171,
  "udhar;": 0x296e,
  "ufisht;": 0x297e,
  "ufr;": [0xd835, 0xdd32],
  "ugrave": 0xf9,
  "ugrave;": 0xf9,
  "uharl;": 0x21bf,
  "uharr;": 0x21be,
  "uhblk;": 0x2580,
  "ulcorn;": 0x231c,
  "ulcorner;": 0x231c,
  "ulcrop;": 0x230f,
  "ultri;": 0x25f8,
  "umacr;": 0x16b,
  "uml": 0xa8,
  "uml;": 0xa8,
  "uogon;": 0x173,
  "uopf;": [0xd835, 0xdd66],
  "uparrow;": 0x2191,
  "updownarrow;": 0x2195,
  "upharpoonleft;": 0x21bf,
  "upharpoonright;": 0x21be,
  "uplus;": 0x228e,
  "upsi;": 0x3c5,
  "upsih;": 0x3d2,
  "upsilon;": 0x3c5,
  "upuparrows;": 0x21c8,
  "urcorn;": 0x231d,
  "urcorner;": 0x231d,
  "urcrop;": 0x230e,
  "uring;": 0x16f,
  "urtri;": 0x25f9,
  "uscr;": [0xd835, 0xdcca],
  "utdot;": 0x22f0,
  "utilde;": 0x169,
  "utri;": 0x25b5,
  "utrif;": 0x25b4,
  "uuarr;": 0x21c8,
  "uuml": 0xfc,
  "uuml;": 0xfc,
  "uwangle;": 0x29a7,
  "vArr;": 0x21d5,
  "vBar;": 0x2ae8,
  "vBarv;": 0x2ae9,
  "vDash;": 0x22a8,
  "vangrt;": 0x299c,
  "varepsilon;": 0x3f5,
  "varkappa;": 0x3f0,
  "varnothing;": 0x2205,
  "varphi;": 0x3d5,
  "varpi;": 0x3d6,
  "varpropto;": 0x221d,
  "varr;": 0x2195,
  "varrho;": 0x3f1,
  "varsigma;": 0x3c2,
  "varsubsetneq;": [0x228a, 0xfe00],
  "varsubsetneqq;": [0x2acb, 0xfe00],
  "varsupsetneq;": [0x228b, 0xfe00],
  "varsupsetneqq;": [0x2acc, 0xfe00],
  "vartheta;": 0x3d1,
  "vartriangleleft;": 0x22b2,
  "vartriangleright;": 0x22b3,
  "vcy;": 0x432,
  "vdash;": 0x22a2,
  "vee;": 0x2228,
  "veebar;": 0x22bb,
  "veeeq;": 0x225a,
  "vellip;": 0x22ee,
  "verbar;": 0x7c,
  "vert;": 0x7c,
  "vfr;": [0xd835, 0xdd33],
  "vltri;": 0x22b2,
  "vnsub;": [0x2282, 0x20d2],
  "vnsup;": [0x2283, 0x20d2],
  "vopf;": [0xd835, 0xdd67],
  "vprop;": 0x221d,
  "vrtri;": 0x22b3,
  "vscr;": [0xd835, 0xdccb],
  "vsubnE;": [0x2acb, 0xfe00],
  "vsubne;": [0x228a, 0xfe00],
  "vsupnE;": [0x2acc, 0xfe00],
  "vsupne;": [0x228b, 0xfe00],
  "vzigzag;": 0x299a,
  "wcirc;": 0x175,
  "wedbar;": 0x2a5f,
  "wedge;": 0x2227,
  "wedgeq;": 0x2259,
  "weierp;": 0x2118,
  "wfr;": [0xd835, 0xdd34],
  "wopf;": [0xd835, 0xdd68],
  "wp;": 0x2118,
  "wr;": 0x2240,
  "wreath;": 0x2240,
  "wscr;": [0xd835, 0xdccc],
  "xcap;": 0x22c2,
  "xcirc;": 0x25ef,
  "xcup;": 0x22c3,
  "xdtri;": 0x25bd,
  "xfr;": [0xd835, 0xdd35],
  "xhArr;": 0x27fa,
  "xharr;": 0x27f7,
  "xi;": 0x3be,
  "xlArr;": 0x27f8,
  "xlarr;": 0x27f5,
  "xmap;": 0x27fc,
  "xnis;": 0x22fb,
  "xodot;": 0x2a00,
  "xopf;": [0xd835, 0xdd69],
  "xoplus;": 0x2a01,
  "xotime;": 0x2a02,
  "xrArr;": 0x27f9,
  "xrarr;": 0x27f6,
  "xscr;": [0xd835, 0xdccd],
  "xsqcup;": 0x2a06,
  "xuplus;": 0x2a04,
  "xutri;": 0x25b3,
  "xvee;": 0x22c1,
  "xwedge;": 0x22c0,
  "yacute": 0xfd,
  "yacute;": 0xfd,
  "yacy;": 0x44f,
  "ycirc;": 0x177,
  "ycy;": 0x44b,
  "yen": 0xa5,
  "yen;": 0xa5,
  "yfr;": [0xd835, 0xdd36],
  "yicy;": 0x457,
  "yopf;": [0xd835, 0xdd6a],
  "yscr;": [0xd835, 0xdcce],
  "yucy;": 0x44e,
  "yuml": 0xff,
  "yuml;": 0xff,
  "zacute;": 0x17a,
  "zcaron;": 0x17e,
  "zcy;": 0x437,
  "zdot;": 0x17c,
  "zeetrf;": 0x2128,
  "zeta;": 0x3b6,
  "zfr;": [0xd835, 0xdd37],
  "zhcy;": 0x436,
  "zigrarr;": 0x21dd,
  "zopf;": [0xd835, 0xdd6b],
  "zscr;": [0xd835, 0xdccf],
  "zwj;": 0x200d,
  "zwnj;": 0x200c
};
/*
 * This regexp is generated with test/tools/update-entities.js
 * It will always match at least one character -- but note that there
 * are no entities whose names are a single character long.
 */
var NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\s\S]/g;
var NAMEDCHARREF_MAXLEN = 32;

// Regular expression constants used by the tokenizer and parser

// Note that \r is included in all of these regexps because it will need
// to be converted to LF by the scanChars() function.
var DBLQUOTEATTRVAL = /[^\r"&\u0000]+/g;
var SINGLEQUOTEATTRVAL = /[^\r'&\u0000]+/g;
var UNQUOTEDATTRVAL = /[^\r\t\n\f &>\u0000]+/g;
var TAGNAME = /[^\r\t\n\f \/>A-Z\u0000]+/g;
var ATTRNAME = /[^\r\t\n\f \/=>A-Z\u0000]+/g;
var CDATATEXT = /[^\]\r\u0000\uffff]*/g;
var DATATEXT = /[^&<\r\u0000\uffff]*/g;
var RAWTEXT = /[^<\r\u0000\uffff]*/g;
var PLAINTEXT = /[^\r\u0000\uffff]*/g;
// Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG
// and SIMPLEATTR so that we are guaranteed to always match.  This prevents
// us from scanning past the lastIndex set. (Note that the desired matches
// are always greater than 1 char long, so longest-match will ensure that .
// is not matched unless the desired match fails.)
var SIMPLETAG = /(?:(\/)?([a-z]+)>)|[\s\S]/g;
var SIMPLEATTR = /(?:([-a-z]+)[ \t\n\f]*=[ \t\n\f]*('[^'&\r\u0000]*'|"[^"&\r\u0000]*"|[^\t\n\r\f "&'\u0000>][^&> \t\n\r\f\u0000]*[ \t\n\f]))|[\s\S]/g;
var NONWS = /[^\x09\x0A\x0C\x0D\x20]/;
var ALLNONWS = /[^\x09\x0A\x0C\x0D\x20]/g; // like above, with g flag
var NONWSNONNUL = /[^\x00\x09\x0A\x0C\x0D\x20]/; // don't allow NUL either
var LEADINGWS = /^[\x09\x0A\x0C\x0D\x20]+/;
var NULCHARS = /\x00/g;

/***
 * These are utility functions that don't use any of the parser's
 * internal state.
 */
function buf2str(buf) {
  var CHUNKSIZE = 16384;
  if (buf.length < CHUNKSIZE) {
    return String.fromCharCode.apply(String, buf);
  }
  // special case for large strings, to avoid busting the stack.
  var result = '';
  for (var i = 0; i < buf.length; i += CHUNKSIZE) {
    result += String.fromCharCode.apply(String, buf.slice(i, i + CHUNKSIZE));
  }
  return result;
}
function str2buf(s) {
  var result = [];
  for (var i = 0; i < s.length; i++) {
    result[i] = s.charCodeAt(i);
  }
  return result;
}

// Determine whether the element is a member of the set.
// The set is an object that maps namespaces to objects. The objects
// then map local tagnames to the value true if that tag is part of the set
function isA(elt, set) {
  if (typeof set === 'string') {
    // convenience case for testing a particular HTML element
    return elt.namespaceURI === NAMESPACE.HTML && elt.localName === set;
  }
  var tagnames = set[elt.namespaceURI];
  return tagnames && tagnames[elt.localName];
}
function isMathmlTextIntegrationPoint(n) {
  return isA(n, mathmlTextIntegrationPointSet);
}
function isHTMLIntegrationPoint(n) {
  if (isA(n, htmlIntegrationPointSet)) return true;
  if (n.namespaceURI === NAMESPACE.MATHML && n.localName === "annotation-xml") {
    var encoding = n.getAttribute("encoding");
    if (encoding) encoding = encoding.toLowerCase();
    if (encoding === "text/html" || encoding === "application/xhtml+xml") return true;
  }
  return false;
}
function adjustSVGTagName(name) {
  if (name in svgTagNameAdjustments) return svgTagNameAdjustments[name];else return name;
}
function adjustSVGAttributes(attrs) {
  for (var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] in svgAttrAdjustments) {
      attrs[i][0] = svgAttrAdjustments[attrs[i][0]];
    }
  }
}
function adjustMathMLAttributes(attrs) {
  for (var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] === "definitionurl") {
      attrs[i][0] = "definitionURL";
      break;
    }
  }
}
function adjustForeignAttributes(attrs) {
  for (var i = 0, n = attrs.length; i < n; i++) {
    if (attrs[i][0] in foreignAttributes) {
      // Attributes with namespaces get a 3rd element:
      // [Qname, value, namespace]
      attrs[i].push(foreignAttributes[attrs[i][0]]);
    }
  }
}

// For each attribute in attrs, if elt doesn't have an attribute
// by that name, add the attribute to elt
// XXX: I'm ignoring namespaces for now
function transferAttributes(attrs, elt) {
  for (var i = 0, n = attrs.length; i < n; i++) {
    var name = attrs[i][0],
      value = attrs[i][1];
    if (elt.hasAttribute(name)) continue;
    elt._setAttribute(name, value);
  }
}

/***
 * The ElementStack class
 */
HTMLParser.ElementStack = function ElementStack() {
  this.elements = [];
  this.top = null; // stack.top is the "current node" in the spec
};

/*
// This is for debugging only
HTMLParser.ElementStack.prototype.toString = function(e) {
  return "STACK: " +
  this.elements.map(function(e) {return e.localName;}).join("-");
}
*/

HTMLParser.ElementStack.prototype.push = function (e) {
  this.elements.push(e);
  this.top = e;
};
HTMLParser.ElementStack.prototype.pop = function (e) {
  this.elements.pop();
  this.top = this.elements[this.elements.length - 1];
};

// Pop elements off the stack up to and including the first
// element with the specified (HTML) tagname
HTMLParser.ElementStack.prototype.popTag = function (tag) {
  for (var i = this.elements.length - 1; i > 0; i--) {
    var e = this.elements[i];
    if (isA(e, tag)) break;
  }
  this.elements.length = i;
  this.top = this.elements[i - 1];
};

// Pop elements off the stack up to and including the first
// element that is an instance of the specified type
HTMLParser.ElementStack.prototype.popElementType = function (type) {
  for (var i = this.elements.length - 1; i > 0; i--) {
    if (this.elements[i] instanceof type) break;
  }
  this.elements.length = i;
  this.top = this.elements[i - 1];
};

// Pop elements off the stack up to and including the element e.
// Note that this is very different from removeElement()
// This requires that e is on the stack.
HTMLParser.ElementStack.prototype.popElement = function (e) {
  for (var i = this.elements.length - 1; i > 0; i--) {
    if (this.elements[i] === e) break;
  }
  this.elements.length = i;
  this.top = this.elements[i - 1];
};

// Remove a specific element from the stack.
// Do nothing if the element is not on the stack
HTMLParser.ElementStack.prototype.removeElement = function (e) {
  if (this.top === e) this.pop();else {
    var idx = this.elements.lastIndexOf(e);
    if (idx !== -1) this.elements.splice(idx, 1);
  }
};
HTMLParser.ElementStack.prototype.clearToContext = function (set) {
  // Note that we don't loop to 0. Never pop the <html> elt off.
  for (var i = this.elements.length - 1; i > 0; i--) {
    if (isA(this.elements[i], set)) break;
  }
  this.elements.length = i + 1;
  this.top = this.elements[i];
};
HTMLParser.ElementStack.prototype.contains = function (tag) {
  return this.inSpecificScope(tag, Object.create(null));
};
HTMLParser.ElementStack.prototype.inSpecificScope = function (tag, set) {
  for (var i = this.elements.length - 1; i >= 0; i--) {
    var elt = this.elements[i];
    if (isA(elt, tag)) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};

// Like the above, but for a specific element, not a tagname
HTMLParser.ElementStack.prototype.elementInSpecificScope = function (target, set) {
  for (var i = this.elements.length - 1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt === target) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};

// Like the above, but for an element interface, not a tagname
HTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function (target, set) {
  for (var i = this.elements.length - 1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt instanceof target) return true;
    if (isA(elt, set)) return false;
  }
  return false;
};
HTMLParser.ElementStack.prototype.inScope = function (tag) {
  return this.inSpecificScope(tag, inScopeSet);
};
HTMLParser.ElementStack.prototype.elementInScope = function (e) {
  return this.elementInSpecificScope(e, inScopeSet);
};
HTMLParser.ElementStack.prototype.elementTypeInScope = function (type) {
  return this.elementTypeInSpecificScope(type, inScopeSet);
};
HTMLParser.ElementStack.prototype.inButtonScope = function (tag) {
  return this.inSpecificScope(tag, inButtonScopeSet);
};
HTMLParser.ElementStack.prototype.inListItemScope = function (tag) {
  return this.inSpecificScope(tag, inListItemScopeSet);
};
HTMLParser.ElementStack.prototype.inTableScope = function (tag) {
  return this.inSpecificScope(tag, inTableScopeSet);
};
HTMLParser.ElementStack.prototype.inSelectScope = function (tag) {
  // Can't implement this one with inSpecificScope, since it involves
  // a set defined by inverting another set. So implement manually.
  for (var i = this.elements.length - 1; i >= 0; i--) {
    var elt = this.elements[i];
    if (elt.namespaceURI !== NAMESPACE.HTML) return false;
    var localname = elt.localName;
    if (localname === tag) return true;
    if (localname !== "optgroup" && localname !== "option") return false;
  }
  return false;
};
HTMLParser.ElementStack.prototype.generateImpliedEndTags = function (butnot, thorough) {
  var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;
  for (var i = this.elements.length - 1; i >= 0; i--) {
    var e = this.elements[i];
    if (butnot && isA(e, butnot)) break;
    if (!isA(this.elements[i], endTagSet)) break;
  }
  this.elements.length = i + 1;
  this.top = this.elements[i];
};

/***
 * The ActiveFormattingElements class
 */
HTMLParser.ActiveFormattingElements = function AFE() {
  this.list = []; // elements
  this.attrs = []; // attribute tokens for cloning
};

HTMLParser.ActiveFormattingElements.prototype.MARKER = {
  localName: "|"
};

/*
// For debugging
HTMLParser.ActiveFormattingElements.prototype.toString = function() {
  return "AFE: " +
  this.list.map(function(e) { return e.localName; }).join("-");
}
*/

HTMLParser.ActiveFormattingElements.prototype.insertMarker = function () {
  this.list.push(this.MARKER);
  this.attrs.push(this.MARKER);
};
HTMLParser.ActiveFormattingElements.prototype.push = function (elt, attrs) {
  // Scan backwards: if there are already 3 copies of this element
  // before we encounter a marker, then drop the last one
  var count = 0;
  for (var i = this.list.length - 1; i >= 0; i--) {
    if (this.list[i] === this.MARKER) break;
    // equal() is defined below
    if (equal(elt, this.list[i], this.attrs[i])) {
      count++;
      if (count === 3) {
        this.list.splice(i, 1);
        this.attrs.splice(i, 1);
        break;
      }
    }
  }

  // Now push the element onto the list
  this.list.push(elt);

  // Copy the attributes and push those on, too
  var attrcopy = [];
  for (var ii = 0; ii < attrs.length; ii++) {
    attrcopy[ii] = attrs[ii];
  }
  this.attrs.push(attrcopy);

  // This function defines equality of two elements for the purposes
  // of the AFE list.  Note that it compares the new elements
  // attributes to the saved array of attributes associated with
  // the old element because a script could have changed the
  // old element's set of attributes
  function equal(newelt, oldelt, oldattrs) {
    if (newelt.localName !== oldelt.localName) return false;
    if (newelt._numattrs !== oldattrs.length) return false;
    for (var i = 0, n = oldattrs.length; i < n; i++) {
      var oldname = oldattrs[i][0];
      var oldval = oldattrs[i][1];
      if (!newelt.hasAttribute(oldname)) return false;
      if (newelt.getAttribute(oldname) !== oldval) return false;
    }
    return true;
  }
};
HTMLParser.ActiveFormattingElements.prototype.clearToMarker = function () {
  for (var i = this.list.length - 1; i >= 0; i--) {
    if (this.list[i] === this.MARKER) break;
  }
  if (i < 0) i = 0;
  this.list.length = i;
  this.attrs.length = i;
};

// Find and return the last element with the specified tag between the
// end of the list and the last marker on the list.
// Used when parsing <a> in_body_mode()
HTMLParser.ActiveFormattingElements.prototype.findElementByTag = function (tag) {
  for (var i = this.list.length - 1; i >= 0; i--) {
    var elt = this.list[i];
    if (elt === this.MARKER) break;
    if (elt.localName === tag) return elt;
  }
  return null;
};
HTMLParser.ActiveFormattingElements.prototype.indexOf = function (e) {
  return this.list.lastIndexOf(e);
};

// Find the element e in the list and remove it
// Used when parsing <a> in_body()
HTMLParser.ActiveFormattingElements.prototype.remove = function (e) {
  var idx = this.list.lastIndexOf(e);
  if (idx !== -1) {
    this.list.splice(idx, 1);
    this.attrs.splice(idx, 1);
  }
};

// Find element a in the list and replace it with element b
// XXX: Do I need to handle attributes here?
HTMLParser.ActiveFormattingElements.prototype.replace = function (a, b, attrs) {
  var idx = this.list.lastIndexOf(a);
  if (idx !== -1) {
    this.list[idx] = b;
    this.attrs[idx] = attrs;
  }
};

// Find a in the list and insert b after it
// This is only used for insert a bookmark object, so the
// attrs array doesn't really matter
HTMLParser.ActiveFormattingElements.prototype.insertAfter = function (a, b) {
  var idx = this.list.lastIndexOf(a);
  if (idx !== -1) {
    this.list.splice(idx, 0, b);
    this.attrs.splice(idx, 0, b);
  }
};

/***
 * This is the parser factory function. It is the return value of
 * the outer closure that it is defined within.  Most of the parser
 * implementation details are inside this function.
 */
function HTMLParser(address, fragmentContext, options) {
  /***
   * These are the parser's state variables
   */
  // Scanner state
  var chars = null;
  var numchars = 0; // Length of chars
  var nextchar = 0; // Index of next char
  var input_complete = false; // Becomes true when end() called.
  var scanner_skip_newline = false; // If previous char was CR
  var reentrant_invocations = 0;
  var saved_scanner_state = [];
  var leftovers = "";
  var first_batch = true;
  var paused = 0; // Becomes non-zero while loading scripts

  // Tokenizer state
  var tokenizer = data_state; // Current tokenizer state
  var return_state;
  var character_reference_code;
  var tagnamebuf = "";
  var lasttagname = ""; // holds the target end tag for text states
  var tempbuf = [];
  var attrnamebuf = "";
  var attrvaluebuf = "";
  var commentbuf = [];
  var doctypenamebuf = [];
  var doctypepublicbuf = [];
  var doctypesystembuf = [];
  var attributes = [];
  var is_end_tag = false;

  // Tree builder state
  var parser = initial_mode; // Current insertion mode
  var originalInsertionMode = null; // A saved insertion mode
  var templateInsertionModes = []; // Stack of template insertion modes.
  var stack = new HTMLParser.ElementStack(); // Stack of open elements
  var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags
  var fragment = fragmentContext !== undefined; // For innerHTML, etc.
  var head_element_pointer = null;
  var form_element_pointer = null;
  var scripting_enabled = true;
  if (fragmentContext) {
    scripting_enabled = fragmentContext.ownerDocument._scripting_enabled;
  }
  if (options && options.scripting_enabled === false) scripting_enabled = false;
  var frameset_ok = true;
  var force_quirks = false;
  var pending_table_text;
  var text_integration_mode; // XXX a spec bug workaround?

  // A single run of characters, buffered up to be sent to
  // the parser as a single string.
  var textrun = [];
  var textIncludesNUL = false;
  var ignore_linefeed = false;

  /***
   * This is the parser object that will be the return value of this
   * factory function, which is some 5000 lines below.
   * Note that the variable "parser" is the current state of the
   * parser's state machine.  This variable "htmlparser" is the
   * return value and defines the public API of the parser
   */
  var htmlparser = {
    document: function () {
      return doc;
    },
    // Convenience function for internal use. Can only be called once,
    // as it removes the nodes from `doc` to add them to fragment.
    _asDocumentFragment: function () {
      var frag = doc.createDocumentFragment();
      var root = doc.firstChild;
      while (root.hasChildNodes()) {
        frag.appendChild(root.firstChild);
      }
      return frag;
    },
    // Internal function used from HTMLScriptElement to pause the
    // parser while a script is being loaded from the network
    pause: function () {
      // print("pausing parser");
      paused++;
    },
    // Called when a script finishes loading
    resume: function () {
      // print("resuming parser");
      paused--;
      // XXX: added this to force a resumption.
      // Is this the right thing to do?
      this.parse("");
    },
    // Parse the HTML text s.
    // The second argument should be true if there is no more
    // text to be parsed, and should be false or omitted otherwise.
    // The second argument must not be set for recursive invocations
    // from document.write()
    parse: function (s, end, shouldPauseFunc) {
      var moreToDo;

      // If we're paused, remember the text to parse, but
      // don't parse it now.
      // (Don't invoke shouldPauseFunc because we haven't handled 'end' yet.)
      if (paused > 0) {
        leftovers += s;
        return true; // more to do
      }

      if (reentrant_invocations === 0) {
        // A normal, top-level invocation
        if (leftovers) {
          s = leftovers + s;
          leftovers = "";
        }

        // Add a special marker character to the end of
        // the buffer.  If the scanner is at the end of
        // the buffer and input_complete is set, then this
        // character will transform into an EOF token.
        // Having an actual character that represents EOF
        // in the character buffer makes lookahead regexp
        // matching work more easily, and this is
        // important for character references.
        if (end) {
          s += "\uFFFF";
          input_complete = true; // Makes scanChars() send EOF
        }

        chars = s;
        numchars = s.length;
        nextchar = 0;
        if (first_batch) {
          // We skip a leading Byte Order Mark (\uFEFF)
          // on first batch of text we're given
          first_batch = false;
          if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;
        }
        reentrant_invocations++;
        moreToDo = scanChars(shouldPauseFunc);
        leftovers = chars.substring(nextchar, numchars);
        reentrant_invocations--;
      } else {
        // This is the re-entrant case, which we have to
        // handle a little differently.
        reentrant_invocations++;

        // Save current scanner state
        saved_scanner_state.push(chars, numchars, nextchar);

        // Set new scanner state
        chars = s;
        numchars = s.length;
        nextchar = 0;

        // Now scan as many of these new chars as we can
        scanChars();
        moreToDo = false;
        leftovers = chars.substring(nextchar, numchars);

        // restore old scanner state
        nextchar = saved_scanner_state.pop();
        numchars = saved_scanner_state.pop();
        chars = saved_scanner_state.pop();

        // If there were leftover chars from this invocation
        // insert them into the pending invocation's buffer
        // and trim already processed chars at the same time
        if (leftovers) {
          chars = leftovers + chars.substring(nextchar);
          numchars = chars.length;
          nextchar = 0;
          leftovers = "";
        }

        // Decrement the counter
        reentrant_invocations--;
      }
      return moreToDo;
    }
  };

  // This is the document we'll be building up
  var doc = new Document(true, address);

  // The document needs to know about the parser, for document.write().
  // This _parser property will be deleted when we're done parsing.
  doc._parser = htmlparser;

  // XXX I think that any document we use this parser on should support
  // scripts. But I may need to configure that through a parser parameter
  // Only documents with windows ("browsing contexts" to be precise)
  // allow scripting.
  doc._scripting_enabled = scripting_enabled;

  /***
   * The actual code of the HTMLParser() factory function begins here.
   */

  if (fragmentContext) {
    // for innerHTML parsing
    if (fragmentContext.ownerDocument._quirks) doc._quirks = true;
    if (fragmentContext.ownerDocument._limitedQuirks) doc._limitedQuirks = true;

    // Set the initial tokenizer state
    if (fragmentContext.namespaceURI === NAMESPACE.HTML) {
      switch (fragmentContext.localName) {
        case "title":
        case "textarea":
          tokenizer = rcdata_state;
          break;
        case "style":
        case "xmp":
        case "iframe":
        case "noembed":
        case "noframes":
        case "script":
        case "plaintext":
          tokenizer = plaintext_state;
          break;
        case "noscript":
          if (scripting_enabled) tokenizer = plaintext_state;
      }
    }
    var root = doc.createElement("html");
    doc._appendChild(root);
    stack.push(root);
    if (fragmentContext instanceof impl.HTMLTemplateElement) {
      templateInsertionModes.push(in_template_mode);
    }
    resetInsertionMode();
    for (var e = fragmentContext; e !== null; e = e.parentElement) {
      if (e instanceof impl.HTMLFormElement) {
        form_element_pointer = e;
        break;
      }
    }
  }

  /***
   * Scanner functions
   */
  // Loop through the characters in chars, and pass them one at a time
  // to the tokenizer FSM. Return when no more characters can be processed
  // (This may leave 1 or more characters in the buffer: like a CR
  // waiting to see if the next char is LF, or for states that require
  // lookahead...)
  function scanChars(shouldPauseFunc) {
    var codepoint, s, pattern, eof;
    while (nextchar < numchars) {
      // If we just tokenized a </script> tag, then the paused flag
      // may have been set to tell us to stop tokenizing while
      // the script is loading
      if (paused > 0 || shouldPauseFunc && shouldPauseFunc()) {
        return true;
      }
      switch (typeof tokenizer.lookahead) {
        case 'undefined':
          codepoint = chars.charCodeAt(nextchar++);
          if (scanner_skip_newline) {
            scanner_skip_newline = false;
            if (codepoint === 0x000A) {
              nextchar++;
              continue;
            }
          }
          switch (codepoint) {
            case 0x000D:
              // CR always turns into LF, but if the next character
              // is LF, then that second LF is skipped.
              if (nextchar < numchars) {
                if (chars.charCodeAt(nextchar) === 0x000A) nextchar++;
              } else {
                // We don't know the next char right now, so we
                // can't check if it is a LF.  So set a flag
                scanner_skip_newline = true;
              }

              // In either case, emit a LF
              tokenizer(0x000A);
              break;
            case 0xFFFF:
              if (input_complete && nextchar === numchars) {
                tokenizer(EOF); // codepoint will be 0xFFFF here
                break;
              }
            /* falls through */
            default:
              tokenizer(codepoint);
              break;
          }
          break;
        case 'number':
          codepoint = chars.charCodeAt(nextchar);

          // The only tokenizer states that require fixed lookahead
          // only consume alphanum characters, so we don't have
          // to worry about CR and LF in this case

          // tokenizer wants n chars of lookahead
          var n = tokenizer.lookahead;
          var needsString = true;
          if (n < 0) {
            needsString = false;
            n = -n;
          }
          if (n < numchars - nextchar) {
            // If we can look ahead that far
            s = needsString ? chars.substring(nextchar, nextchar + n) : null;
            eof = false;
          } else {
            // if we don't have that many characters
            if (input_complete) {
              // If no more are coming
              // Just return what we have
              s = needsString ? chars.substring(nextchar, numchars) : null;
              eof = true;
              if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;
            } else {
              // Return now and wait for more chars later
              return true;
            }
          }
          tokenizer(codepoint, s, eof);
          break;
        case 'string':
          codepoint = chars.charCodeAt(nextchar);

          // tokenizer wants characters up to a matching string
          pattern = tokenizer.lookahead;
          var pos = chars.indexOf(pattern, nextchar);
          if (pos !== -1) {
            s = chars.substring(nextchar, pos + pattern.length);
            eof = false;
          } else {
            // No match
            // If more characters coming, wait for them
            if (!input_complete) return true;

            // Otherwise, we've got to return what we've got
            s = chars.substring(nextchar, numchars);
            if (codepoint === 0xFFFF && nextchar === numchars - 1) codepoint = EOF;
            eof = true;
          }

          // The tokenizer states that require this kind of
          // lookahead have to be careful to handle CR characters
          // correctly
          tokenizer(codepoint, s, eof);
          break;
      }
    }
    return false; // no more characters to scan!
  }

  /***
   * Tokenizer utility functions
   */
  function addAttribute(name, value) {
    // Make sure there isn't already an attribute with this name
    // If there is, ignore this one.
    for (var i = 0; i < attributes.length; i++) {
      if (attributes[i][0] === name) return;
    }
    if (value !== undefined) {
      attributes.push([name, value]);
    } else {
      attributes.push([name]);
    }
  }

  // Shortcut for simple attributes
  function handleSimpleAttribute() {
    SIMPLEATTR.lastIndex = nextchar - 1;
    var matched = SIMPLEATTR.exec(chars);
    if (!matched) throw new Error("should never happen");
    var name = matched[1];
    if (!name) return false;
    var value = matched[2];
    var len = value.length;
    switch (value[0]) {
      case '"':
      case "'":
        value = value.substring(1, len - 1);
        nextchar += matched[0].length - 1;
        tokenizer = after_attribute_value_quoted_state;
        break;
      default:
        tokenizer = before_attribute_name_state;
        nextchar += matched[0].length - 1;
        value = value.substring(0, len - 1);
        break;
    }

    // Make sure there isn't already an attribute with this name
    // If there is, ignore this one.
    for (var i = 0; i < attributes.length; i++) {
      if (attributes[i][0] === name) return true;
    }
    attributes.push([name, value]);
    return true;
  }
  function beginTagName() {
    is_end_tag = false;
    tagnamebuf = "";
    attributes.length = 0;
  }
  function beginEndTagName() {
    is_end_tag = true;
    tagnamebuf = "";
    attributes.length = 0;
  }
  function beginTempBuf() {
    tempbuf.length = 0;
  }
  function beginAttrName() {
    attrnamebuf = "";
  }
  function beginAttrValue() {
    attrvaluebuf = "";
  }
  function beginComment() {
    commentbuf.length = 0;
  }
  function beginDoctype() {
    doctypenamebuf.length = 0;
    doctypepublicbuf = null;
    doctypesystembuf = null;
  }
  function beginDoctypePublicId() {
    doctypepublicbuf = [];
  }
  function beginDoctypeSystemId() {
    doctypesystembuf = [];
  }
  function forcequirks() {
    force_quirks = true;
  }
  function cdataAllowed() {
    return stack.top && stack.top.namespaceURI !== "http://www.w3.org/1999/xhtml";
  }

  // Return true if the codepoints in the specified buffer match the
  // characters of lasttagname
  function appropriateEndTag(buf) {
    return lasttagname === buf;
  }
  function flushText() {
    if (textrun.length > 0) {
      var s = buf2str(textrun);
      textrun.length = 0;
      if (ignore_linefeed) {
        ignore_linefeed = false;
        if (s[0] === "\n") s = s.substring(1);
        if (s.length === 0) return;
      }
      insertToken(TEXT, s);
      textIncludesNUL = false;
    }
    ignore_linefeed = false;
  }

  // Consume chars matched by the pattern and return them as a string. Starts
  // matching at the current position, so users should drop the current char
  // otherwise.
  function getMatchingChars(pattern) {
    pattern.lastIndex = nextchar - 1;
    var match = pattern.exec(chars);
    if (match && match.index === nextchar - 1) {
      match = match[0];
      nextchar += match.length - 1;
      /* Careful!  Make sure we haven't matched the EOF character! */
      if (input_complete && nextchar === numchars) {
        // Oops, backup one.
        match = match.slice(0, -1);
        nextchar--;
      }
      return match;
    } else {
      throw new Error("should never happen");
    }
  }

  // emit a string of chars that match a regexp
  // Returns false if no chars matched.
  function emitCharsWhile(pattern) {
    pattern.lastIndex = nextchar - 1;
    var match = pattern.exec(chars)[0];
    if (!match) return false;
    emitCharString(match);
    nextchar += match.length - 1;
    return true;
  }

  // This is used by CDATA sections
  function emitCharString(s) {
    if (textrun.length > 0) flushText();
    if (ignore_linefeed) {
      ignore_linefeed = false;
      if (s[0] === "\n") s = s.substring(1);
      if (s.length === 0) return;
    }
    insertToken(TEXT, s);
  }
  function emitTag() {
    if (is_end_tag) insertToken(ENDTAG, tagnamebuf);else {
      // Remember the last open tag we emitted
      var tagname = tagnamebuf;
      tagnamebuf = "";
      lasttagname = tagname;
      insertToken(TAG, tagname, attributes);
    }
  }

  // A shortcut: look ahead and if this is a open or close tag
  // in lowercase with no spaces and no attributes, just emit it now.
  function emitSimpleTag() {
    if (nextchar === numchars) {
      return false; /* not even 1 char left */
    }
    SIMPLETAG.lastIndex = nextchar;
    var matched = SIMPLETAG.exec(chars);
    if (!matched) throw new Error("should never happen");
    var tagname = matched[2];
    if (!tagname) return false;
    var endtag = matched[1];
    if (endtag) {
      nextchar += tagname.length + 2;
      insertToken(ENDTAG, tagname);
    } else {
      nextchar += tagname.length + 1;
      lasttagname = tagname;
      insertToken(TAG, tagname, NOATTRS);
    }
    return true;
  }
  function emitSelfClosingTag() {
    if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);else {
      insertToken(TAG, tagnamebuf, attributes, true);
    }
  }
  function emitDoctype() {
    insertToken(DOCTYPE, buf2str(doctypenamebuf), doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined, doctypesystembuf ? buf2str(doctypesystembuf) : undefined);
  }
  function emitEOF() {
    flushText();
    parser(EOF); // EOF never goes to insertForeignContent()
    doc.modclock = 1; // Start tracking modifications
  }

  // Insert a token, either using the current parser insertion mode
  // (for HTML stuff) or using the insertForeignToken() method.
  var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {
    flushText();
    var current = stack.top;
    if (!current || current.namespaceURI === NAMESPACE.HTML) {
      // This is the common case
      parser(t, value, arg3, arg4);
    } else {
      // Otherwise we may need to insert this token as foreign content
      if (t !== TAG && t !== TEXT) {
        insertForeignToken(t, value, arg3, arg4);
      } else {
        // But in some cases we treat it as regular content
        if (isMathmlTextIntegrationPoint(current) && (t === TEXT || t === TAG && value !== "mglyph" && value !== "malignmark") || t === TAG && value === "svg" && current.namespaceURI === NAMESPACE.MATHML && current.localName === "annotation-xml" || isHTMLIntegrationPoint(current)) {
          // XXX: the text_integration_mode stuff is an
          // attempted bug workaround of mine
          text_integration_mode = true;
          parser(t, value, arg3, arg4);
          text_integration_mode = false;
        }
        // Otherwise it is foreign content
        else {
          insertForeignToken(t, value, arg3, arg4);
        }
      }
    }
  };

  /***
   * Tree building utility functions
   */
  function insertComment(data) {
    var parent = stack.top;
    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {
      fosterParent(function (doc) {
        return doc.createComment(data);
      });
    } else {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      if (parent instanceof impl.HTMLTemplateElement) {
        parent = parent.content;
      }
      parent._appendChild(parent.ownerDocument.createComment(data));
    }
  }
  function insertText(s) {
    var parent = stack.top;
    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {
      fosterParent(function (doc) {
        return doc.createTextNode(s);
      });
    } else {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      if (parent instanceof impl.HTMLTemplateElement) {
        parent = parent.content;
      }
      // "If there is a Text node immediately before the adjusted insertion
      // location, then append data to that Text node's data."
      var lastChild = parent.lastChild;
      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {
        lastChild.appendData(s);
      } else {
        parent._appendChild(parent.ownerDocument.createTextNode(s));
      }
    }
  }
  function createHTMLElt(doc, name, attrs) {
    // Create the element this way, rather than with
    // doc.createElement because createElement() does error
    // checking on the element name that we need to avoid here.
    var elt = html.createElement(doc, name, null);
    if (attrs) {
      for (var i = 0, n = attrs.length; i < n; i++) {
        // Use the _ version to avoid testing the validity
        // of the attribute name
        elt._setAttribute(attrs[i][0], attrs[i][1]);
      }
    }
    // XXX
    // If the element is a resettable form element,
    // run its reset algorithm now
    // XXX
    // handle case where form-element-pointer is not null
    return elt;
  }

  // The in_table insertion mode turns on this flag, and that makes
  // insertHTMLElement use the foster parenting algorithm for elements
  // tags inside a table
  var foster_parent_mode = false;
  function insertHTMLElement(name, attrs) {
    var elt = insertElement(function (doc) {
      return createHTMLElt(doc, name, attrs);
    });

    // XXX
    // If this is a form element, set its form attribute property here
    if (isA(elt, formassociatedSet)) {
      elt._form = form_element_pointer;
    }
    return elt;
  }

  // Insert the element into the open element or foster parent it
  function insertElement(eltFunc) {
    var elt;
    if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {
      elt = fosterParent(eltFunc);
    } else if (stack.top instanceof impl.HTMLTemplateElement) {
      // "If the adjusted insertion location is inside a template element,
      // let it instead be inside the template element's template contents"
      elt = eltFunc(stack.top.content.ownerDocument);
      stack.top.content._appendChild(elt);
    } else {
      elt = eltFunc(stack.top.ownerDocument);
      stack.top._appendChild(elt);
    }
    stack.push(elt);
    return elt;
  }
  function insertForeignElement(name, attrs, ns) {
    return insertElement(function (doc) {
      // We need to prevent createElementNS from trying to parse `name` as a
      // `qname`, so use an internal Document#_createElementNS() interface.
      var elt = doc._createElementNS(name, ns, null);
      if (attrs) {
        for (var i = 0, n = attrs.length; i < n; i++) {
          var attr = attrs[i];
          if (attr.length === 2) elt._setAttribute(attr[0], attr[1]);else {
            elt._setAttributeNS(attr[2], attr[0], attr[1]);
          }
        }
      }
      return elt;
    });
  }
  function lastElementOfType(type) {
    for (var i = stack.elements.length - 1; i >= 0; i--) {
      if (stack.elements[i] instanceof type) {
        return i;
      }
    }
    return -1;
  }
  function fosterParent(eltFunc) {
    var parent,
      before,
      lastTable = -1,
      lastTemplate = -1,
      elt;
    lastTable = lastElementOfType(impl.HTMLTableElement);
    lastTemplate = lastElementOfType(impl.HTMLTemplateElement);
    if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {
      parent = stack.elements[lastTemplate];
    } else if (lastTable >= 0) {
      parent = stack.elements[lastTable].parentNode;
      if (parent) {
        before = stack.elements[lastTable];
      } else {
        parent = stack.elements[lastTable - 1];
      }
    }
    if (!parent) parent = stack.elements[0]; // the `html` element.

    // "If the adjusted insertion location is inside a template element,
    // let it instead be inside the template element's template contents"
    if (parent instanceof impl.HTMLTemplateElement) {
      parent = parent.content;
    }
    // Create element in the appropriate document.
    elt = eltFunc(parent.ownerDocument);
    if (elt.nodeType === Node.TEXT_NODE) {
      var prev;
      if (before) prev = before.previousSibling;else prev = parent.lastChild;
      if (prev && prev.nodeType === Node.TEXT_NODE) {
        prev.appendData(elt.data);
        return elt;
      }
    }
    if (before) parent.insertBefore(elt, before);else parent._appendChild(elt);
    return elt;
  }
  function resetInsertionMode() {
    var last = false;
    for (var i = stack.elements.length - 1; i >= 0; i--) {
      var node = stack.elements[i];
      if (i === 0) {
        last = true;
        if (fragment) {
          node = fragmentContext;
        }
      }
      if (node.namespaceURI === NAMESPACE.HTML) {
        var tag = node.localName;
        switch (tag) {
          case "select":
            for (var j = i; j > 0;) {
              var ancestor = stack.elements[--j];
              if (ancestor instanceof impl.HTMLTemplateElement) {
                break;
              } else if (ancestor instanceof impl.HTMLTableElement) {
                parser = in_select_in_table_mode;
                return;
              }
            }
            parser = in_select_mode;
            return;
          case "tr":
            parser = in_row_mode;
            return;
          case "tbody":
          case "tfoot":
          case "thead":
            parser = in_table_body_mode;
            return;
          case "caption":
            parser = in_caption_mode;
            return;
          case "colgroup":
            parser = in_column_group_mode;
            return;
          case "table":
            parser = in_table_mode;
            return;
          case "template":
            parser = templateInsertionModes[templateInsertionModes.length - 1];
            return;
          case "body":
            parser = in_body_mode;
            return;
          case "frameset":
            parser = in_frameset_mode;
            return;
          case "html":
            if (head_element_pointer === null) {
              parser = before_head_mode;
            } else {
              parser = after_head_mode;
            }
            return;
          default:
            if (!last) {
              if (tag === "head") {
                parser = in_head_mode;
                return;
              }
              if (tag === "td" || tag === "th") {
                parser = in_cell_mode;
                return;
              }
            }
        }
      }
      if (last) {
        parser = in_body_mode;
        return;
      }
    }
  }
  function parseRawText(name, attrs) {
    insertHTMLElement(name, attrs);
    tokenizer = rawtext_state;
    originalInsertionMode = parser;
    parser = text_mode;
  }
  function parseRCDATA(name, attrs) {
    insertHTMLElement(name, attrs);
    tokenizer = rcdata_state;
    originalInsertionMode = parser;
    parser = text_mode;
  }

  // Make a copy of element i on the list of active formatting
  // elements, using its original attributes, not current
  // attributes (which may have been modified by a script)
  function afeclone(doc, i) {
    return {
      elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),
      attrs: afe.attrs[i]
    };
  }
  function afereconstruct() {
    if (afe.list.length === 0) return;
    var entry = afe.list[afe.list.length - 1];
    // If the last is a marker , do nothing
    if (entry === afe.MARKER) return;
    // Or if it is an open element, do nothing
    if (stack.elements.lastIndexOf(entry) !== -1) return;

    // Loop backward through the list until we find a marker or an
    // open element, and then move forward one from there.
    for (var i = afe.list.length - 2; i >= 0; i--) {
      entry = afe.list[i];
      if (entry === afe.MARKER) break;
      if (stack.elements.lastIndexOf(entry) !== -1) break;
    }

    // Now loop forward, starting from the element after the current
    // one, recreating formatting elements and pushing them back onto
    // the list of open elements
    for (i = i + 1; i < afe.list.length; i++) {
      var newelt = insertElement(function (doc) {
        return afeclone(doc, i).elt;
      });
      afe.list[i] = newelt;
    }
  }

  // Used by the adoptionAgency() function
  var BOOKMARK = {
    localName: "BM"
  };
  function adoptionAgency(tag) {
    // If the current node is an HTML element whose tag name is subject,
    // and the current node is not in the list of active formatting
    // elements, then pop the current node off the stack of open
    // elements and abort these steps.
    if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {
      stack.pop();
      return true; // no more handling required
    }

    // Let outer loop counter be zero.
    var outer = 0;

    // Outer loop: If outer loop counter is greater than or
    // equal to eight, then abort these steps.
    while (outer < 8) {
      // Increment outer loop counter by one.
      outer++;

      // Let the formatting element be the last element in the list
      // of active formatting elements that: is between the end of
      // the list and the last scope marker in the list, if any, or
      // the start of the list otherwise, and has the same tag name
      // as the token.
      var fmtelt = afe.findElementByTag(tag);

      // If there is no such node, then abort these steps and instead
      // act as described in the "any other end tag" entry below.
      if (!fmtelt) {
        return false; // false means handle by the default case
      }

      // Otherwise, if there is such a node, but that node is not in
      // the stack of open elements, then this is a parse error;
      // remove the element from the list, and abort these steps.
      var index = stack.elements.lastIndexOf(fmtelt);
      if (index === -1) {
        afe.remove(fmtelt);
        return true; // true means no more handling required
      }

      // Otherwise, if there is such a node, and that node is also in
      // the stack of open elements, but the element is not in scope,
      // then this is a parse error; ignore the token, and abort
      // these steps.
      if (!stack.elementInScope(fmtelt)) {
        return true;
      }

      // Let the furthest block be the topmost node in the stack of
      // open elements that is lower in the stack than the formatting
      // element, and is an element in the special category. There
      // might not be one.
      var furthestblock = null,
        furthestblockindex;
      for (var i = index + 1; i < stack.elements.length; i++) {
        if (isA(stack.elements[i], specialSet)) {
          furthestblock = stack.elements[i];
          furthestblockindex = i;
          break;
        }
      }

      // If there is no furthest block, then the UA must skip the
      // subsequent steps and instead just pop all the nodes from the
      // bottom of the stack of open elements, from the current node
      // up to and including the formatting element, and remove the
      // formatting element from the list of active formatting
      // elements.
      if (!furthestblock) {
        stack.popElement(fmtelt);
        afe.remove(fmtelt);
        return true;
      } else {
        // Let the common ancestor be the element immediately above
        // the formatting element in the stack of open elements.
        var ancestor = stack.elements[index - 1];

        // Let a bookmark note the position of the formatting
        // element in the list of active formatting elements
        // relative to the elements on either side of it in the
        // list.
        afe.insertAfter(fmtelt, BOOKMARK);

        // Let node and last node be the furthest block.
        var node = furthestblock;
        var lastnode = furthestblock;
        var nodeindex = furthestblockindex;
        var nodeafeindex;

        // Let inner loop counter be zero.
        var inner = 0;
        while (true) {
          // Increment inner loop counter by one.
          inner++;

          // Let node be the element immediately above node in
          // the stack of open elements, or if node is no longer
          // in the stack of open elements (e.g. because it got
          // removed by this algorithm), the element that was
          // immediately above node in the stack of open elements
          // before node was removed.
          node = stack.elements[--nodeindex];

          // If node is the formatting element, then go
          // to the next step in the overall algorithm.
          if (node === fmtelt) break;

          // If the inner loop counter is greater than three and node
          // is in the list of active formatting elements, then remove
          // node from the list of active formatting elements.
          nodeafeindex = afe.indexOf(node);
          if (inner > 3 && nodeafeindex !== -1) {
            afe.remove(node);
            nodeafeindex = -1;
          }

          // If node is not in the list of active formatting
          // elements, then remove node from the stack of open
          // elements and then go back to the step labeled inner
          // loop.
          if (nodeafeindex === -1) {
            stack.removeElement(node);
            continue;
          }

          // Create an element for the token for which the
          // element node was created with common ancestor as
          // the intended parent, replace the entry for node
          // in the list of active formatting elements with an
          // entry for the new element, replace the entry for
          // node in the stack of open elements with an entry for
          // the new element, and let node be the new element.
          var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);
          afe.replace(node, newelt.elt, newelt.attrs);
          stack.elements[nodeindex] = newelt.elt;
          node = newelt.elt;

          // If last node is the furthest block, then move the
          // aforementioned bookmark to be immediately after the
          // new node in the list of active formatting elements.
          if (lastnode === furthestblock) {
            afe.remove(BOOKMARK);
            afe.insertAfter(newelt.elt, BOOKMARK);
          }

          // Insert last node into node, first removing it from
          // its previous parent node if any.
          node._appendChild(lastnode);

          // Let last node be node.
          lastnode = node;
        }

        // If the common ancestor node is a table, tbody, tfoot,
        // thead, or tr element, then, foster parent whatever last
        // node ended up being in the previous step, first removing
        // it from its previous parent node if any.
        if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {
          fosterParent(function () {
            return lastnode;
          });
        }
        // Otherwise, append whatever last node ended up being in
        // the previous step to the common ancestor node, first
        // removing it from its previous parent node if any.
        else if (ancestor instanceof impl.HTMLTemplateElement) {
          ancestor.content._appendChild(lastnode);
        } else {
          ancestor._appendChild(lastnode);
        }

        // Create an element for the token for which the
        // formatting element was created, with furthest block
        // as the intended parent.
        var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt));

        // Take all of the child nodes of the furthest block and
        // append them to the element created in the last step.
        while (furthestblock.hasChildNodes()) {
          newelt2.elt._appendChild(furthestblock.firstChild);
        }

        // Append that new element to the furthest block.
        furthestblock._appendChild(newelt2.elt);

        // Remove the formatting element from the list of active
        // formatting elements, and insert the new element into the
        // list of active formatting elements at the position of
        // the aforementioned bookmark.
        afe.remove(fmtelt);
        afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs);

        // Remove the formatting element from the stack of open
        // elements, and insert the new element into the stack of
        // open elements immediately below the position of the
        // furthest block in that stack.
        stack.removeElement(fmtelt);
        var pos = stack.elements.lastIndexOf(furthestblock);
        stack.elements.splice(pos + 1, 0, newelt2.elt);
      }
    }
    return true;
  }

  // We do this when we get /script in in_text_mode
  function handleScriptEnd() {
    // XXX:
    // This is just a stub implementation right now and doesn't run scripts.
    // Getting this method right involves the event loop, URL resolution
    // script fetching etc. For now I just want to be able to parse
    // documents and test the parser.

    //var script = stack.top;
    stack.pop();
    parser = originalInsertionMode;
    //script._prepare();
    return;

    // XXX: here is what this method is supposed to do

    // Provide a stable state.

    // Let script be the current node (which will be a script
    // element).

    // Pop the current node off the stack of open elements.

    // Switch the insertion mode to the original insertion mode.

    // Let the old insertion point have the same value as the current
    // insertion point. Let the insertion point be just before the
    // next input character.

    // Increment the parser's script nesting level by one.

    // Prepare the script. This might cause some script to execute,
    // which might cause new characters to be inserted into the
    // tokenizer, and might cause the tokenizer to output more tokens,
    // resulting in a reentrant invocation of the parser.

    // Decrement the parser's script nesting level by one. If the
    // parser's script nesting level is zero, then set the parser
    // pause flag to false.

    // Let the insertion point have the value of the old insertion
    // point. (In other words, restore the insertion point to its
    // previous value. This value might be the "undefined" value.)

    // At this stage, if there is a pending parsing-blocking script,
    // then:

    // If the script nesting level is not zero:

    //   Set the parser pause flag to true, and abort the processing
    //   of any nested invocations of the tokenizer, yielding
    //   control back to the caller. (Tokenization will resume when
    //   the caller returns to the "outer" tree construction stage.)

    //   The tree construction stage of this particular parser is
    //   being called reentrantly, say from a call to
    //   document.write().

    // Otherwise:

    //     Run these steps:

    //       Let the script be the pending parsing-blocking
    //       script. There is no longer a pending
    //       parsing-blocking script.

    //       Block the tokenizer for this instance of the HTML
    //       parser, such that the event loop will not run tasks
    //       that invoke the tokenizer.

    //       If the parser's Document has a style sheet that is
    //       blocking scripts or the script's "ready to be
    //       parser-executed" flag is not set: spin the event
    //       loop until the parser's Document has no style sheet
    //       that is blocking scripts and the script's "ready to
    //       be parser-executed" flag is set.

    //       Unblock the tokenizer for this instance of the HTML
    //       parser, such that tasks that invoke the tokenizer
    //       can again be run.

    //       Let the insertion point be just before the next
    //       input character.

    //       Increment the parser's script nesting level by one
    //       (it should be zero before this step, so this sets
    //       it to one).

    //       Execute the script.

    //       Decrement the parser's script nesting level by
    //       one. If the parser's script nesting level is zero
    //       (which it always should be at this point), then set
    //       the parser pause flag to false.

    //       Let the insertion point be undefined again.

    //       If there is once again a pending parsing-blocking
    //       script, then repeat these steps from step 1.
  }

  function stopParsing() {
    // XXX This is just a temporary implementation to get the parser working.
    // A full implementation involves scripts and events and the event loop.

    // Remove the link from document to parser.
    // This is instead of "set the insertion point to undefined".
    // It means that document.write() can't write into the doc anymore.
    delete doc._parser;
    stack.elements.length = 0; // pop everything off

    // If there is a window object associated with the document
    // then trigger an load event on it
    if (doc.defaultView) {
      doc.defaultView.dispatchEvent(new impl.Event("load", {}));
    }
  }

  /****
   * Tokenizer states
   */

  /**
   * This file was partially mechanically generated from
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html
   *
   * After mechanical conversion, it was further converted from
   * prose to JS by hand, but the intent is that it is a very
   * faithful rendering of the HTML tokenization spec in
   * JavaScript.
   *
   * It is not a goal of this tokenizer to detect or report
   * parse errors.
   *
   * XXX The tokenizer is supposed to work with straight UTF32
   * codepoints. But I don't think it has any dependencies on
   * any character outside of the BMP so I think it is safe to
   * pass it UTF16 characters. I don't think it will ever change
   * state in the middle of a surrogate pair.
   */

  /*
   * Each state is represented by a function.  For most states, the
   * scanner simply passes the next character (as an integer
   * codepoint) to the current state function and automatically
   * consumes the character.  If the state function can't process
   * the character it can call pushback() to push it back to the
   * scanner.
   *
   * Some states require lookahead, though.  If a state function has
   * a lookahead property, then it is invoked differently.  In this
   * case, the scanner invokes the function with 3 arguments: 1) the
   * next codepoint 2) a string of lookahead text 3) a boolean that
   * is true if the lookahead goes all the way to the EOF. (XXX
   * actually maybe this third is not necessary... the lookahead
   * could just include \uFFFF?)
   *
   * If the lookahead property of a state function is an integer, it
   * specifies the number of characters required. If it is a string,
   * then the scanner will scan for that string and return all
   * characters up to and including that sequence, or up to EOF.  If
   * the lookahead property is a regexp, then the scanner will match
   * the regexp at the current point and return the matching string.
   *
   * States that require lookahead are responsible for explicitly
   * consuming the characters they process. They do this by
   * incrementing nextchar by the number of processed characters.
   */
  function reconsume(c, new_state) {
    tokenizer = new_state;
    nextchar--; // pushback
  }

  function data_state(c) {
    switch (c) {
      case 0x0026:
        // AMPERSAND
        return_state = data_state;
        tokenizer = character_reference_state;
        break;
      case 0x003C:
        // LESS-THAN SIGN
        if (emitSimpleTag())
          // Shortcut for <p>, <dl>, </div> etc.
          break;
        tokenizer = tag_open_state;
        break;
      case 0x0000:
        // NULL
        // Usually null characters emitted by the tokenizer will be
        // ignored by the tree builder, but sometimes they'll be
        // converted to \uFFFD.  I don't want to have the search every
        // string emitted to replace NULs, so I'll set a flag
        // if I've emitted a NUL.
        textrun.push(c);
        textIncludesNUL = true;
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        // Instead of just pushing a single character and then
        // coming back to the very same place, lookahead and
        // emit everything we can at once.
        /*jshint -W030 */
        emitCharsWhile(DATATEXT) || textrun.push(c);
        break;
    }
  }
  function rcdata_state(c) {
    // Save the open tag so we can find a matching close tag
    switch (c) {
      case 0x0026:
        // AMPERSAND
        return_state = rcdata_state;
        tokenizer = character_reference_state;
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = rcdata_less_than_sign_state;
        break;
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        textIncludesNUL = true;
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        textrun.push(c);
        break;
    }
  }
  function rawtext_state(c) {
    switch (c) {
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = rawtext_less_than_sign_state;
        break;
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        /*jshint -W030 */
        emitCharsWhile(RAWTEXT) || textrun.push(c);
        break;
    }
  }
  function script_data_state(c) {
    switch (c) {
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_less_than_sign_state;
        break;
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        /*jshint -W030 */
        emitCharsWhile(RAWTEXT) || textrun.push(c);
        break;
    }
  }
  function plaintext_state(c) {
    switch (c) {
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        /*jshint -W030 */
        emitCharsWhile(PLAINTEXT) || textrun.push(c);
        break;
    }
  }
  function tag_open_state(c) {
    switch (c) {
      case 0x0021:
        // EXCLAMATION MARK
        tokenizer = markup_declaration_open_state;
        break;
      case 0x002F:
        // SOLIDUS
        tokenizer = end_tag_open_state;
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginTagName();
        reconsume(c, tag_name_state);
        break;
      case 0x003F:
        // QUESTION MARK
        reconsume(c, bogus_comment_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        reconsume(c, data_state);
        break;
    }
  }
  function end_tag_open_state(c) {
    switch (c) {
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginEndTagName();
        reconsume(c, tag_name_state);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        break;
      case -1:
        // EOF
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x002F); // SOLIDUS
        emitEOF();
        break;
      default:
        reconsume(c, bogus_comment_state);
        break;
    }
  }
  function tag_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = before_attribute_name_state;
        break;
      case 0x002F:
        // SOLIDUS
        tokenizer = self_closing_start_tag_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitTag();
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tagnamebuf += String.fromCharCode(c + 0x0020);
        break;
      case 0x0000:
        // NULL
        tagnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        tagnamebuf += getMatchingChars(TAGNAME);
        break;
    }
  }
  function rcdata_less_than_sign_state(c) {
    /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */
    if (c === 0x002F) {
      // SOLIDUS
      beginTempBuf();
      tokenizer = rcdata_end_tag_open_state;
    } else {
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, rcdata_state);
    }
  }
  function rcdata_end_tag_open_state(c) {
    /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */
    switch (c) {
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginEndTagName();
        reconsume(c, rcdata_end_tag_name_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x002F); // SOLIDUS
        reconsume(c, rcdata_state);
        break;
    }
  }
  function rcdata_end_tag_name_state(c) {
    /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = before_attribute_name_state;
          return;
        }
        break;
      case 0x002F:
        // SOLIDUS
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = self_closing_start_tag_state;
          return;
        }
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = data_state;
          emitTag();
          return;
        }
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tagnamebuf += String.fromCharCode(c + 0x0020);
        tempbuf.push(c);
        return;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tagnamebuf += String.fromCharCode(c);
        tempbuf.push(c);
        return;
      default:
        break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun, tempbuf);
    reconsume(c, rcdata_state);
  }
  function rawtext_less_than_sign_state(c) {
    /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g
     */
    if (c === 0x002F) {
      // SOLIDUS
      beginTempBuf();
      tokenizer = rawtext_end_tag_open_state;
    } else {
      textrun.push(0x003C); // LESS-THAN SIGN
      reconsume(c, rawtext_state);
    }
  }
  function rawtext_end_tag_open_state(c) {
    /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */
    switch (c) {
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginEndTagName();
        reconsume(c, rawtext_end_tag_name_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x002F); // SOLIDUS
        reconsume(c, rawtext_state);
        break;
    }
  }
  function rawtext_end_tag_name_state(c) {
    /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = before_attribute_name_state;
          return;
        }
        break;
      case 0x002F:
        // SOLIDUS
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = self_closing_start_tag_state;
          return;
        }
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = data_state;
          emitTag();
          return;
        }
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tagnamebuf += String.fromCharCode(c + 0x0020);
        tempbuf.push(c);
        return;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tagnamebuf += String.fromCharCode(c);
        tempbuf.push(c);
        return;
      default:
        break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun, tempbuf);
    reconsume(c, rawtext_state);
  }
  function script_data_less_than_sign_state(c) {
    switch (c) {
      case 0x002F:
        // SOLIDUS
        beginTempBuf();
        tokenizer = script_data_end_tag_open_state;
        break;
      case 0x0021:
        // EXCLAMATION MARK
        tokenizer = script_data_escape_start_state;
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x0021); // EXCLAMATION MARK
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        reconsume(c, script_data_state);
        break;
    }
  }
  function script_data_end_tag_open_state(c) {
    /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */
    switch (c) {
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginEndTagName();
        reconsume(c, script_data_end_tag_name_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x002F); // SOLIDUS
        reconsume(c, script_data_state);
        break;
    }
  }
  function script_data_end_tag_name_state(c) {
    /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = before_attribute_name_state;
          return;
        }
        break;
      case 0x002F:
        // SOLIDUS
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = self_closing_start_tag_state;
          return;
        }
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = data_state;
          emitTag();
          return;
        }
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tagnamebuf += String.fromCharCode(c + 0x0020);
        tempbuf.push(c);
        return;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tagnamebuf += String.fromCharCode(c);
        tempbuf.push(c);
        return;
      default:
        break;
    }

    // If we don't return in one of the cases above, then this was not
    // an appropriately matching close tag, so back out by emitting all
    // the characters as text
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun, tempbuf);
    reconsume(c, script_data_state);
  }
  function script_data_escape_start_state(c) {
    if (c === 0x002D) {
      // HYPHEN-MINUS
      tokenizer = script_data_escape_start_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
    } else {
      reconsume(c, script_data_state);
    }
  }
  function script_data_escape_start_dash_state(c) {
    if (c === 0x002D) {
      // HYPHEN-MINUS
      tokenizer = script_data_escaped_dash_dash_state;
      textrun.push(0x002D); // HYPHEN-MINUS
    } else {
      reconsume(c, script_data_state);
    }
  }
  function script_data_escaped_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = script_data_escaped_dash_state;
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_escaped_less_than_sign_state;
        break;
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        textrun.push(c);
        break;
    }
  }
  function script_data_escaped_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = script_data_escaped_dash_dash_state;
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_escaped_less_than_sign_state;
        break;
      case 0x0000:
        // NULL
        tokenizer = script_data_escaped_state;
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        tokenizer = script_data_escaped_state;
        textrun.push(c);
        break;
    }
  }
  function script_data_escaped_dash_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_escaped_less_than_sign_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = script_data_state;
        textrun.push(0x003E); // GREATER-THAN SIGN
        break;
      case 0x0000:
        // NULL
        tokenizer = script_data_escaped_state;
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        tokenizer = script_data_escaped_state;
        textrun.push(c);
        break;
    }
  }
  function script_data_escaped_less_than_sign_state(c) {
    switch (c) {
      case 0x002F:
        // SOLIDUS
        beginTempBuf();
        tokenizer = script_data_escaped_end_tag_open_state;
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginTempBuf();
        textrun.push(0x003C); // LESS-THAN SIGN
        reconsume(c, script_data_double_escape_start_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        reconsume(c, script_data_escaped_state);
        break;
    }
  }
  function script_data_escaped_end_tag_open_state(c) {
    switch (c) {
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        beginEndTagName();
        reconsume(c, script_data_escaped_end_tag_name_state);
        break;
      default:
        textrun.push(0x003C); // LESS-THAN SIGN
        textrun.push(0x002F); // SOLIDUS
        reconsume(c, script_data_escaped_state);
        break;
    }
  }
  function script_data_escaped_end_tag_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = before_attribute_name_state;
          return;
        }
        break;
      case 0x002F:
        // SOLIDUS
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = self_closing_start_tag_state;
          return;
        }
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        if (appropriateEndTag(tagnamebuf)) {
          tokenizer = data_state;
          emitTag();
          return;
        }
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tagnamebuf += String.fromCharCode(c + 0x0020);
        tempbuf.push(c);
        return;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tagnamebuf += String.fromCharCode(c);
        tempbuf.push(c);
        return;
      default:
        break;
    }

    // We get here in the default case, and if the closing tagname
    // is not an appropriate tagname.
    textrun.push(0x003C); // LESS-THAN SIGN
    textrun.push(0x002F); // SOLIDUS
    pushAll(textrun, tempbuf);
    reconsume(c, script_data_escaped_state);
  }
  function script_data_double_escape_start_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020: // SPACE
      case 0x002F: // SOLIDUS
      case 0x003E:
        // GREATER-THAN SIGN
        if (buf2str(tempbuf) === "script") {
          tokenizer = script_data_double_escaped_state;
        } else {
          tokenizer = script_data_escaped_state;
        }
        textrun.push(c);
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tempbuf.push(c + 0x0020);
        textrun.push(c);
        break;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tempbuf.push(c);
        textrun.push(c);
        break;
      default:
        reconsume(c, script_data_escaped_state);
        break;
    }
  }
  function script_data_double_escaped_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = script_data_double_escaped_dash_state;
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_double_escaped_less_than_sign_state;
        textrun.push(0x003C); // LESS-THAN SIGN
        break;
      case 0x0000:
        // NULL
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        textrun.push(c);
        break;
    }
  }
  function script_data_double_escaped_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = script_data_double_escaped_dash_dash_state;
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_double_escaped_less_than_sign_state;
        textrun.push(0x003C); // LESS-THAN SIGN
        break;
      case 0x0000:
        // NULL
        tokenizer = script_data_double_escaped_state;
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        tokenizer = script_data_double_escaped_state;
        textrun.push(c);
        break;
    }
  }
  function script_data_double_escaped_dash_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        textrun.push(0x002D); // HYPHEN-MINUS
        break;
      case 0x003C:
        // LESS-THAN SIGN
        tokenizer = script_data_double_escaped_less_than_sign_state;
        textrun.push(0x003C); // LESS-THAN SIGN
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = script_data_state;
        textrun.push(0x003E); // GREATER-THAN SIGN
        break;
      case 0x0000:
        // NULL
        tokenizer = script_data_double_escaped_state;
        textrun.push(0xFFFD); // REPLACEMENT CHARACTER
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        tokenizer = script_data_double_escaped_state;
        textrun.push(c);
        break;
    }
  }
  function script_data_double_escaped_less_than_sign_state(c) {
    if (c === 0x002F) {
      // SOLIDUS
      beginTempBuf();
      tokenizer = script_data_double_escape_end_state;
      textrun.push(0x002F); // SOLIDUS
    } else {
      reconsume(c, script_data_double_escaped_state);
    }
  }
  function script_data_double_escape_end_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020: // SPACE
      case 0x002F: // SOLIDUS
      case 0x003E:
        // GREATER-THAN SIGN
        if (buf2str(tempbuf) === "script") {
          tokenizer = script_data_escaped_state;
        } else {
          tokenizer = script_data_double_escaped_state;
        }
        textrun.push(c);
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        tempbuf.push(c + 0x0020);
        textrun.push(c);
        break;
      case 0x0061: // [a-z]
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
      case 0x0067:
      case 0x0068:
      case 0x0069:
      case 0x006A:
      case 0x006B:
      case 0x006C:
      case 0x006D:
      case 0x006E:
      case 0x006F:
      case 0x0070:
      case 0x0071:
      case 0x0072:
      case 0x0073:
      case 0x0074:
      case 0x0075:
      case 0x0076:
      case 0x0077:
      case 0x0078:
      case 0x0079:
      case 0x007A:
        tempbuf.push(c);
        textrun.push(c);
        break;
      default:
        reconsume(c, script_data_double_escaped_state);
        break;
    }
  }
  function before_attribute_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says "reconsume in
      // the after attribute name state", but in our implementation that
      // state always has an active attribute in attrnamebuf.  Just clone
      // the rules here, without the addAttribute business.
      case 0x002F:
        // SOLIDUS
        tokenizer = self_closing_start_tag_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitTag();
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      case 0x003D:
        // EQUALS SIGN
        beginAttrName();
        attrnamebuf += String.fromCharCode(c);
        tokenizer = attribute_name_state;
        break;
      default:
        if (handleSimpleAttribute()) break;
        beginAttrName();
        reconsume(c, attribute_name_state);
        break;
    }
  }

  // beginAttrName() must have been called before this point
  // There is an active attribute in attrnamebuf (but not attrvaluebuf)
  function attribute_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020: // SPACE
      case 0x002F: // SOLIDUS
      case 0x003E: // GREATER-THAN SIGN
      case -1:
        // EOF
        reconsume(c, after_attribute_name_state);
        break;
      case 0x003D:
        // EQUALS SIGN
        tokenizer = before_attribute_value_state;
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        attrnamebuf += String.fromCharCode(c + 0x0020);
        break;
      case 0x0000:
        // NULL
        attrnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case 0x0022: // QUOTATION MARK
      case 0x0027: // APOSTROPHE
      case 0x003C: // LESS-THAN SIGN
      /* falls through */
      default:
        attrnamebuf += getMatchingChars(ATTRNAME);
        break;
    }
  }

  // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.
  function after_attribute_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      case 0x002F:
        // SOLIDUS
        // Keep in sync with before_attribute_name_state.
        addAttribute(attrnamebuf);
        tokenizer = self_closing_start_tag_state;
        break;
      case 0x003D:
        // EQUALS SIGN
        tokenizer = before_attribute_value_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        // Keep in sync with before_attribute_name_state.
        tokenizer = data_state;
        addAttribute(attrnamebuf);
        emitTag();
        break;
      case -1:
        // EOF
        // Keep in sync with before_attribute_name_state.
        addAttribute(attrnamebuf);
        emitEOF();
        break;
      default:
        addAttribute(attrnamebuf);
        beginAttrName();
        reconsume(c, attribute_name_state);
        break;
    }
  }
  function before_attribute_value_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      case 0x0022:
        // QUOTATION MARK
        beginAttrValue();
        tokenizer = attribute_value_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginAttrValue();
        tokenizer = attribute_value_single_quoted_state;
        break;
      case 0x003E: // GREATER-THAN SIGN
      /* falls through */
      default:
        beginAttrValue();
        reconsume(c, attribute_value_unquoted_state);
        break;
    }
  }
  function attribute_value_double_quoted_state(c) {
    switch (c) {
      case 0x0022:
        // QUOTATION MARK
        addAttribute(attrnamebuf, attrvaluebuf);
        tokenizer = after_attribute_value_quoted_state;
        break;
      case 0x0026:
        // AMPERSAND
        return_state = attribute_value_double_quoted_state;
        tokenizer = character_reference_state;
        break;
      case 0x0000:
        // NULL
        attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      case 0x000A:
        // LF
        // this could be a converted \r, so don't use getMatchingChars
        attrvaluebuf += String.fromCharCode(c);
        break;
      default:
        attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);
        break;
    }
  }
  function attribute_value_single_quoted_state(c) {
    switch (c) {
      case 0x0027:
        // APOSTROPHE
        addAttribute(attrnamebuf, attrvaluebuf);
        tokenizer = after_attribute_value_quoted_state;
        break;
      case 0x0026:
        // AMPERSAND
        return_state = attribute_value_single_quoted_state;
        tokenizer = character_reference_state;
        break;
      case 0x0000:
        // NULL
        attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      case 0x000A:
        // LF
        // this could be a converted \r, so don't use getMatchingChars
        attrvaluebuf += String.fromCharCode(c);
        break;
      default:
        attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);
        break;
    }
  }
  function attribute_value_unquoted_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        addAttribute(attrnamebuf, attrvaluebuf);
        tokenizer = before_attribute_name_state;
        break;
      case 0x0026:
        // AMPERSAND
        return_state = attribute_value_unquoted_state;
        tokenizer = character_reference_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        addAttribute(attrnamebuf, attrvaluebuf);
        tokenizer = data_state;
        emitTag();
        break;
      case 0x0000:
        // NULL
        attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        nextchar--; // pushback
        tokenizer = data_state;
        break;
      case 0x0022: // QUOTATION MARK
      case 0x0027: // APOSTROPHE
      case 0x003C: // LESS-THAN SIGN
      case 0x003D: // EQUALS SIGN
      case 0x0060: // GRAVE ACCENT
      /* falls through */
      default:
        attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);
        break;
    }
  }
  function after_attribute_value_quoted_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = before_attribute_name_state;
        break;
      case 0x002F:
        // SOLIDUS
        tokenizer = self_closing_start_tag_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitTag();
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        reconsume(c, before_attribute_name_state);
        break;
    }
  }
  function self_closing_start_tag_state(c) {
    switch (c) {
      case 0x003E:
        // GREATER-THAN SIGN
        // Set the <i>self-closing flag</i> of the current tag token.
        tokenizer = data_state;
        emitSelfClosingTag(true);
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      default:
        reconsume(c, before_attribute_name_state);
        break;
    }
  }
  function bogus_comment_state(c, lookahead, eof) {
    var len = lookahead.length;
    if (eof) {
      nextchar += len - 1; // don't consume the eof
    } else {
      nextchar += len;
    }
    var comment = lookahead.substring(0, len - 1);
    comment = comment.replace(/\u0000/g, "\uFFFD");
    comment = comment.replace(/\u000D\u000A/g, "\u000A");
    comment = comment.replace(/\u000D/g, "\u000A");
    insertToken(COMMENT, comment);
    tokenizer = data_state;
  }
  bogus_comment_state.lookahead = ">";
  function markup_declaration_open_state(c, lookahead, eof) {
    if (lookahead[0] === "-" && lookahead[1] === "-") {
      nextchar += 2;
      beginComment();
      tokenizer = comment_start_state;
      return;
    }
    if (lookahead.toUpperCase() === "DOCTYPE") {
      nextchar += 7;
      tokenizer = doctype_state;
    } else if (lookahead === "[CDATA[" && cdataAllowed()) {
      nextchar += 7;
      tokenizer = cdata_section_state;
    } else {
      tokenizer = bogus_comment_state;
    }
  }
  markup_declaration_open_state.lookahead = 7;
  function comment_start_state(c) {
    beginComment();
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_start_dash_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        insertToken(COMMENT, buf2str(commentbuf));
        break;
      /* see comment in comment end state */
      default:
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_start_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_end_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        insertToken(COMMENT, buf2str(commentbuf));
        break;
      case -1:
        // EOF
        insertToken(COMMENT, buf2str(commentbuf));
        emitEOF();
        break;
      /* see comment in comment end state */
      default:
        commentbuf.push(0x002D /* HYPHEN-MINUS */);
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_state(c) {
    switch (c) {
      case 0x003C:
        // LESS-THAN SIGN
        commentbuf.push(c);
        tokenizer = comment_less_than_sign_state;
        break;
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_end_dash_state;
        break;
      case 0x0000:
        // NULL
        commentbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        insertToken(COMMENT, buf2str(commentbuf));
        emitEOF();
        break;
      /* see comment in comment end state */
      default:
        commentbuf.push(c);
        break;
    }
  }
  function comment_less_than_sign_state(c) {
    switch (c) {
      case 0x0021:
        // EXCLAMATION MARK
        commentbuf.push(c);
        tokenizer = comment_less_than_sign_bang_state;
        break;
      case 0x003C:
        // LESS-THAN SIGN
        commentbuf.push(c);
        break;
      default:
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_less_than_sign_bang_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_less_than_sign_bang_dash_state;
        break;
      default:
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_less_than_sign_bang_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_less_than_sign_bang_dash_dash_state;
        break;
      default:
        reconsume(c, comment_end_dash_state);
        break;
    }
  }
  function comment_less_than_sign_bang_dash_dash_state(c) {
    switch (c) {
      case 0x003E: // GREATER-THAN SIGN
      case -1:
        // EOF
        reconsume(c, comment_end_state);
        break;
      default:
        // parse error
        reconsume(c, comment_end_state);
        break;
    }
  }
  function comment_end_dash_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        tokenizer = comment_end_state;
        break;
      case -1:
        // EOF
        insertToken(COMMENT, buf2str(commentbuf));
        emitEOF();
        break;
      /* see comment in comment end state */
      default:
        commentbuf.push(0x002D /* HYPHEN-MINUS */);
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_end_state(c) {
    switch (c) {
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        insertToken(COMMENT, buf2str(commentbuf));
        break;
      case 0x0021:
        // EXCLAMATION MARK
        tokenizer = comment_end_bang_state;
        break;
      case 0x002D:
        // HYPHEN-MINUS
        commentbuf.push(0x002D);
        break;
      case -1:
        // EOF
        insertToken(COMMENT, buf2str(commentbuf));
        emitEOF();
        break;
      /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */
      default:
        commentbuf.push(0x002D);
        commentbuf.push(0x002D);
        reconsume(c, comment_state);
        break;
    }
  }
  function comment_end_bang_state(c) {
    switch (c) {
      case 0x002D:
        // HYPHEN-MINUS
        commentbuf.push(0x002D);
        commentbuf.push(0x002D);
        commentbuf.push(0x0021);
        tokenizer = comment_end_dash_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        insertToken(COMMENT, buf2str(commentbuf));
        break;
      case -1:
        // EOF
        insertToken(COMMENT, buf2str(commentbuf));
        emitEOF();
        break;
      /* see comment in comment end state */
      default:
        commentbuf.push(0x002D);
        commentbuf.push(0x002D);
        commentbuf.push(0x0021);
        reconsume(c, comment_state);
        break;
    }
  }
  function doctype_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = before_doctype_name_state;
        break;
      case -1:
        // EOF
        beginDoctype();
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        reconsume(c, before_doctype_name_state);
        break;
    }
  }
  function before_doctype_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        beginDoctype();
        doctypenamebuf.push(c + 0x0020);
        tokenizer = doctype_name_state;
        break;
      case 0x0000:
        // NULL
        beginDoctype();
        doctypenamebuf.push(0xFFFD);
        tokenizer = doctype_name_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        beginDoctype();
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        beginDoctype();
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        beginDoctype();
        doctypenamebuf.push(c);
        tokenizer = doctype_name_state;
        break;
    }
  }
  function doctype_name_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = after_doctype_name_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitDoctype();
        break;
      case 0x0041: // [A-Z]
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
      case 0x0047:
      case 0x0048:
      case 0x0049:
      case 0x004A:
      case 0x004B:
      case 0x004C:
      case 0x004D:
      case 0x004E:
      case 0x004F:
      case 0x0050:
      case 0x0051:
      case 0x0052:
      case 0x0053:
      case 0x0054:
      case 0x0055:
      case 0x0056:
      case 0x0057:
      case 0x0058:
      case 0x0059:
      case 0x005A:
        doctypenamebuf.push(c + 0x0020);
        break;
      case 0x0000:
        // NULL
        doctypenamebuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        doctypenamebuf.push(c);
        break;
    }
  }
  function after_doctype_name_state(c, lookahead, eof) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        nextchar += 1;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        nextchar += 1;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        lookahead = lookahead.toUpperCase();
        if (lookahead === "PUBLIC") {
          nextchar += 6;
          tokenizer = after_doctype_public_keyword_state;
        } else if (lookahead === "SYSTEM") {
          nextchar += 6;
          tokenizer = after_doctype_system_keyword_state;
        } else {
          forcequirks();
          tokenizer = bogus_doctype_state;
        }
        break;
    }
  }
  after_doctype_name_state.lookahead = 6;
  function after_doctype_public_keyword_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = before_doctype_public_identifier_state;
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypePublicId();
        tokenizer = doctype_public_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypePublicId();
        tokenizer = doctype_public_identifier_single_quoted_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function before_doctype_public_identifier_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypePublicId();
        tokenizer = doctype_public_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypePublicId();
        tokenizer = doctype_public_identifier_single_quoted_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function doctype_public_identifier_double_quoted_state(c) {
    switch (c) {
      case 0x0022:
        // QUOTATION MARK
        tokenizer = after_doctype_public_identifier_state;
        break;
      case 0x0000:
        // NULL
        doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        doctypepublicbuf.push(c);
        break;
    }
  }
  function doctype_public_identifier_single_quoted_state(c) {
    switch (c) {
      case 0x0027:
        // APOSTROPHE
        tokenizer = after_doctype_public_identifier_state;
        break;
      case 0x0000:
        // NULL
        doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        doctypepublicbuf.push(c);
        break;
    }
  }
  function after_doctype_public_identifier_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = between_doctype_public_and_system_identifiers_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitDoctype();
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_single_quoted_state;
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function between_doctype_public_and_system_identifiers_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE Ignore the character.
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitDoctype();
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_single_quoted_state;
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function after_doctype_system_keyword_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        tokenizer = before_doctype_system_identifier_state;
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_single_quoted_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function before_doctype_system_identifier_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE Ignore the character.
        break;
      case 0x0022:
        // QUOTATION MARK
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_double_quoted_state;
        break;
      case 0x0027:
        // APOSTROPHE
        beginDoctypeSystemId();
        tokenizer = doctype_system_identifier_single_quoted_state;
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        forcequirks();
        tokenizer = bogus_doctype_state;
        break;
    }
  }
  function doctype_system_identifier_double_quoted_state(c) {
    switch (c) {
      case 0x0022:
        // QUOTATION MARK
        tokenizer = after_doctype_system_identifier_state;
        break;
      case 0x0000:
        // NULL
        doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        doctypesystembuf.push(c);
        break;
    }
  }
  function doctype_system_identifier_single_quoted_state(c) {
    switch (c) {
      case 0x0027:
        // APOSTROPHE
        tokenizer = after_doctype_system_identifier_state;
        break;
      case 0x0000:
        // NULL
        doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        forcequirks();
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        doctypesystembuf.push(c);
        break;
    }
  }
  function after_doctype_system_identifier_state(c) {
    switch (c) {
      case 0x0009: // CHARACTER TABULATION (tab)
      case 0x000A: // LINE FEED (LF)
      case 0x000C: // FORM FEED (FF)
      case 0x0020:
        // SPACE
        /* Ignore the character. */
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        forcequirks();
        emitDoctype();
        emitEOF();
        break;
      default:
        tokenizer = bogus_doctype_state;
        /* This does *not* set the DOCTYPE token's force-quirks flag. */
        break;
    }
  }
  function bogus_doctype_state(c) {
    switch (c) {
      case 0x003E:
        // GREATER-THAN SIGN
        tokenizer = data_state;
        emitDoctype();
        break;
      case -1:
        // EOF
        emitDoctype();
        emitEOF();
        break;
      default:
        /* Ignore the character. */
        break;
    }
  }
  function cdata_section_state(c) {
    switch (c) {
      case 0x005D:
        // RIGHT SQUARE BRACKET
        tokenizer = cdata_section_bracket_state;
        break;
      case -1:
        // EOF
        emitEOF();
        break;
      case 0x0000:
        // NULL
        textIncludesNUL = true;
      /* fall through */
      default:
        // Instead of just pushing a single character and then
        // coming back to the very same place, lookahead and
        // emit everything we can at once.
        /*jshint -W030 */
        emitCharsWhile(CDATATEXT) || textrun.push(c);
        break;
    }
  }
  function cdata_section_bracket_state(c) {
    switch (c) {
      case 0x005D:
        // RIGHT SQUARE BRACKET
        tokenizer = cdata_section_end_state;
        break;
      default:
        textrun.push(0x005D);
        reconsume(c, cdata_section_state);
        break;
    }
  }
  function cdata_section_end_state(c) {
    switch (c) {
      case 0x005D:
        // RIGHT SQUARE BRACKET
        textrun.push(0x005D);
        break;
      case 0x003E:
        // GREATER-THAN SIGN
        flushText();
        tokenizer = data_state;
        break;
      default:
        textrun.push(0x005D);
        textrun.push(0x005D);
        reconsume(c, cdata_section_state);
        break;
    }
  }
  function character_reference_state(c) {
    beginTempBuf();
    tempbuf.push(0x0026);
    switch (c) {
      case 0x0009: // TAB
      case 0x000A: // LINE FEED
      case 0x000C: // FORM FEED
      case 0x0020: // SPACE
      case 0x003C: // LESS-THAN SIGN
      case 0x0026: // AMPERSAND
      case -1:
        // EOF
        reconsume(c, character_reference_end_state);
        break;
      case 0x0023:
        // NUMBER SIGN
        tempbuf.push(c);
        tokenizer = numeric_character_reference_state;
        break;
      default:
        reconsume(c, named_character_reference_state);
        break;
    }
  }
  function named_character_reference_state(c) {
    NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed
    var matched = NAMEDCHARREF.exec(chars);
    if (!matched) throw new Error("should never happen");
    var name = matched[1];
    if (!name) {
      // If no match can be made, switch to the character reference end state
      tokenizer = character_reference_end_state;
      return;
    }

    // Consume the matched characters and append them to temporary buffer
    nextchar += name.length;
    pushAll(tempbuf, str2buf(name));
    switch (return_state) {
      case attribute_value_double_quoted_state:
      case attribute_value_single_quoted_state:
      case attribute_value_unquoted_state:
        // If the character reference was consumed as part of an attribute...
        if (name[name.length - 1] !== ';') {
          // ...and the last char is not ;
          if (/[=A-Za-z0-9]/.test(chars[nextchar])) {
            tokenizer = character_reference_end_state;
            return;
          }
        }
        break;
      default:
        break;
    }
    beginTempBuf();
    var rv = namedCharRefs[name];
    if (typeof rv === 'number') {
      tempbuf.push(rv);
    } else {
      pushAll(tempbuf, rv);
    }
    tokenizer = character_reference_end_state;
  }
  // We might need to pause tokenization until we have enough characters
  // in the buffer for longest possible character reference.
  named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;
  function numeric_character_reference_state(c) {
    character_reference_code = 0;
    switch (c) {
      case 0x0078: // x
      case 0x0058:
        // X
        tempbuf.push(c);
        tokenizer = hexadecimal_character_reference_start_state;
        break;
      default:
        reconsume(c, decimal_character_reference_start_state);
        break;
    }
  }
  function hexadecimal_character_reference_start_state(c) {
    switch (c) {
      case 0x0030:
      case 0x0031:
      case 0x0032:
      case 0x0033:
      case 0x0034:
      case 0x0035:
      case 0x0036:
      case 0x0037:
      case 0x0038:
      case 0x0039: // [0-9]
      case 0x0041:
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046: // [A-F]
      case 0x0061:
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
        // [a-f]
        reconsume(c, hexadecimal_character_reference_state);
        break;
      default:
        reconsume(c, character_reference_end_state);
        break;
    }
  }
  function decimal_character_reference_start_state(c) {
    switch (c) {
      case 0x0030:
      case 0x0031:
      case 0x0032:
      case 0x0033:
      case 0x0034:
      case 0x0035:
      case 0x0036:
      case 0x0037:
      case 0x0038:
      case 0x0039:
        // [0-9]
        reconsume(c, decimal_character_reference_state);
        break;
      default:
        reconsume(c, character_reference_end_state);
        break;
    }
  }
  function hexadecimal_character_reference_state(c) {
    switch (c) {
      case 0x0041:
      case 0x0042:
      case 0x0043:
      case 0x0044:
      case 0x0045:
      case 0x0046:
        // [A-F]
        character_reference_code *= 16;
        character_reference_code += c - 0x0037;
        break;
      case 0x0061:
      case 0x0062:
      case 0x0063:
      case 0x0064:
      case 0x0065:
      case 0x0066:
        // [a-f]
        character_reference_code *= 16;
        character_reference_code += c - 0x0057;
        break;
      case 0x0030:
      case 0x0031:
      case 0x0032:
      case 0x0033:
      case 0x0034:
      case 0x0035:
      case 0x0036:
      case 0x0037:
      case 0x0038:
      case 0x0039:
        // [0-9]
        character_reference_code *= 16;
        character_reference_code += c - 0x0030;
        break;
      case 0x003B:
        // SEMICOLON
        tokenizer = numeric_character_reference_end_state;
        break;
      default:
        reconsume(c, numeric_character_reference_end_state);
        break;
    }
  }
  function decimal_character_reference_state(c) {
    switch (c) {
      case 0x0030:
      case 0x0031:
      case 0x0032:
      case 0x0033:
      case 0x0034:
      case 0x0035:
      case 0x0036:
      case 0x0037:
      case 0x0038:
      case 0x0039:
        // [0-9]
        character_reference_code *= 10;
        character_reference_code += c - 0x0030;
        break;
      case 0x003B:
        // SEMICOLON
        tokenizer = numeric_character_reference_end_state;
        break;
      default:
        reconsume(c, numeric_character_reference_end_state);
        break;
    }
  }
  function numeric_character_reference_end_state(c) {
    if (character_reference_code in numericCharRefReplacements) {
      character_reference_code = numericCharRefReplacements[character_reference_code];
    } else if (character_reference_code > 0x10FFFF || character_reference_code >= 0xD800 && character_reference_code < 0xE000) {
      character_reference_code = 0xFFFD;
    }
    beginTempBuf();
    if (character_reference_code <= 0xFFFF) {
      tempbuf.push(character_reference_code);
    } else {
      character_reference_code = character_reference_code - 0x10000;
      /* jshint bitwise: false */
      tempbuf.push(0xD800 + (character_reference_code >> 10));
      tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));
    }
    reconsume(c, character_reference_end_state);
  }
  function character_reference_end_state(c) {
    switch (return_state) {
      case attribute_value_double_quoted_state:
      case attribute_value_single_quoted_state:
      case attribute_value_unquoted_state:
        // append each character to the current attribute's value
        attrvaluebuf += buf2str(tempbuf);
        break;
      default:
        pushAll(textrun, tempbuf);
        break;
    }
    reconsume(c, return_state);
  }

  /***
   * The tree builder insertion modes
   */

  // 11.2.5.4.1 The "initial" insertion mode
  function initial_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        value = value.replace(LEADINGWS, ""); // Ignore spaces
        if (value.length === 0) return; // Are we done?
        break;
      // Handle anything non-space text below
      case 4:
        // COMMENT
        doc._appendChild(doc.createComment(value));
        return;
      case 5:
        // DOCTYPE
        var name = value;
        var publicid = arg3;
        var systemid = arg4;
        // Use the constructor directly instead of
        // implementation.createDocumentType because the create
        // function throws errors on invalid characters, and
        // we don't want the parser to throw them.
        doc.appendChild(new DocumentType(doc, name, publicid, systemid));

        // Note that there is no public API for setting quirks mode We can
        // do this here because we have access to implementation details
        if (force_quirks || name.toLowerCase() !== "html" || quirkyPublicIds.test(publicid) || systemid && systemid.toLowerCase() === quirkySystemId || systemid === undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._quirks = true;else if (limitedQuirkyPublicIds.test(publicid) || systemid !== undefined && conditionallyQuirkyPublicIds.test(publicid)) doc._limitedQuirks = true;
        parser = before_html_mode;
        return;
    }

    // tags or non-whitespace text
    doc._quirks = true;
    parser = before_html_mode;
    parser(t, value, arg3, arg4);
  }

  // 11.2.5.4.2 The "before html" insertion mode
  function before_html_mode(t, value, arg3, arg4) {
    var elt;
    switch (t) {
      case 1:
        // TEXT
        value = value.replace(LEADINGWS, ""); // Ignore spaces
        if (value.length === 0) return; // Are we done?
        break;
      // Handle anything non-space text below
      case 5:
        // DOCTYPE
        /* ignore the token */
        return;
      case 4:
        // COMMENT
        doc._appendChild(doc.createComment(value));
        return;
      case 2:
        // TAG
        if (value === "html") {
          elt = createHTMLElt(doc, value, arg3);
          stack.push(elt);
          doc.appendChild(elt);
          // XXX: handle application cache here
          parser = before_head_mode;
          return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "html":
          case "head":
          case "body":
          case "br":
            break;
          // fall through on these
          default:
            return;
          // ignore most end tags
        }
    }

    // Anything that didn't get handled above is handled like this:
    elt = createHTMLElt(doc, "html", null);
    stack.push(elt);
    doc.appendChild(elt);
    // XXX: handle application cache here
    parser = before_head_mode;
    parser(t, value, arg3, arg4);
  }

  // 11.2.5.4.3 The "before head" insertion mode
  function before_head_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        value = value.replace(LEADINGWS, ""); // Ignore spaces
        if (value.length === 0) return; // Are we done?
        break;
      // Handle anything non-space text below
      case 5:
        // DOCTYPE
        /* ignore the token */
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "head":
            var elt = insertHTMLElement(value, arg3);
            head_element_pointer = elt;
            parser = in_head_mode;
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "html":
          case "head":
          case "body":
          case "br":
            break;
          default:
            return;
          // ignore most end tags
        }
    }

    // If not handled explicitly above
    before_head_mode(TAG, "head", null); // create a head tag
    parser(t, value, arg3, arg4); // then try again with this token
  }

  function in_head_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        var ws = value.match(LEADINGWS);
        if (ws) {
          insertText(ws[0]);
          value = value.substring(ws[0].length);
        }
        if (value.length === 0) return;
        break;
      // Handle non-whitespace below
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "meta":
          // XXX:
          // May need to change the encoding based on this tag
          /* falls through */
          case "base":
          case "basefont":
          case "bgsound":
          case "link":
            insertHTMLElement(value, arg3);
            stack.pop();
            return;
          case "title":
            parseRCDATA(value, arg3);
            return;
          case "noscript":
            if (!scripting_enabled) {
              insertHTMLElement(value, arg3);
              parser = in_head_noscript_mode;
              return;
            }
          // Otherwise, if scripting is enabled...
          /* falls through */
          case "noframes":
          case "style":
            parseRawText(value, arg3);
            return;
          case "script":
            insertElement(function (doc) {
              var elt = createHTMLElt(doc, value, arg3);
              elt._parser_inserted = true;
              elt._force_async = false;
              if (fragment) elt._already_started = true;
              flushText();
              return elt;
            });
            tokenizer = script_data_state;
            originalInsertionMode = parser;
            parser = text_mode;
            return;
          case "template":
            insertHTMLElement(value, arg3);
            afe.insertMarker();
            frameset_ok = false;
            parser = in_template_mode;
            templateInsertionModes.push(parser);
            return;
          case "head":
            return;
          // ignore it
        }

        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "head":
            stack.pop();
            parser = after_head_mode;
            return;
          case "body":
          case "html":
          case "br":
            break;
          // handle these at the bottom of the function
          case "template":
            if (!stack.contains("template")) {
              return;
            }
            stack.generateImpliedEndTags(null, "thorough");
            stack.popTag("template");
            afe.clearToMarker();
            templateInsertionModes.pop();
            resetInsertionMode();
            return;
          default:
            // ignore any other end tag
            return;
        }
        break;
    }

    // If not handled above
    in_head_mode(ENDTAG, "head", null); // synthetic </head>
    parser(t, value, arg3, arg4); // Then redo this one
  }

  // 13.2.5.4.5 The "in head noscript" insertion mode
  function in_head_noscript_mode(t, value, arg3, arg4) {
    switch (t) {
      case 5:
        // DOCTYPE
        return;
      case 4:
        // COMMENT
        in_head_mode(t, value);
        return;
      case 1:
        // TEXT
        var ws = value.match(LEADINGWS);
        if (ws) {
          in_head_mode(t, ws[0]);
          value = value.substring(ws[0].length);
        }
        if (value.length === 0) return; // no more text
        break;
      // Handle non-whitespace below
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "basefont":
          case "bgsound":
          case "link":
          case "meta":
          case "noframes":
          case "style":
            in_head_mode(t, value, arg3);
            return;
          case "head":
          case "noscript":
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "noscript":
            stack.pop();
            parser = in_head_mode;
            return;
          case "br":
            break;
          // goes to the outer default
          default:
            return;
          // ignore other end tags
        }

        break;
    }

    // If not handled above
    in_head_noscript_mode(ENDTAG, "noscript", null);
    parser(t, value, arg3, arg4);
  }
  function after_head_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        var ws = value.match(LEADINGWS);
        if (ws) {
          insertText(ws[0]);
          value = value.substring(ws[0].length);
        }
        if (value.length === 0) return;
        break;
      // Handle non-whitespace below
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "body":
            insertHTMLElement(value, arg3);
            frameset_ok = false;
            parser = in_body_mode;
            return;
          case "frameset":
            insertHTMLElement(value, arg3);
            parser = in_frameset_mode;
            return;
          case "base":
          case "basefont":
          case "bgsound":
          case "link":
          case "meta":
          case "noframes":
          case "script":
          case "style":
          case "template":
          case "title":
            stack.push(head_element_pointer);
            in_head_mode(TAG, value, arg3);
            stack.removeElement(head_element_pointer);
            return;
          case "head":
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "template":
            return in_head_mode(t, value, arg3, arg4);
          case "body":
          case "html":
          case "br":
            break;
          default:
            return;
          // ignore any other end tag
        }

        break;
    }
    after_head_mode(TAG, "body", null);
    frameset_ok = true;
    parser(t, value, arg3, arg4);
  }

  // 13.2.5.4.7 The "in body" insertion mode
  function in_body_mode(t, value, arg3, arg4) {
    var body, i, node, elt;
    switch (t) {
      case 1:
        // TEXT
        if (textIncludesNUL) {
          value = value.replace(NULCHARS, "");
          if (value.length === 0) return;
        }
        // If any non-space characters
        if (frameset_ok && NONWS.test(value)) frameset_ok = false;
        afereconstruct();
        insertText(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case -1:
        // EOF
        if (templateInsertionModes.length) {
          return in_template_mode(t);
        }
        stopParsing();
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            if (stack.contains("template")) {
              return;
            }
            transferAttributes(arg3, stack.elements[0]);
            return;
          case "base":
          case "basefont":
          case "bgsound":
          case "link":
          case "meta":
          case "noframes":
          case "script":
          case "style":
          case "template":
          case "title":
            in_head_mode(TAG, value, arg3);
            return;
          case "body":
            body = stack.elements[1];
            if (!body || !(body instanceof impl.HTMLBodyElement) || stack.contains("template")) return;
            frameset_ok = false;
            transferAttributes(arg3, body);
            return;
          case "frameset":
            if (!frameset_ok) return;
            body = stack.elements[1];
            if (!body || !(body instanceof impl.HTMLBodyElement)) return;
            if (body.parentNode) body.parentNode.removeChild(body);
            while (!(stack.top instanceof impl.HTMLHtmlElement)) stack.pop();
            insertHTMLElement(value, arg3);
            parser = in_frameset_mode;
            return;
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            insertHTMLElement(value, arg3);
            return;
          case "menu":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            if (isA(stack.top, 'menuitem')) {
              stack.pop();
            }
            insertHTMLElement(value, arg3);
            return;
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            if (stack.top instanceof impl.HTMLHeadingElement) stack.pop();
            insertHTMLElement(value, arg3);
            return;
          case "pre":
          case "listing":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            insertHTMLElement(value, arg3);
            ignore_linefeed = true;
            frameset_ok = false;
            return;
          case "form":
            if (form_element_pointer && !stack.contains("template")) return;
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            elt = insertHTMLElement(value, arg3);
            if (!stack.contains("template")) form_element_pointer = elt;
            return;
          case "li":
            frameset_ok = false;
            for (i = stack.elements.length - 1; i >= 0; i--) {
              node = stack.elements[i];
              if (node instanceof impl.HTMLLIElement) {
                in_body_mode(ENDTAG, "li");
                break;
              }
              if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;
            }
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            insertHTMLElement(value, arg3);
            return;
          case "dd":
          case "dt":
            frameset_ok = false;
            for (i = stack.elements.length - 1; i >= 0; i--) {
              node = stack.elements[i];
              if (isA(node, dddtSet)) {
                in_body_mode(ENDTAG, node.localName);
                break;
              }
              if (isA(node, specialSet) && !isA(node, addressdivpSet)) break;
            }
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            insertHTMLElement(value, arg3);
            return;
          case "plaintext":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            insertHTMLElement(value, arg3);
            tokenizer = plaintext_state;
            return;
          case "button":
            if (stack.inScope("button")) {
              in_body_mode(ENDTAG, "button");
              parser(t, value, arg3, arg4);
            } else {
              afereconstruct();
              insertHTMLElement(value, arg3);
              frameset_ok = false;
            }
            return;
          case "a":
            var activeElement = afe.findElementByTag("a");
            if (activeElement) {
              in_body_mode(ENDTAG, value);
              afe.remove(activeElement);
              stack.removeElement(activeElement);
            }
          /* falls through */
          case "b":
          case "big":
          case "code":
          case "em":
          case "font":
          case "i":
          case "s":
          case "small":
          case "strike":
          case "strong":
          case "tt":
          case "u":
            afereconstruct();
            afe.push(insertHTMLElement(value, arg3), arg3);
            return;
          case "nobr":
            afereconstruct();
            if (stack.inScope(value)) {
              in_body_mode(ENDTAG, value);
              afereconstruct();
            }
            afe.push(insertHTMLElement(value, arg3), arg3);
            return;
          case "applet":
          case "marquee":
          case "object":
            afereconstruct();
            insertHTMLElement(value, arg3);
            afe.insertMarker();
            frameset_ok = false;
            return;
          case "table":
            if (!doc._quirks && stack.inButtonScope("p")) {
              in_body_mode(ENDTAG, "p");
            }
            insertHTMLElement(value, arg3);
            frameset_ok = false;
            parser = in_table_mode;
            return;
          case "area":
          case "br":
          case "embed":
          case "img":
          case "keygen":
          case "wbr":
            afereconstruct();
            insertHTMLElement(value, arg3);
            stack.pop();
            frameset_ok = false;
            return;
          case "input":
            afereconstruct();
            elt = insertHTMLElement(value, arg3);
            stack.pop();
            var type = elt.getAttribute("type");
            if (!type || type.toLowerCase() !== "hidden") frameset_ok = false;
            return;
          case "param":
          case "source":
          case "track":
            insertHTMLElement(value, arg3);
            stack.pop();
            return;
          case "hr":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            if (isA(stack.top, 'menuitem')) {
              stack.pop();
            }
            insertHTMLElement(value, arg3);
            stack.pop();
            frameset_ok = false;
            return;
          case "image":
            in_body_mode(TAG, "img", arg3, arg4);
            return;
          case "textarea":
            insertHTMLElement(value, arg3);
            ignore_linefeed = true;
            frameset_ok = false;
            tokenizer = rcdata_state;
            originalInsertionMode = parser;
            parser = text_mode;
            return;
          case "xmp":
            if (stack.inButtonScope("p")) in_body_mode(ENDTAG, "p");
            afereconstruct();
            frameset_ok = false;
            parseRawText(value, arg3);
            return;
          case "iframe":
            frameset_ok = false;
            parseRawText(value, arg3);
            return;
          case "noembed":
            parseRawText(value, arg3);
            return;
          case "noscript":
            if (scripting_enabled) {
              parseRawText(value, arg3);
              return;
            }
            break;
          // XXX Otherwise treat it as any other open tag?

          case "select":
            afereconstruct();
            insertHTMLElement(value, arg3);
            frameset_ok = false;
            if (parser === in_table_mode || parser === in_caption_mode || parser === in_table_body_mode || parser === in_row_mode || parser === in_cell_mode) parser = in_select_in_table_mode;else parser = in_select_mode;
            return;
          case "optgroup":
          case "option":
            if (stack.top instanceof impl.HTMLOptionElement) {
              in_body_mode(ENDTAG, "option");
            }
            afereconstruct();
            insertHTMLElement(value, arg3);
            return;
          case "menuitem":
            if (isA(stack.top, 'menuitem')) {
              stack.pop();
            }
            afereconstruct();
            insertHTMLElement(value, arg3);
            return;
          case "rb":
          case "rtc":
            if (stack.inScope("ruby")) {
              stack.generateImpliedEndTags();
            }
            insertHTMLElement(value, arg3);
            return;
          case "rp":
          case "rt":
            if (stack.inScope("ruby")) {
              stack.generateImpliedEndTags("rtc");
            }
            insertHTMLElement(value, arg3);
            return;
          case "math":
            afereconstruct();
            adjustMathMLAttributes(arg3);
            adjustForeignAttributes(arg3);
            insertForeignElement(value, arg3, NAMESPACE.MATHML);
            if (arg4)
              // self-closing flag
              stack.pop();
            return;
          case "svg":
            afereconstruct();
            adjustSVGAttributes(arg3);
            adjustForeignAttributes(arg3);
            insertForeignElement(value, arg3, NAMESPACE.SVG);
            if (arg4)
              // self-closing flag
              stack.pop();
            return;
          case "caption":
          case "col":
          case "colgroup":
          case "frame":
          case "head":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            // Ignore table tags if we're not in_table mode
            return;
        }

        // Handle any other start tag here
        // (and also noscript tags when scripting is disabled)
        afereconstruct();
        insertHTMLElement(value, arg3);
        return;
      case 3:
        // ENDTAG
        switch (value) {
          case "template":
            in_head_mode(ENDTAG, value, arg3);
            return;
          case "body":
            if (!stack.inScope("body")) return;
            parser = after_body_mode;
            return;
          case "html":
            if (!stack.inScope("body")) return;
            parser = after_body_mode;
            parser(t, value, arg3);
            return;
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "button":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "listing":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "pre":
          case "section":
          case "summary":
          case "ul":
            // Ignore if there is not a matching open tag
            if (!stack.inScope(value)) return;
            stack.generateImpliedEndTags();
            stack.popTag(value);
            return;
          case "form":
            if (!stack.contains("template")) {
              var openform = form_element_pointer;
              form_element_pointer = null;
              if (!openform || !stack.elementInScope(openform)) return;
              stack.generateImpliedEndTags();
              stack.removeElement(openform);
            } else {
              if (!stack.inScope("form")) return;
              stack.generateImpliedEndTags();
              stack.popTag("form");
            }
            return;
          case "p":
            if (!stack.inButtonScope(value)) {
              in_body_mode(TAG, value, null);
              parser(t, value, arg3, arg4);
            } else {
              stack.generateImpliedEndTags(value);
              stack.popTag(value);
            }
            return;
          case "li":
            if (!stack.inListItemScope(value)) return;
            stack.generateImpliedEndTags(value);
            stack.popTag(value);
            return;
          case "dd":
          case "dt":
            if (!stack.inScope(value)) return;
            stack.generateImpliedEndTags(value);
            stack.popTag(value);
            return;
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;
            stack.generateImpliedEndTags();
            stack.popElementType(impl.HTMLHeadingElement);
            return;
          case "sarcasm":
            // Take a deep breath, and then:
            break;
          case "a":
          case "b":
          case "big":
          case "code":
          case "em":
          case "font":
          case "i":
          case "nobr":
          case "s":
          case "small":
          case "strike":
          case "strong":
          case "tt":
          case "u":
            var result = adoptionAgency(value);
            if (result) return; // If we did something we're done
            break;
          // Go to the "any other end tag" case

          case "applet":
          case "marquee":
          case "object":
            if (!stack.inScope(value)) return;
            stack.generateImpliedEndTags();
            stack.popTag(value);
            afe.clearToMarker();
            return;
          case "br":
            in_body_mode(TAG, value, null); // Turn </br> into <br>
            return;
        }

        // Any other end tag goes here
        for (i = stack.elements.length - 1; i >= 0; i--) {
          node = stack.elements[i];
          if (isA(node, value)) {
            stack.generateImpliedEndTags(value);
            stack.popElement(node);
            break;
          } else if (isA(node, specialSet)) {
            return;
          }
        }
        return;
    }
  }
  function text_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        insertText(value);
        return;
      case -1:
        // EOF
        if (stack.top instanceof impl.HTMLScriptElement) stack.top._already_started = true;
        stack.pop();
        parser = originalInsertionMode;
        parser(t);
        return;
      case 3:
        // ENDTAG
        if (value === "script") {
          handleScriptEnd();
        } else {
          stack.pop();
          parser = originalInsertionMode;
        }
        return;
      default:
        // We should never get any other token types
        return;
    }
  }
  function in_table_mode(t, value, arg3, arg4) {
    function getTypeAttr(attrs) {
      for (var i = 0, n = attrs.length; i < n; i++) {
        if (attrs[i][0] === "type") return attrs[i][1].toLowerCase();
      }
      return null;
    }
    switch (t) {
      case 1:
        // TEXT
        // XXX the text_integration_mode stuff is
        // just a hack I made up
        if (text_integration_mode) {
          in_body_mode(t, value, arg3, arg4);
          return;
        } else if (isA(stack.top, tablesectionrowSet)) {
          pending_table_text = [];
          originalInsertionMode = parser;
          parser = in_table_text_mode;
          parser(t, value, arg3, arg4);
          return;
        }
        break;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case 2:
        // TAG
        switch (value) {
          case "caption":
            stack.clearToContext(tableContextSet);
            afe.insertMarker();
            insertHTMLElement(value, arg3);
            parser = in_caption_mode;
            return;
          case "colgroup":
            stack.clearToContext(tableContextSet);
            insertHTMLElement(value, arg3);
            parser = in_column_group_mode;
            return;
          case "col":
            in_table_mode(TAG, "colgroup", null);
            parser(t, value, arg3, arg4);
            return;
          case "tbody":
          case "tfoot":
          case "thead":
            stack.clearToContext(tableContextSet);
            insertHTMLElement(value, arg3);
            parser = in_table_body_mode;
            return;
          case "td":
          case "th":
          case "tr":
            in_table_mode(TAG, "tbody", null);
            parser(t, value, arg3, arg4);
            return;
          case "table":
            if (!stack.inTableScope(value)) {
              return; // Ignore the token
            }

            in_table_mode(ENDTAG, value);
            parser(t, value, arg3, arg4);
            return;
          case "style":
          case "script":
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
          case "input":
            var type = getTypeAttr(arg3);
            if (type !== "hidden") break; // to the anything else case
            insertHTMLElement(value, arg3);
            stack.pop();
            return;
          case "form":
            if (form_element_pointer || stack.contains("template")) return;
            form_element_pointer = insertHTMLElement(value, arg3);
            stack.popElement(form_element_pointer);
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "table":
            if (!stack.inTableScope(value)) return;
            stack.popTag(value);
            resetInsertionMode();
            return;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return;
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case -1:
        // EOF
        in_body_mode(t, value, arg3, arg4);
        return;
    }

    // This is the anything else case
    foster_parent_mode = true;
    in_body_mode(t, value, arg3, arg4);
    foster_parent_mode = false;
  }
  function in_table_text_mode(t, value, arg3, arg4) {
    if (t === TEXT) {
      if (textIncludesNUL) {
        value = value.replace(NULCHARS, "");
        if (value.length === 0) return;
      }
      pending_table_text.push(value);
    } else {
      var s = pending_table_text.join("");
      pending_table_text.length = 0;
      if (NONWS.test(s)) {
        // If any non-whitespace characters
        // This must be the same code as the "anything else"
        // case of the in_table mode above.
        foster_parent_mode = true;
        in_body_mode(TEXT, s);
        foster_parent_mode = false;
      } else {
        insertText(s);
      }
      parser = originalInsertionMode;
      parser(t, value, arg3, arg4);
    }
  }
  function in_caption_mode(t, value, arg3, arg4) {
    function end_caption() {
      if (!stack.inTableScope("caption")) return false;
      stack.generateImpliedEndTags();
      stack.popTag("caption");
      afe.clearToMarker();
      parser = in_table_mode;
      return true;
    }
    switch (t) {
      case 2:
        // TAG
        switch (value) {
          case "caption":
          case "col":
          case "colgroup":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            if (end_caption()) parser(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "caption":
            end_caption();
            return;
          case "table":
            if (end_caption()) parser(t, value, arg3, arg4);
            return;
          case "body":
          case "col":
          case "colgroup":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return;
        }
        break;
    }

    // The Anything Else case
    in_body_mode(t, value, arg3, arg4);
  }
  function in_column_group_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        var ws = value.match(LEADINGWS);
        if (ws) {
          insertText(ws[0]);
          value = value.substring(ws[0].length);
        }
        if (value.length === 0) return;
        break;
      // Handle non-whitespace below

      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "col":
            insertHTMLElement(value, arg3);
            stack.pop();
            return;
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "colgroup":
            if (!isA(stack.top, 'colgroup')) {
              return; // Ignore the token.
            }

            stack.pop();
            parser = in_table_mode;
            return;
          case "col":
            return;
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case -1:
        // EOF
        in_body_mode(t, value, arg3, arg4);
        return;
    }

    // Anything else
    if (!isA(stack.top, 'colgroup')) {
      return; // Ignore the token.
    }

    in_column_group_mode(ENDTAG, "colgroup");
    parser(t, value, arg3, arg4);
  }
  function in_table_body_mode(t, value, arg3, arg4) {
    function endsect() {
      if (!stack.inTableScope("tbody") && !stack.inTableScope("thead") && !stack.inTableScope("tfoot")) return;
      stack.clearToContext(tableBodyContextSet);
      in_table_body_mode(ENDTAG, stack.top.localName, null);
      parser(t, value, arg3, arg4);
    }
    switch (t) {
      case 2:
        // TAG
        switch (value) {
          case "tr":
            stack.clearToContext(tableBodyContextSet);
            insertHTMLElement(value, arg3);
            parser = in_row_mode;
            return;
          case "th":
          case "td":
            in_table_body_mode(TAG, "tr", null);
            parser(t, value, arg3, arg4);
            return;
          case "caption":
          case "col":
          case "colgroup":
          case "tbody":
          case "tfoot":
          case "thead":
            endsect();
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "table":
            endsect();
            return;
          case "tbody":
          case "tfoot":
          case "thead":
            if (stack.inTableScope(value)) {
              stack.clearToContext(tableBodyContextSet);
              stack.pop();
              parser = in_table_mode;
            }
            return;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "html":
          case "td":
          case "th":
          case "tr":
            return;
        }
        break;
    }

    // Anything else:
    in_table_mode(t, value, arg3, arg4);
  }
  function in_row_mode(t, value, arg3, arg4) {
    function endrow() {
      if (!stack.inTableScope("tr")) return false;
      stack.clearToContext(tableRowContextSet);
      stack.pop();
      parser = in_table_body_mode;
      return true;
    }
    switch (t) {
      case 2:
        // TAG
        switch (value) {
          case "th":
          case "td":
            stack.clearToContext(tableRowContextSet);
            insertHTMLElement(value, arg3);
            parser = in_cell_mode;
            afe.insertMarker();
            return;
          case "caption":
          case "col":
          case "colgroup":
          case "tbody":
          case "tfoot":
          case "thead":
          case "tr":
            if (endrow()) parser(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "tr":
            endrow();
            return;
          case "table":
            if (endrow()) parser(t, value, arg3, arg4);
            return;
          case "tbody":
          case "tfoot":
          case "thead":
            if (stack.inTableScope(value)) {
              if (endrow()) parser(t, value, arg3, arg4);
            }
            return;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "html":
          case "td":
          case "th":
            return;
        }
        break;
    }

    // anything else
    in_table_mode(t, value, arg3, arg4);
  }
  function in_cell_mode(t, value, arg3, arg4) {
    switch (t) {
      case 2:
        // TAG
        switch (value) {
          case "caption":
          case "col":
          case "colgroup":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            if (stack.inTableScope("td")) {
              in_cell_mode(ENDTAG, "td");
              parser(t, value, arg3, arg4);
            } else if (stack.inTableScope("th")) {
              in_cell_mode(ENDTAG, "th");
              parser(t, value, arg3, arg4);
            }
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "td":
          case "th":
            if (!stack.inTableScope(value)) return;
            stack.generateImpliedEndTags();
            stack.popTag(value);
            afe.clearToMarker();
            parser = in_row_mode;
            return;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "html":
            return;
          case "table":
          case "tbody":
          case "tfoot":
          case "thead":
          case "tr":
            if (!stack.inTableScope(value)) return;
            in_cell_mode(ENDTAG, stack.inTableScope("td") ? "td" : "th");
            parser(t, value, arg3, arg4);
            return;
        }
        break;
    }

    // anything else
    in_body_mode(t, value, arg3, arg4);
  }
  function in_select_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        if (textIncludesNUL) {
          value = value.replace(NULCHARS, "");
          if (value.length === 0) return;
        }
        insertText(value);
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case -1:
        // EOF
        in_body_mode(t, value, arg3, arg4);
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "option":
            if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, value);
            insertHTMLElement(value, arg3);
            return;
          case "optgroup":
            if (stack.top instanceof impl.HTMLOptionElement) in_select_mode(ENDTAG, "option");
            if (stack.top instanceof impl.HTMLOptGroupElement) in_select_mode(ENDTAG, value);
            insertHTMLElement(value, arg3);
            return;
          case "select":
            in_select_mode(ENDTAG, value); // treat it as a close tag
            return;
          case "input":
          case "keygen":
          case "textarea":
            if (!stack.inSelectScope("select")) return;
            in_select_mode(ENDTAG, "select");
            parser(t, value, arg3, arg4);
            return;
          case "script":
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        switch (value) {
          case "optgroup":
            if (stack.top instanceof impl.HTMLOptionElement && stack.elements[stack.elements.length - 2] instanceof impl.HTMLOptGroupElement) {
              in_select_mode(ENDTAG, "option");
            }
            if (stack.top instanceof impl.HTMLOptGroupElement) stack.pop();
            return;
          case "option":
            if (stack.top instanceof impl.HTMLOptionElement) stack.pop();
            return;
          case "select":
            if (!stack.inSelectScope(value)) return;
            stack.popTag(value);
            resetInsertionMode();
            return;
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
    }

    // anything else: just ignore the token
  }

  function in_select_in_table_mode(t, value, arg3, arg4) {
    switch (value) {
      case "caption":
      case "table":
      case "tbody":
      case "tfoot":
      case "thead":
      case "tr":
      case "td":
      case "th":
        switch (t) {
          case 2:
            // TAG
            in_select_in_table_mode(ENDTAG, "select");
            parser(t, value, arg3, arg4);
            return;
          case 3:
            // ENDTAG
            if (stack.inTableScope(value)) {
              in_select_in_table_mode(ENDTAG, "select");
              parser(t, value, arg3, arg4);
            }
            return;
        }
    }

    // anything else
    in_select_mode(t, value, arg3, arg4);
  }
  function in_template_mode(t, value, arg3, arg4) {
    function switchModeAndReprocess(mode) {
      parser = mode;
      templateInsertionModes[templateInsertionModes.length - 1] = parser;
      parser(t, value, arg3, arg4);
    }
    switch (t) {
      case 1: // TEXT
      case 4: // COMMENT
      case 5:
        // DOCTYPE
        in_body_mode(t, value, arg3, arg4);
        return;
      case -1:
        // EOF
        if (!stack.contains("template")) {
          stopParsing();
        } else {
          stack.popTag("template");
          afe.clearToMarker();
          templateInsertionModes.pop();
          resetInsertionMode();
          parser(t, value, arg3, arg4);
        }
        return;
      case 2:
        // TAG
        switch (value) {
          case "base":
          case "basefont":
          case "bgsound":
          case "link":
          case "meta":
          case "noframes":
          case "script":
          case "style":
          case "template":
          case "title":
            in_head_mode(t, value, arg3, arg4);
            return;
          case "caption":
          case "colgroup":
          case "tbody":
          case "tfoot":
          case "thead":
            switchModeAndReprocess(in_table_mode);
            return;
          case "col":
            switchModeAndReprocess(in_column_group_mode);
            return;
          case "tr":
            switchModeAndReprocess(in_table_body_mode);
            return;
          case "td":
          case "th":
            switchModeAndReprocess(in_row_mode);
            return;
        }
        switchModeAndReprocess(in_body_mode);
        return;
      case 3:
        // ENDTAG
        switch (value) {
          case "template":
            in_head_mode(t, value, arg3, arg4);
            return;
          default:
            return;
        }
    }
  }
  function after_body_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        // If any non-space chars, handle below
        if (NONWS.test(value)) break;
        in_body_mode(t, value);
        return;
      case 4:
        // COMMENT
        // Append it to the <html> element
        stack.elements[0]._appendChild(doc.createComment(value));
        return;
      case 5:
        // DOCTYPE
        return;
      case -1:
        // EOF
        stopParsing();
        return;
      case 2:
        // TAG
        if (value === "html") {
          in_body_mode(t, value, arg3, arg4);
          return;
        }
        break;
      // for any other tags
      case 3:
        // ENDTAG
        if (value === "html") {
          if (fragment) return;
          parser = after_after_body_mode;
          return;
        }
        break;
      // for any other tags
    }

    // anything else
    parser = in_body_mode;
    parser(t, value, arg3, arg4);
  }
  function in_frameset_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        // Ignore any non-space characters
        value = value.replace(ALLNONWS, "");
        if (value.length > 0) insertText(value);
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case -1:
        // EOF
        stopParsing();
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "frameset":
            insertHTMLElement(value, arg3);
            return;
          case "frame":
            insertHTMLElement(value, arg3);
            stack.pop();
            return;
          case "noframes":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        if (value === "frameset") {
          if (fragment && stack.top instanceof impl.HTMLHtmlElement) return;
          stack.pop();
          if (!fragment && !(stack.top instanceof impl.HTMLFrameSetElement)) parser = after_frameset_mode;
          return;
        }
        break;
    }

    // ignore anything else
  }

  function after_frameset_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        // Ignore any non-space characters
        value = value.replace(ALLNONWS, "");
        if (value.length > 0) insertText(value);
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        return;
      case -1:
        // EOF
        stopParsing();
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "noframes":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
      case 3:
        // ENDTAG
        if (value === "html") {
          parser = after_after_frameset_mode;
          return;
        }
        break;
    }

    // ignore anything else
  }

  function after_after_body_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        // If any non-space chars, handle below
        if (NONWS.test(value)) break;
        in_body_mode(t, value, arg3, arg4);
        return;
      case 4:
        // COMMENT
        doc._appendChild(doc.createComment(value));
        return;
      case 5:
        // DOCTYPE
        in_body_mode(t, value, arg3, arg4);
        return;
      case -1:
        // EOF
        stopParsing();
        return;
      case 2:
        // TAG
        if (value === "html") {
          in_body_mode(t, value, arg3, arg4);
          return;
        }
        break;
    }

    // anything else
    parser = in_body_mode;
    parser(t, value, arg3, arg4);
  }
  function after_after_frameset_mode(t, value, arg3, arg4) {
    switch (t) {
      case 1:
        // TEXT
        // Ignore any non-space characters
        value = value.replace(ALLNONWS, "");
        if (value.length > 0) in_body_mode(t, value, arg3, arg4);
        return;
      case 4:
        // COMMENT
        doc._appendChild(doc.createComment(value));
        return;
      case 5:
        // DOCTYPE
        in_body_mode(t, value, arg3, arg4);
        return;
      case -1:
        // EOF
        stopParsing();
        return;
      case 2:
        // TAG
        switch (value) {
          case "html":
            in_body_mode(t, value, arg3, arg4);
            return;
          case "noframes":
            in_head_mode(t, value, arg3, arg4);
            return;
        }
        break;
    }

    // ignore anything else
  }

  // 13.2.5.5 The rules for parsing tokens in foreign content
  //
  // This is like one of the insertion modes above, but is
  // invoked somewhat differently when the current token is not HTML.
  // See the insertToken() function.
  function insertForeignToken(t, value, arg3, arg4) {
    // A <font> tag is an HTML font tag if it has a color, font, or size
    // attribute.  Otherwise we assume it is foreign content
    function isHTMLFont(attrs) {
      for (var i = 0, n = attrs.length; i < n; i++) {
        switch (attrs[i][0]) {
          case "color":
          case "face":
          case "size":
            return true;
        }
      }
      return false;
    }
    var current;
    switch (t) {
      case 1:
        // TEXT
        // If any non-space, non-nul characters
        if (frameset_ok && NONWSNONNUL.test(value)) frameset_ok = false;
        if (textIncludesNUL) {
          value = value.replace(NULCHARS, "\uFFFD");
        }
        insertText(value);
        return;
      case 4:
        // COMMENT
        insertComment(value);
        return;
      case 5:
        // DOCTYPE
        // ignore it
        return;
      case 2:
        // TAG
        switch (value) {
          case "font":
            if (!isHTMLFont(arg3)) break;
          /* falls through */
          case "b":
          case "big":
          case "blockquote":
          case "body":
          case "br":
          case "center":
          case "code":
          case "dd":
          case "div":
          case "dl":
          case "dt":
          case "em":
          case "embed":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
          case "head":
          case "hr":
          case "i":
          case "img":
          case "li":
          case "listing":
          case "menu":
          case "meta":
          case "nobr":
          case "ol":
          case "p":
          case "pre":
          case "ruby":
          case "s":
          case "small":
          case "span":
          case "strong":
          case "strike":
          case "sub":
          case "sup":
          case "table":
          case "tt":
          case "u":
          case "ul":
          case "var":
            if (fragment) {
              break;
            }
            do {
              stack.pop();
              current = stack.top;
            } while (current.namespaceURI !== NAMESPACE.HTML && !isMathmlTextIntegrationPoint(current) && !isHTMLIntegrationPoint(current));
            insertToken(t, value, arg3, arg4); // reprocess
            return;
        }

        // Any other start tag case goes here
        current = stack.elements.length === 1 && fragment ? fragmentContext : stack.top;
        if (current.namespaceURI === NAMESPACE.MATHML) {
          adjustMathMLAttributes(arg3);
        } else if (current.namespaceURI === NAMESPACE.SVG) {
          value = adjustSVGTagName(value);
          adjustSVGAttributes(arg3);
        }
        adjustForeignAttributes(arg3);
        insertForeignElement(value, arg3, current.namespaceURI);
        if (arg4) {
          // the self-closing flag
          if (value === 'script' && current.namespaceURI === NAMESPACE.SVG) {
            // XXX deal with SVG scripts here
          }
          stack.pop();
        }
        return;
      case 3:
        // ENDTAG
        current = stack.top;
        if (value === "script" && current.namespaceURI === NAMESPACE.SVG && current.localName === "script") {
          stack.pop();

          // XXX
          // Deal with SVG scripts here
        } else {
          // The any other end tag case
          var i = stack.elements.length - 1;
          var node = stack.elements[i];
          for (;;) {
            if (node.localName.toLowerCase() === value) {
              stack.popElement(node);
              break;
            }
            node = stack.elements[--i];
            // If non-html, keep looping
            if (node.namespaceURI !== NAMESPACE.HTML) continue;
            // Otherwise process the end tag as html
            parser(t, value, arg3, arg4);
            break;
          }
        }
        return;
    }
  }

  /***
   * Finally, this is the end of the HTMLParser() factory function.
   * It returns the htmlparser object with the append() and end() methods.
   */

  // Sneak another method into the htmlparser object to allow us to run
  // tokenizer tests.  This can be commented out in production code.
  // This is a hook for testing the tokenizer. It has to be here
  // because the tokenizer details are all hidden away within the closure.
  // It should return an array of tokens generated while parsing the
  // input string.
  htmlparser.testTokenizer = function (input, initialState, lastStartTag, charbychar) {
    var tokens = [];
    switch (initialState) {
      case "PCDATA state":
        tokenizer = data_state;
        break;
      case "RCDATA state":
        tokenizer = rcdata_state;
        break;
      case "RAWTEXT state":
        tokenizer = rawtext_state;
        break;
      case "PLAINTEXT state":
        tokenizer = plaintext_state;
        break;
    }
    if (lastStartTag) {
      lasttagname = lastStartTag;
    }
    insertToken = function (t, value, arg3, arg4) {
      flushText();
      switch (t) {
        case 1:
          // TEXT
          if (tokens.length > 0 && tokens[tokens.length - 1][0] === "Character") {
            tokens[tokens.length - 1][1] += value;
          } else tokens.push(["Character", value]);
          break;
        case 4:
          // COMMENT
          tokens.push(["Comment", value]);
          break;
        case 5:
          // DOCTYPE
          tokens.push(["DOCTYPE", value, arg3 === undefined ? null : arg3, arg4 === undefined ? null : arg4, !force_quirks]);
          break;
        case 2:
          // TAG
          var attrs = Object.create(null);
          for (var i = 0; i < arg3.length; i++) {
            // XXX: does attribute order matter?
            var a = arg3[i];
            if (a.length === 1) {
              attrs[a[0]] = "";
            } else {
              attrs[a[0]] = a[1];
            }
          }
          var token = ["StartTag", value, attrs];
          if (arg4) token.push(true);
          tokens.push(token);
          break;
        case 3:
          // ENDTAG
          tokens.push(["EndTag", value]);
          break;
        case -1:
          // EOF
          break;
      }
    };
    if (!charbychar) {
      this.parse(input, true);
    } else {
      for (var i = 0; i < input.length; i++) {
        this.parse(input[i]);
      }
      this.parse("", true);
    }
    return tokens;
  };

  // Return the parser object from the HTMLParser() factory function
  return htmlparser;
}

/***/ }),

/***/ 86269:
/*!*****************************************!*\
  !*** ./node_modules/domino/lib/Leaf.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Leaf;
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeList = __webpack_require__(/*! ./NodeList */ 48649);
var utils = __webpack_require__(/*! ./utils */ 7976);
var HierarchyRequestError = utils.HierarchyRequestError;
var NotFoundError = utils.NotFoundError;

// This class defines common functionality for node subtypes that
// can never have children
function Leaf() {
  Node.call(this);
}
Leaf.prototype = Object.create(Node.prototype, {
  hasChildNodes: {
    value: function () {
      return false;
    }
  },
  firstChild: {
    value: null
  },
  lastChild: {
    value: null
  },
  insertBefore: {
    value: function (node, child) {
      if (!node.nodeType) throw new TypeError('not a node');
      HierarchyRequestError();
    }
  },
  replaceChild: {
    value: function (node, child) {
      if (!node.nodeType) throw new TypeError('not a node');
      HierarchyRequestError();
    }
  },
  removeChild: {
    value: function (node) {
      if (!node.nodeType) throw new TypeError('not a node');
      NotFoundError();
    }
  },
  removeChildren: {
    value: function () {/* no op */}
  },
  childNodes: {
    get: function () {
      if (!this._childNodes) this._childNodes = new NodeList();
      return this._childNodes;
    }
  }
});

/***/ }),

/***/ 48516:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/LinkedList.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ 7976);
var LinkedList = module.exports = {
  // basic validity tests on a circular linked list a
  valid: function (a) {
    utils.assert(a, "list falsy");
    utils.assert(a._previousSibling, "previous falsy");
    utils.assert(a._nextSibling, "next falsy");
    // xxx check that list is actually circular
    return true;
  },
  // insert a before b
  insertBefore: function (a, b) {
    utils.assert(LinkedList.valid(a) && LinkedList.valid(b));
    var a_first = a,
      a_last = a._previousSibling;
    var b_first = b,
      b_last = b._previousSibling;
    a_first._previousSibling = b_last;
    a_last._nextSibling = b_first;
    b_last._nextSibling = a_first;
    b_first._previousSibling = a_last;
    utils.assert(LinkedList.valid(a) && LinkedList.valid(b));
  },
  // replace a single node a with a list b (which could be null)
  replace: function (a, b) {
    utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));
    if (b !== null) {
      LinkedList.insertBefore(b, a);
    }
    LinkedList.remove(a);
    utils.assert(LinkedList.valid(a) && (b === null || LinkedList.valid(b)));
  },
  // remove single node a from its list
  remove: function (a) {
    utils.assert(LinkedList.valid(a));
    var prev = a._previousSibling;
    if (prev === a) {
      return;
    }
    var next = a._nextSibling;
    prev._nextSibling = next;
    next._previousSibling = prev;
    a._previousSibling = a._nextSibling = a;
    utils.assert(LinkedList.valid(a));
  }
};

/***/ }),

/***/ 4278:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/Location.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var URL = __webpack_require__(/*! ./URL */ 81052);
var URLUtils = __webpack_require__(/*! ./URLUtils */ 66519);
module.exports = Location;
function Location(window, href) {
  this._window = window;
  this._href = href;
}
Location.prototype = Object.create(URLUtils.prototype, {
  constructor: {
    value: Location
  },
  // Special behavior when href is set
  href: {
    get: function () {
      return this._href;
    },
    set: function (v) {
      this.assign(v);
    }
  },
  assign: {
    value: function (url) {
      // Resolve the new url against the current one
      // XXX:
      // This is not actually correct. It should be resolved against
      // the URL of the document of the script. For now, though, I only
      // support a single window and there is only one base url.
      // So this is good enough for now.
      var current = new URL(this._href);
      var newurl = current.resolve(url);

      // Save the new url
      this._href = newurl;

      // Start loading the new document!
      // XXX
      // This is just something hacked together.
      // The real algorithm is: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#navigate
    }
  },

  replace: {
    value: function (url) {
      // XXX
      // Since we aren't tracking history yet, replace is the same as assign
      this.assign(url);
    }
  },
  reload: {
    value: function () {
      // XXX:
      // Actually, the spec is a lot more complicated than this
      this.assign(this.href);
    }
  },
  toString: {
    value: function () {
      return this.href;
    }
  }
});

/***/ }),

/***/ 77068:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/MouseEvent.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var UIEvent = __webpack_require__(/*! ./UIEvent */ 56431);
module.exports = MouseEvent;
function MouseEvent() {
  // Just use the superclass constructor to initialize
  UIEvent.call(this);
  this.screenX = this.screenY = this.clientX = this.clientY = 0;
  this.ctrlKey = this.altKey = this.shiftKey = this.metaKey = false;
  this.button = 0;
  this.buttons = 1;
  this.relatedTarget = null;
}
MouseEvent.prototype = Object.create(UIEvent.prototype, {
  constructor: {
    value: MouseEvent
  },
  initMouseEvent: {
    value: function (type, bubbles, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
      this.initEvent(type, bubbles, cancelable, view, detail);
      this.screenX = screenX;
      this.screenY = screenY;
      this.clientX = clientX;
      this.clientY = clientY;
      this.ctrlKey = ctrlKey;
      this.altKey = altKey;
      this.shiftKey = shiftKey;
      this.metaKey = metaKey;
      this.button = button;
      switch (button) {
        case 0:
          this.buttons = 1;
          break;
        case 1:
          this.buttons = 4;
          break;
        case 2:
          this.buttons = 2;
          break;
        default:
          this.buttons = 0;
          break;
      }
      this.relatedTarget = relatedTarget;
    }
  },
  getModifierState: {
    value: function (key) {
      switch (key) {
        case "Alt":
          return this.altKey;
        case "Control":
          return this.ctrlKey;
        case "Shift":
          return this.shiftKey;
        case "Meta":
          return this.metaKey;
        default:
          return false;
      }
    }
  }
});

/***/ }),

/***/ 50485:
/*!******************************************************!*\
  !*** ./node_modules/domino/lib/MutationConstants.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";


module.exports = {
  VALUE: 1,
  // The value of a Text, Comment or PI node changed
  ATTR: 2,
  // A new attribute was added or an attribute value and/or prefix changed
  REMOVE_ATTR: 3,
  // An attribute was removed
  REMOVE: 4,
  // A node was removed
  MOVE: 5,
  // A node was moved
  INSERT: 6 // A node (or a subtree of nodes) was inserted
};

/***/ }),

/***/ 83600:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/NamedNodeMap.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = NamedNodeMap;
var utils = __webpack_require__(/*! ./utils */ 7976);

/* This is a hacky implementation of NamedNodeMap, intended primarily to
 * satisfy clients (like dompurify and the web-platform-tests) which check
 * to ensure that Node#attributes instanceof NamedNodeMap. */

function NamedNodeMap(element) {
  this.element = element;
}
Object.defineProperties(NamedNodeMap.prototype, {
  length: {
    get: utils.shouldOverride
  },
  item: {
    value: utils.shouldOverride
  },
  getNamedItem: {
    value: function getNamedItem(qualifiedName) {
      return this.element.getAttributeNode(qualifiedName);
    }
  },
  getNamedItemNS: {
    value: function getNamedItemNS(namespace, localName) {
      return this.element.getAttributeNodeNS(namespace, localName);
    }
  },
  setNamedItem: {
    value: utils.nyi
  },
  setNamedItemNS: {
    value: utils.nyi
  },
  removeNamedItem: {
    value: function removeNamedItem(qualifiedName) {
      var attr = this.element.getAttributeNode(qualifiedName);
      if (attr) {
        this.element.removeAttribute(qualifiedName);
        return attr;
      }
      utils.NotFoundError();
    }
  },
  removeNamedItemNS: {
    value: function removeNamedItemNS(ns, lname) {
      var attr = this.element.getAttributeNodeNS(ns, lname);
      if (attr) {
        this.element.removeAttributeNS(ns, lname);
        return attr;
      }
      utils.NotFoundError();
    }
  }
});

/***/ }),

/***/ 80477:
/*!************************************************!*\
  !*** ./node_modules/domino/lib/NavigatorID.js ***!
  \************************************************/
/***/ (function(module) {

"use strict";


// https://html.spec.whatwg.org/multipage/webappapis.html#navigatorid
var NavigatorID = Object.create(null, {
  appCodeName: {
    value: "Mozilla"
  },
  appName: {
    value: "Netscape"
  },
  appVersion: {
    value: "4.0"
  },
  platform: {
    value: ""
  },
  product: {
    value: "Gecko"
  },
  productSub: {
    value: "20100101"
  },
  userAgent: {
    value: ""
  },
  vendor: {
    value: ""
  },
  vendorSub: {
    value: ""
  },
  taintEnabled: {
    value: function () {
      return false;
    }
  }
});
module.exports = NavigatorID;

/***/ }),

/***/ 88869:
/*!*****************************************!*\
  !*** ./node_modules/domino/lib/Node.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Node;
var EventTarget = __webpack_require__(/*! ./EventTarget */ 36648);
var LinkedList = __webpack_require__(/*! ./LinkedList */ 48516);
var NodeUtils = __webpack_require__(/*! ./NodeUtils */ 62444);
var utils = __webpack_require__(/*! ./utils */ 7976);

// All nodes have a nodeType and an ownerDocument.
// Once inserted, they also have a parentNode.
// This is an abstract class; all nodes in a document are instances
// of a subtype, so all the properties are defined by more specific
// constructors.
function Node() {
  EventTarget.call(this);
  this.parentNode = null;
  this._nextSibling = this._previousSibling = this;
  this._index = undefined;
}
var ELEMENT_NODE = Node.ELEMENT_NODE = 1;
var ATTRIBUTE_NODE = Node.ATTRIBUTE_NODE = 2;
var TEXT_NODE = Node.TEXT_NODE = 3;
var CDATA_SECTION_NODE = Node.CDATA_SECTION_NODE = 4;
var ENTITY_REFERENCE_NODE = Node.ENTITY_REFERENCE_NODE = 5;
var ENTITY_NODE = Node.ENTITY_NODE = 6;
var PROCESSING_INSTRUCTION_NODE = Node.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE = Node.COMMENT_NODE = 8;
var DOCUMENT_NODE = Node.DOCUMENT_NODE = 9;
var DOCUMENT_TYPE_NODE = Node.DOCUMENT_TYPE_NODE = 10;
var DOCUMENT_FRAGMENT_NODE = Node.DOCUMENT_FRAGMENT_NODE = 11;
var NOTATION_NODE = Node.NOTATION_NODE = 12;
var DOCUMENT_POSITION_DISCONNECTED = Node.DOCUMENT_POSITION_DISCONNECTED = 0x01;
var DOCUMENT_POSITION_PRECEDING = Node.DOCUMENT_POSITION_PRECEDING = 0x02;
var DOCUMENT_POSITION_FOLLOWING = Node.DOCUMENT_POSITION_FOLLOWING = 0x04;
var DOCUMENT_POSITION_CONTAINS = Node.DOCUMENT_POSITION_CONTAINS = 0x08;
var DOCUMENT_POSITION_CONTAINED_BY = Node.DOCUMENT_POSITION_CONTAINED_BY = 0x10;
var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
Node.prototype = Object.create(EventTarget.prototype, {
  // Node that are not inserted into the tree inherit a null parent

  // XXX: the baseURI attribute is defined by dom core, but
  // a correct implementation of it requires HTML features, so
  // we'll come back to this later.
  baseURI: {
    get: utils.nyi
  },
  parentElement: {
    get: function () {
      return this.parentNode && this.parentNode.nodeType === ELEMENT_NODE ? this.parentNode : null;
    }
  },
  hasChildNodes: {
    value: utils.shouldOverride
  },
  firstChild: {
    get: utils.shouldOverride
  },
  lastChild: {
    get: utils.shouldOverride
  },
  previousSibling: {
    get: function () {
      var parent = this.parentNode;
      if (!parent) return null;
      if (this === parent.firstChild) return null;
      return this._previousSibling;
    }
  },
  nextSibling: {
    get: function () {
      var parent = this.parentNode,
        next = this._nextSibling;
      if (!parent) return null;
      if (next === parent.firstChild) return null;
      return next;
    }
  },
  textContent: {
    // Should override for DocumentFragment/Element/Attr/Text/PI/Comment
    get: function () {
      return null;
    },
    set: function (v) {/* do nothing */}
  },
  _countChildrenOfType: {
    value: function (type) {
      var sum = 0;
      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
        if (kid.nodeType === type) sum++;
      }
      return sum;
    }
  },
  _ensureInsertValid: {
    value: function _ensureInsertValid(node, child, isPreinsert) {
      var parent = this,
        i,
        kid;
      if (!node.nodeType) throw new TypeError('not a node');
      // 1. If parent is not a Document, DocumentFragment, or Element
      // node, throw a HierarchyRequestError.
      switch (parent.nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
        case ELEMENT_NODE:
          break;
        default:
          utils.HierarchyRequestError();
      }
      // 2. If node is a host-including inclusive ancestor of parent,
      // throw a HierarchyRequestError.
      if (node.isAncestor(parent)) utils.HierarchyRequestError();
      // 3. If child is not null and its parent is not parent, then
      // throw a NotFoundError. (replaceChild omits the 'child is not null'
      // and throws a TypeError here if child is null.)
      if (child !== null || !isPreinsert) {
        if (child.parentNode !== parent) utils.NotFoundError();
      }
      // 4. If node is not a DocumentFragment, DocumentType, Element,
      // Text, ProcessingInstruction, or Comment node, throw a
      // HierarchyRequestError.
      switch (node.nodeType) {
        case DOCUMENT_FRAGMENT_NODE:
        case DOCUMENT_TYPE_NODE:
        case ELEMENT_NODE:
        case TEXT_NODE:
        case PROCESSING_INSTRUCTION_NODE:
        case COMMENT_NODE:
          break;
        default:
          utils.HierarchyRequestError();
      }
      // 5. If either node is a Text node and parent is a document, or
      // node is a doctype and parent is not a document, throw a
      // HierarchyRequestError.
      // 6. If parent is a document, and any of the statements below, switched
      // on node, are true, throw a HierarchyRequestError.
      if (parent.nodeType === DOCUMENT_NODE) {
        switch (node.nodeType) {
          case TEXT_NODE:
            utils.HierarchyRequestError();
            break;
          case DOCUMENT_FRAGMENT_NODE:
            // 6a1. If node has more than one element child or has a Text
            // node child.
            if (node._countChildrenOfType(TEXT_NODE) > 0) utils.HierarchyRequestError();
            switch (node._countChildrenOfType(ELEMENT_NODE)) {
              case 0:
                break;
              case 1:
                // 6a2. Otherwise, if node has one element child and either
                // parent has an element child, child is a doctype, or child
                // is not null and a doctype is following child. [preinsert]
                // 6a2. Otherwise, if node has one element child and either
                // parent has an element child that is not child or a
                // doctype is following child. [replaceWith]
                if (child !== null /* always true here for replaceWith */) {
                  if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
                  for (kid = child.nextSibling; kid !== null; kid = kid.nextSibling) {
                    if (kid.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
                  }
                }
                i = parent._countChildrenOfType(ELEMENT_NODE);
                if (isPreinsert) {
                  // "parent has an element child"
                  if (i > 0) utils.HierarchyRequestError();
                } else {
                  // "parent has an element child that is not child"
                  if (i > 1 || i === 1 && child.nodeType !== ELEMENT_NODE) utils.HierarchyRequestError();
                }
                break;
              default:
                // 6a1, continued. (more than one Element child)
                utils.HierarchyRequestError();
            }
            break;
          case ELEMENT_NODE:
            // 6b. parent has an element child, child is a doctype, or
            // child is not null and a doctype is following child. [preinsert]
            // 6b. parent has an element child that is not child or a
            // doctype is following child. [replaceWith]
            if (child !== null /* always true here for replaceWith */) {
              if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
              for (kid = child.nextSibling; kid !== null; kid = kid.nextSibling) {
                if (kid.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
              }
            }
            i = parent._countChildrenOfType(ELEMENT_NODE);
            if (isPreinsert) {
              // "parent has an element child"
              if (i > 0) utils.HierarchyRequestError();
            } else {
              // "parent has an element child that is not child"
              if (i > 1 || i === 1 && child.nodeType !== ELEMENT_NODE) utils.HierarchyRequestError();
            }
            break;
          case DOCUMENT_TYPE_NODE:
            // 6c. parent has a doctype child, child is non-null and an
            // element is preceding child, or child is null and parent has
            // an element child. [preinsert]
            // 6c. parent has a doctype child that is not child, or an
            // element is preceding child. [replaceWith]
            if (child === null) {
              if (parent._countChildrenOfType(ELEMENT_NODE)) utils.HierarchyRequestError();
            } else {
              // child is always non-null for [replaceWith] case
              for (kid = parent.firstChild; kid !== null; kid = kid.nextSibling) {
                if (kid === child) break;
                if (kid.nodeType === ELEMENT_NODE) utils.HierarchyRequestError();
              }
            }
            i = parent._countChildrenOfType(DOCUMENT_TYPE_NODE);
            if (isPreinsert) {
              // "parent has an doctype child"
              if (i > 0) utils.HierarchyRequestError();
            } else {
              // "parent has an doctype child that is not child"
              if (i > 1 || i === 1 && child.nodeType !== DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
            }
            break;
        }
      } else {
        // 5, continued: (parent is not a document)
        if (node.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();
      }
    }
  },
  insertBefore: {
    value: function insertBefore(node, child) {
      var parent = this;
      // 1. Ensure pre-insertion validity
      parent._ensureInsertValid(node, child, true);
      // 2. Let reference child be child.
      var refChild = child;
      // 3. If reference child is node, set it to node's next sibling
      if (refChild === node) {
        refChild = node.nextSibling;
      }
      // 4. Adopt node into parent's node document.
      parent.doc.adoptNode(node);
      // 5. Insert node into parent before reference child.
      node._insertOrReplace(parent, refChild, false);
      // 6. Return node
      return node;
    }
  },
  appendChild: {
    value: function (child) {
      // This invokes _appendChild after doing validity checks.
      return this.insertBefore(child, null);
    }
  },
  _appendChild: {
    value: function (child) {
      child._insertOrReplace(this, null, false);
    }
  },
  removeChild: {
    value: function removeChild(child) {
      var parent = this;
      if (!child.nodeType) throw new TypeError('not a node');
      if (child.parentNode !== parent) utils.NotFoundError();
      child.remove();
      return child;
    }
  },
  // To replace a `child` with `node` within a `parent` (this)
  replaceChild: {
    value: function replaceChild(node, child) {
      var parent = this;
      // Ensure validity (slight differences from pre-insertion check)
      parent._ensureInsertValid(node, child, false);
      // Adopt node into parent's node document.
      if (node.doc !== parent.doc) {
        // XXX adoptNode has side-effect of removing node from its parent
        // and generating a mutation event, thus causing the _insertOrReplace
        // to generate two deletes and an insert instead of a 'move'
        // event.  It looks like the new MutationObserver stuff avoids
        // this problem, but for now let's only adopt (ie, remove `node`
        // from its parent) here if we need to.
        parent.doc.adoptNode(node);
      }
      // Do the replace.
      node._insertOrReplace(parent, child, true);
      return child;
    }
  },
  // See: http://ejohn.org/blog/comparing-document-position/
  contains: {
    value: function contains(node) {
      if (node === null) {
        return false;
      }
      if (this === node) {
        return true; /* inclusive descendant */
      }
      /* jshint bitwise: false */
      return (this.compareDocumentPosition(node) & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
    }
  },
  compareDocumentPosition: {
    value: function compareDocumentPosition(that) {
      // Basic algorithm for finding the relative position of two nodes.
      // Make a list the ancestors of each node, starting with the
      // document element and proceeding down to the nodes themselves.
      // Then, loop through the lists, looking for the first element
      // that differs.  The order of those two elements give the
      // order of their descendant nodes.  Or, if one list is a prefix
      // of the other one, then that node contains the other.

      if (this === that) return 0;

      // If they're not owned by the same document or if one is rooted
      // and one is not, then they're disconnected.
      if (this.doc !== that.doc || this.rooted !== that.rooted) return DOCUMENT_POSITION_DISCONNECTED + DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;

      // Get arrays of ancestors for this and that
      var these = [],
        those = [];
      for (var n = this; n !== null; n = n.parentNode) these.push(n);
      for (n = that; n !== null; n = n.parentNode) those.push(n);
      these.reverse(); // So we start with the outermost
      those.reverse();
      if (these[0] !== those[0])
        // No common ancestor
        return DOCUMENT_POSITION_DISCONNECTED + DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
      n = Math.min(these.length, those.length);
      for (var i = 1; i < n; i++) {
        if (these[i] !== those[i]) {
          // We found two different ancestors, so compare
          // their positions
          if (these[i].index < those[i].index) return DOCUMENT_POSITION_FOLLOWING;else return DOCUMENT_POSITION_PRECEDING;
        }
      }

      // If we get to here, then one of the nodes (the one with the
      // shorter list of ancestors) contains the other one.
      if (these.length < those.length) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY;else return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS;
    }
  },
  isSameNode: {
    value: function isSameNode(node) {
      return this === node;
    }
  },
  // This method implements the generic parts of node equality testing
  // and defers to the (non-recursive) type-specific isEqual() method
  // defined by subclasses
  isEqualNode: {
    value: function isEqualNode(node) {
      if (!node) return false;
      if (node.nodeType !== this.nodeType) return false;

      // Check type-specific properties for equality
      if (!this.isEqual(node)) return false;

      // Now check children for number and equality
      for (var c1 = this.firstChild, c2 = node.firstChild; c1 && c2; c1 = c1.nextSibling, c2 = c2.nextSibling) {
        if (!c1.isEqualNode(c2)) return false;
      }
      return c1 === null && c2 === null;
    }
  },
  // This method delegates shallow cloning to a clone() method
  // that each concrete subclass must implement
  cloneNode: {
    value: function (deep) {
      // Clone this node
      var clone = this.clone();

      // Handle the recursive case if necessary
      if (deep) {
        for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
          clone._appendChild(kid.cloneNode(true));
        }
      }
      return clone;
    }
  },
  lookupPrefix: {
    value: function lookupPrefix(ns) {
      var e;
      if (ns === '' || ns === null || ns === undefined) return null;
      switch (this.nodeType) {
        case ELEMENT_NODE:
          return this._lookupNamespacePrefix(ns, this);
        case DOCUMENT_NODE:
          e = this.documentElement;
          return e ? e.lookupPrefix(ns) : null;
        case ENTITY_NODE:
        case NOTATION_NODE:
        case DOCUMENT_FRAGMENT_NODE:
        case DOCUMENT_TYPE_NODE:
          return null;
        case ATTRIBUTE_NODE:
          e = this.ownerElement;
          return e ? e.lookupPrefix(ns) : null;
        default:
          e = this.parentElement;
          return e ? e.lookupPrefix(ns) : null;
      }
    }
  },
  lookupNamespaceURI: {
    value: function lookupNamespaceURI(prefix) {
      if (prefix === '' || prefix === undefined) {
        prefix = null;
      }
      var e;
      switch (this.nodeType) {
        case ELEMENT_NODE:
          return utils.shouldOverride();
        case DOCUMENT_NODE:
          e = this.documentElement;
          return e ? e.lookupNamespaceURI(prefix) : null;
        case ENTITY_NODE:
        case NOTATION_NODE:
        case DOCUMENT_TYPE_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          return null;
        case ATTRIBUTE_NODE:
          e = this.ownerElement;
          return e ? e.lookupNamespaceURI(prefix) : null;
        default:
          e = this.parentElement;
          return e ? e.lookupNamespaceURI(prefix) : null;
      }
    }
  },
  isDefaultNamespace: {
    value: function isDefaultNamespace(ns) {
      if (ns === '' || ns === undefined) {
        ns = null;
      }
      var defaultNamespace = this.lookupNamespaceURI(null);
      return defaultNamespace === ns;
    }
  },
  // Utility methods for nodes.  Not part of the DOM

  // Return the index of this node in its parent.
  // Throw if no parent, or if this node is not a child of its parent
  index: {
    get: function () {
      var parent = this.parentNode;
      if (this === parent.firstChild) return 0; // fast case
      var kids = parent.childNodes;
      if (this._index === undefined || kids[this._index] !== this) {
        // Ensure that we don't have an O(N^2) blowup if none of the
        // kids have defined indices yet and we're traversing via
        // nextSibling or previousSibling
        for (var i = 0; i < kids.length; i++) {
          kids[i]._index = i;
        }
        utils.assert(kids[this._index] === this);
      }
      return this._index;
    }
  },
  // Return true if this node is equal to or is an ancestor of that node
  // Note that nodes are considered to be ancestors of themselves
  isAncestor: {
    value: function (that) {
      // If they belong to different documents, then they're unrelated.
      if (this.doc !== that.doc) return false;
      // If one is rooted and one isn't then they're not related
      if (this.rooted !== that.rooted) return false;

      // Otherwise check by traversing the parentNode chain
      for (var e = that; e; e = e.parentNode) {
        if (e === this) return true;
      }
      return false;
    }
  },
  // DOMINO Changed the behavior to conform with the specs. See:
  // https://groups.google.com/d/topic/mozilla.dev.platform/77sIYcpdDmc/discussion
  ensureSameDoc: {
    value: function (that) {
      if (that.ownerDocument === null) {
        that.ownerDocument = this.doc;
      } else if (that.ownerDocument !== this.doc) {
        utils.WrongDocumentError();
      }
    }
  },
  removeChildren: {
    value: utils.shouldOverride
  },
  // Insert this node as a child of parent before the specified child,
  // or insert as the last child of parent if specified child is null,
  // or replace the specified child with this node, firing mutation events as
  // necessary
  _insertOrReplace: {
    value: function _insertOrReplace(parent, before, isReplace) {
      var child = this,
        before_index,
        i;
      if (child.nodeType === DOCUMENT_FRAGMENT_NODE && child.rooted) {
        utils.HierarchyRequestError();
      }

      /* Ensure index of `before` is cached before we (possibly) remove it. */
      if (parent._childNodes) {
        before_index = before === null ? parent._childNodes.length : before.index; /* ensure _index is cached */

        // If we are already a child of the specified parent, then
        // the index may have to be adjusted.
        if (child.parentNode === parent) {
          var child_index = child.index;
          // If the child is before the spot it is to be inserted at,
          // then when it is removed, the index of that spot will be
          // reduced.
          if (child_index < before_index) {
            before_index--;
          }
        }
      }

      // Delete the old child
      if (isReplace) {
        if (before.rooted) before.doc.mutateRemove(before);
        before.parentNode = null;
      }
      var n = before;
      if (n === null) {
        n = parent.firstChild;
      }

      // If both the child and the parent are rooted, then we want to
      // transplant the child without uprooting and rerooting it.
      var bothRooted = child.rooted && parent.rooted;
      if (child.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var spliceArgs = [0, isReplace ? 1 : 0],
          next;
        for (var kid = child.firstChild; kid !== null; kid = next) {
          next = kid.nextSibling;
          spliceArgs.push(kid);
          kid.parentNode = parent;
        }
        var len = spliceArgs.length;
        // Add all nodes to the new parent, overwriting the old child
        if (isReplace) {
          LinkedList.replace(n, len > 2 ? spliceArgs[2] : null);
        } else if (len > 2 && n !== null) {
          LinkedList.insertBefore(spliceArgs[2], n);
        }
        if (parent._childNodes) {
          spliceArgs[0] = before === null ? parent._childNodes.length : before._index;
          parent._childNodes.splice.apply(parent._childNodes, spliceArgs);
          for (i = 2; i < len; i++) {
            spliceArgs[i]._index = spliceArgs[0] + (i - 2);
          }
        } else if (parent._firstChild === before) {
          if (len > 2) {
            parent._firstChild = spliceArgs[2];
          } else if (isReplace) {
            parent._firstChild = null;
          }
        }
        // Remove all nodes from the document fragment
        if (child._childNodes) {
          child._childNodes.length = 0;
        } else {
          child._firstChild = null;
        }
        // Call the mutation handlers
        // Use spliceArgs since the original array has been destroyed. The
        // liveness guarantee requires us to clone the array so that
        // references to the childNodes of the DocumentFragment will be empty
        // when the insertion handlers are called.
        if (parent.rooted) {
          parent.modify();
          for (i = 2; i < len; i++) {
            parent.doc.mutateInsert(spliceArgs[i]);
          }
        }
      } else {
        if (before === child) {
          return;
        }
        if (bothRooted) {
          // Remove the child from its current position in the tree
          // without calling remove(), since we don't want to uproot it.
          child._remove();
        } else if (child.parentNode) {
          child.remove();
        }

        // Insert it as a child of its new parent
        child.parentNode = parent;
        if (isReplace) {
          LinkedList.replace(n, child);
          if (parent._childNodes) {
            child._index = before_index;
            parent._childNodes[before_index] = child;
          } else if (parent._firstChild === before) {
            parent._firstChild = child;
          }
        } else {
          if (n !== null) {
            LinkedList.insertBefore(child, n);
          }
          if (parent._childNodes) {
            child._index = before_index;
            parent._childNodes.splice(before_index, 0, child);
          } else if (parent._firstChild === before) {
            parent._firstChild = child;
          }
        }
        if (bothRooted) {
          parent.modify();
          // Generate a move mutation event
          parent.doc.mutateMove(child);
        } else if (parent.rooted) {
          parent.modify();
          parent.doc.mutateInsert(child);
        }
      }
    }
  },
  // Return the lastModTime value for this node. (For use as a
  // cache invalidation mechanism. If the node does not already
  // have one, initialize it from the owner document's modclock
  // property. (Note that modclock does not return the actual
  // time; it is simply a counter incremented on each document
  // modification)
  lastModTime: {
    get: function () {
      if (!this._lastModTime) {
        this._lastModTime = this.doc.modclock;
      }
      return this._lastModTime;
    }
  },
  // Increment the owner document's modclock and use the new
  // value to update the lastModTime value for this node and
  // all of its ancestors. Nodes that have never had their
  // lastModTime value queried do not need to have a
  // lastModTime property set on them since there is no
  // previously queried value to ever compare the new value
  // against, so only update nodes that already have a
  // _lastModTime property.
  modify: {
    value: function () {
      if (this.doc.modclock) {
        // Skip while doc.modclock == 0
        var time = ++this.doc.modclock;
        for (var n = this; n; n = n.parentElement) {
          if (n._lastModTime) {
            n._lastModTime = time;
          }
        }
      }
    }
  },
  // This attribute is not part of the DOM but is quite helpful.
  // It returns the document with which a node is associated.  Usually
  // this is the ownerDocument. But ownerDocument is null for the
  // document object itself, so this is a handy way to get the document
  // regardless of the node type
  doc: {
    get: function () {
      return this.ownerDocument || this;
    }
  },
  // If the node has a nid (node id), then it is rooted in a document
  rooted: {
    get: function () {
      return !!this._nid;
    }
  },
  normalize: {
    value: function () {
      var next;
      for (var child = this.firstChild; child !== null; child = next) {
        next = child.nextSibling;
        if (child.normalize) {
          child.normalize();
        }
        if (child.nodeType !== Node.TEXT_NODE) {
          continue;
        }
        if (child.nodeValue === "") {
          this.removeChild(child);
          continue;
        }
        var prevChild = child.previousSibling;
        if (prevChild === null) {
          continue;
        } else if (prevChild.nodeType === Node.TEXT_NODE) {
          // merge this with previous and remove the child
          prevChild.appendData(child.nodeValue);
          this.removeChild(child);
        }
      }
    }
  },
  // Convert the children of a node to an HTML string.
  // This is used by the innerHTML getter
  // The serialization spec is at:
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#serializing-html-fragments
  //
  // The serialization logic is intentionally implemented in a separate
  // `NodeUtils` helper instead of the more obvious choice of a private
  // `_serializeOne()` method on the `Node.prototype` in order to avoid
  // the megamorphic `this._serializeOne` property access, which reduces
  // performance unnecessarily. If you need specialized behavior for a
  // certain subclass, you'll need to implement that in `NodeUtils`.
  // See https://github.com/fgnass/domino/pull/142 for more information.
  serialize: {
    value: function () {
      var s = '';
      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {
        s += NodeUtils.serializeOne(kid, this);
      }
      return s;
    }
  },
  // Non-standard, but often useful for debugging.
  outerHTML: {
    get: function () {
      return NodeUtils.serializeOne(this, {
        nodeType: 0
      });
    },
    set: utils.nyi
  },
  // mirror node type properties in the prototype, so they are present
  // in instances of Node (and subclasses)
  ELEMENT_NODE: {
    value: ELEMENT_NODE
  },
  ATTRIBUTE_NODE: {
    value: ATTRIBUTE_NODE
  },
  TEXT_NODE: {
    value: TEXT_NODE
  },
  CDATA_SECTION_NODE: {
    value: CDATA_SECTION_NODE
  },
  ENTITY_REFERENCE_NODE: {
    value: ENTITY_REFERENCE_NODE
  },
  ENTITY_NODE: {
    value: ENTITY_NODE
  },
  PROCESSING_INSTRUCTION_NODE: {
    value: PROCESSING_INSTRUCTION_NODE
  },
  COMMENT_NODE: {
    value: COMMENT_NODE
  },
  DOCUMENT_NODE: {
    value: DOCUMENT_NODE
  },
  DOCUMENT_TYPE_NODE: {
    value: DOCUMENT_TYPE_NODE
  },
  DOCUMENT_FRAGMENT_NODE: {
    value: DOCUMENT_FRAGMENT_NODE
  },
  NOTATION_NODE: {
    value: NOTATION_NODE
  },
  DOCUMENT_POSITION_DISCONNECTED: {
    value: DOCUMENT_POSITION_DISCONNECTED
  },
  DOCUMENT_POSITION_PRECEDING: {
    value: DOCUMENT_POSITION_PRECEDING
  },
  DOCUMENT_POSITION_FOLLOWING: {
    value: DOCUMENT_POSITION_FOLLOWING
  },
  DOCUMENT_POSITION_CONTAINS: {
    value: DOCUMENT_POSITION_CONTAINS
  },
  DOCUMENT_POSITION_CONTAINED_BY: {
    value: DOCUMENT_POSITION_CONTAINED_BY
  },
  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {
    value: DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
  }
});

/***/ }),

/***/ 62659:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/NodeFilter.js ***!
  \***********************************************/
/***/ (function(module) {

"use strict";


var NodeFilter = {
  // Constants for acceptNode()
  FILTER_ACCEPT: 1,
  FILTER_REJECT: 2,
  FILTER_SKIP: 3,
  // Constants for whatToShow
  SHOW_ALL: 0xFFFFFFFF,
  SHOW_ELEMENT: 0x1,
  SHOW_ATTRIBUTE: 0x2,
  // historical
  SHOW_TEXT: 0x4,
  SHOW_CDATA_SECTION: 0x8,
  // historical
  SHOW_ENTITY_REFERENCE: 0x10,
  // historical
  SHOW_ENTITY: 0x20,
  // historical
  SHOW_PROCESSING_INSTRUCTION: 0x40,
  SHOW_COMMENT: 0x80,
  SHOW_DOCUMENT: 0x100,
  SHOW_DOCUMENT_TYPE: 0x200,
  SHOW_DOCUMENT_FRAGMENT: 0x400,
  SHOW_NOTATION: 0x800 // historical
};

module.exports = NodeFilter.constructor = NodeFilter.prototype = NodeFilter;

/***/ }),

/***/ 1815:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/NodeIterator.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = NodeIterator;
var NodeFilter = __webpack_require__(/*! ./NodeFilter */ 62659);
var NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ 1351);
var utils = __webpack_require__(/*! ./utils */ 7976);

/* Private methods and helpers */

/**
 * @based on WebKit's NodeIterator::moveToNext and NodeIterator::moveToPrevious
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeIterator.cpp?rev=186279#L51
 */
function move(node, stayWithin, directionIsNext) {
  if (directionIsNext) {
    return NodeTraversal.next(node, stayWithin);
  } else {
    if (node === stayWithin) {
      return null;
    }
    return NodeTraversal.previous(node, null);
  }
}
function isInclusiveAncestor(node, possibleChild) {
  for (; possibleChild; possibleChild = possibleChild.parentNode) {
    if (node === possibleChild) {
      return true;
    }
  }
  return false;
}

/**
 * @spec http://www.w3.org/TR/dom/#concept-nodeiterator-traverse
 * @method
 * @access private
 * @param {NodeIterator} ni
 * @param {string} direction One of 'next' or 'previous'.
 * @return {Node|null}
 */
function traverse(ni, directionIsNext) {
  var node, beforeNode;
  node = ni._referenceNode;
  beforeNode = ni._pointerBeforeReferenceNode;
  while (true) {
    if (beforeNode === directionIsNext) {
      beforeNode = !beforeNode;
    } else {
      node = move(node, ni._root, directionIsNext);
      if (node === null) {
        return null;
      }
    }
    var result = ni._internalFilter(node);
    if (result === NodeFilter.FILTER_ACCEPT) {
      break;
    }
  }
  ni._referenceNode = node;
  ni._pointerBeforeReferenceNode = beforeNode;
  return node;
}

/* Public API */

/**
 * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#nodeiterator
 * Latest version: http://www.w3.org/TR/dom/#nodeiterator
 *
 * @constructor
 * @param {Node} root
 * @param {number} whatToShow [optional]
 * @param {Function|NodeFilter} filter [optional]
 * @throws Error
 */
function NodeIterator(root, whatToShow, filter) {
  if (!root || !root.nodeType) {
    utils.NotSupportedError();
  }

  // Read-only properties
  this._root = root;
  this._referenceNode = root;
  this._pointerBeforeReferenceNode = true;
  this._whatToShow = Number(whatToShow) || 0;
  this._filter = filter || null;
  this._active = false;
  // Record active node iterators in the document, in order to perform
  // "node iterator pre-removal steps".
  root.doc._attachNodeIterator(this);
}
Object.defineProperties(NodeIterator.prototype, {
  root: {
    get: function root() {
      return this._root;
    }
  },
  referenceNode: {
    get: function referenceNode() {
      return this._referenceNode;
    }
  },
  pointerBeforeReferenceNode: {
    get: function pointerBeforeReferenceNode() {
      return this._pointerBeforeReferenceNode;
    }
  },
  whatToShow: {
    get: function whatToShow() {
      return this._whatToShow;
    }
  },
  filter: {
    get: function filter() {
      return this._filter;
    }
  },
  /**
   * @method
   * @param {Node} node
   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,
   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.
   */
  _internalFilter: {
    value: function _internalFilter(node) {
      /* jshint bitwise: false */
      var result, filter;
      if (this._active) {
        utils.InvalidStateError();
      }

      // Maps nodeType to whatToShow
      if (!(1 << node.nodeType - 1 & this._whatToShow)) {
        return NodeFilter.FILTER_SKIP;
      }
      filter = this._filter;
      if (filter === null) {
        result = NodeFilter.FILTER_ACCEPT;
      } else {
        this._active = true;
        try {
          if (typeof filter === 'function') {
            result = filter(node);
          } else {
            result = filter.acceptNode(node);
          }
        } finally {
          this._active = false;
        }
      }

      // Note that coercing to a number means that
      //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)
      //  `false` becomes `0` (neither accept, reject, or skip)
      return +result;
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#nodeiterator-pre-removing-steps
   * @method
   * @return void
   */
  _preremove: {
    value: function _preremove(toBeRemovedNode) {
      if (isInclusiveAncestor(toBeRemovedNode, this._root)) {
        return;
      }
      if (!isInclusiveAncestor(toBeRemovedNode, this._referenceNode)) {
        return;
      }
      if (this._pointerBeforeReferenceNode) {
        var next = toBeRemovedNode;
        while (next.lastChild) {
          next = next.lastChild;
        }
        next = NodeTraversal.next(next, this.root);
        if (next) {
          this._referenceNode = next;
          return;
        }
        this._pointerBeforeReferenceNode = false;
        // fall through
      }

      if (toBeRemovedNode.previousSibling === null) {
        this._referenceNode = toBeRemovedNode.parentNode;
      } else {
        this._referenceNode = toBeRemovedNode.previousSibling;
        var lastChild;
        for (lastChild = this._referenceNode.lastChild; lastChild; lastChild = this._referenceNode.lastChild) {
          this._referenceNode = lastChild;
        }
      }
    }
  },
  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-nextnode
   * @method
   * @return {Node|null}
   */
  nextNode: {
    value: function nextNode() {
      return traverse(this, true);
    }
  },
  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-previousnode
   * @method
   * @return {Node|null}
   */
  previousNode: {
    value: function previousNode() {
      return traverse(this, false);
    }
  },
  /**
   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-detach
   * @method
   * @return void
   */
  detach: {
    value: function detach() {
      /* "The detach() method must do nothing.
       * Its functionality (disabling a NodeIterator object) was removed,
       * but the method itself is preserved for compatibility.
       */
    }
  },
  /** For compatibility with web-platform-tests. */
  toString: {
    value: function toString() {
      return "[object NodeIterator]";
    }
  }
});

/***/ }),

/***/ 3552:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/NodeList.es5.js ***!
  \*************************************************/
/***/ (function(module) {

"use strict";


// No support for subclassing array, return an actual Array object.
function item(i) {
  /* jshint validthis: true */
  return this[i] || null;
}
function NodeList(a) {
  if (!a) a = [];
  a.item = item;
  return a;
}
module.exports = NodeList;

/***/ }),

/***/ 98201:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/NodeList.es6.js ***!
  \*************************************************/
/***/ (function(module) {

"use strict";
/* jshint esversion: 6 */


module.exports = class NodeList extends Array {
  constructor(a) {
    super(a && a.length || 0);
    if (a) {
      for (var idx in a) {
        this[idx] = a[idx];
      }
    }
  }
  item(i) {
    return this[i] || null;
  }
};

/***/ }),

/***/ 48649:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/NodeList.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var NodeList;
try {
  // Attempt to use ES6-style Array subclass if possible.
  NodeList = __webpack_require__(/*! ./NodeList.es6.js */ 98201);
} catch (e) {
  // No support for subclassing array, return an actual Array object.
  NodeList = __webpack_require__(/*! ./NodeList.es5.js */ 3552);
}
module.exports = NodeList;

/***/ }),

/***/ 1351:
/*!**************************************************!*\
  !*** ./node_modules/domino/lib/NodeTraversal.js ***!
  \**************************************************/
/***/ (function(module) {

"use strict";


/* exported NodeTraversal */
var NodeTraversal = module.exports = {
  nextSkippingChildren: nextSkippingChildren,
  nextAncestorSibling: nextAncestorSibling,
  next: next,
  previous: previous,
  deepLastChild: deepLastChild
};

/**
 * @based on WebKit's NodeTraversal::nextSkippingChildren
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L109
 */
function nextSkippingChildren(node, stayWithin) {
  if (node === stayWithin) {
    return null;
  }
  if (node.nextSibling !== null) {
    return node.nextSibling;
  }
  return nextAncestorSibling(node, stayWithin);
}

/**
 * @based on WebKit's NodeTraversal::nextAncestorSibling
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L93
 */
function nextAncestorSibling(node, stayWithin) {
  for (node = node.parentNode; node !== null; node = node.parentNode) {
    if (node === stayWithin) {
      return null;
    }
    if (node.nextSibling !== null) {
      return node.nextSibling;
    }
  }
  return null;
}

/**
 * @based on WebKit's NodeTraversal::next
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L99
 */
function next(node, stayWithin) {
  var n;
  n = node.firstChild;
  if (n !== null) {
    return n;
  }
  if (node === stayWithin) {
    return null;
  }
  n = node.nextSibling;
  if (n !== null) {
    return n;
  }
  return nextAncestorSibling(node, stayWithin);
}

/**
 * @based on WebKit's NodeTraversal::deepLastChild
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L116
 */
function deepLastChild(node) {
  while (node.lastChild) {
    node = node.lastChild;
  }
  return node;
}

/**
 * @based on WebKit's NodeTraversal::previous
 * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L121
 */
function previous(node, stayWithin) {
  var p;
  p = node.previousSibling;
  if (p !== null) {
    return deepLastChild(p);
  }
  p = node.parentNode;
  if (p === stayWithin) {
    return null;
  }
  return p;
}

/***/ }),

/***/ 62444:
/*!**********************************************!*\
  !*** ./node_modules/domino/lib/NodeUtils.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = {
  // NOTE: The `serializeOne()` function used to live on the `Node.prototype`
  // as a private method `Node#_serializeOne(child)`, however that requires
  // a megamorphic property access `this._serializeOne` just to get to the
  // method, and this is being done on lots of different `Node` subclasses,
  // which puts a lot of pressure on V8's megamorphic stub cache. So by
  // moving the helper off of the `Node.prototype` and into a separate
  // function in this helper module, we get a monomorphic property access
  // `NodeUtils.serializeOne` to get to the function and reduce pressure
  // on the megamorphic stub cache.
  // See https://github.com/fgnass/domino/pull/142 for more information.
  serializeOne: serializeOne
};
var utils = __webpack_require__(/*! ./utils */ 7976);
var NAMESPACE = utils.NAMESPACE;
var hasRawContent = {
  STYLE: true,
  SCRIPT: true,
  XMP: true,
  IFRAME: true,
  NOEMBED: true,
  NOFRAMES: true,
  PLAINTEXT: true
};
var emptyElements = {
  area: true,
  base: true,
  basefont: true,
  bgsound: true,
  br: true,
  col: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};
var extraNewLine = {
  /* Removed in https://github.com/whatwg/html/issues/944
  pre: true,
  textarea: true,
  listing: true
  */
};
function escape(s) {
  return s.replace(/[&<>\u00A0]/g, function (c) {
    switch (c) {
      case '&':
        return '&amp;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      case '\u00A0':
        return '&nbsp;';
    }
  });
}
function escapeAttr(s) {
  var toEscape = /[&"\u00A0]/g;
  if (!toEscape.test(s)) {
    // nothing to do, fast path
    return s;
  } else {
    return s.replace(toEscape, function (c) {
      switch (c) {
        case '&':
          return '&amp;';
        case '"':
          return '&quot;';
        case '\u00A0':
          return '&nbsp;';
      }
    });
  }
}
function attrname(a) {
  var ns = a.namespaceURI;
  if (!ns) return a.localName;
  if (ns === NAMESPACE.XML) return 'xml:' + a.localName;
  if (ns === NAMESPACE.XLINK) return 'xlink:' + a.localName;
  if (ns === NAMESPACE.XMLNS) {
    if (a.localName === 'xmlns') return 'xmlns';else return 'xmlns:' + a.localName;
  }
  return a.name;
}
function serializeOne(kid, parent) {
  var s = '';
  switch (kid.nodeType) {
    case 1:
      //ELEMENT_NODE
      var ns = kid.namespaceURI;
      var html = ns === NAMESPACE.HTML;
      var tagname = html || ns === NAMESPACE.SVG || ns === NAMESPACE.MATHML ? kid.localName : kid.tagName;
      s += '<' + tagname;
      for (var j = 0, k = kid._numattrs; j < k; j++) {
        var a = kid._attr(j);
        s += ' ' + attrname(a);
        if (a.value !== undefined) s += '="' + escapeAttr(a.value) + '"';
      }
      s += '>';
      if (!(html && emptyElements[tagname])) {
        var ss = kid.serialize();
        if (html && extraNewLine[tagname] && ss.charAt(0) === '\n') s += '\n';
        // Serialize children and add end tag for all others
        s += ss;
        s += '</' + tagname + '>';
      }
      break;
    case 3: //TEXT_NODE
    case 4:
      //CDATA_SECTION_NODE
      var parenttag;
      if (parent.nodeType === 1 /*ELEMENT_NODE*/ && parent.namespaceURI === NAMESPACE.HTML) parenttag = parent.tagName;else parenttag = '';
      if (hasRawContent[parenttag] || parenttag === 'NOSCRIPT' && parent.ownerDocument._scripting_enabled) {
        s += kid.data;
      } else {
        s += escape(kid.data);
      }
      break;
    case 8:
      //COMMENT_NODE
      s += '<!--' + kid.data + '-->';
      break;
    case 7:
      //PROCESSING_INSTRUCTION_NODE
      s += '<?' + kid.target + ' ' + kid.data + '?>';
      break;
    case 10:
      //DOCUMENT_TYPE_NODE
      s += '<!DOCTYPE ' + kid.name;
      if (false) {}
      s += '>';
      break;
    default:
      utils.InvalidStateError();
  }
  return s;
}

/***/ }),

/***/ 26005:
/*!*************************************************************!*\
  !*** ./node_modules/domino/lib/NonDocumentTypeChildNode.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var Node = __webpack_require__(/*! ./Node */ 88869);
var NonDocumentTypeChildNode = {
  nextElementSibling: {
    get: function () {
      if (this.parentNode) {
        for (var kid = this.nextSibling; kid !== null; kid = kid.nextSibling) {
          if (kid.nodeType === Node.ELEMENT_NODE) return kid;
        }
      }
      return null;
    }
  },
  previousElementSibling: {
    get: function () {
      if (this.parentNode) {
        for (var kid = this.previousSibling; kid !== null; kid = kid.previousSibling) {
          if (kid.nodeType === Node.ELEMENT_NODE) return kid;
        }
      }
      return null;
    }
  }
};
module.exports = NonDocumentTypeChildNode;

/***/ }),

/***/ 72860:
/*!**********************************************************!*\
  !*** ./node_modules/domino/lib/ProcessingInstruction.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = ProcessingInstruction;
var Node = __webpack_require__(/*! ./Node */ 88869);
var CharacterData = __webpack_require__(/*! ./CharacterData */ 2482);
function ProcessingInstruction(doc, target, data) {
  CharacterData.call(this);
  this.nodeType = Node.PROCESSING_INSTRUCTION_NODE;
  this.ownerDocument = doc;
  this.target = target;
  this._data = data;
}
var nodeValue = {
  get: function () {
    return this._data;
  },
  set: function (v) {
    if (v === null || v === undefined) {
      v = '';
    } else {
      v = String(v);
    }
    this._data = v;
    if (this.rooted) this.ownerDocument.mutateValue(this);
  }
};
ProcessingInstruction.prototype = Object.create(CharacterData.prototype, {
  nodeName: {
    get: function () {
      return this.target;
    }
  },
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: {
    get: nodeValue.get,
    set: function (v) {
      nodeValue.set.call(this, v === null ? '' : String(v));
    }
  },
  // Utility methods
  clone: {
    value: function clone() {
      return new ProcessingInstruction(this.ownerDocument, this.target, this._data);
    }
  },
  isEqual: {
    value: function isEqual(n) {
      return this.target === n.target && this._data === n._data;
    }
  }
});

/***/ }),

/***/ 17182:
/*!*****************************************!*\
  !*** ./node_modules/domino/lib/Text.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = Text;
var utils = __webpack_require__(/*! ./utils */ 7976);
var Node = __webpack_require__(/*! ./Node */ 88869);
var CharacterData = __webpack_require__(/*! ./CharacterData */ 2482);
function Text(doc, data) {
  CharacterData.call(this);
  this.nodeType = Node.TEXT_NODE;
  this.ownerDocument = doc;
  this._data = data;
  this._index = undefined;
}
var nodeValue = {
  get: function () {
    return this._data;
  },
  set: function (v) {
    if (v === null || v === undefined) {
      v = '';
    } else {
      v = String(v);
    }
    if (v === this._data) return;
    this._data = v;
    if (this.rooted) this.ownerDocument.mutateValue(this);
    if (this.parentNode && this.parentNode._textchangehook) this.parentNode._textchangehook(this);
  }
};
Text.prototype = Object.create(CharacterData.prototype, {
  nodeName: {
    value: "#text"
  },
  // These three attributes are all the same.
  // The data attribute has a [TreatNullAs=EmptyString] but we'll
  // implement that at the interface level
  nodeValue: nodeValue,
  textContent: nodeValue,
  data: {
    get: nodeValue.get,
    set: function (v) {
      nodeValue.set.call(this, v === null ? '' : String(v));
    }
  },
  splitText: {
    value: function splitText(offset) {
      if (offset > this._data.length || offset < 0) utils.IndexSizeError();
      var newdata = this._data.substring(offset),
        newnode = this.ownerDocument.createTextNode(newdata);
      this.data = this.data.substring(0, offset);
      var parent = this.parentNode;
      if (parent !== null) parent.insertBefore(newnode, this.nextSibling);
      return newnode;
    }
  },
  wholeText: {
    get: function wholeText() {
      var result = this.textContent;
      for (var next = this.nextSibling; next; next = next.nextSibling) {
        if (next.nodeType !== Node.TEXT_NODE) {
          break;
        }
        result += next.textContent;
      }
      return result;
    }
  },
  // Obsolete, removed from spec.
  replaceWholeText: {
    value: utils.nyi
  },
  // Utility methods
  clone: {
    value: function clone() {
      return new Text(this.ownerDocument, this._data);
    }
  }
});

/***/ }),

/***/ 82687:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/TreeWalker.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = TreeWalker;
var Node = __webpack_require__(/*! ./Node */ 88869);
var NodeFilter = __webpack_require__(/*! ./NodeFilter */ 62659);
var NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ 1351);
var utils = __webpack_require__(/*! ./utils */ 7976);
var mapChild = {
  first: 'firstChild',
  last: 'lastChild',
  next: 'firstChild',
  previous: 'lastChild'
};
var mapSibling = {
  first: 'nextSibling',
  last: 'previousSibling',
  next: 'nextSibling',
  previous: 'previousSibling'
};

/* Private methods and helpers */

/**
 * @spec https://dom.spec.whatwg.org/#concept-traverse-children
 * @method
 * @access private
 * @param {TreeWalker} tw
 * @param {string} type One of 'first' or 'last'.
 * @return {Node|null}
 */
function traverseChildren(tw, type) {
  var child, node, parent, result, sibling;
  node = tw._currentNode[mapChild[type]];
  while (node !== null) {
    result = tw._internalFilter(node);
    if (result === NodeFilter.FILTER_ACCEPT) {
      tw._currentNode = node;
      return node;
    }
    if (result === NodeFilter.FILTER_SKIP) {
      child = node[mapChild[type]];
      if (child !== null) {
        node = child;
        continue;
      }
    }
    while (node !== null) {
      sibling = node[mapSibling[type]];
      if (sibling !== null) {
        node = sibling;
        break;
      }
      parent = node.parentNode;
      if (parent === null || parent === tw.root || parent === tw._currentNode) {
        return null;
      } else {
        node = parent;
      }
    }
  }
  return null;
}

/**
 * @spec https://dom.spec.whatwg.org/#concept-traverse-siblings
 * @method
 * @access private
 * @param {TreeWalker} tw
 * @param {TreeWalker} type One of 'next' or 'previous'.
 * @return {Node|nul}
 */
function traverseSiblings(tw, type) {
  var node, result, sibling;
  node = tw._currentNode;
  if (node === tw.root) {
    return null;
  }
  while (true) {
    sibling = node[mapSibling[type]];
    while (sibling !== null) {
      node = sibling;
      result = tw._internalFilter(node);
      if (result === NodeFilter.FILTER_ACCEPT) {
        tw._currentNode = node;
        return node;
      }
      sibling = node[mapChild[type]];
      if (result === NodeFilter.FILTER_REJECT || sibling === null) {
        sibling = node[mapSibling[type]];
      }
    }
    node = node.parentNode;
    if (node === null || node === tw.root) {
      return null;
    }
    if (tw._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {
      return null;
    }
  }
}

/* Public API */

/**
 * Latest version: https://dom.spec.whatwg.org/#treewalker
 *
 * @constructor
 * @param {Node} root
 * @param {number} whatToShow [optional]
 * @param {Function|NodeFilter} filter [optional]
 * @throws Error
 */
function TreeWalker(root, whatToShow, filter) {
  if (!root || !root.nodeType) {
    utils.NotSupportedError();
  }

  // Read-only properties
  this._root = root;
  this._whatToShow = Number(whatToShow) || 0;
  this._filter = filter || null;
  this._active = false;
  // Read-write property
  this._currentNode = root;
}
Object.defineProperties(TreeWalker.prototype, {
  root: {
    get: function () {
      return this._root;
    }
  },
  whatToShow: {
    get: function () {
      return this._whatToShow;
    }
  },
  filter: {
    get: function () {
      return this._filter;
    }
  },
  currentNode: {
    get: function currentNode() {
      return this._currentNode;
    },
    set: function setCurrentNode(v) {
      if (!(v instanceof Node)) {
        throw new TypeError("Not a Node"); // `null` is also not a node
      }

      this._currentNode = v;
    }
  },
  /**
   * @method
   * @param {Node} node
   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,
   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.
   */
  _internalFilter: {
    value: function _internalFilter(node) {
      /* jshint bitwise: false */
      var result, filter;
      if (this._active) {
        utils.InvalidStateError();
      }

      // Maps nodeType to whatToShow
      if (!(1 << node.nodeType - 1 & this._whatToShow)) {
        return NodeFilter.FILTER_SKIP;
      }
      filter = this._filter;
      if (filter === null) {
        result = NodeFilter.FILTER_ACCEPT;
      } else {
        this._active = true;
        try {
          if (typeof filter === 'function') {
            result = filter(node);
          } else {
            result = filter.acceptNode(node);
          }
        } finally {
          this._active = false;
        }
      }

      // Note that coercing to a number means that
      //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)
      //  `false` becomes `0` (neither accept, reject, or skip)
      return +result;
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#dom-treewalker-parentnode
   * @based on WebKit's TreeWalker::parentNode
   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L50
   * @method
   * @return {Node|null}
   */
  parentNode: {
    value: function parentNode() {
      var node = this._currentNode;
      while (node !== this.root) {
        node = node.parentNode;
        if (node === null) {
          return null;
        }
        if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {
          this._currentNode = node;
          return node;
        }
      }
      return null;
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#dom-treewalker-firstchild
   * @method
   * @return {Node|null}
   */
  firstChild: {
    value: function firstChild() {
      return traverseChildren(this, 'first');
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#dom-treewalker-lastchild
   * @method
   * @return {Node|null}
   */
  lastChild: {
    value: function lastChild() {
      return traverseChildren(this, 'last');
    }
  },
  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previoussibling
   * @method
   * @return {Node|null}
   */
  previousSibling: {
    value: function previousSibling() {
      return traverseSiblings(this, 'previous');
    }
  },
  /**
   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextsibling
   * @method
   * @return {Node|null}
   */
  nextSibling: {
    value: function nextSibling() {
      return traverseSiblings(this, 'next');
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#dom-treewalker-previousnode
   * @based on WebKit's TreeWalker::previousNode
   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L181
   * @method
   * @return {Node|null}
   */
  previousNode: {
    value: function previousNode() {
      var node, result, previousSibling, lastChild;
      node = this._currentNode;
      while (node !== this._root) {
        for (previousSibling = node.previousSibling; previousSibling; previousSibling = node.previousSibling) {
          node = previousSibling;
          result = this._internalFilter(node);
          if (result === NodeFilter.FILTER_REJECT) {
            continue;
          }
          for (lastChild = node.lastChild; lastChild; lastChild = node.lastChild) {
            node = lastChild;
            result = this._internalFilter(node);
            if (result === NodeFilter.FILTER_REJECT) {
              break;
            }
          }
          if (result === NodeFilter.FILTER_ACCEPT) {
            this._currentNode = node;
            return node;
          }
        }
        if (node === this.root || node.parentNode === null) {
          return null;
        }
        node = node.parentNode;
        if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {
          this._currentNode = node;
          return node;
        }
      }
      return null;
    }
  },
  /**
   * @spec https://dom.spec.whatwg.org/#dom-treewalker-nextnode
   * @based on WebKit's TreeWalker::nextNode
   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L228
   * @method
   * @return {Node|null}
   */
  nextNode: {
    value: function nextNode() {
      var node, result, firstChild, nextSibling;
      node = this._currentNode;
      result = NodeFilter.FILTER_ACCEPT;
      CHILDREN: while (true) {
        for (firstChild = node.firstChild; firstChild; firstChild = node.firstChild) {
          node = firstChild;
          result = this._internalFilter(node);
          if (result === NodeFilter.FILTER_ACCEPT) {
            this._currentNode = node;
            return node;
          } else if (result === NodeFilter.FILTER_REJECT) {
            break;
          }
        }
        for (nextSibling = NodeTraversal.nextSkippingChildren(node, this.root); nextSibling; nextSibling = NodeTraversal.nextSkippingChildren(node, this.root)) {
          node = nextSibling;
          result = this._internalFilter(node);
          if (result === NodeFilter.FILTER_ACCEPT) {
            this._currentNode = node;
            return node;
          } else if (result === NodeFilter.FILTER_SKIP) {
            continue CHILDREN;
          }
        }
        return null;
      }
    }
  },
  /** For compatibility with web-platform-tests. */
  toString: {
    value: function toString() {
      return "[object TreeWalker]";
    }
  }
});

/***/ }),

/***/ 56431:
/*!********************************************!*\
  !*** ./node_modules/domino/lib/UIEvent.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var Event = __webpack_require__(/*! ./Event */ 76165);
module.exports = UIEvent;
function UIEvent() {
  // Just use the superclass constructor to initialize
  Event.call(this);
  this.view = null; // FF uses the current window
  this.detail = 0;
}
UIEvent.prototype = Object.create(Event.prototype, {
  constructor: {
    value: UIEvent
  },
  initUIEvent: {
    value: function (type, bubbles, cancelable, view, detail) {
      this.initEvent(type, bubbles, cancelable);
      this.view = view;
      this.detail = detail;
    }
  }
});

/***/ }),

/***/ 81052:
/*!****************************************!*\
  !*** ./node_modules/domino/lib/URL.js ***!
  \****************************************/
/***/ (function(module) {

"use strict";


module.exports = URL;
function URL(url) {
  if (!url) return Object.create(URL.prototype);
  // Can't use String.trim() since it defines whitespace differently than HTML
  this.url = url.replace(/^[ \t\n\r\f]+|[ \t\n\r\f]+$/g, "");

  // See http://tools.ietf.org/html/rfc3986#appendix-B
  // and https://url.spec.whatwg.org/#parsing
  var match = URL.pattern.exec(this.url);
  if (match) {
    if (match[2]) this.scheme = match[2];
    if (match[4]) {
      // parse username/password
      var userinfo = match[4].match(URL.userinfoPattern);
      if (userinfo) {
        this.username = userinfo[1];
        this.password = userinfo[3];
        match[4] = match[4].substring(userinfo[0].length);
      }
      if (match[4].match(URL.portPattern)) {
        var pos = match[4].lastIndexOf(':');
        this.host = match[4].substring(0, pos);
        this.port = match[4].substring(pos + 1);
      } else {
        this.host = match[4];
      }
    }
    if (match[5]) this.path = match[5];
    if (match[6]) this.query = match[7];
    if (match[8]) this.fragment = match[9];
  }
}
URL.pattern = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/;
URL.userinfoPattern = /^([^@:]*)(:([^@]*))?@/;
URL.portPattern = /:\d+$/;
URL.authorityPattern = /^[^:\/?#]+:\/\//;
URL.hierarchyPattern = /^[^:\/?#]+:\//;

// Return a percentEncoded version of s.
// S should be a single-character string
// XXX: needs to do utf-8 encoding?
URL.percentEncode = function percentEncode(s) {
  var c = s.charCodeAt(0);
  if (c < 256) return "%" + c.toString(16);else throw Error("can't percent-encode codepoints > 255 yet");
};
URL.prototype = {
  constructor: URL,
  // XXX: not sure if this is the precise definition of absolute
  isAbsolute: function () {
    return !!this.scheme;
  },
  isAuthorityBased: function () {
    return URL.authorityPattern.test(this.url);
  },
  isHierarchical: function () {
    return URL.hierarchyPattern.test(this.url);
  },
  toString: function () {
    var s = "";
    if (this.scheme !== undefined) s += this.scheme + ":";
    if (this.isAbsolute()) {
      s += '//';
      if (this.username || this.password) {
        s += this.username || '';
        if (this.password) {
          s += ':' + this.password;
        }
        s += '@';
      }
      if (this.host) {
        s += this.host;
      }
    }
    if (this.port !== undefined) s += ":" + this.port;
    if (this.path !== undefined) s += this.path;
    if (this.query !== undefined) s += "?" + this.query;
    if (this.fragment !== undefined) s += "#" + this.fragment;
    return s;
  },
  // See: http://tools.ietf.org/html/rfc3986#section-5.2
  // and https://url.spec.whatwg.org/#constructors
  resolve: function (relative) {
    var base = this; // The base url we're resolving against
    var r = new URL(relative); // The relative reference url to resolve
    var t = new URL(); // The absolute target url we will return

    if (r.scheme !== undefined) {
      t.scheme = r.scheme;
      t.username = r.username;
      t.password = r.password;
      t.host = r.host;
      t.port = r.port;
      t.path = remove_dot_segments(r.path);
      t.query = r.query;
    } else {
      t.scheme = base.scheme;
      if (r.host !== undefined) {
        t.username = r.username;
        t.password = r.password;
        t.host = r.host;
        t.port = r.port;
        t.path = remove_dot_segments(r.path);
        t.query = r.query;
      } else {
        t.username = base.username;
        t.password = base.password;
        t.host = base.host;
        t.port = base.port;
        if (!r.path) {
          // undefined or empty
          t.path = base.path;
          if (r.query !== undefined) t.query = r.query;else t.query = base.query;
        } else {
          if (r.path.charAt(0) === "/") {
            t.path = remove_dot_segments(r.path);
          } else {
            t.path = merge(base.path, r.path);
            t.path = remove_dot_segments(t.path);
          }
          t.query = r.query;
        }
      }
    }
    t.fragment = r.fragment;
    return t.toString();
    function merge(basepath, refpath) {
      if (base.host !== undefined && !base.path) return "/" + refpath;
      var lastslash = basepath.lastIndexOf("/");
      if (lastslash === -1) return refpath;else return basepath.substring(0, lastslash + 1) + refpath;
    }
    function remove_dot_segments(path) {
      if (!path) return path; // For "" or undefined

      var output = "";
      while (path.length > 0) {
        if (path === "." || path === "..") {
          path = "";
          break;
        }
        var twochars = path.substring(0, 2);
        var threechars = path.substring(0, 3);
        var fourchars = path.substring(0, 4);
        if (threechars === "../") {
          path = path.substring(3);
        } else if (twochars === "./") {
          path = path.substring(2);
        } else if (threechars === "/./") {
          path = "/" + path.substring(3);
        } else if (twochars === "/." && path.length === 2) {
          path = "/";
        } else if (fourchars === "/../" || threechars === "/.." && path.length === 3) {
          path = "/" + path.substring(4);
          output = output.replace(/\/?[^\/]*$/, "");
        } else {
          var segment = path.match(/(\/?([^\/]*))/)[0];
          output += segment;
          path = path.substring(segment.length);
        }
      }
      return output;
    }
  }
};

/***/ }),

/***/ 66519:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/URLUtils.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var URL = __webpack_require__(/*! ./URL */ 81052);
module.exports = URLUtils;

// Allow the `x == null` pattern.  This is eslint's "null: 'ignore'" option,
// but jshint doesn't support this.
/* jshint eqeqeq: false */

// This is an abstract superclass for Location, HTMLAnchorElement and
// other types that have the standard complement of "URL decomposition
// IDL attributes".  This is now standardized as URLUtils, see:
// https://url.spec.whatwg.org/#urlutils
// Subclasses must define a getter/setter on href.
// The getter and setter methods parse and rebuild the URL on each
// invocation; there is no attempt to cache the value and be more efficient
function URLUtils() {}
URLUtils.prototype = Object.create(Object.prototype, {
  _url: {
    get: function () {
      // XXX: this should do the "Reinitialize url" steps, and "null" should
      // be a valid return value.
      return new URL(this.href);
    }
  },
  protocol: {
    get: function () {
      var url = this._url;
      if (url && url.scheme) return url.scheme + ":";else return ":";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute()) {
        v = v.replace(/:+$/, "");
        v = v.replace(/[^-+\.a-zA-Z0-9]/g, URL.percentEncode);
        if (v.length > 0) {
          url.scheme = v;
          output = url.toString();
        }
      }
      this.href = output;
    }
  },
  host: {
    get: function () {
      var url = this._url;
      if (url.isAbsolute() && url.isAuthorityBased()) return url.host + (url.port ? ":" + url.port : "");else return "";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute() && url.isAuthorityBased()) {
        v = v.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);
        if (v.length > 0) {
          url.host = v;
          delete url.port;
          output = url.toString();
        }
      }
      this.href = output;
    }
  },
  hostname: {
    get: function () {
      var url = this._url;
      if (url.isAbsolute() && url.isAuthorityBased()) return url.host;else return "";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute() && url.isAuthorityBased()) {
        v = v.replace(/^\/+/, "");
        v = v.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);
        if (v.length > 0) {
          url.host = v;
          output = url.toString();
        }
      }
      this.href = output;
    }
  },
  port: {
    get: function () {
      var url = this._url;
      if (url.isAbsolute() && url.isAuthorityBased() && url.port !== undefined) return url.port;else return "";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute() && url.isAuthorityBased()) {
        v = '' + v;
        v = v.replace(/[^0-9].*$/, "");
        v = v.replace(/^0+/, "");
        if (v.length === 0) v = "0";
        if (parseInt(v, 10) <= 65535) {
          url.port = v;
          output = url.toString();
        }
      }
      this.href = output;
    }
  },
  pathname: {
    get: function () {
      var url = this._url;
      if (url.isAbsolute() && url.isHierarchical()) return url.path;else return "";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute() && url.isHierarchical()) {
        if (v.charAt(0) !== "/") v = "/" + v;
        v = v.replace(/[^-+\._~!$&'()*,;:=@\/a-zA-Z0-9]/g, URL.percentEncode);
        url.path = v;
        output = url.toString();
      }
      this.href = output;
    }
  },
  search: {
    get: function () {
      var url = this._url;
      if (url.isAbsolute() && url.isHierarchical() && url.query !== undefined) return "?" + url.query;else return "";
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute() && url.isHierarchical()) {
        if (v.charAt(0) === "?") v = v.substring(1);
        v = v.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g, URL.percentEncode);
        url.query = v;
        output = url.toString();
      }
      this.href = output;
    }
  },
  hash: {
    get: function () {
      var url = this._url;
      if (url == null || url.fragment == null || url.fragment === '') {
        return "";
      } else {
        return "#" + url.fragment;
      }
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (v.charAt(0) === "#") v = v.substring(1);
      v = v.replace(/[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g, URL.percentEncode);
      url.fragment = v;
      output = url.toString();
      this.href = output;
    }
  },
  username: {
    get: function () {
      var url = this._url;
      return url.username || '';
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute()) {
        v = v.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\:]/g, URL.percentEncode);
        url.username = v;
        output = url.toString();
      }
      this.href = output;
    }
  },
  password: {
    get: function () {
      var url = this._url;
      return url.password || '';
    },
    set: function (v) {
      var output = this.href;
      var url = new URL(output);
      if (url.isAbsolute()) {
        if (v === '') {
          url.password = null;
        } else {
          v = v.replace(/[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\]/g, URL.percentEncode);
          url.password = v;
        }
        output = url.toString();
      }
      this.href = output;
    }
  },
  origin: {
    get: function () {
      var url = this._url;
      if (url == null) {
        return '';
      }
      var originForPort = function (defaultPort) {
        var origin = [url.scheme, url.host, +url.port || defaultPort];
        // XXX should be "unicode serialization"
        return origin[0] + '://' + origin[1] + (origin[2] === defaultPort ? '' : ':' + origin[2]);
      };
      switch (url.scheme) {
        case 'ftp':
          return originForPort(21);
        case 'gopher':
          return originForPort(70);
        case 'http':
        case 'ws':
          return originForPort(80);
        case 'https':
        case 'wss':
          return originForPort(443);
        default:
          // this is what chrome does
          return url.scheme + '://';
      }
    }
  }

  /*
  searchParams: {
    get: function() {
      var url = this._url;
      // XXX
    },
    set: function(v) {
      var output = this.href;
      var url = new URL(output);
      // XXX
      this.href = output;
    },
  },
  */
});

URLUtils._inherit = function (proto) {
  // copy getters/setters from URLUtils to o.
  Object.getOwnPropertyNames(URLUtils.prototype).forEach(function (p) {
    if (p === 'constructor' || p === 'href') {
      return;
    }
    var desc = Object.getOwnPropertyDescriptor(URLUtils.prototype, p);
    Object.defineProperty(proto, p, desc);
  });
};

/***/ }),

/***/ 45973:
/*!*******************************************!*\
  !*** ./node_modules/domino/lib/Window.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ 94711);
var EventTarget = __webpack_require__(/*! ./EventTarget */ 36648);
var Location = __webpack_require__(/*! ./Location */ 4278);
var sloppy = __webpack_require__(/*! ./sloppy */ 78602);
var utils = __webpack_require__(/*! ./utils */ 7976);
module.exports = Window;
function Window(document) {
  this.document = document || new DOMImplementation(null).createHTMLDocument("");
  this.document._scripting_enabled = true;
  this.document.defaultView = this;
  this.location = new Location(this, this.document._address || 'about:blank');
}
Window.prototype = Object.create(EventTarget.prototype, {
  _run: {
    value: sloppy.Window_run
  },
  console: {
    value: console
  },
  history: {
    value: {
      back: utils.nyi,
      forward: utils.nyi,
      go: utils.nyi
    }
  },
  navigator: {
    value: __webpack_require__(/*! ./NavigatorID */ 80477)
  },
  // Self-referential properties
  window: {
    get: function () {
      return this;
    }
  },
  self: {
    get: function () {
      return this;
    }
  },
  frames: {
    get: function () {
      return this;
    }
  },
  // Self-referential properties for a top-level window
  parent: {
    get: function () {
      return this;
    }
  },
  top: {
    get: function () {
      return this;
    }
  },
  // We don't support any other windows for now
  length: {
    value: 0
  },
  // no frames
  frameElement: {
    value: null
  },
  // not part of a frame
  opener: {
    value: null
  },
  // not opened by another window

  // The onload event handler.
  // XXX: need to support a bunch of other event types, too,
  // and have them interoperate with document.body.

  onload: {
    get: function () {
      return this._getEventHandler("load");
    },
    set: function (v) {
      this._setEventHandler("load", v);
    }
  },
  // XXX This is a completely broken implementation
  getComputedStyle: {
    value: function getComputedStyle(elt) {
      return elt.style;
    }
  }
});
utils.expose(__webpack_require__(/*! ./WindowTimers */ 20055), Window);
utils.expose(__webpack_require__(/*! ./impl */ 93355), Window);

/***/ }),

/***/ 20055:
/*!*************************************************!*\
  !*** ./node_modules/domino/lib/WindowTimers.js ***!
  \*************************************************/
/***/ (function(module) {

"use strict";


// https://html.spec.whatwg.org/multipage/webappapis.html#windowtimers
var WindowTimers = {
  setTimeout: setTimeout,
  clearTimeout: clearTimeout,
  setInterval: setInterval,
  clearInterval: clearInterval
};
module.exports = WindowTimers;

/***/ }),

/***/ 38208:
/*!***********************************************!*\
  !*** ./node_modules/domino/lib/attributes.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ 7976);
exports.property = function (attr) {
  if (Array.isArray(attr.type)) {
    var valid = Object.create(null);
    attr.type.forEach(function (val) {
      valid[val.value || val] = val.alias || val;
    });
    var missingValueDefault = attr.missing;
    if (missingValueDefault === undefined) {
      missingValueDefault = null;
    }
    var invalidValueDefault = attr.invalid;
    if (invalidValueDefault === undefined) {
      invalidValueDefault = missingValueDefault;
    }
    return {
      get: function () {
        var v = this._getattr(attr.name);
        if (v === null) return missingValueDefault;
        v = valid[v.toLowerCase()];
        if (v !== undefined) return v;
        if (invalidValueDefault !== null) return invalidValueDefault;
        return v;
      },
      set: function (v) {
        this._setattr(attr.name, v);
      }
    };
  } else if (attr.type === Boolean) {
    return {
      get: function () {
        return this.hasAttribute(attr.name);
      },
      set: function (v) {
        if (v) {
          this._setattr(attr.name, '');
        } else {
          this.removeAttribute(attr.name);
        }
      }
    };
  } else if (attr.type === Number || attr.type === "long" || attr.type === "unsigned long" || attr.type === "limited unsigned long with fallback") {
    return numberPropDesc(attr);
  } else if (!attr.type || attr.type === String) {
    return {
      get: function () {
        return this._getattr(attr.name) || '';
      },
      set: function (v) {
        if (attr.treatNullAsEmptyString && v === null) {
          v = '';
        }
        this._setattr(attr.name, v);
      }
    };
  } else if (typeof attr.type === 'function') {
    return attr.type(attr.name, attr);
  }
  throw new Error('Invalid attribute definition');
};

// See http://www.whatwg.org/specs/web-apps/current-work/#reflect
//
// defval is the default value. If it is a function, then that function
// will be invoked as a method of the element to obtain the default.
// If no default is specified for a given attribute, then the default
// depends on the type of the attribute, but since this function handles
// 4 integer cases, you must specify the default value in each call
//
// min and max define a valid range for getting the attribute.
//
// setmin defines a minimum value when setting.  If the value is less
// than that, then throw INDEX_SIZE_ERR.
//
// Conveniently, JavaScript's parseInt function appears to be
// compatible with HTML's 'rules for parsing integers'
function numberPropDesc(a) {
  var def;
  if (typeof a.default === 'function') {
    def = a.default;
  } else if (typeof a.default === 'number') {
    def = function () {
      return a.default;
    };
  } else {
    def = function () {
      utils.assert(false, typeof a.default);
    };
  }
  var unsigned_long = a.type === 'unsigned long';
  var signed_long = a.type === 'long';
  var unsigned_fallback = a.type === 'limited unsigned long with fallback';
  var min = a.min,
    max = a.max,
    setmin = a.setmin;
  if (min === undefined) {
    if (unsigned_long) min = 0;
    if (signed_long) min = -0x80000000;
    if (unsigned_fallback) min = 1;
  }
  if (max === undefined) {
    if (unsigned_long || signed_long || unsigned_fallback) max = 0x7FFFFFFF;
  }
  return {
    get: function () {
      var v = this._getattr(a.name);
      var n = a.float ? parseFloat(v) : parseInt(v, 10);
      if (v === null || !isFinite(n) || min !== undefined && n < min || max !== undefined && n > max) {
        return def.call(this);
      }
      if (unsigned_long || signed_long || unsigned_fallback) {
        if (!/^[ \t\n\f\r]*[-+]?[0-9]/.test(v)) {
          return def.call(this);
        }
        n = n | 0; // jshint ignore:line
      }

      return n;
    },
    set: function (v) {
      if (!a.float) {
        v = Math.floor(v);
      }
      if (setmin !== undefined && v < setmin) {
        utils.IndexSizeError(a.name + ' set to ' + v);
      }
      if (unsigned_long) {
        v = v < 0 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line
      } else if (unsigned_fallback) {
        v = v < 1 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line
      } else if (signed_long) {
        v = v < -0x80000000 || v > 0x7FFFFFFF ? def.call(this) : v | 0; // jshint ignore:line
      }

      this._setattr(a.name, String(v));
    }
  };
}

// This is a utility function for setting up change handler functions
// for attributes like 'id' that require special handling when they change.
exports.registerChangeHandler = function (c, name, handler) {
  var p = c.prototype;

  // If p does not already have its own _attributeChangeHandlers
  // then create one for it, inheriting from the inherited
  // _attributeChangeHandlers. At the top (for the Element class) the
  // _attributeChangeHandlers object will be created with a null prototype.
  if (!Object.prototype.hasOwnProperty.call(p, '_attributeChangeHandlers')) {
    p._attributeChangeHandlers = Object.create(p._attributeChangeHandlers || null);
  }
  p._attributeChangeHandlers[name] = handler;
};

/***/ }),

/***/ 63535:
/*!*******************************************!*\
  !*** ./node_modules/domino/lib/config.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

/*
 * This file defines Domino behaviour that can be externally configured.
 * To change these settings, set the relevant global property *before*
 * you call `require("domino")`.
 */

exports.isApiWritable = !global.__domino_frozen__;

/***/ }),

/***/ 35581:
/*!**********************************************!*\
  !*** ./node_modules/domino/lib/cssparser.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
/* jshint node:true, latedef:false */


// jshint ignore:line
/*!
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
/* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */
var parserlib = Object.create(null);
(function () {
  /**
   * A generic base to inherit from for any object
   * that needs event handling.
   * @class EventTarget
   * @constructor
   */
  function EventTarget() {
    /**
     * The array of listeners for various events.
     * @type Object
     * @property _listeners
     * @private
     */
    this._listeners = Object.create(null);
  }
  EventTarget.prototype = {
    //restore constructor
    constructor: EventTarget,
    /**
     * Adds a listener for a given event type.
     * @param {String} type The type of event to add a listener for.
     * @param {Function} listener The function to call when the event occurs.
     * @return {void}
     * @method addListener
     */
    addListener: function (type, listener) {
      if (!this._listeners[type]) {
        this._listeners[type] = [];
      }
      this._listeners[type].push(listener);
    },
    /**
     * Fires an event based on the passed-in object.
     * @param {Object|String} event An object with at least a 'type' attribute
     *      or a string indicating the event name.
     * @return {void}
     * @method fire
     */
    fire: function (event) {
      if (typeof event === "string") {
        event = {
          type: event
        };
      }
      if (typeof event.target !== "undefined") {
        event.target = this;
      }
      if (typeof event.type === "undefined") {
        throw new Error("Event object missing 'type' property.");
      }
      if (this._listeners[event.type]) {
        //create a copy of the array and use that so listeners can't chane
        var listeners = this._listeners[event.type].concat();
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].call(this, event);
        }
      }
    },
    /**
     * Removes a listener for a given event type.
     * @param {String} type The type of event to remove a listener from.
     * @param {Function} listener The function to remove from the event.
     * @return {void}
     * @method removeListener
     */
    removeListener: function (type, listener) {
      if (this._listeners[type]) {
        var listeners = this._listeners[type];
        for (var i = 0, len = listeners.length; i < len; i++) {
          if (listeners[i] === listener) {
            listeners.splice(i, 1);
            break;
          }
        }
      }
    }
  };
  /**
   * Convenient way to read through strings.
   * @namespace parserlib.util
   * @class StringReader
   * @constructor
   * @param {String} text The text to read.
   */
  function StringReader(text) {
    /**
     * The input text with line endings normalized.
     * @property _input
     * @type String
     * @private
     */
    this._input = text.replace(/(\r|\n){1,2}/g, "\n");

    /**
     * The row for the character to be read next.
     * @property _line
     * @type int
     * @private
     */
    this._line = 1;

    /**
     * The column for the character to be read next.
     * @property _col
     * @type int
     * @private
     */
    this._col = 1;

    /**
     * The index of the character in the input to be read next.
     * @property _cursor
     * @type int
     * @private
     */
    this._cursor = 0;
  }
  StringReader.prototype = {
    //restore constructor
    constructor: StringReader,
    //-------------------------------------------------------------------------
    // Position info
    //-------------------------------------------------------------------------

    /**
     * Returns the column of the character to be read next.
     * @return {int} The column of the character to be read next.
     * @method getCol
     */
    getCol: function () {
      return this._col;
    },
    /**
     * Returns the row of the character to be read next.
     * @return {int} The row of the character to be read next.
     * @method getLine
     */
    getLine: function () {
      return this._line;
    },
    /**
     * Determines if you're at the end of the input.
     * @return {Boolean} True if there's no more input, false otherwise.
     * @method eof
     */
    eof: function () {
      return this._cursor === this._input.length;
    },
    //-------------------------------------------------------------------------
    // Basic reading
    //-------------------------------------------------------------------------

    /**
     * Reads the next character without advancing the cursor.
     * @param {int} count How many characters to look ahead (default is 1).
     * @return {String} The next character or null if there is no next character.
     * @method peek
     */
    peek: function (count) {
      var c = null;
      count = typeof count === "undefined" ? 1 : count;

      //if we're not at the end of the input...
      if (this._cursor < this._input.length) {
        //get character and increment cursor and column
        c = this._input.charAt(this._cursor + count - 1);
      }
      return c;
    },
    /**
     * Reads the next character from the input and adjusts the row and column
     * accordingly.
     * @return {String} The next character or null if there is no next character.
     * @method read
     */
    read: function () {
      var c = null;

      //if we're not at the end of the input...
      if (this._cursor < this._input.length) {
        //if the last character was a newline, increment row count
        //and reset column count
        if (this._input.charAt(this._cursor) === "\n") {
          this._line++;
          this._col = 1;
        } else {
          this._col++;
        }

        //get character and increment cursor and column
        c = this._input.charAt(this._cursor++);
      }
      return c;
    },
    //-------------------------------------------------------------------------
    // Misc
    //-------------------------------------------------------------------------

    /**
     * Saves the current location so it can be returned to later.
     * @method mark
     * @return {void}
     */
    mark: function () {
      this._bookmark = {
        cursor: this._cursor,
        line: this._line,
        col: this._col
      };
    },
    reset: function () {
      if (this._bookmark) {
        this._cursor = this._bookmark.cursor;
        this._line = this._bookmark.line;
        this._col = this._bookmark.col;
        delete this._bookmark;
      }
    },
    //-------------------------------------------------------------------------
    // Advanced reading
    //-------------------------------------------------------------------------

    /**
     * Reads up to and including the given string. Throws an error if that
     * string is not found.
     * @param {String} pattern The string to read.
     * @return {String} The string when it is found.
     * @throws Error when the string pattern is not found.
     * @method readTo
     */
    readTo: function (pattern) {
      var buffer = "",
        c;

      /*
       * First, buffer must be the same length as the pattern.
       * Then, buffer must end with the pattern or else reach the
       * end of the input.
       */
      while (buffer.length < pattern.length || buffer.lastIndexOf(pattern) !== buffer.length - pattern.length) {
        c = this.read();
        if (c) {
          buffer += c;
        } else {
          throw new Error("Expected \"" + pattern + "\" at line " + this._line + ", col " + this._col + ".");
        }
      }
      return buffer;
    },
    /**
     * Reads characters while each character causes the given
     * filter function to return true. The function is passed
     * in each character and either returns true to continue
     * reading or false to stop.
     * @param {Function} filter The function to read on each character.
     * @return {String} The string made up of all characters that passed the
     *      filter check.
     * @method readWhile
     */
    readWhile: function (filter) {
      var buffer = "",
        c = this.read();
      while (c !== null && filter(c)) {
        buffer += c;
        c = this.read();
      }
      return buffer;
    },
    /**
     * Reads characters that match either text or a regular expression and
     * returns those characters. If a match is found, the row and column
     * are adjusted; if no match is found, the reader's state is unchanged.
     * reading or false to stop.
     * @param {String|RegExp} matchter If a string, then the literal string
     *      value is searched for. If a regular expression, then any string
     *      matching the pattern is search for.
     * @return {String} The string made up of all characters that matched or
     *      null if there was no match.
     * @method readMatch
     */
    readMatch: function (matcher) {
      var source = this._input.substring(this._cursor),
        value = null;

      //if it's a string, just do a straight match
      if (typeof matcher === "string") {
        if (source.indexOf(matcher) === 0) {
          value = this.readCount(matcher.length);
        }
      } else if (matcher instanceof RegExp) {
        if (matcher.test(source)) {
          value = this.readCount(RegExp.lastMatch.length);
        }
      }
      return value;
    },
    /**
     * Reads a given number of characters. If the end of the input is reached,
     * it reads only the remaining characters and does not throw an error.
     * @param {int} count The number of characters to read.
     * @return {String} The string made up the read characters.
     * @method readCount
     */
    readCount: function (count) {
      var buffer = "";
      while (count--) {
        buffer += this.read();
      }
      return buffer;
    }
  };
  /**
   * Type to use when a syntax error occurs.
   * @class SyntaxError
   * @namespace parserlib.util
   * @constructor
   * @param {String} message The error message.
   * @param {int} line The line at which the error occurred.
   * @param {int} col The column at which the error occurred.
   */
  function SyntaxError(message, line, col) {
    Error.call(this);
    this.name = this.constructor.name;

    /**
     * The column at which the error occurred.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line at which the error occurred.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.message = message;
  }

  //inherit from Error
  SyntaxError.prototype = Object.create(Error.prototype); // jshint ignore:line
  SyntaxError.prototype.constructor = SyntaxError; // jshint ignore:line
  /**
   * Base type to represent a single syntactic unit.
   * @class SyntaxUnit
   * @namespace parserlib.util
   * @constructor
   * @param {String} text The text of the unit.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function SyntaxUnit(text, line, col, type) {
    /**
     * The column of text on which the unit resides.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line of text on which the unit resides.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.text = text;

    /**
     * The type of syntax unit.
     * @type int
     * @property type
     */
    this.type = type;
  }

  /**
   * Create a new syntax unit based solely on the given token.
   * Convenience method for creating a new syntax unit when
   * it represents a single token instead of multiple.
   * @param {Object} token The token object to represent.
   * @return {parserlib.util.SyntaxUnit} The object representing the token.
   * @static
   * @method fromToken
   */
  SyntaxUnit.fromToken = function (token) {
    return new SyntaxUnit(token.value, token.startLine, token.startCol);
  };
  SyntaxUnit.prototype = {
    //restore constructor
    constructor: SyntaxUnit,
    /**
     * Returns the text representation of the unit.
     * @return {String} The text representation of the unit.
     * @method valueOf
     */
    valueOf: function () {
      return this.toString();
    },
    /**
     * Returns the text representation of the unit.
     * @return {String} The text representation of the unit.
     * @method toString
     */
    toString: function () {
      return this.text;
    }
  };

  /**
   * Generic TokenStream providing base functionality.
   * @class TokenStreamBase
   * @namespace parserlib.util
   * @constructor
   * @param {String|StringReader} input The text to tokenize or a reader from
   *      which to read the input.
   */
  function TokenStreamBase(input, tokenData) {
    /**
     * The string reader for easy access to the text.
     * @type StringReader
     * @property _reader
     * @private
     */
    this._reader = input ? new StringReader(input.toString()) : null;

    /**
     * Token object for the last consumed token.
     * @type Token
     * @property _token
     * @private
     */
    this._token = null;

    /**
     * The array of token information.
     * @type Array
     * @property _tokenData
     * @private
     */
    this._tokenData = tokenData;

    /**
     * Lookahead token buffer.
     * @type Array
     * @property _lt
     * @private
     */
    this._lt = [];

    /**
     * Lookahead token buffer index.
     * @type int
     * @property _ltIndex
     * @private
     */
    this._ltIndex = 0;
    this._ltIndexCache = [];
  }

  /**
   * Accepts an array of token information and outputs
   * an array of token data containing key-value mappings
   * and matching functions that the TokenStream needs.
   * @param {Array} tokens An array of token descriptors.
   * @return {Array} An array of processed token data.
   * @method createTokenData
   * @static
   */
  TokenStreamBase.createTokenData = function (tokens) {
    var nameMap = [],
      typeMap = Object.create(null),
      tokenData = tokens.concat([]),
      i = 0,
      len = tokenData.length + 1;
    tokenData.UNKNOWN = -1;
    tokenData.unshift({
      name: "EOF"
    });
    for (; i < len; i++) {
      nameMap.push(tokenData[i].name);
      tokenData[tokenData[i].name] = i;
      if (tokenData[i].text) {
        typeMap[tokenData[i].text] = i;
      }
    }
    tokenData.name = function (tt) {
      return nameMap[tt];
    };
    tokenData.type = function (c) {
      return typeMap[c];
    };
    return tokenData;
  };
  TokenStreamBase.prototype = {
    //restore constructor
    constructor: TokenStreamBase,
    //-------------------------------------------------------------------------
    // Matching methods
    //-------------------------------------------------------------------------

    /**
     * Determines if the next token matches the given token type.
     * If so, that token is consumed; if not, the token is placed
     * back onto the token stream. You can pass in any number of
     * token types and this will return true if any of the token
     * types is found.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token might be. If an array is passed,
     *      it's assumed that the token can be any of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {Boolean} True if the token type matches, false if not.
     * @method match
     */
    match: function (tokenTypes, channel) {
      //always convert to an array, makes things easier
      if (!(tokenTypes instanceof Array)) {
        tokenTypes = [tokenTypes];
      }
      var tt = this.get(channel),
        i = 0,
        len = tokenTypes.length;
      while (i < len) {
        if (tt === tokenTypes[i++]) {
          return true;
        }
      }

      //no match found, put the token back
      this.unget();
      return false;
    },
    /**
     * Determines if the next token matches the given token type.
     * If so, that token is consumed; if not, an error is thrown.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token should be. If an array is passed,
     *      it's assumed that the token must be one of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {void}
     * @method mustMatch
     */
    mustMatch: function (tokenTypes, channel) {
      var token;

      //always convert to an array, makes things easier
      if (!(tokenTypes instanceof Array)) {
        tokenTypes = [tokenTypes];
      }
      if (!this.match.apply(this, arguments)) {
        token = this.LT(1);
        throw new SyntaxError("Expected " + this._tokenData[tokenTypes[0]].name + " at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
      }
    },
    //-------------------------------------------------------------------------
    // Consuming methods
    //-------------------------------------------------------------------------

    /**
     * Keeps reading from the token stream until either one of the specified
     * token types is found or until the end of the input is reached.
     * @param {int|int[]} tokenTypes Either a single token type or an array of
     *      token types that the next token should be. If an array is passed,
     *      it's assumed that the token must be one of these.
     * @param {variant} channel (Optional) The channel to read from. If not
     *      provided, reads from the default (unnamed) channel.
     * @return {void}
     * @method advance
     */
    advance: function (tokenTypes, channel) {
      while (this.LA(0) !== 0 && !this.match(tokenTypes, channel)) {
        this.get();
      }
      return this.LA(0);
    },
    /**
     * Consumes the next token from the token stream.
     * @return {int} The token type of the token that was just consumed.
     * @method get
     */
    get: function (channel) {
      var tokenInfo = this._tokenData,
        i = 0,
        token,
        info;

      //check the lookahead buffer first
      if (this._lt.length && this._ltIndex >= 0 && this._ltIndex < this._lt.length) {
        i++;
        this._token = this._lt[this._ltIndex++];
        info = tokenInfo[this._token.type];

        //obey channels logic
        while (info.channel !== undefined && channel !== info.channel && this._ltIndex < this._lt.length) {
          this._token = this._lt[this._ltIndex++];
          info = tokenInfo[this._token.type];
          i++;
        }

        //here be dragons
        if ((info.channel === undefined || channel === info.channel) && this._ltIndex <= this._lt.length) {
          this._ltIndexCache.push(i);
          return this._token.type;
        }
      }

      //call token retriever method
      token = this._getToken();

      //if it should be hidden, don't save a token
      if (token.type > -1 && !tokenInfo[token.type].hide) {
        //apply token channel
        token.channel = tokenInfo[token.type].channel;

        //save for later
        this._token = token;
        this._lt.push(token);

        //save space that will be moved (must be done before array is truncated)
        this._ltIndexCache.push(this._lt.length - this._ltIndex + i);

        //keep the buffer under 5 items
        if (this._lt.length > 5) {
          this._lt.shift();
        }

        //also keep the shift buffer under 5 items
        if (this._ltIndexCache.length > 5) {
          this._ltIndexCache.shift();
        }

        //update lookahead index
        this._ltIndex = this._lt.length;
      }

      /*
       * Skip to the next token if:
       * 1. The token type is marked as hidden.
       * 2. The token type has a channel specified and it isn't the current channel.
       */
      info = tokenInfo[token.type];
      if (info && (info.hide || info.channel !== undefined && channel !== info.channel)) {
        return this.get(channel);
      } else {
        //return just the type
        return token.type;
      }
    },
    /**
     * Looks ahead a certain number of tokens and returns the token type at
     * that position. This will throw an error if you lookahead past the
     * end of input, past the size of the lookahead buffer, or back past
     * the first token in the lookahead buffer.
     * @param {int} The index of the token type to retrieve. 0 for the
     *      current token, 1 for the next, -1 for the previous, etc.
     * @return {int} The token type of the token in the given position.
     * @method LA
     */
    LA: function (index) {
      var total = index,
        tt;
      if (index > 0) {
        //TODO: Store 5 somewhere
        if (index > 5) {
          throw new Error("Too much lookahead.");
        }

        //get all those tokens
        while (total) {
          tt = this.get();
          total--;
        }

        //unget all those tokens
        while (total < index) {
          this.unget();
          total++;
        }
      } else if (index < 0) {
        if (this._lt[this._ltIndex + index]) {
          tt = this._lt[this._ltIndex + index].type;
        } else {
          throw new Error("Too much lookbehind.");
        }
      } else {
        tt = this._token.type;
      }
      return tt;
    },
    /**
     * Looks ahead a certain number of tokens and returns the token at
     * that position. This will throw an error if you lookahead past the
     * end of input, past the size of the lookahead buffer, or back past
     * the first token in the lookahead buffer.
     * @param {int} The index of the token type to retrieve. 0 for the
     *      current token, 1 for the next, -1 for the previous, etc.
     * @return {Object} The token of the token in the given position.
     * @method LA
     */
    LT: function (index) {
      //lookahead first to prime the token buffer
      this.LA(index);

      //now find the token, subtract one because _ltIndex is already at the next index
      return this._lt[this._ltIndex + index - 1];
    },
    /**
     * Returns the token type for the next token in the stream without
     * consuming it.
     * @return {int} The token type of the next token in the stream.
     * @method peek
     */
    peek: function () {
      return this.LA(1);
    },
    /**
     * Returns the actual token object for the last consumed token.
     * @return {Token} The token object for the last consumed token.
     * @method token
     */
    token: function () {
      return this._token;
    },
    /**
     * Returns the name of the token for the given token type.
     * @param {int} tokenType The type of token to get the name of.
     * @return {String} The name of the token or "UNKNOWN_TOKEN" for any
     *      invalid token type.
     * @method tokenName
     */
    tokenName: function (tokenType) {
      if (tokenType < 0 || tokenType > this._tokenData.length) {
        return "UNKNOWN_TOKEN";
      } else {
        return this._tokenData[tokenType].name;
      }
    },
    /**
     * Returns the token type value for the given token name.
     * @param {String} tokenName The name of the token whose value should be returned.
     * @return {int} The token type value for the given token name or -1
     *      for an unknown token.
     * @method tokenName
     */
    tokenType: function (tokenName) {
      return this._tokenData[tokenName] || -1;
    },
    /**
     * Returns the last consumed token to the token stream.
     * @method unget
     */
    unget: function () {
      //if (this._ltIndex > -1){
      if (this._ltIndexCache.length) {
        this._ltIndex -= this._ltIndexCache.pop(); //--;
        this._token = this._lt[this._ltIndex - 1];
      } else {
        throw new Error("Too much lookahead.");
      }
    }
  };
  parserlib.util = {
    __proto__: null,
    StringReader: StringReader,
    SyntaxError: SyntaxError,
    SyntaxUnit: SyntaxUnit,
    EventTarget: EventTarget,
    TokenStreamBase: TokenStreamBase
  };
})();
/*
Parser-Lib
Copyright (c) 2009-2011 Nicholas C. Zakas. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
/* Version v0.2.5+domino1, Build time: 30-January-2016 05:13:03 */
(function () {
  var EventTarget = parserlib.util.EventTarget,
    TokenStreamBase = parserlib.util.TokenStreamBase,
    StringReader = parserlib.util.StringReader,
    // jshint ignore:line
    SyntaxError = parserlib.util.SyntaxError,
    SyntaxUnit = parserlib.util.SyntaxUnit;
  var Colors = {
    __proto__: null,
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgrey: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    grey: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgrey: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370d8",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#d87093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32",
    //'currentColor' color keyword http://www.w3.org/TR/css3-color/#currentcolor
    currentColor: "The value of the 'color' property.",
    //CSS2 system colors http://www.w3.org/TR/css3-color/#css2-system
    activeBorder: "Active window border.",
    activecaption: "Active window caption.",
    appworkspace: "Background color of multiple document interface.",
    background: "Desktop background.",
    buttonface: "The face background color for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttonhighlight: "The color of the border facing the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttonshadow: "The color of the border away from the light source for 3-D elements that appear 3-D due to one layer of surrounding border.",
    buttontext: "Text on push buttons.",
    captiontext: "Text in caption, size box, and scrollbar arrow box.",
    graytext: "Grayed (disabled) text. This color is set to #000 if the current display driver does not support a solid gray color.",
    greytext: "Greyed (disabled) text. This color is set to #000 if the current display driver does not support a solid grey color.",
    highlight: "Item(s) selected in a control.",
    highlighttext: "Text of item(s) selected in a control.",
    inactiveborder: "Inactive window border.",
    inactivecaption: "Inactive window caption.",
    inactivecaptiontext: "Color of text in an inactive caption.",
    infobackground: "Background color for tooltip controls.",
    infotext: "Text color for tooltip controls.",
    menu: "Menu background.",
    menutext: "Text in menus.",
    scrollbar: "Scroll bar gray area.",
    threeddarkshadow: "The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedface: "The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedhighlight: "The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedlightshadow: "The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    threedshadow: "The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.",
    window: "Window background.",
    windowframe: "Window frame.",
    windowtext: "Text in windows."
  };
  /**
   * Represents a selector combinator (whitespace, +, >).
   * @namespace parserlib.css
   * @class Combinator
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {String} text The text representation of the unit.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function Combinator(text, line, col) {
    SyntaxUnit.call(this, text, line, col, Parser.COMBINATOR_TYPE);

    /**
     * The type of modifier.
     * @type String
     * @property type
     */
    this.type = "unknown";

    //pretty simple
    if (/^\s+$/.test(text)) {
      this.type = "descendant";
    } else if (text === ">") {
      this.type = "child";
    } else if (text === "+") {
      this.type = "adjacent-sibling";
    } else if (text === "~") {
      this.type = "sibling";
    }
  }
  Combinator.prototype = new SyntaxUnit();
  Combinator.prototype.constructor = Combinator;

  /**
   * Represents a media feature, such as max-width:500.
   * @namespace parserlib.css
   * @class MediaFeature
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {SyntaxUnit} name The name of the feature.
   * @param {SyntaxUnit} value The value of the feature or null if none.
   */
  function MediaFeature(name, value) {
    SyntaxUnit.call(this, "(" + name + (value !== null ? ":" + value : "") + ")", name.startLine, name.startCol, Parser.MEDIA_FEATURE_TYPE);

    /**
     * The name of the media feature
     * @type String
     * @property name
     */
    this.name = name;

    /**
     * The value for the feature or null if there is none.
     * @type SyntaxUnit
     * @property value
     */
    this.value = value;
  }
  MediaFeature.prototype = new SyntaxUnit();
  MediaFeature.prototype.constructor = MediaFeature;

  /**
   * Represents an individual media query.
   * @namespace parserlib.css
   * @class MediaQuery
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {String} modifier The modifier "not" or "only" (or null).
   * @param {String} mediaType The type of media (i.e., "print").
   * @param {Array} parts Array of selectors parts making up this selector.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function MediaQuery(modifier, mediaType, features, line, col) {
    SyntaxUnit.call(this, (modifier ? modifier + " " : "") + (mediaType ? mediaType : "") + (mediaType && features.length > 0 ? " and " : "") + features.join(" and "), line, col, Parser.MEDIA_QUERY_TYPE);

    /**
     * The media modifier ("not" or "only")
     * @type String
     * @property modifier
     */
    this.modifier = modifier;

    /**
     * The mediaType (i.e., "print")
     * @type String
     * @property mediaType
     */
    this.mediaType = mediaType;

    /**
     * The parts that make up the selector.
     * @type Array
     * @property features
     */
    this.features = features;
  }
  MediaQuery.prototype = new SyntaxUnit();
  MediaQuery.prototype.constructor = MediaQuery;

  /**
   * A CSS3 parser.
   * @namespace parserlib.css
   * @class Parser
   * @constructor
   * @param {Object} options (Optional) Various options for the parser:
   *      starHack (true|false) to allow IE6 star hack as valid,
   *      underscoreHack (true|false) to interpret leading underscores
   *      as IE6-7 targeting for known properties, ieFilters (true|false)
   *      to indicate that IE < 8 filters should be accepted and not throw
   *      syntax errors.
   */
  function Parser(options) {
    //inherit event functionality
    EventTarget.call(this);
    this.options = options || {};
    this._tokenStream = null;
  }

  //Static constants
  Parser.DEFAULT_TYPE = 0;
  Parser.COMBINATOR_TYPE = 1;
  Parser.MEDIA_FEATURE_TYPE = 2;
  Parser.MEDIA_QUERY_TYPE = 3;
  Parser.PROPERTY_NAME_TYPE = 4;
  Parser.PROPERTY_VALUE_TYPE = 5;
  Parser.PROPERTY_VALUE_PART_TYPE = 6;
  Parser.SELECTOR_TYPE = 7;
  Parser.SELECTOR_PART_TYPE = 8;
  Parser.SELECTOR_SUB_PART_TYPE = 9;
  Parser.prototype = function () {
    var proto = new EventTarget(),
      //new prototype
      prop,
      additions = {
        __proto__: null,
        //restore constructor
        constructor: Parser,
        //instance constants - yuck
        DEFAULT_TYPE: 0,
        COMBINATOR_TYPE: 1,
        MEDIA_FEATURE_TYPE: 2,
        MEDIA_QUERY_TYPE: 3,
        PROPERTY_NAME_TYPE: 4,
        PROPERTY_VALUE_TYPE: 5,
        PROPERTY_VALUE_PART_TYPE: 6,
        SELECTOR_TYPE: 7,
        SELECTOR_PART_TYPE: 8,
        SELECTOR_SUB_PART_TYPE: 9,
        //-----------------------------------------------------------------
        // Grammar
        //-----------------------------------------------------------------

        _stylesheet: function () {
          /*
           * stylesheet
           *  : [ CHARSET_SYM S* STRING S* ';' ]?
           *    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
           *    [ namespace [S|CDO|CDC]* ]*
           *    [ [ ruleset | media | page | font_face | keyframes ] [S|CDO|CDC]* ]*
           *  ;
           */

          var tokenStream = this._tokenStream,
            count,
            token,
            tt;
          this.fire("startstylesheet");

          //try to read character set
          this._charset();
          this._skipCruft();

          //try to read imports - may be more than one
          while (tokenStream.peek() === Tokens.IMPORT_SYM) {
            this._import();
            this._skipCruft();
          }

          //try to read namespaces - may be more than one
          while (tokenStream.peek() === Tokens.NAMESPACE_SYM) {
            this._namespace();
            this._skipCruft();
          }

          //get the next token
          tt = tokenStream.peek();

          //try to read the rest
          while (tt > Tokens.EOF) {
            try {
              switch (tt) {
                case Tokens.MEDIA_SYM:
                  this._media();
                  this._skipCruft();
                  break;
                case Tokens.PAGE_SYM:
                  this._page();
                  this._skipCruft();
                  break;
                case Tokens.FONT_FACE_SYM:
                  this._font_face();
                  this._skipCruft();
                  break;
                case Tokens.KEYFRAMES_SYM:
                  this._keyframes();
                  this._skipCruft();
                  break;
                case Tokens.VIEWPORT_SYM:
                  this._viewport();
                  this._skipCruft();
                  break;
                case Tokens.DOCUMENT_SYM:
                  this._document();
                  this._skipCruft();
                  break;
                case Tokens.UNKNOWN_SYM:
                  //unknown @ rule
                  tokenStream.get();
                  if (!this.options.strict) {
                    //fire error event
                    this.fire({
                      type: "error",
                      error: null,
                      message: "Unknown @ rule: " + tokenStream.LT(0).value + ".",
                      line: tokenStream.LT(0).startLine,
                      col: tokenStream.LT(0).startCol
                    });

                    //skip braces
                    count = 0;
                    while (tokenStream.advance([Tokens.LBRACE, Tokens.RBRACE]) === Tokens.LBRACE) {
                      count++; //keep track of nesting depth
                    }

                    while (count) {
                      tokenStream.advance([Tokens.RBRACE]);
                      count--;
                    }
                  } else {
                    //not a syntax error, rethrow it
                    throw new SyntaxError("Unknown @ rule.", tokenStream.LT(0).startLine, tokenStream.LT(0).startCol);
                  }
                  break;
                case Tokens.S:
                  this._readWhitespace();
                  break;
                default:
                  if (!this._ruleset()) {
                    //error handling for known issues
                    switch (tt) {
                      case Tokens.CHARSET_SYM:
                        token = tokenStream.LT(1);
                        this._charset(false);
                        throw new SyntaxError("@charset not allowed here.", token.startLine, token.startCol);
                      case Tokens.IMPORT_SYM:
                        token = tokenStream.LT(1);
                        this._import(false);
                        throw new SyntaxError("@import not allowed here.", token.startLine, token.startCol);
                      case Tokens.NAMESPACE_SYM:
                        token = tokenStream.LT(1);
                        this._namespace(false);
                        throw new SyntaxError("@namespace not allowed here.", token.startLine, token.startCol);
                      default:
                        tokenStream.get(); //get the last token
                        this._unexpectedToken(tokenStream.token());
                    }
                  }
              }
            } catch (ex) {
              if (ex instanceof SyntaxError && !this.options.strict) {
                this.fire({
                  type: "error",
                  error: ex,
                  message: ex.message,
                  line: ex.line,
                  col: ex.col
                });
              } else {
                throw ex;
              }
            }
            tt = tokenStream.peek();
          }
          if (tt !== Tokens.EOF) {
            this._unexpectedToken(tokenStream.token());
          }
          this.fire("endstylesheet");
        },
        _charset: function (emit) {
          var tokenStream = this._tokenStream,
            charset,
            token,
            line,
            col;
          if (tokenStream.match(Tokens.CHARSET_SYM)) {
            line = tokenStream.token().startLine;
            col = tokenStream.token().startCol;
            this._readWhitespace();
            tokenStream.mustMatch(Tokens.STRING);
            token = tokenStream.token();
            charset = token.value;
            this._readWhitespace();
            tokenStream.mustMatch(Tokens.SEMICOLON);
            if (emit !== false) {
              this.fire({
                type: "charset",
                charset: charset,
                line: line,
                col: col
              });
            }
          }
        },
        _import: function (emit) {
          /*
           * import
           *   : IMPORT_SYM S*
           *    [STRING|URI] S* media_query_list? ';' S*
           */

          var tokenStream = this._tokenStream,
            uri,
            importToken,
            mediaList = [];

          //read import symbol
          tokenStream.mustMatch(Tokens.IMPORT_SYM);
          importToken = tokenStream.token();
          this._readWhitespace();
          tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);

          //grab the URI value
          uri = tokenStream.token().value.replace(/^(?:url\()?["']?([^"']+?)["']?\)?$/, "$1");
          this._readWhitespace();
          mediaList = this._media_query_list();

          //must end with a semicolon
          tokenStream.mustMatch(Tokens.SEMICOLON);
          this._readWhitespace();
          if (emit !== false) {
            this.fire({
              type: "import",
              uri: uri,
              media: mediaList,
              line: importToken.startLine,
              col: importToken.startCol
            });
          }
        },
        _namespace: function (emit) {
          /*
           * namespace
           *   : NAMESPACE_SYM S* [namespace_prefix S*]? [STRING|URI] S* ';' S*
           */

          var tokenStream = this._tokenStream,
            line,
            col,
            prefix,
            uri;

          //read import symbol
          tokenStream.mustMatch(Tokens.NAMESPACE_SYM);
          line = tokenStream.token().startLine;
          col = tokenStream.token().startCol;
          this._readWhitespace();

          //it's a namespace prefix - no _namespace_prefix() method because it's just an IDENT
          if (tokenStream.match(Tokens.IDENT)) {
            prefix = tokenStream.token().value;
            this._readWhitespace();
          }
          tokenStream.mustMatch([Tokens.STRING, Tokens.URI]);
          /*if (!tokenStream.match(Tokens.STRING)){
              tokenStream.mustMatch(Tokens.URI);
          }*/

          //grab the URI value
          uri = tokenStream.token().value.replace(/(?:url\()?["']([^"']+)["']\)?/, "$1");
          this._readWhitespace();

          //must end with a semicolon
          tokenStream.mustMatch(Tokens.SEMICOLON);
          this._readWhitespace();
          if (emit !== false) {
            this.fire({
              type: "namespace",
              prefix: prefix,
              uri: uri,
              line: line,
              col: col
            });
          }
        },
        _media: function () {
          /*
           * media
           *   : MEDIA_SYM S* media_query_list S* '{' S* ruleset* '}' S*
           *   ;
           */
          var tokenStream = this._tokenStream,
            line,
            col,
            mediaList; //       = [];

          //look for @media
          tokenStream.mustMatch(Tokens.MEDIA_SYM);
          line = tokenStream.token().startLine;
          col = tokenStream.token().startCol;
          this._readWhitespace();
          mediaList = this._media_query_list();
          tokenStream.mustMatch(Tokens.LBRACE);
          this._readWhitespace();
          this.fire({
            type: "startmedia",
            media: mediaList,
            line: line,
            col: col
          });
          while (true) {
            if (tokenStream.peek() === Tokens.PAGE_SYM) {
              this._page();
            } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM) {
              this._font_face();
            } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM) {
              this._viewport();
            } else if (tokenStream.peek() === Tokens.DOCUMENT_SYM) {
              this._document();
            } else if (!this._ruleset()) {
              break;
            }
          }
          tokenStream.mustMatch(Tokens.RBRACE);
          this._readWhitespace();
          this.fire({
            type: "endmedia",
            media: mediaList,
            line: line,
            col: col
          });
        },
        //CSS3 Media Queries
        _media_query_list: function () {
          /*
           * media_query_list
           *   : S* [media_query [ ',' S* media_query ]* ]?
           *   ;
           */
          var tokenStream = this._tokenStream,
            mediaList = [];
          this._readWhitespace();
          if (tokenStream.peek() === Tokens.IDENT || tokenStream.peek() === Tokens.LPAREN) {
            mediaList.push(this._media_query());
          }
          while (tokenStream.match(Tokens.COMMA)) {
            this._readWhitespace();
            mediaList.push(this._media_query());
          }
          return mediaList;
        },
        /*
         * Note: "expression" in the grammar maps to the _media_expression
         * method.
          */
        _media_query: function () {
          /*
           * media_query
           *   : [ONLY | NOT]? S* media_type S* [ AND S* expression ]*
           *   | expression [ AND S* expression ]*
           *   ;
           */
          var tokenStream = this._tokenStream,
            type = null,
            ident = null,
            token = null,
            expressions = [];
          if (tokenStream.match(Tokens.IDENT)) {
            ident = tokenStream.token().value.toLowerCase();

            //since there's no custom tokens for these, need to manually check
            if (ident !== "only" && ident !== "not") {
              tokenStream.unget();
              ident = null;
            } else {
              token = tokenStream.token();
            }
          }
          this._readWhitespace();
          if (tokenStream.peek() === Tokens.IDENT) {
            type = this._media_type();
            if (token === null) {
              token = tokenStream.token();
            }
          } else if (tokenStream.peek() === Tokens.LPAREN) {
            if (token === null) {
              token = tokenStream.LT(1);
            }
            expressions.push(this._media_expression());
          }
          if (type === null && expressions.length === 0) {
            return null;
          } else {
            this._readWhitespace();
            while (tokenStream.match(Tokens.IDENT)) {
              if (tokenStream.token().value.toLowerCase() !== "and") {
                this._unexpectedToken(tokenStream.token());
              }
              this._readWhitespace();
              expressions.push(this._media_expression());
            }
          }
          return new MediaQuery(ident, type, expressions, token.startLine, token.startCol);
        },
        //CSS3 Media Queries
        _media_type: function () {
          /*
           * media_type
           *   : IDENT
           *   ;
           */
          return this._media_feature();
        },
        /**
         * Note: in CSS3 Media Queries, this is called "expression".
         * Renamed here to avoid conflict with CSS3 Selectors
         * definition of "expression". Also note that "expr" in the
         * grammar now maps to "expression" from CSS3 selectors.
         * @method _media_expression
         * @private
         */
        _media_expression: function () {
          /*
           * expression
           *  : '(' S* media_feature S* [ ':' S* expr ]? ')' S*
           *  ;
           */
          var tokenStream = this._tokenStream,
            feature = null,
            token,
            expression = null;
          tokenStream.mustMatch(Tokens.LPAREN);
          feature = this._media_feature();
          this._readWhitespace();
          if (tokenStream.match(Tokens.COLON)) {
            this._readWhitespace();
            token = tokenStream.LT(1);
            expression = this._expression();
          }
          tokenStream.mustMatch(Tokens.RPAREN);
          this._readWhitespace();
          return new MediaFeature(feature, expression ? new SyntaxUnit(expression, token.startLine, token.startCol) : null);
        },
        //CSS3 Media Queries
        _media_feature: function () {
          /*
           * media_feature
           *   : IDENT
           *   ;
           */
          var tokenStream = this._tokenStream;
          this._readWhitespace();
          tokenStream.mustMatch(Tokens.IDENT);
          return SyntaxUnit.fromToken(tokenStream.token());
        },
        //CSS3 Paged Media
        _page: function () {
          /*
           * page:
           *    PAGE_SYM S* IDENT? pseudo_page? S*
           *    '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*
           *    ;
           */
          var tokenStream = this._tokenStream,
            line,
            col,
            identifier = null,
            pseudoPage = null;

          //look for @page
          tokenStream.mustMatch(Tokens.PAGE_SYM);
          line = tokenStream.token().startLine;
          col = tokenStream.token().startCol;
          this._readWhitespace();
          if (tokenStream.match(Tokens.IDENT)) {
            identifier = tokenStream.token().value;

            //The value 'auto' may not be used as a page name and MUST be treated as a syntax error.
            if (identifier.toLowerCase() === "auto") {
              this._unexpectedToken(tokenStream.token());
            }
          }

          //see if there's a colon upcoming
          if (tokenStream.peek() === Tokens.COLON) {
            pseudoPage = this._pseudo_page();
          }
          this._readWhitespace();
          this.fire({
            type: "startpage",
            id: identifier,
            pseudo: pseudoPage,
            line: line,
            col: col
          });
          this._readDeclarations(true, true);
          this.fire({
            type: "endpage",
            id: identifier,
            pseudo: pseudoPage,
            line: line,
            col: col
          });
        },
        //CSS3 Paged Media
        _margin: function () {
          /*
           * margin :
           *    margin_sym S* '{' declaration [ ';' S* declaration? ]* '}' S*
           *    ;
           */
          var tokenStream = this._tokenStream,
            line,
            col,
            marginSym = this._margin_sym();
          if (marginSym) {
            line = tokenStream.token().startLine;
            col = tokenStream.token().startCol;
            this.fire({
              type: "startpagemargin",
              margin: marginSym,
              line: line,
              col: col
            });
            this._readDeclarations(true);
            this.fire({
              type: "endpagemargin",
              margin: marginSym,
              line: line,
              col: col
            });
            return true;
          } else {
            return false;
          }
        },
        //CSS3 Paged Media
        _margin_sym: function () {
          /*
           * margin_sym :
           *    TOPLEFTCORNER_SYM |
           *    TOPLEFT_SYM |
           *    TOPCENTER_SYM |
           *    TOPRIGHT_SYM |
           *    TOPRIGHTCORNER_SYM |
           *    BOTTOMLEFTCORNER_SYM |
           *    BOTTOMLEFT_SYM |
           *    BOTTOMCENTER_SYM |
           *    BOTTOMRIGHT_SYM |
           *    BOTTOMRIGHTCORNER_SYM |
           *    LEFTTOP_SYM |
           *    LEFTMIDDLE_SYM |
           *    LEFTBOTTOM_SYM |
           *    RIGHTTOP_SYM |
           *    RIGHTMIDDLE_SYM |
           *    RIGHTBOTTOM_SYM
           *    ;
           */

          var tokenStream = this._tokenStream;
          if (tokenStream.match([Tokens.TOPLEFTCORNER_SYM, Tokens.TOPLEFT_SYM, Tokens.TOPCENTER_SYM, Tokens.TOPRIGHT_SYM, Tokens.TOPRIGHTCORNER_SYM, Tokens.BOTTOMLEFTCORNER_SYM, Tokens.BOTTOMLEFT_SYM, Tokens.BOTTOMCENTER_SYM, Tokens.BOTTOMRIGHT_SYM, Tokens.BOTTOMRIGHTCORNER_SYM, Tokens.LEFTTOP_SYM, Tokens.LEFTMIDDLE_SYM, Tokens.LEFTBOTTOM_SYM, Tokens.RIGHTTOP_SYM, Tokens.RIGHTMIDDLE_SYM, Tokens.RIGHTBOTTOM_SYM])) {
            return SyntaxUnit.fromToken(tokenStream.token());
          } else {
            return null;
          }
        },
        _pseudo_page: function () {
          /*
           * pseudo_page
           *   : ':' IDENT
           *   ;
           */

          var tokenStream = this._tokenStream;
          tokenStream.mustMatch(Tokens.COLON);
          tokenStream.mustMatch(Tokens.IDENT);

          //TODO: CSS3 Paged Media says only "left", "center", and "right" are allowed

          return tokenStream.token().value;
        },
        _font_face: function () {
          /*
           * font_face
           *   : FONT_FACE_SYM S*
           *     '{' S* declaration [ ';' S* declaration ]* '}' S*
           *   ;
           */
          var tokenStream = this._tokenStream,
            line,
            col;

          //look for @page
          tokenStream.mustMatch(Tokens.FONT_FACE_SYM);
          line = tokenStream.token().startLine;
          col = tokenStream.token().startCol;
          this._readWhitespace();
          this.fire({
            type: "startfontface",
            line: line,
            col: col
          });
          this._readDeclarations(true);
          this.fire({
            type: "endfontface",
            line: line,
            col: col
          });
        },
        _viewport: function () {
          /*
           * viewport
           *   : VIEWPORT_SYM S*
           *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*
           *   ;
           */
          var tokenStream = this._tokenStream,
            line,
            col;
          tokenStream.mustMatch(Tokens.VIEWPORT_SYM);
          line = tokenStream.token().startLine;
          col = tokenStream.token().startCol;
          this._readWhitespace();
          this.fire({
            type: "startviewport",
            line: line,
            col: col
          });
          this._readDeclarations(true);
          this.fire({
            type: "endviewport",
            line: line,
            col: col
          });
        },
        _document: function () {
          /*
           * document
           *   : DOCUMENT_SYM S*
           *     _document_function [ ',' S* _document_function ]* S*
           *     '{' S* ruleset* '}'
           *   ;
           */

          var tokenStream = this._tokenStream,
            token,
            functions = [],
            prefix = "";
          tokenStream.mustMatch(Tokens.DOCUMENT_SYM);
          token = tokenStream.token();
          if (/^@\-([^\-]+)\-/.test(token.value)) {
            prefix = RegExp.$1;
          }
          this._readWhitespace();
          functions.push(this._document_function());
          while (tokenStream.match(Tokens.COMMA)) {
            this._readWhitespace();
            functions.push(this._document_function());
          }
          tokenStream.mustMatch(Tokens.LBRACE);
          this._readWhitespace();
          this.fire({
            type: "startdocument",
            functions: functions,
            prefix: prefix,
            line: token.startLine,
            col: token.startCol
          });
          while (true) {
            if (tokenStream.peek() === Tokens.PAGE_SYM) {
              this._page();
            } else if (tokenStream.peek() === Tokens.FONT_FACE_SYM) {
              this._font_face();
            } else if (tokenStream.peek() === Tokens.VIEWPORT_SYM) {
              this._viewport();
            } else if (tokenStream.peek() === Tokens.MEDIA_SYM) {
              this._media();
            } else if (!this._ruleset()) {
              break;
            }
          }
          tokenStream.mustMatch(Tokens.RBRACE);
          this._readWhitespace();
          this.fire({
            type: "enddocument",
            functions: functions,
            prefix: prefix,
            line: token.startLine,
            col: token.startCol
          });
        },
        _document_function: function () {
          /*
           * document_function
           *   : function | URI S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            value;
          if (tokenStream.match(Tokens.URI)) {
            value = tokenStream.token().value;
            this._readWhitespace();
          } else {
            value = this._function();
          }
          return value;
        },
        _operator: function (inFunction) {
          /*
           * operator (outside function)
           *  : '/' S* | ',' S* | /( empty )/
           * operator (inside function)
           *  : '/' S* | '+' S* | '*' S* | '-' S* /( empty )/
           *  ;
           */

          var tokenStream = this._tokenStream,
            token = null;
          if (tokenStream.match([Tokens.SLASH, Tokens.COMMA]) || inFunction && tokenStream.match([Tokens.PLUS, Tokens.STAR, Tokens.MINUS])) {
            token = tokenStream.token();
            this._readWhitespace();
          }
          return token ? PropertyValuePart.fromToken(token) : null;
        },
        _combinator: function () {
          /*
           * combinator
           *  : PLUS S* | GREATER S* | TILDE S* | S+
           *  ;
           */

          var tokenStream = this._tokenStream,
            value = null,
            token;
          if (tokenStream.match([Tokens.PLUS, Tokens.GREATER, Tokens.TILDE])) {
            token = tokenStream.token();
            value = new Combinator(token.value, token.startLine, token.startCol);
            this._readWhitespace();
          }
          return value;
        },
        _unary_operator: function () {
          /*
           * unary_operator
           *  : '-' | '+'
           *  ;
           */

          var tokenStream = this._tokenStream;
          if (tokenStream.match([Tokens.MINUS, Tokens.PLUS])) {
            return tokenStream.token().value;
          } else {
            return null;
          }
        },
        _property: function () {
          /*
           * property
           *   : IDENT S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            value = null,
            hack = null,
            tokenValue,
            token,
            line,
            col;

          //check for star hack - throws error if not allowed
          if (tokenStream.peek() === Tokens.STAR && this.options.starHack) {
            tokenStream.get();
            token = tokenStream.token();
            hack = token.value;
            line = token.startLine;
            col = token.startCol;
          }
          if (tokenStream.match(Tokens.IDENT)) {
            token = tokenStream.token();
            tokenValue = token.value;

            //check for underscore hack - no error if not allowed because it's valid CSS syntax
            if (tokenValue.charAt(0) === "_" && this.options.underscoreHack) {
              hack = "_";
              tokenValue = tokenValue.substring(1);
            }
            value = new PropertyName(tokenValue, hack, line || token.startLine, col || token.startCol);
            this._readWhitespace();
          }
          return value;
        },
        //Augmented with CSS3 Selectors
        _ruleset: function () {
          /*
           * ruleset
           *   : selectors_group
           *     '{' S* declaration? [ ';' S* declaration? ]* '}' S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            tt,
            selectors;

          /*
           * Error Recovery: If even a single selector fails to parse,
           * then the entire ruleset should be thrown away.
           */
          try {
            selectors = this._selectors_group();
          } catch (ex) {
            if (ex instanceof SyntaxError && !this.options.strict) {
              //fire error event
              this.fire({
                type: "error",
                error: ex,
                message: ex.message,
                line: ex.line,
                col: ex.col
              });

              //skip over everything until closing brace
              tt = tokenStream.advance([Tokens.RBRACE]);
              if (tt === Tokens.RBRACE) {
                //if there's a right brace, the rule is finished so don't do anything
              } else {
                //otherwise, rethrow the error because it wasn't handled properly
                throw ex;
              }
            } else {
              //not a syntax error, rethrow it
              throw ex;
            }

            //trigger parser to continue
            return true;
          }

          //if it got here, all selectors parsed
          if (selectors) {
            this.fire({
              type: "startrule",
              selectors: selectors,
              line: selectors[0].line,
              col: selectors[0].col
            });
            this._readDeclarations(true);
            this.fire({
              type: "endrule",
              selectors: selectors,
              line: selectors[0].line,
              col: selectors[0].col
            });
          }
          return selectors;
        },
        //CSS3 Selectors
        _selectors_group: function () {
          /*
           * selectors_group
           *   : selector [ COMMA S* selector ]*
           *   ;
           */
          var tokenStream = this._tokenStream,
            selectors = [],
            selector;
          selector = this._selector();
          if (selector !== null) {
            selectors.push(selector);
            while (tokenStream.match(Tokens.COMMA)) {
              this._readWhitespace();
              selector = this._selector();
              if (selector !== null) {
                selectors.push(selector);
              } else {
                this._unexpectedToken(tokenStream.LT(1));
              }
            }
          }
          return selectors.length ? selectors : null;
        },
        //CSS3 Selectors
        _selector: function () {
          /*
           * selector
           *   : simple_selector_sequence [ combinator simple_selector_sequence ]*
           *   ;
           */

          var tokenStream = this._tokenStream,
            selector = [],
            nextSelector = null,
            combinator = null,
            ws = null;

          //if there's no simple selector, then there's no selector
          nextSelector = this._simple_selector_sequence();
          if (nextSelector === null) {
            return null;
          }
          selector.push(nextSelector);
          do {
            //look for a combinator
            combinator = this._combinator();
            if (combinator !== null) {
              selector.push(combinator);
              nextSelector = this._simple_selector_sequence();

              //there must be a next selector
              if (nextSelector === null) {
                this._unexpectedToken(tokenStream.LT(1));
              } else {
                //nextSelector is an instance of SelectorPart
                selector.push(nextSelector);
              }
            } else {
              //if there's not whitespace, we're done
              if (this._readWhitespace()) {
                //add whitespace separator
                ws = new Combinator(tokenStream.token().value, tokenStream.token().startLine, tokenStream.token().startCol);

                //combinator is not required
                combinator = this._combinator();

                //selector is required if there's a combinator
                nextSelector = this._simple_selector_sequence();
                if (nextSelector === null) {
                  if (combinator !== null) {
                    this._unexpectedToken(tokenStream.LT(1));
                  }
                } else {
                  if (combinator !== null) {
                    selector.push(combinator);
                  } else {
                    selector.push(ws);
                  }
                  selector.push(nextSelector);
                }
              } else {
                break;
              }
            }
          } while (true);
          return new Selector(selector, selector[0].line, selector[0].col);
        },
        //CSS3 Selectors
        _simple_selector_sequence: function () {
          /*
           * simple_selector_sequence
           *   : [ type_selector | universal ]
           *     [ HASH | class | attrib | pseudo | negation ]*
           *   | [ HASH | class | attrib | pseudo | negation ]+
           *   ;
           */

          var tokenStream = this._tokenStream,
            //parts of a simple selector
            elementName = null,
            modifiers = [],
            //complete selector text
            selectorText = "",
            //the different parts after the element name to search for
            components = [
            //HASH
            function () {
              return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) : null;
            }, this._class, this._attrib, this._pseudo, this._negation],
            i = 0,
            len = components.length,
            component = null,
            line,
            col;

          //get starting line and column for the selector
          line = tokenStream.LT(1).startLine;
          col = tokenStream.LT(1).startCol;
          elementName = this._type_selector();
          if (!elementName) {
            elementName = this._universal();
          }
          if (elementName !== null) {
            selectorText += elementName;
          }
          while (true) {
            //whitespace means we're done
            if (tokenStream.peek() === Tokens.S) {
              break;
            }

            //check for each component
            while (i < len && component === null) {
              component = components[i++].call(this);
            }
            if (component === null) {
              //we don't have a selector
              if (selectorText === "") {
                return null;
              } else {
                break;
              }
            } else {
              i = 0;
              modifiers.push(component);
              selectorText += component.toString();
              component = null;
            }
          }
          return selectorText !== "" ? new SelectorPart(elementName, modifiers, selectorText, line, col) : null;
        },
        //CSS3 Selectors
        _type_selector: function () {
          /*
           * type_selector
           *   : [ namespace_prefix ]? element_name
           *   ;
           */

          var tokenStream = this._tokenStream,
            ns = this._namespace_prefix(),
            elementName = this._element_name();
          if (!elementName) {
            /*
             * Need to back out the namespace that was read due to both
             * type_selector and universal reading namespace_prefix
             * first. Kind of hacky, but only way I can figure out
             * right now how to not change the grammar.
             */
            if (ns) {
              tokenStream.unget();
              if (ns.length > 1) {
                tokenStream.unget();
              }
            }
            return null;
          } else {
            if (ns) {
              elementName.text = ns + elementName.text;
              elementName.col -= ns.length;
            }
            return elementName;
          }
        },
        //CSS3 Selectors
        _class: function () {
          /*
           * class
           *   : '.' IDENT
           *   ;
           */

          var tokenStream = this._tokenStream,
            token;
          if (tokenStream.match(Tokens.DOT)) {
            tokenStream.mustMatch(Tokens.IDENT);
            token = tokenStream.token();
            return new SelectorSubPart("." + token.value, "class", token.startLine, token.startCol - 1);
          } else {
            return null;
          }
        },
        //CSS3 Selectors
        _element_name: function () {
          /*
           * element_name
           *   : IDENT
           *   ;
           */

          var tokenStream = this._tokenStream,
            token;
          if (tokenStream.match(Tokens.IDENT)) {
            token = tokenStream.token();
            return new SelectorSubPart(token.value, "elementName", token.startLine, token.startCol);
          } else {
            return null;
          }
        },
        //CSS3 Selectors
        _namespace_prefix: function () {
          /*
           * namespace_prefix
           *   : [ IDENT | '*' ]? '|'
           *   ;
           */
          var tokenStream = this._tokenStream,
            value = "";

          //verify that this is a namespace prefix
          if (tokenStream.LA(1) === Tokens.PIPE || tokenStream.LA(2) === Tokens.PIPE) {
            if (tokenStream.match([Tokens.IDENT, Tokens.STAR])) {
              value += tokenStream.token().value;
            }
            tokenStream.mustMatch(Tokens.PIPE);
            value += "|";
          }
          return value.length ? value : null;
        },
        //CSS3 Selectors
        _universal: function () {
          /*
           * universal
           *   : [ namespace_prefix ]? '*'
           *   ;
           */
          var tokenStream = this._tokenStream,
            value = "",
            ns;
          ns = this._namespace_prefix();
          if (ns) {
            value += ns;
          }
          if (tokenStream.match(Tokens.STAR)) {
            value += "*";
          }
          return value.length ? value : null;
        },
        //CSS3 Selectors
        _attrib: function () {
          /*
           * attrib
           *   : '[' S* [ namespace_prefix ]? IDENT S*
           *         [ [ PREFIXMATCH |
           *             SUFFIXMATCH |
           *             SUBSTRINGMATCH |
           *             '=' |
           *             INCLUDES |
           *             DASHMATCH ] S* [ IDENT | STRING ] S*
           *         ]? ']'
           *   ;
           */

          var tokenStream = this._tokenStream,
            value = null,
            ns,
            token;
          if (tokenStream.match(Tokens.LBRACKET)) {
            token = tokenStream.token();
            value = token.value;
            value += this._readWhitespace();
            ns = this._namespace_prefix();
            if (ns) {
              value += ns;
            }
            tokenStream.mustMatch(Tokens.IDENT);
            value += tokenStream.token().value;
            value += this._readWhitespace();
            if (tokenStream.match([Tokens.PREFIXMATCH, Tokens.SUFFIXMATCH, Tokens.SUBSTRINGMATCH, Tokens.EQUALS, Tokens.INCLUDES, Tokens.DASHMATCH])) {
              value += tokenStream.token().value;
              value += this._readWhitespace();
              tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
              value += tokenStream.token().value;
              value += this._readWhitespace();
            }
            tokenStream.mustMatch(Tokens.RBRACKET);
            return new SelectorSubPart(value + "]", "attribute", token.startLine, token.startCol);
          } else {
            return null;
          }
        },
        //CSS3 Selectors
        _pseudo: function () {
          /*
           * pseudo
           *   : ':' ':'? [ IDENT | functional_pseudo ]
           *   ;
           */

          var tokenStream = this._tokenStream,
            pseudo = null,
            colons = ":",
            line,
            col;
          if (tokenStream.match(Tokens.COLON)) {
            if (tokenStream.match(Tokens.COLON)) {
              colons += ":";
            }
            if (tokenStream.match(Tokens.IDENT)) {
              pseudo = tokenStream.token().value;
              line = tokenStream.token().startLine;
              col = tokenStream.token().startCol - colons.length;
            } else if (tokenStream.peek() === Tokens.FUNCTION) {
              line = tokenStream.LT(1).startLine;
              col = tokenStream.LT(1).startCol - colons.length;
              pseudo = this._functional_pseudo();
            }
            if (pseudo) {
              pseudo = new SelectorSubPart(colons + pseudo, "pseudo", line, col);
            }
          }
          return pseudo;
        },
        //CSS3 Selectors
        _functional_pseudo: function () {
          /*
           * functional_pseudo
           *   : FUNCTION S* expression ')'
           *   ;
          */

          var tokenStream = this._tokenStream,
            value = null;
          if (tokenStream.match(Tokens.FUNCTION)) {
            value = tokenStream.token().value;
            value += this._readWhitespace();
            value += this._expression();
            tokenStream.mustMatch(Tokens.RPAREN);
            value += ")";
          }
          return value;
        },
        //CSS3 Selectors
        _expression: function () {
          /*
           * expression
           *   : [ [ PLUS | '-' | DIMENSION | NUMBER | STRING | IDENT ] S* ]+
           *   ;
           */

          var tokenStream = this._tokenStream,
            value = "";
          while (tokenStream.match([Tokens.PLUS, Tokens.MINUS, Tokens.DIMENSION, Tokens.NUMBER, Tokens.STRING, Tokens.IDENT, Tokens.LENGTH, Tokens.FREQ, Tokens.ANGLE, Tokens.TIME, Tokens.RESOLUTION, Tokens.SLASH])) {
            value += tokenStream.token().value;
            value += this._readWhitespace();
          }
          return value.length ? value : null;
        },
        //CSS3 Selectors
        _negation: function () {
          /*
           * negation
           *   : NOT S* negation_arg S* ')'
           *   ;
           */

          var tokenStream = this._tokenStream,
            line,
            col,
            value = "",
            arg,
            subpart = null;
          if (tokenStream.match(Tokens.NOT)) {
            value = tokenStream.token().value;
            line = tokenStream.token().startLine;
            col = tokenStream.token().startCol;
            value += this._readWhitespace();
            arg = this._negation_arg();
            value += arg;
            value += this._readWhitespace();
            tokenStream.match(Tokens.RPAREN);
            value += tokenStream.token().value;
            subpart = new SelectorSubPart(value, "not", line, col);
            subpart.args.push(arg);
          }
          return subpart;
        },
        //CSS3 Selectors
        _negation_arg: function () {
          /*
           * negation_arg
           *   : type_selector | universal | HASH | class | attrib | pseudo
           *   ;
           */

          var tokenStream = this._tokenStream,
            args = [this._type_selector, this._universal, function () {
              return tokenStream.match(Tokens.HASH) ? new SelectorSubPart(tokenStream.token().value, "id", tokenStream.token().startLine, tokenStream.token().startCol) : null;
            }, this._class, this._attrib, this._pseudo],
            arg = null,
            i = 0,
            len = args.length,
            line,
            col,
            part;
          line = tokenStream.LT(1).startLine;
          col = tokenStream.LT(1).startCol;
          while (i < len && arg === null) {
            arg = args[i].call(this);
            i++;
          }

          //must be a negation arg
          if (arg === null) {
            this._unexpectedToken(tokenStream.LT(1));
          }

          //it's an element name
          if (arg.type === "elementName") {
            part = new SelectorPart(arg, [], arg.toString(), line, col);
          } else {
            part = new SelectorPart(null, [arg], arg.toString(), line, col);
          }
          return part;
        },
        _declaration: function () {
          /*
           * declaration
           *   : property ':' S* expr prio?
           *   | /( empty )/
           *   ;
           */

          var tokenStream = this._tokenStream,
            property = null,
            expr = null,
            prio = null,
            invalid = null,
            propertyName = "";
          property = this._property();
          if (property !== null) {
            tokenStream.mustMatch(Tokens.COLON);
            this._readWhitespace();
            expr = this._expr();

            //if there's no parts for the value, it's an error
            if (!expr || expr.length === 0) {
              this._unexpectedToken(tokenStream.LT(1));
            }
            prio = this._prio();

            /*
             * If hacks should be allowed, then only check the root
             * property. If hacks should not be allowed, treat
             * _property or *property as invalid properties.
             */
            propertyName = property.toString();
            if (this.options.starHack && property.hack === "*" || this.options.underscoreHack && property.hack === "_") {
              propertyName = property.text;
            }
            try {
              this._validateProperty(propertyName, expr);
            } catch (ex) {
              invalid = ex;
            }
            this.fire({
              type: "property",
              property: property,
              value: expr,
              important: prio,
              line: property.line,
              col: property.col,
              invalid: invalid
            });
            return true;
          } else {
            return false;
          }
        },
        _prio: function () {
          /*
           * prio
           *   : IMPORTANT_SYM S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            result = tokenStream.match(Tokens.IMPORTANT_SYM);
          this._readWhitespace();
          return result;
        },
        _expr: function (inFunction) {
          /*
           * expr
           *   : term [ operator term ]*
           *   ;
           */

          var values = [],
            //valueParts	= [],
            value = null,
            operator = null;
          value = this._term(inFunction);
          if (value !== null) {
            values.push(value);
            do {
              operator = this._operator(inFunction);

              //if there's an operator, keep building up the value parts
              if (operator) {
                values.push(operator);
              } /*else {
                  //if there's not an operator, you have a full value
                values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));
                valueParts = [];
                }*/

              value = this._term(inFunction);
              if (value === null) {
                break;
              } else {
                values.push(value);
              }
            } while (true);
          }

          //cleanup
          /*if (valueParts.length){
              values.push(new PropertyValue(valueParts, valueParts[0].line, valueParts[0].col));
          }*/

          return values.length > 0 ? new PropertyValue(values, values[0].line, values[0].col) : null;
        },
        _term: function (inFunction) {
          /*
           * term
           *   : unary_operator?
           *     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | ANGLE S* |
           *       TIME S* | FREQ S* | function | ie_function ]
           *   | STRING S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor
           *   ;
           */

          var tokenStream = this._tokenStream,
            unary = null,
            value = null,
            endChar = null,
            token,
            line,
            col;

          //returns the operator or null
          unary = this._unary_operator();
          if (unary !== null) {
            line = tokenStream.token().startLine;
            col = tokenStream.token().startCol;
          }

          //exception for IE filters
          if (tokenStream.peek() === Tokens.IE_FUNCTION && this.options.ieFilters) {
            value = this._ie_function();
            if (unary === null) {
              line = tokenStream.token().startLine;
              col = tokenStream.token().startCol;
            }

            //see if it's a simple block
          } else if (inFunction && tokenStream.match([Tokens.LPAREN, Tokens.LBRACE, Tokens.LBRACKET])) {
            token = tokenStream.token();
            endChar = token.endChar;
            value = token.value + this._expr(inFunction).text;
            if (unary === null) {
              line = tokenStream.token().startLine;
              col = tokenStream.token().startCol;
            }
            tokenStream.mustMatch(Tokens.type(endChar));
            value += endChar;
            this._readWhitespace();

            //see if there's a simple match
          } else if (tokenStream.match([Tokens.NUMBER, Tokens.PERCENTAGE, Tokens.LENGTH, Tokens.ANGLE, Tokens.TIME, Tokens.FREQ, Tokens.STRING, Tokens.IDENT, Tokens.URI, Tokens.UNICODE_RANGE])) {
            value = tokenStream.token().value;
            if (unary === null) {
              line = tokenStream.token().startLine;
              col = tokenStream.token().startCol;
            }
            this._readWhitespace();
          } else {
            //see if it's a color
            token = this._hexcolor();
            if (token === null) {
              //if there's no unary, get the start of the next token for line/col info
              if (unary === null) {
                line = tokenStream.LT(1).startLine;
                col = tokenStream.LT(1).startCol;
              }

              //has to be a function
              if (value === null) {
                /*
                 * This checks for alpha(opacity=0) style of IE
                 * functions. IE_FUNCTION only presents progid: style.
                 */
                if (tokenStream.LA(3) === Tokens.EQUALS && this.options.ieFilters) {
                  value = this._ie_function();
                } else {
                  value = this._function();
                }
              }

              /*if (value === null){
                  return null;
                  //throw new Error("Expected identifier at line " + tokenStream.token().startLine + ", character " +  tokenStream.token().startCol + ".");
              }*/
            } else {
              value = token.value;
              if (unary === null) {
                line = token.startLine;
                col = token.startCol;
              }
            }
          }
          return value !== null ? new PropertyValuePart(unary !== null ? unary + value : value, line, col) : null;
        },
        _function: function () {
          /*
           * function
           *   : FUNCTION S* expr ')' S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            functionText = null,
            expr = null,
            lt;
          if (tokenStream.match(Tokens.FUNCTION)) {
            functionText = tokenStream.token().value;
            this._readWhitespace();
            expr = this._expr(true);
            functionText += expr;

            //START: Horrible hack in case it's an IE filter
            if (this.options.ieFilters && tokenStream.peek() === Tokens.EQUALS) {
              do {
                if (this._readWhitespace()) {
                  functionText += tokenStream.token().value;
                }

                //might be second time in the loop
                if (tokenStream.LA(0) === Tokens.COMMA) {
                  functionText += tokenStream.token().value;
                }
                tokenStream.match(Tokens.IDENT);
                functionText += tokenStream.token().value;
                tokenStream.match(Tokens.EQUALS);
                functionText += tokenStream.token().value;

                //functionText += this._term();
                lt = tokenStream.peek();
                while (lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN) {
                  tokenStream.get();
                  functionText += tokenStream.token().value;
                  lt = tokenStream.peek();
                }
              } while (tokenStream.match([Tokens.COMMA, Tokens.S]));
            }

            //END: Horrible Hack

            tokenStream.match(Tokens.RPAREN);
            functionText += ")";
            this._readWhitespace();
          }
          return functionText;
        },
        _ie_function: function () {
          /* (My own extension)
           * ie_function
           *   : IE_FUNCTION S* IDENT '=' term [S* ','? IDENT '=' term]+ ')' S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            functionText = null,
            lt;

          //IE function can begin like a regular function, too
          if (tokenStream.match([Tokens.IE_FUNCTION, Tokens.FUNCTION])) {
            functionText = tokenStream.token().value;
            do {
              if (this._readWhitespace()) {
                functionText += tokenStream.token().value;
              }

              //might be second time in the loop
              if (tokenStream.LA(0) === Tokens.COMMA) {
                functionText += tokenStream.token().value;
              }
              tokenStream.match(Tokens.IDENT);
              functionText += tokenStream.token().value;
              tokenStream.match(Tokens.EQUALS);
              functionText += tokenStream.token().value;

              //functionText += this._term();
              lt = tokenStream.peek();
              while (lt !== Tokens.COMMA && lt !== Tokens.S && lt !== Tokens.RPAREN) {
                tokenStream.get();
                functionText += tokenStream.token().value;
                lt = tokenStream.peek();
              }
            } while (tokenStream.match([Tokens.COMMA, Tokens.S]));
            tokenStream.match(Tokens.RPAREN);
            functionText += ")";
            this._readWhitespace();
          }
          return functionText;
        },
        _hexcolor: function () {
          /*
           * There is a constraint on the color that it must
           * have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])
           * after the "#"; e.g., "#000" is OK, but "#abcd" is not.
           *
           * hexcolor
           *   : HASH S*
           *   ;
           */

          var tokenStream = this._tokenStream,
            token = null,
            color;
          if (tokenStream.match(Tokens.HASH)) {
            //need to do some validation here

            token = tokenStream.token();
            color = token.value;
            if (!/#[a-f0-9]{3,6}/i.test(color)) {
              throw new SyntaxError("Expected a hex color but found '" + color + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
            }
            this._readWhitespace();
          }
          return token;
        },
        //-----------------------------------------------------------------
        // Animations methods
        //-----------------------------------------------------------------

        _keyframes: function () {
          /*
           * keyframes:
           *   : KEYFRAMES_SYM S* keyframe_name S* '{' S* keyframe_rule* '}' {
           *   ;
           */
          var tokenStream = this._tokenStream,
            token,
            tt,
            name,
            prefix = "";
          tokenStream.mustMatch(Tokens.KEYFRAMES_SYM);
          token = tokenStream.token();
          if (/^@\-([^\-]+)\-/.test(token.value)) {
            prefix = RegExp.$1;
          }
          this._readWhitespace();
          name = this._keyframe_name();
          this._readWhitespace();
          tokenStream.mustMatch(Tokens.LBRACE);
          this.fire({
            type: "startkeyframes",
            name: name,
            prefix: prefix,
            line: token.startLine,
            col: token.startCol
          });
          this._readWhitespace();
          tt = tokenStream.peek();

          //check for key
          while (tt === Tokens.IDENT || tt === Tokens.PERCENTAGE) {
            this._keyframe_rule();
            this._readWhitespace();
            tt = tokenStream.peek();
          }
          this.fire({
            type: "endkeyframes",
            name: name,
            prefix: prefix,
            line: token.startLine,
            col: token.startCol
          });
          this._readWhitespace();
          tokenStream.mustMatch(Tokens.RBRACE);
        },
        _keyframe_name: function () {
          /*
           * keyframe_name:
           *   : IDENT
           *   | STRING
           *   ;
           */
          var tokenStream = this._tokenStream;
          tokenStream.mustMatch([Tokens.IDENT, Tokens.STRING]);
          return SyntaxUnit.fromToken(tokenStream.token());
        },
        _keyframe_rule: function () {
          /*
           * keyframe_rule:
           *   : key_list S*
           *     '{' S* declaration [ ';' S* declaration ]* '}' S*
           *   ;
           */
          var keyList = this._key_list();
          this.fire({
            type: "startkeyframerule",
            keys: keyList,
            line: keyList[0].line,
            col: keyList[0].col
          });
          this._readDeclarations(true);
          this.fire({
            type: "endkeyframerule",
            keys: keyList,
            line: keyList[0].line,
            col: keyList[0].col
          });
        },
        _key_list: function () {
          /*
           * key_list:
           *   : key [ S* ',' S* key]*
           *   ;
           */
          var tokenStream = this._tokenStream,
            keyList = [];

          //must be least one key
          keyList.push(this._key());
          this._readWhitespace();
          while (tokenStream.match(Tokens.COMMA)) {
            this._readWhitespace();
            keyList.push(this._key());
            this._readWhitespace();
          }
          return keyList;
        },
        _key: function () {
          /*
           * There is a restriction that IDENT can be only "from" or "to".
           *
           * key
           *   : PERCENTAGE
           *   | IDENT
           *   ;
           */

          var tokenStream = this._tokenStream,
            token;
          if (tokenStream.match(Tokens.PERCENTAGE)) {
            return SyntaxUnit.fromToken(tokenStream.token());
          } else if (tokenStream.match(Tokens.IDENT)) {
            token = tokenStream.token();
            if (/from|to/i.test(token.value)) {
              return SyntaxUnit.fromToken(token);
            }
            tokenStream.unget();
          }

          //if it gets here, there wasn't a valid token, so time to explode
          this._unexpectedToken(tokenStream.LT(1));
        },
        //-----------------------------------------------------------------
        // Helper methods
        //-----------------------------------------------------------------

        /**
         * Not part of CSS grammar, but useful for skipping over
         * combination of white space and HTML-style comments.
         * @return {void}
         * @method _skipCruft
         * @private
         */
        _skipCruft: function () {
          while (this._tokenStream.match([Tokens.S, Tokens.CDO, Tokens.CDC])) {
            //noop
          }
        },
        /**
         * Not part of CSS grammar, but this pattern occurs frequently
         * in the official CSS grammar. Split out here to eliminate
         * duplicate code.
         * @param {Boolean} checkStart Indicates if the rule should check
         *      for the left brace at the beginning.
         * @param {Boolean} readMargins Indicates if the rule should check
         *      for margin patterns.
         * @return {void}
         * @method _readDeclarations
         * @private
         */
        _readDeclarations: function (checkStart, readMargins) {
          /*
           * Reads the pattern
           * S* '{' S* declaration [ ';' S* declaration ]* '}' S*
           * or
           * S* '{' S* [ declaration | margin ]? [ ';' S* [ declaration | margin ]? ]* '}' S*
           * Note that this is how it is described in CSS3 Paged Media, but is actually incorrect.
           * A semicolon is only necessary following a declaration if there's another declaration
           * or margin afterwards.
           */
          var tokenStream = this._tokenStream,
            tt;
          this._readWhitespace();
          if (checkStart) {
            tokenStream.mustMatch(Tokens.LBRACE);
          }
          this._readWhitespace();
          try {
            while (true) {
              if (tokenStream.match(Tokens.SEMICOLON) || readMargins && this._margin()) {
                //noop
              } else if (this._declaration()) {
                if (!tokenStream.match(Tokens.SEMICOLON)) {
                  break;
                }
              } else {
                break;
              }

              //if ((!this._margin() && !this._declaration()) || !tokenStream.match(Tokens.SEMICOLON)){
              //    break;
              //}
              this._readWhitespace();
            }
            tokenStream.mustMatch(Tokens.RBRACE);
            this._readWhitespace();
          } catch (ex) {
            if (ex instanceof SyntaxError && !this.options.strict) {
              //fire error event
              this.fire({
                type: "error",
                error: ex,
                message: ex.message,
                line: ex.line,
                col: ex.col
              });

              //see if there's another declaration
              tt = tokenStream.advance([Tokens.SEMICOLON, Tokens.RBRACE]);
              if (tt === Tokens.SEMICOLON) {
                //if there's a semicolon, then there might be another declaration
                this._readDeclarations(false, readMargins);
              } else if (tt !== Tokens.RBRACE) {
                //if there's a right brace, the rule is finished so don't do anything
                //otherwise, rethrow the error because it wasn't handled properly
                throw ex;
              }
            } else {
              //not a syntax error, rethrow it
              throw ex;
            }
          }
        },
        /**
         * In some cases, you can end up with two white space tokens in a
         * row. Instead of making a change in every function that looks for
         * white space, this function is used to match as much white space
         * as necessary.
         * @method _readWhitespace
         * @return {String} The white space if found, empty string if not.
         * @private
         */
        _readWhitespace: function () {
          var tokenStream = this._tokenStream,
            ws = "";
          while (tokenStream.match(Tokens.S)) {
            ws += tokenStream.token().value;
          }
          return ws;
        },
        /**
         * Throws an error when an unexpected token is found.
         * @param {Object} token The token that was found.
         * @method _unexpectedToken
         * @return {void}
         * @private
         */
        _unexpectedToken: function (token) {
          throw new SyntaxError("Unexpected token '" + token.value + "' at line " + token.startLine + ", col " + token.startCol + ".", token.startLine, token.startCol);
        },
        /**
         * Helper method used for parsing subparts of a style sheet.
         * @return {void}
         * @method _verifyEnd
         * @private
         */
        _verifyEnd: function () {
          if (this._tokenStream.LA(1) !== Tokens.EOF) {
            this._unexpectedToken(this._tokenStream.LT(1));
          }
        },
        //-----------------------------------------------------------------
        // Validation methods
        //-----------------------------------------------------------------
        _validateProperty: function (property, value) {
          Validation.validate(property, value);
        },
        //-----------------------------------------------------------------
        // Parsing methods
        //-----------------------------------------------------------------

        parse: function (input) {
          this._tokenStream = new TokenStream(input, Tokens);
          this._stylesheet();
        },
        parseStyleSheet: function (input) {
          //just passthrough
          return this.parse(input);
        },
        parseMediaQuery: function (input) {
          this._tokenStream = new TokenStream(input, Tokens);
          var result = this._media_query();

          //if there's anything more, then it's an invalid selector
          this._verifyEnd();

          //otherwise return result
          return result;
        },
        /**
         * Parses a property value (everything after the semicolon).
         * @return {parserlib.css.PropertyValue} The property value.
         * @throws parserlib.util.SyntaxError If an unexpected token is found.
         * @method parserPropertyValue
         */
        parsePropertyValue: function (input) {
          this._tokenStream = new TokenStream(input, Tokens);
          this._readWhitespace();
          var result = this._expr();

          //okay to have a trailing white space
          this._readWhitespace();

          //if there's anything more, then it's an invalid selector
          this._verifyEnd();

          //otherwise return result
          return result;
        },
        /**
         * Parses a complete CSS rule, including selectors and
         * properties.
         * @param {String} input The text to parser.
         * @return {Boolean} True if the parse completed successfully, false if not.
         * @method parseRule
         */
        parseRule: function (input) {
          this._tokenStream = new TokenStream(input, Tokens);

          //skip any leading white space
          this._readWhitespace();
          var result = this._ruleset();

          //skip any trailing white space
          this._readWhitespace();

          //if there's anything more, then it's an invalid selector
          this._verifyEnd();

          //otherwise return result
          return result;
        },
        /**
         * Parses a single CSS selector (no comma)
         * @param {String} input The text to parse as a CSS selector.
         * @return {Selector} An object representing the selector.
         * @throws parserlib.util.SyntaxError If an unexpected token is found.
         * @method parseSelector
         */
        parseSelector: function (input) {
          this._tokenStream = new TokenStream(input, Tokens);

          //skip any leading white space
          this._readWhitespace();
          var result = this._selector();

          //skip any trailing white space
          this._readWhitespace();

          //if there's anything more, then it's an invalid selector
          this._verifyEnd();

          //otherwise return result
          return result;
        },
        /**
         * Parses an HTML style attribute: a set of CSS declarations
         * separated by semicolons.
         * @param {String} input The text to parse as a style attribute
         * @return {void}
         * @method parseStyleAttribute
         */
        parseStyleAttribute: function (input) {
          input += "}"; // for error recovery in _readDeclarations()
          this._tokenStream = new TokenStream(input, Tokens);
          this._readDeclarations();
        }
      };

    //copy over onto prototype
    for (prop in additions) {
      if (Object.prototype.hasOwnProperty.call(additions, prop)) {
        proto[prop] = additions[prop];
      }
    }
    return proto;
  }();

  /*
  nth
    : S* [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]? |
           ['-'|'+']? INTEGER | {O}{D}{D} | {E}{V}{E}{N} ] S*
    ;
  */
  var Properties = {
    __proto__: null,
    //A
    "align-items": "flex-start | flex-end | center | baseline | stretch",
    "align-content": "flex-start | flex-end | center | space-between | space-around | stretch",
    "align-self": "auto | flex-start | flex-end | center | baseline | stretch",
    "-webkit-align-items": "flex-start | flex-end | center | baseline | stretch",
    "-webkit-align-content": "flex-start | flex-end | center | space-between | space-around | stretch",
    "-webkit-align-self": "auto | flex-start | flex-end | center | baseline | stretch",
    "alignment-adjust": "auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | <percentage> | <length>",
    "alignment-baseline": "baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "animation": 1,
    "animation-delay": {
      multi: "<time>",
      comma: true
    },
    "animation-direction": {
      multi: "normal | alternate",
      comma: true
    },
    "animation-duration": {
      multi: "<time>",
      comma: true
    },
    "animation-fill-mode": {
      multi: "none | forwards | backwards | both",
      comma: true
    },
    "animation-iteration-count": {
      multi: "<number> | infinite",
      comma: true
    },
    "animation-name": {
      multi: "none | <ident>",
      comma: true
    },
    "animation-play-state": {
      multi: "running | paused",
      comma: true
    },
    "animation-timing-function": 1,
    //vendor prefixed
    "-moz-animation-delay": {
      multi: "<time>",
      comma: true
    },
    "-moz-animation-direction": {
      multi: "normal | alternate",
      comma: true
    },
    "-moz-animation-duration": {
      multi: "<time>",
      comma: true
    },
    "-moz-animation-iteration-count": {
      multi: "<number> | infinite",
      comma: true
    },
    "-moz-animation-name": {
      multi: "none | <ident>",
      comma: true
    },
    "-moz-animation-play-state": {
      multi: "running | paused",
      comma: true
    },
    "-ms-animation-delay": {
      multi: "<time>",
      comma: true
    },
    "-ms-animation-direction": {
      multi: "normal | alternate",
      comma: true
    },
    "-ms-animation-duration": {
      multi: "<time>",
      comma: true
    },
    "-ms-animation-iteration-count": {
      multi: "<number> | infinite",
      comma: true
    },
    "-ms-animation-name": {
      multi: "none | <ident>",
      comma: true
    },
    "-ms-animation-play-state": {
      multi: "running | paused",
      comma: true
    },
    "-webkit-animation-delay": {
      multi: "<time>",
      comma: true
    },
    "-webkit-animation-direction": {
      multi: "normal | alternate",
      comma: true
    },
    "-webkit-animation-duration": {
      multi: "<time>",
      comma: true
    },
    "-webkit-animation-fill-mode": {
      multi: "none | forwards | backwards | both",
      comma: true
    },
    "-webkit-animation-iteration-count": {
      multi: "<number> | infinite",
      comma: true
    },
    "-webkit-animation-name": {
      multi: "none | <ident>",
      comma: true
    },
    "-webkit-animation-play-state": {
      multi: "running | paused",
      comma: true
    },
    "-o-animation-delay": {
      multi: "<time>",
      comma: true
    },
    "-o-animation-direction": {
      multi: "normal | alternate",
      comma: true
    },
    "-o-animation-duration": {
      multi: "<time>",
      comma: true
    },
    "-o-animation-iteration-count": {
      multi: "<number> | infinite",
      comma: true
    },
    "-o-animation-name": {
      multi: "none | <ident>",
      comma: true
    },
    "-o-animation-play-state": {
      multi: "running | paused",
      comma: true
    },
    "appearance": "icon | window | desktop | workspace | document | tooltip | dialog | button | push-button | hyperlink | radio | radio-button | checkbox | menu-item | tab | menu | menubar | pull-down-menu | pop-up-menu | list-menu | radio-group | checkbox-group | outline-tree | range | field | combo-box | signature | password | normal | none | inherit",
    "azimuth": function (expression) {
      var simple = "<angle> | leftwards | rightwards | inherit",
        direction = "left-side | far-left | left | center-left | center | center-right | right | far-right | right-side",
        behind = false,
        valid = false,
        part;
      if (!ValidationTypes.isAny(expression, simple)) {
        if (ValidationTypes.isAny(expression, "behind")) {
          behind = true;
          valid = true;
        }
        if (ValidationTypes.isAny(expression, direction)) {
          valid = true;
          if (!behind) {
            ValidationTypes.isAny(expression, "behind");
          }
        }
      }
      if (expression.hasNext()) {
        part = expression.next();
        if (valid) {
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          throw new ValidationError("Expected (<'azimuth'>) but found '" + part + "'.", part.line, part.col);
        }
      }
    },
    //B
    "backface-visibility": "visible | hidden",
    "background": 1,
    "background-attachment": {
      multi: "<attachment>",
      comma: true
    },
    "background-clip": {
      multi: "<box>",
      comma: true
    },
    "background-color": "<color> | inherit",
    "background-image": {
      multi: "<bg-image>",
      comma: true
    },
    "background-origin": {
      multi: "<box>",
      comma: true
    },
    "background-position": {
      multi: "<bg-position>",
      comma: true
    },
    "background-repeat": {
      multi: "<repeat-style>"
    },
    "background-size": {
      multi: "<bg-size>",
      comma: true
    },
    "baseline-shift": "baseline | sub | super | <percentage> | <length>",
    "behavior": 1,
    "binding": 1,
    "bleed": "<length>",
    "bookmark-label": "<content> | <attr> | <string>",
    "bookmark-level": "none | <integer>",
    "bookmark-state": "open | closed",
    "bookmark-target": "none | <uri> | <attr>",
    "border": "<border-width> || <border-style> || <color>",
    "border-bottom": "<border-width> || <border-style> || <color>",
    "border-bottom-color": "<color> | inherit",
    "border-bottom-left-radius": "<x-one-radius>",
    "border-bottom-right-radius": "<x-one-radius>",
    "border-bottom-style": "<border-style>",
    "border-bottom-width": "<border-width>",
    "border-collapse": "collapse | separate | inherit",
    "border-color": {
      multi: "<color> | inherit",
      max: 4
    },
    "border-image": 1,
    "border-image-outset": {
      multi: "<length> | <number>",
      max: 4
    },
    "border-image-repeat": {
      multi: "stretch | repeat | round",
      max: 2
    },
    "border-image-slice": function (expression) {
      var valid = false,
        numeric = "<number> | <percentage>",
        fill = false,
        count = 0,
        max = 4,
        part;
      if (ValidationTypes.isAny(expression, "fill")) {
        fill = true;
        valid = true;
      }
      while (expression.hasNext() && count < max) {
        valid = ValidationTypes.isAny(expression, numeric);
        if (!valid) {
          break;
        }
        count++;
      }
      if (!fill) {
        ValidationTypes.isAny(expression, "fill");
      } else {
        valid = true;
      }
      if (expression.hasNext()) {
        part = expression.next();
        if (valid) {
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          throw new ValidationError("Expected ([<number> | <percentage>]{1,4} && fill?) but found '" + part + "'.", part.line, part.col);
        }
      }
    },
    "border-image-source": "<image> | none",
    "border-image-width": {
      multi: "<length> | <percentage> | <number> | auto",
      max: 4
    },
    "border-left": "<border-width> || <border-style> || <color>",
    "border-left-color": "<color> | inherit",
    "border-left-style": "<border-style>",
    "border-left-width": "<border-width>",
    "border-radius": function (expression) {
      var valid = false,
        simple = "<length> | <percentage> | inherit",
        slash = false,
        count = 0,
        max = 8,
        part;
      while (expression.hasNext() && count < max) {
        valid = ValidationTypes.isAny(expression, simple);
        if (!valid) {
          if (String(expression.peek()) === "/" && count > 0 && !slash) {
            slash = true;
            max = count + 5;
            expression.next();
          } else {
            break;
          }
        }
        count++;
      }
      if (expression.hasNext()) {
        part = expression.next();
        if (valid) {
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          throw new ValidationError("Expected (<'border-radius'>) but found '" + part + "'.", part.line, part.col);
        }
      }
    },
    "border-right": "<border-width> || <border-style> || <color>",
    "border-right-color": "<color> | inherit",
    "border-right-style": "<border-style>",
    "border-right-width": "<border-width>",
    "border-spacing": {
      multi: "<length> | inherit",
      max: 2
    },
    "border-style": {
      multi: "<border-style>",
      max: 4
    },
    "border-top": "<border-width> || <border-style> || <color>",
    "border-top-color": "<color> | inherit",
    "border-top-left-radius": "<x-one-radius>",
    "border-top-right-radius": "<x-one-radius>",
    "border-top-style": "<border-style>",
    "border-top-width": "<border-width>",
    "border-width": {
      multi: "<border-width>",
      max: 4
    },
    "bottom": "<margin-width> | inherit",
    "-moz-box-align": "start | end | center | baseline | stretch",
    "-moz-box-decoration-break": "slice |clone",
    "-moz-box-direction": "normal | reverse | inherit",
    "-moz-box-flex": "<number>",
    "-moz-box-flex-group": "<integer>",
    "-moz-box-lines": "single | multiple",
    "-moz-box-ordinal-group": "<integer>",
    "-moz-box-orient": "horizontal | vertical | inline-axis | block-axis | inherit",
    "-moz-box-pack": "start | end | center | justify",
    "-o-box-decoration-break": "slice | clone",
    "-webkit-box-align": "start | end | center | baseline | stretch",
    "-webkit-box-decoration-break": "slice |clone",
    "-webkit-box-direction": "normal | reverse | inherit",
    "-webkit-box-flex": "<number>",
    "-webkit-box-flex-group": "<integer>",
    "-webkit-box-lines": "single | multiple",
    "-webkit-box-ordinal-group": "<integer>",
    "-webkit-box-orient": "horizontal | vertical | inline-axis | block-axis | inherit",
    "-webkit-box-pack": "start | end | center | justify",
    "box-decoration-break": "slice | clone",
    "box-shadow": function (expression) {
      var part;
      if (!ValidationTypes.isAny(expression, "none")) {
        Validation.multiProperty("<shadow>", expression, true, Infinity);
      } else {
        if (expression.hasNext()) {
          part = expression.next();
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        }
      }
    },
    "box-sizing": "content-box | border-box | inherit",
    "break-after": "auto | always | avoid | left | right | page | column | avoid-page | avoid-column",
    "break-before": "auto | always | avoid | left | right | page | column | avoid-page | avoid-column",
    "break-inside": "auto | avoid | avoid-page | avoid-column",
    //C
    "caption-side": "top | bottom | inherit",
    "clear": "none | right | left | both | inherit",
    "clip": 1,
    "color": "<color> | inherit",
    "color-profile": 1,
    "column-count": "<integer> | auto",
    //http://www.w3.org/TR/css3-multicol/
    "column-fill": "auto | balance",
    "column-gap": "<length> | normal",
    "column-rule": "<border-width> || <border-style> || <color>",
    "column-rule-color": "<color>",
    "column-rule-style": "<border-style>",
    "column-rule-width": "<border-width>",
    "column-span": "none | all",
    "column-width": "<length> | auto",
    "columns": 1,
    "content": 1,
    "counter-increment": 1,
    "counter-reset": 1,
    "crop": "<shape> | auto",
    "cue": "cue-after | cue-before | inherit",
    "cue-after": 1,
    "cue-before": 1,
    "cursor": 1,
    //D
    "direction": "ltr | rtl | inherit",
    "display": "inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | grid | inline-grid | run-in | ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | contents | none | inherit | -moz-box | -moz-inline-block | -moz-inline-box | -moz-inline-grid | -moz-inline-stack | -moz-inline-table | -moz-grid | -moz-grid-group | -moz-grid-line | -moz-groupbox | -moz-deck | -moz-popup | -moz-stack | -moz-marker | -webkit-box | -webkit-inline-box | -ms-flexbox | -ms-inline-flexbox | flex | -webkit-flex | inline-flex | -webkit-inline-flex",
    "dominant-baseline": 1,
    "drop-initial-after-adjust": "central | middle | after-edge | text-after-edge | ideographic | alphabetic | mathematical | <percentage> | <length>",
    "drop-initial-after-align": "baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "drop-initial-before-adjust": "before-edge | text-before-edge | central | middle | hanging | mathematical | <percentage> | <length>",
    "drop-initial-before-align": "caps-height | baseline | use-script | before-edge | text-before-edge | after-edge | text-after-edge | central | middle | ideographic | alphabetic | hanging | mathematical",
    "drop-initial-size": "auto | line | <length> | <percentage>",
    "drop-initial-value": "initial | <integer>",
    //E
    "elevation": "<angle> | below | level | above | higher | lower | inherit",
    "empty-cells": "show | hide | inherit",
    //F
    "filter": 1,
    "fit": "fill | hidden | meet | slice",
    "fit-position": 1,
    "flex": "<flex>",
    "flex-basis": "<width>",
    "flex-direction": "row | row-reverse | column | column-reverse",
    "flex-flow": "<flex-direction> || <flex-wrap>",
    "flex-grow": "<number>",
    "flex-shrink": "<number>",
    "flex-wrap": "nowrap | wrap | wrap-reverse",
    "-webkit-flex": "<flex>",
    "-webkit-flex-basis": "<width>",
    "-webkit-flex-direction": "row | row-reverse | column | column-reverse",
    "-webkit-flex-flow": "<flex-direction> || <flex-wrap>",
    "-webkit-flex-grow": "<number>",
    "-webkit-flex-shrink": "<number>",
    "-webkit-flex-wrap": "nowrap | wrap | wrap-reverse",
    "-ms-flex": "<flex>",
    "-ms-flex-align": "start | end | center | stretch | baseline",
    "-ms-flex-direction": "row | row-reverse | column | column-reverse | inherit",
    "-ms-flex-order": "<number>",
    "-ms-flex-pack": "start | end | center | justify",
    "-ms-flex-wrap": "nowrap | wrap | wrap-reverse",
    "float": "left | right | none | inherit",
    "float-offset": 1,
    "font": 1,
    "font-family": 1,
    "font-feature-settings": "<feature-tag-value> | normal | inherit",
    "font-kerning": "auto | normal | none | initial | inherit | unset",
    "font-size": "<absolute-size> | <relative-size> | <length> | <percentage> | inherit",
    "font-size-adjust": "<number> | none | inherit",
    "font-stretch": "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit",
    "font-style": "normal | italic | oblique | inherit",
    "font-variant": "normal | small-caps | inherit",
    "font-variant-caps": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
    "font-variant-position": "normal | sub | super | inherit | initial | unset",
    "font-weight": "normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit",
    //G
    "grid": 1,
    "grid-area": 1,
    "grid-auto-columns": 1,
    "grid-auto-flow": 1,
    "grid-auto-position": 1,
    "grid-auto-rows": 1,
    "grid-cell-stacking": "columns | rows | layer",
    "grid-column": 1,
    "grid-columns": 1,
    "grid-column-align": "start | end | center | stretch",
    "grid-column-sizing": 1,
    "grid-column-start": 1,
    "grid-column-end": 1,
    "grid-column-span": "<integer>",
    "grid-flow": "none | rows | columns",
    "grid-layer": "<integer>",
    "grid-row": 1,
    "grid-rows": 1,
    "grid-row-align": "start | end | center | stretch",
    "grid-row-start": 1,
    "grid-row-end": 1,
    "grid-row-span": "<integer>",
    "grid-row-sizing": 1,
    "grid-template": 1,
    "grid-template-areas": 1,
    "grid-template-columns": 1,
    "grid-template-rows": 1,
    //H
    "hanging-punctuation": 1,
    "height": "<margin-width> | <content-sizing> | inherit",
    "hyphenate-after": "<integer> | auto",
    "hyphenate-before": "<integer> | auto",
    "hyphenate-character": "<string> | auto",
    "hyphenate-lines": "no-limit | <integer>",
    "hyphenate-resource": 1,
    "hyphens": "none | manual | auto",
    //I
    "icon": 1,
    "image-orientation": "angle | auto",
    "image-rendering": 1,
    "image-resolution": 1,
    "ime-mode": "auto | normal | active | inactive | disabled | inherit",
    "inline-box-align": "initial | last | <integer>",
    //J
    "justify-content": "flex-start | flex-end | center | space-between | space-around",
    "-webkit-justify-content": "flex-start | flex-end | center | space-between | space-around",
    //L
    "left": "<margin-width> | inherit",
    "letter-spacing": "<length> | normal | inherit",
    "line-height": "<number> | <length> | <percentage> | normal | inherit",
    "line-break": "auto | loose | normal | strict",
    "line-stacking": 1,
    "line-stacking-ruby": "exclude-ruby | include-ruby",
    "line-stacking-shift": "consider-shifts | disregard-shifts",
    "line-stacking-strategy": "inline-line-height | block-line-height | max-height | grid-height",
    "list-style": 1,
    "list-style-image": "<uri> | none | inherit",
    "list-style-position": "inside | outside | inherit",
    "list-style-type": "disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit",
    //M
    "margin": {
      multi: "<margin-width> | inherit",
      max: 4
    },
    "margin-bottom": "<margin-width> | inherit",
    "margin-left": "<margin-width> | inherit",
    "margin-right": "<margin-width> | inherit",
    "margin-top": "<margin-width> | inherit",
    "mark": 1,
    "mark-after": 1,
    "mark-before": 1,
    "marks": 1,
    "marquee-direction": 1,
    "marquee-play-count": 1,
    "marquee-speed": 1,
    "marquee-style": 1,
    "max-height": "<length> | <percentage> | <content-sizing> | none | inherit",
    "max-width": "<length> | <percentage> | <content-sizing> | none | inherit",
    "min-height": "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit",
    "min-width": "<length> | <percentage> | <content-sizing> | contain-floats | -moz-contain-floats | -webkit-contain-floats | inherit",
    "move-to": 1,
    //N
    "nav-down": 1,
    "nav-index": 1,
    "nav-left": 1,
    "nav-right": 1,
    "nav-up": 1,
    //O
    "object-fit": "fill | contain | cover | none | scale-down",
    "object-position": "<bg-position>",
    "opacity": "<number> | inherit",
    "order": "<integer>",
    "-webkit-order": "<integer>",
    "orphans": "<integer> | inherit",
    "outline": 1,
    "outline-color": "<color> | invert | inherit",
    "outline-offset": 1,
    "outline-style": "<border-style> | inherit",
    "outline-width": "<border-width> | inherit",
    "overflow": "visible | hidden | scroll | auto | inherit",
    "overflow-style": 1,
    "overflow-wrap": "normal | break-word",
    "overflow-x": 1,
    "overflow-y": 1,
    //P
    "padding": {
      multi: "<padding-width> | inherit",
      max: 4
    },
    "padding-bottom": "<padding-width> | inherit",
    "padding-left": "<padding-width> | inherit",
    "padding-right": "<padding-width> | inherit",
    "padding-top": "<padding-width> | inherit",
    "page": 1,
    "page-break-after": "auto | always | avoid | left | right | inherit",
    "page-break-before": "auto | always | avoid | left | right | inherit",
    "page-break-inside": "auto | avoid | inherit",
    "page-policy": 1,
    "pause": 1,
    "pause-after": 1,
    "pause-before": 1,
    "perspective": 1,
    "perspective-origin": 1,
    "phonemes": 1,
    "pitch": 1,
    "pitch-range": 1,
    "play-during": 1,
    "pointer-events": "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
    "position": "static | relative | absolute | fixed | inherit",
    "presentation-level": 1,
    "punctuation-trim": 1,
    //Q
    "quotes": 1,
    //R
    "rendering-intent": 1,
    "resize": 1,
    "rest": 1,
    "rest-after": 1,
    "rest-before": 1,
    "richness": 1,
    "right": "<margin-width> | inherit",
    "rotation": 1,
    "rotation-point": 1,
    "ruby-align": 1,
    "ruby-overhang": 1,
    "ruby-position": 1,
    "ruby-span": 1,
    //S
    "size": 1,
    "speak": "normal | none | spell-out | inherit",
    "speak-header": "once | always | inherit",
    "speak-numeral": "digits | continuous | inherit",
    "speak-punctuation": "code | none | inherit",
    "speech-rate": 1,
    "src": 1,
    "stress": 1,
    "string-set": 1,
    "table-layout": "auto | fixed | inherit",
    "tab-size": "<integer> | <length>",
    "target": 1,
    "target-name": 1,
    "target-new": 1,
    "target-position": 1,
    "text-align": "left | right | center | justify | match-parent | start | end | inherit",
    "text-align-last": 1,
    "text-decoration": 1,
    "text-emphasis": 1,
    "text-height": 1,
    "text-indent": "<length> | <percentage> | inherit",
    "text-justify": "auto | none | inter-word | inter-ideograph | inter-cluster | distribute | kashida",
    "text-outline": 1,
    "text-overflow": 1,
    "text-rendering": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision | inherit",
    "text-shadow": 1,
    "text-transform": "capitalize | uppercase | lowercase | none | inherit",
    "text-wrap": "normal | none | avoid",
    "top": "<margin-width> | inherit",
    "-ms-touch-action": "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",
    "touch-action": "auto | none | pan-x | pan-y | pan-left | pan-right | pan-up | pan-down | manipulation",
    "transform": 1,
    "transform-origin": 1,
    "transform-style": 1,
    "transition": 1,
    "transition-delay": 1,
    "transition-duration": 1,
    "transition-property": 1,
    "transition-timing-function": 1,
    //U
    "unicode-bidi": "normal | embed | isolate | bidi-override | isolate-override | plaintext | inherit",
    "user-modify": "read-only | read-write | write-only | inherit",
    "user-select": "none | text | toggle | element | elements | all | inherit",
    //V
    "vertical-align": "auto | use-script | baseline | sub | super | top | text-top | central | middle | bottom | text-bottom | <percentage> | <length> | inherit",
    "visibility": "visible | hidden | collapse | inherit",
    "voice-balance": 1,
    "voice-duration": 1,
    "voice-family": 1,
    "voice-pitch": 1,
    "voice-pitch-range": 1,
    "voice-rate": 1,
    "voice-stress": 1,
    "voice-volume": 1,
    "volume": 1,
    //W
    "white-space": "normal | pre | nowrap | pre-wrap | pre-line | inherit | -pre-wrap | -o-pre-wrap | -moz-pre-wrap | -hp-pre-wrap",
    //http://perishablepress.com/wrapping-content/
    "white-space-collapse": 1,
    "widows": "<integer> | inherit",
    "width": "<length> | <percentage> | <content-sizing> | auto | inherit",
    "will-change": {
      multi: "<ident>",
      comma: true
    },
    "word-break": "normal | keep-all | break-all",
    "word-spacing": "<length> | normal | inherit",
    "word-wrap": "normal | break-word",
    "writing-mode": "horizontal-tb | vertical-rl | vertical-lr | lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr | lr-bt | rl-bt | lr | rl | tb | inherit",
    //Z
    "z-index": "<integer> | auto | inherit",
    "zoom": "<number> | <percentage> | normal"
  };
  /**
   * Represents a selector combinator (whitespace, +, >).
   * @namespace parserlib.css
   * @class PropertyName
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {String} text The text representation of the unit.
   * @param {String} hack The type of IE hack applied ("*", "_", or null).
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function PropertyName(text, hack, line, col) {
    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_NAME_TYPE);

    /**
     * The type of IE hack applied ("*", "_", or null).
     * @type String
     * @property hack
     */
    this.hack = hack;
  }
  PropertyName.prototype = new SyntaxUnit();
  PropertyName.prototype.constructor = PropertyName;
  PropertyName.prototype.toString = function () {
    return (this.hack ? this.hack : "") + this.text;
  };
  /**
   * Represents a single part of a CSS property value, meaning that it represents
   * just everything single part between ":" and ";". If there are multiple values
   * separated by commas, this type represents just one of the values.
   * @param {String[]} parts An array of value parts making up this value.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   * @namespace parserlib.css
   * @class PropertyValue
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   */
  function PropertyValue(parts, line, col) {
    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.PROPERTY_VALUE_TYPE);

    /**
     * The parts that make up the selector.
     * @type Array
     * @property parts
     */
    this.parts = parts;
  }
  PropertyValue.prototype = new SyntaxUnit();
  PropertyValue.prototype.constructor = PropertyValue;

  /**
   * A utility class that allows for easy iteration over the various parts of a
   * property value.
   * @param {parserlib.css.PropertyValue} value The property value to iterate over.
   * @namespace parserlib.css
   * @class PropertyValueIterator
   * @constructor
   */
  function PropertyValueIterator(value) {
    /**
     * Iterator value
     * @type int
     * @property _i
     * @private
     */
    this._i = 0;

    /**
     * The parts that make up the value.
     * @type Array
     * @property _parts
     * @private
     */
    this._parts = value.parts;

    /**
     * Keeps track of bookmarks along the way.
     * @type Array
     * @property _marks
     * @private
     */
    this._marks = [];

    /**
     * Holds the original property value.
     * @type parserlib.css.PropertyValue
     * @property value
     */
    this.value = value;
  }

  /**
   * Returns the total number of parts in the value.
   * @return {int} The total number of parts in the value.
   * @method count
   */
  PropertyValueIterator.prototype.count = function () {
    return this._parts.length;
  };

  /**
   * Indicates if the iterator is positioned at the first item.
   * @return {Boolean} True if positioned at first item, false if not.
   * @method isFirst
   */
  PropertyValueIterator.prototype.isFirst = function () {
    return this._i === 0;
  };

  /**
   * Indicates if there are more parts of the property value.
   * @return {Boolean} True if there are more parts, false if not.
   * @method hasNext
   */
  PropertyValueIterator.prototype.hasNext = function () {
    return this._i < this._parts.length;
  };

  /**
   * Marks the current spot in the iteration so it can be restored to
   * later on.
   * @return {void}
   * @method mark
   */
  PropertyValueIterator.prototype.mark = function () {
    this._marks.push(this._i);
  };

  /**
   * Returns the next part of the property value or null if there is no next
   * part. Does not move the internal counter forward.
   * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next
   * part.
   * @method peek
   */
  PropertyValueIterator.prototype.peek = function (count) {
    return this.hasNext() ? this._parts[this._i + (count || 0)] : null;
  };

  /**
   * Returns the next part of the property value or null if there is no next
   * part.
   * @return {parserlib.css.PropertyValuePart} The next part of the property value or null if there is no next
   * part.
   * @method next
   */
  PropertyValueIterator.prototype.next = function () {
    return this.hasNext() ? this._parts[this._i++] : null;
  };

  /**
   * Returns the previous part of the property value or null if there is no
   * previous part.
   * @return {parserlib.css.PropertyValuePart} The previous part of the
   * property value or null if there is no previous part.
   * @method previous
   */
  PropertyValueIterator.prototype.previous = function () {
    return this._i > 0 ? this._parts[--this._i] : null;
  };

  /**
   * Restores the last saved bookmark.
   * @return {void}
   * @method restore
   */
  PropertyValueIterator.prototype.restore = function () {
    if (this._marks.length) {
      this._i = this._marks.pop();
    }
  };

  /**
   * Represents a single part of a CSS property value, meaning that it represents
   * just one part of the data between ":" and ";".
   * @param {String} text The text representation of the unit.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   * @namespace parserlib.css
   * @class PropertyValuePart
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   */
  function PropertyValuePart(text, line, col) {
    SyntaxUnit.call(this, text, line, col, Parser.PROPERTY_VALUE_PART_TYPE);

    /**
     * Indicates the type of value unit.
     * @type String
     * @property type
     */
    this.type = "unknown";

    //figure out what type of data it is

    var temp;

    //it is a measurement?
    if (/^([+\-]?[\d\.]+)([a-z]+)$/i.test(text)) {
      //dimension
      this.type = "dimension";
      this.value = +RegExp.$1;
      this.units = RegExp.$2;

      //try to narrow down
      switch (this.units.toLowerCase()) {
        case "em":
        case "rem":
        case "ex":
        case "px":
        case "cm":
        case "mm":
        case "in":
        case "pt":
        case "pc":
        case "ch":
        case "vh":
        case "vw":
        case "vmax":
        case "vmin":
          this.type = "length";
          break;
        case "fr":
          this.type = "grid";
          break;
        case "deg":
        case "rad":
        case "grad":
          this.type = "angle";
          break;
        case "ms":
        case "s":
          this.type = "time";
          break;
        case "hz":
        case "khz":
          this.type = "frequency";
          break;
        case "dpi":
        case "dpcm":
          this.type = "resolution";
          break;

        //default
      }
    } else if (/^([+\-]?[\d\.]+)%$/i.test(text)) {
      //percentage
      this.type = "percentage";
      this.value = +RegExp.$1;
    } else if (/^([+\-]?\d+)$/i.test(text)) {
      //integer
      this.type = "integer";
      this.value = +RegExp.$1;
    } else if (/^([+\-]?[\d\.]+)$/i.test(text)) {
      //number
      this.type = "number";
      this.value = +RegExp.$1;
    } else if (/^#([a-f0-9]{3,6})/i.test(text)) {
      //hexcolor
      this.type = "color";
      temp = RegExp.$1;
      if (temp.length === 3) {
        this.red = parseInt(temp.charAt(0) + temp.charAt(0), 16);
        this.green = parseInt(temp.charAt(1) + temp.charAt(1), 16);
        this.blue = parseInt(temp.charAt(2) + temp.charAt(2), 16);
      } else {
        this.red = parseInt(temp.substring(0, 2), 16);
        this.green = parseInt(temp.substring(2, 4), 16);
        this.blue = parseInt(temp.substring(4, 6), 16);
      }
    } else if (/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i.test(text)) {
      //rgb() color with absolute numbers
      this.type = "color";
      this.red = +RegExp.$1;
      this.green = +RegExp.$2;
      this.blue = +RegExp.$3;
    } else if (/^rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)) {
      //rgb() color with percentages
      this.type = "color";
      this.red = +RegExp.$1 * 255 / 100;
      this.green = +RegExp.$2 * 255 / 100;
      this.blue = +RegExp.$3 * 255 / 100;
    } else if (/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
      //rgba() color with absolute numbers
      this.type = "color";
      this.red = +RegExp.$1;
      this.green = +RegExp.$2;
      this.blue = +RegExp.$3;
      this.alpha = +RegExp.$4;
    } else if (/^rgba\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
      //rgba() color with percentages
      this.type = "color";
      this.red = +RegExp.$1 * 255 / 100;
      this.green = +RegExp.$2 * 255 / 100;
      this.blue = +RegExp.$3 * 255 / 100;
      this.alpha = +RegExp.$4;
    } else if (/^hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/i.test(text)) {
      //hsl()
      this.type = "color";
      this.hue = +RegExp.$1;
      this.saturation = +RegExp.$2 / 100;
      this.lightness = +RegExp.$3 / 100;
    } else if (/^hsla\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*,\s*([\d\.]+)\s*\)/i.test(text)) {
      //hsla() color with percentages
      this.type = "color";
      this.hue = +RegExp.$1;
      this.saturation = +RegExp.$2 / 100;
      this.lightness = +RegExp.$3 / 100;
      this.alpha = +RegExp.$4;
    } else if (/^url\(["']?([^\)"']+)["']?\)/i.test(text)) {
      //URI
      this.type = "uri";
      this.uri = RegExp.$1;
    } else if (/^([^\(]+)\(/i.test(text)) {
      this.type = "function";
      this.name = RegExp.$1;
      this.value = text;
    } else if (/^"([^\n\r\f\\"]|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*"/i.test(text)) {
      //double-quoted string
      this.type = "string";
      this.value = PropertyValuePart.parseString(text);
    } else if (/^'([^\n\r\f\\']|\\\r\n|\\[^\r0-9a-f]|\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)*'/i.test(text)) {
      //single-quoted string
      this.type = "string";
      this.value = PropertyValuePart.parseString(text);
    } else if (Colors[text.toLowerCase()]) {
      //named color
      this.type = "color";
      temp = Colors[text.toLowerCase()].substring(1);
      this.red = parseInt(temp.substring(0, 2), 16);
      this.green = parseInt(temp.substring(2, 4), 16);
      this.blue = parseInt(temp.substring(4, 6), 16);
    } else if (/^[\,\/]$/.test(text)) {
      this.type = "operator";
      this.value = text;
    } else if (/^[a-z\-_\u0080-\uFFFF][a-z0-9\-_\u0080-\uFFFF]*$/i.test(text)) {
      this.type = "identifier";
      this.value = text;
    }
  }
  PropertyValuePart.prototype = new SyntaxUnit();
  PropertyValuePart.prototype.constructor = PropertyValuePart;

  /**
   * Helper method to parse a CSS string.
   */
  PropertyValuePart.parseString = function (str) {
    str = str.slice(1, -1); // Strip surrounding single/double quotes
    var replacer = function (match, esc) {
      if (/^(\n|\r\n|\r|\f)$/.test(esc)) {
        return '';
      }
      var m = /^[0-9a-f]{1,6}/i.exec(esc);
      if (m) {
        var codePoint = parseInt(m[0], 16);
        if (String.fromCodePoint) {
          return String.fromCodePoint(codePoint);
        } else {
          // XXX No support for surrogates on old JavaScript engines.
          return String.fromCharCode(codePoint);
        }
      }
      return esc;
    };
    return str.replace(/\\(\r\n|[^\r0-9a-f]|[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)/ig, replacer);
  };

  /**
   * Helper method to serialize a CSS string.
   */
  PropertyValuePart.serializeString = function (value) {
    var replacer = function (match, c) {
      if (c === '"') {
        return "\\" + c;
      }
      var cp = String.codePointAt ? String.codePointAt(0) :
      // We only escape non-surrogate chars, so using charCodeAt
      // is harmless here.
      String.charCodeAt(0);
      return "\\" + cp.toString(16) + " ";
    };
    return '"' + value.replace(/["\r\n\f]/g, replacer) + '"';
  };

  /**
   * Create a new syntax unit based solely on the given token.
   * Convenience method for creating a new syntax unit when
   * it represents a single token instead of multiple.
   * @param {Object} token The token object to represent.
   * @return {parserlib.css.PropertyValuePart} The object representing the token.
   * @static
   * @method fromToken
   */
  PropertyValuePart.fromToken = function (token) {
    return new PropertyValuePart(token.value, token.startLine, token.startCol);
  };
  var Pseudos = {
    __proto__: null,
    ":first-letter": 1,
    ":first-line": 1,
    ":before": 1,
    ":after": 1
  };
  Pseudos.ELEMENT = 1;
  Pseudos.CLASS = 2;
  Pseudos.isElement = function (pseudo) {
    return pseudo.indexOf("::") === 0 || Pseudos[pseudo.toLowerCase()] === Pseudos.ELEMENT;
  };
  /**
   * Represents an entire single selector, including all parts but not
   * including multiple selectors (those separated by commas).
   * @namespace parserlib.css
   * @class Selector
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {Array} parts Array of selectors parts making up this selector.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function Selector(parts, line, col) {
    SyntaxUnit.call(this, parts.join(" "), line, col, Parser.SELECTOR_TYPE);

    /**
     * The parts that make up the selector.
     * @type Array
     * @property parts
     */
    this.parts = parts;

    /**
     * The specificity of the selector.
     * @type parserlib.css.Specificity
     * @property specificity
     */
    this.specificity = Specificity.calculate(this);
  }
  Selector.prototype = new SyntaxUnit();
  Selector.prototype.constructor = Selector;

  /**
   * Represents a single part of a selector string, meaning a single set of
   * element name and modifiers. This does not include combinators such as
   * spaces, +, >, etc.
   * @namespace parserlib.css
   * @class SelectorPart
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {String} elementName The element name in the selector or null
   *      if there is no element name.
   * @param {Array} modifiers Array of individual modifiers for the element.
   *      May be empty if there are none.
   * @param {String} text The text representation of the unit.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function SelectorPart(elementName, modifiers, text, line, col) {
    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_PART_TYPE);

    /**
     * The tag name of the element to which this part
     * of the selector affects.
     * @type String
     * @property elementName
     */
    this.elementName = elementName;

    /**
     * The parts that come after the element name, such as class names, IDs,
     * pseudo classes/elements, etc.
     * @type Array
     * @property modifiers
     */
    this.modifiers = modifiers;
  }
  SelectorPart.prototype = new SyntaxUnit();
  SelectorPart.prototype.constructor = SelectorPart;

  /**
   * Represents a selector modifier string, meaning a class name, element name,
   * element ID, pseudo rule, etc.
   * @namespace parserlib.css
   * @class SelectorSubPart
   * @extends parserlib.util.SyntaxUnit
   * @constructor
   * @param {String} text The text representation of the unit.
   * @param {String} type The type of selector modifier.
   * @param {int} line The line of text on which the unit resides.
   * @param {int} col The column of text on which the unit resides.
   */
  function SelectorSubPart(text, type, line, col) {
    SyntaxUnit.call(this, text, line, col, Parser.SELECTOR_SUB_PART_TYPE);

    /**
     * The type of modifier.
     * @type String
     * @property type
     */
    this.type = type;

    /**
     * Some subparts have arguments, this represents them.
     * @type Array
     * @property args
     */
    this.args = [];
  }
  SelectorSubPart.prototype = new SyntaxUnit();
  SelectorSubPart.prototype.constructor = SelectorSubPart;

  /**
   * Represents a selector's specificity.
   * @namespace parserlib.css
   * @class Specificity
   * @constructor
   * @param {int} a Should be 1 for inline styles, zero for stylesheet styles
   * @param {int} b Number of ID selectors
   * @param {int} c Number of classes and pseudo classes
   * @param {int} d Number of element names and pseudo elements
   */
  function Specificity(a, b, c, d) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  Specificity.prototype = {
    constructor: Specificity,
    /**
     * Compare this specificity to another.
     * @param {Specificity} other The other specificity to compare to.
     * @return {int} -1 if the other specificity is larger, 1 if smaller, 0 if equal.
     * @method compare
     */
    compare: function (other) {
      var comps = ["a", "b", "c", "d"],
        i,
        len;
      for (i = 0, len = comps.length; i < len; i++) {
        if (this[comps[i]] < other[comps[i]]) {
          return -1;
        } else if (this[comps[i]] > other[comps[i]]) {
          return 1;
        }
      }
      return 0;
    },
    /**
     * Creates a numeric value for the specificity.
     * @return {int} The numeric value for the specificity.
     * @method valueOf
     */
    valueOf: function () {
      return this.a * 1000 + this.b * 100 + this.c * 10 + this.d;
    },
    /**
     * Returns a string representation for specificity.
     * @return {String} The string representation of specificity.
     * @method toString
     */
    toString: function () {
      return this.a + "," + this.b + "," + this.c + "," + this.d;
    }
  };

  /**
   * Calculates the specificity of the given selector.
   * @param {parserlib.css.Selector} The selector to calculate specificity for.
   * @return {parserlib.css.Specificity} The specificity of the selector.
   * @static
   * @method calculate
   */
  Specificity.calculate = function (selector) {
    var i,
      len,
      part,
      b = 0,
      c = 0,
      d = 0;
    function updateValues(part) {
      var i,
        j,
        len,
        num,
        elementName = part.elementName ? part.elementName.text : "",
        modifier;
      if (elementName && elementName.charAt(elementName.length - 1) !== "*") {
        d++;
      }
      for (i = 0, len = part.modifiers.length; i < len; i++) {
        modifier = part.modifiers[i];
        switch (modifier.type) {
          case "class":
          case "attribute":
            c++;
            break;
          case "id":
            b++;
            break;
          case "pseudo":
            if (Pseudos.isElement(modifier.text)) {
              d++;
            } else {
              c++;
            }
            break;
          case "not":
            for (j = 0, num = modifier.args.length; j < num; j++) {
              updateValues(modifier.args[j]);
            }
        }
      }
    }
    for (i = 0, len = selector.parts.length; i < len; i++) {
      part = selector.parts[i];
      if (part instanceof SelectorPart) {
        updateValues(part);
      }
    }
    return new Specificity(0, b, c, d);
  };
  var h = /^[0-9a-fA-F]$/,
    //nonascii = /^[\u0080-\uFFFF]$/,
    nl = /\n|\r\n|\r|\f/;

  //-----------------------------------------------------------------------------
  // Helper functions
  //-----------------------------------------------------------------------------

  function isHexDigit(c) {
    return c !== null && h.test(c);
  }
  function isDigit(c) {
    return c !== null && /\d/.test(c);
  }
  function isWhitespace(c) {
    return c !== null && /\s/.test(c);
  }
  function isNewLine(c) {
    return c !== null && nl.test(c);
  }
  function isNameStart(c) {
    return c !== null && /[a-z_\u0080-\uFFFF\\]/i.test(c);
  }
  function isNameChar(c) {
    return c !== null && (isNameStart(c) || /[0-9\-\\]/.test(c));
  }
  function isIdentStart(c) {
    return c !== null && (isNameStart(c) || /\-\\/.test(c));
  }
  function mix(receiver, supplier) {
    for (var prop in supplier) {
      if (Object.prototype.hasOwnProperty.call(supplier, prop)) {
        receiver[prop] = supplier[prop];
      }
    }
    return receiver;
  }

  //-----------------------------------------------------------------------------
  // CSS Token Stream
  //-----------------------------------------------------------------------------

  /**
   * A token stream that produces CSS tokens.
   * @param {String|Reader} input The source of text to tokenize.
   * @constructor
   * @class TokenStream
   * @namespace parserlib.css
   */
  function TokenStream(input) {
    TokenStreamBase.call(this, input, Tokens);
  }
  TokenStream.prototype = mix(new TokenStreamBase(), {
    /**
     * Overrides the TokenStreamBase method of the same name
     * to produce CSS tokens.
     * @param {variant} channel The name of the channel to use
     *      for the next token.
     * @return {Object} A token object representing the next token.
     * @method _getToken
     * @private
     */
    _getToken: function (channel) {
      var c,
        reader = this._reader,
        token = null,
        startLine = reader.getLine(),
        startCol = reader.getCol();
      c = reader.read();
      while (c) {
        switch (c) {
          /*
           * Potential tokens:
           * - COMMENT
           * - SLASH
           * - CHAR
           */
          case "/":
            if (reader.peek() === "*") {
              token = this.commentToken(c, startLine, startCol);
            } else {
              token = this.charToken(c, startLine, startCol);
            }
            break;

          /*
           * Potential tokens:
           * - DASHMATCH
           * - INCLUDES
           * - PREFIXMATCH
           * - SUFFIXMATCH
           * - SUBSTRINGMATCH
           * - CHAR
           */
          case "|":
          case "~":
          case "^":
          case "$":
          case "*":
            if (reader.peek() === "=") {
              token = this.comparisonToken(c, startLine, startCol);
            } else {
              token = this.charToken(c, startLine, startCol);
            }
            break;

          /*
           * Potential tokens:
           * - STRING
           * - INVALID
           */
          case "\"":
          case "'":
            token = this.stringToken(c, startLine, startCol);
            break;

          /*
           * Potential tokens:
           * - HASH
           * - CHAR
           */
          case "#":
            if (isNameChar(reader.peek())) {
              token = this.hashToken(c, startLine, startCol);
            } else {
              token = this.charToken(c, startLine, startCol);
            }
            break;

          /*
           * Potential tokens:
           * - DOT
           * - NUMBER
           * - DIMENSION
           * - PERCENTAGE
           */
          case ".":
            if (isDigit(reader.peek())) {
              token = this.numberToken(c, startLine, startCol);
            } else {
              token = this.charToken(c, startLine, startCol);
            }
            break;

          /*
           * Potential tokens:
           * - CDC
           * - MINUS
           * - NUMBER
           * - DIMENSION
           * - PERCENTAGE
           */
          case "-":
            if (reader.peek() === "-") {
              //could be closing HTML-style comment
              token = this.htmlCommentEndToken(c, startLine, startCol);
            } else if (isNameStart(reader.peek())) {
              token = this.identOrFunctionToken(c, startLine, startCol);
            } else {
              token = this.charToken(c, startLine, startCol);
            }
            break;

          /*
           * Potential tokens:
           * - IMPORTANT_SYM
           * - CHAR
           */
          case "!":
            token = this.importantToken(c, startLine, startCol);
            break;

          /*
           * Any at-keyword or CHAR
           */
          case "@":
            token = this.atRuleToken(c, startLine, startCol);
            break;

          /*
           * Potential tokens:
           * - NOT
           * - CHAR
           */
          case ":":
            token = this.notToken(c, startLine, startCol);
            break;

          /*
           * Potential tokens:
           * - CDO
           * - CHAR
           */
          case "<":
            token = this.htmlCommentStartToken(c, startLine, startCol);
            break;

          /*
           * Potential tokens:
           * - UNICODE_RANGE
           * - URL
           * - CHAR
           */
          case "U":
          case "u":
            if (reader.peek() === "+") {
              token = this.unicodeRangeToken(c, startLine, startCol);
              break;
            }
          /* falls through */
          default:
            /*
             * Potential tokens:
             * - NUMBER
             * - DIMENSION
             * - LENGTH
             * - FREQ
             * - TIME
             * - EMS
             * - EXS
             * - ANGLE
             */
            if (isDigit(c)) {
              token = this.numberToken(c, startLine, startCol);
            } else
              /*
               * Potential tokens:
               * - S
               */
              if (isWhitespace(c)) {
                token = this.whitespaceToken(c, startLine, startCol);
              } else
                /*
                 * Potential tokens:
                 * - IDENT
                 */
                if (isIdentStart(c)) {
                  token = this.identOrFunctionToken(c, startLine, startCol);
                } else
                  /*
                   * Potential tokens:
                   * - CHAR
                   * - PLUS
                   */
                  {
                    token = this.charToken(c, startLine, startCol);
                  }
        }

        //make sure this token is wanted
        //TODO: check channel
        break;
      }
      if (!token && c === null) {
        token = this.createToken(Tokens.EOF, null, startLine, startCol);
      }
      return token;
    },
    //-------------------------------------------------------------------------
    // Methods to create tokens
    //-------------------------------------------------------------------------

    /**
     * Produces a token based on available data and the current
     * reader position information. This method is called by other
     * private methods to create tokens and is never called directly.
     * @param {int} tt The token type.
     * @param {String} value The text value of the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @param {Object} options (Optional) Specifies a channel property
     *      to indicate that a different channel should be scanned
     *      and/or a hide property indicating that the token should
     *      be hidden.
     * @return {Object} A token object.
     * @method createToken
     */
    createToken: function (tt, value, startLine, startCol, options) {
      var reader = this._reader;
      options = options || {};
      return {
        value: value,
        type: tt,
        channel: options.channel,
        endChar: options.endChar,
        hide: options.hide || false,
        startLine: startLine,
        startCol: startCol,
        endLine: reader.getLine(),
        endCol: reader.getCol()
      };
    },
    //-------------------------------------------------------------------------
    // Methods to create specific tokens
    //-------------------------------------------------------------------------

    /**
     * Produces a token for any at-rule. If the at-rule is unknown, then
     * the token is for a single "@" character.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method atRuleToken
     */
    atRuleToken: function (first, startLine, startCol) {
      var rule = first,
        reader = this._reader,
        tt = Tokens.CHAR,
        ident;

      /*
       * First, mark where we are. There are only four @ rules,
       * so anything else is really just an invalid token.
       * Basically, if this doesn't match one of the known @
       * rules, just return '@' as an unknown token and allow
       * parsing to continue after that point.
       */
      reader.mark();

      //try to find the at-keyword
      ident = this.readName();
      rule = first + ident;
      tt = Tokens.type(rule.toLowerCase());

      //if it's not valid, use the first character only and reset the reader
      if (tt === Tokens.CHAR || tt === Tokens.UNKNOWN) {
        if (rule.length > 1) {
          tt = Tokens.UNKNOWN_SYM;
        } else {
          tt = Tokens.CHAR;
          rule = first;
          reader.reset();
        }
      }
      return this.createToken(tt, rule, startLine, startCol);
    },
    /**
     * Produces a character token based on the given character
     * and location in the stream. If there's a special (non-standard)
     * token name, this is used; otherwise CHAR is used.
     * @param {String} c The character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method charToken
     */
    charToken: function (c, startLine, startCol) {
      var tt = Tokens.type(c);
      var opts = {};
      if (tt === -1) {
        tt = Tokens.CHAR;
      } else {
        opts.endChar = Tokens[tt].endChar;
      }
      return this.createToken(tt, c, startLine, startCol, opts);
    },
    /**
     * Produces a character token based on the given character
     * and location in the stream. If there's a special (non-standard)
     * token name, this is used; otherwise CHAR is used.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method commentToken
     */
    commentToken: function (first, startLine, startCol) {
      var comment = this.readComment(first);
      return this.createToken(Tokens.COMMENT, comment, startLine, startCol);
    },
    /**
     * Produces a comparison token based on the given character
     * and location in the stream. The next character must be
     * read and is already known to be an equals sign.
     * @param {String} c The character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method comparisonToken
     */
    comparisonToken: function (c, startLine, startCol) {
      var reader = this._reader,
        comparison = c + reader.read(),
        tt = Tokens.type(comparison) || Tokens.CHAR;
      return this.createToken(tt, comparison, startLine, startCol);
    },
    /**
     * Produces a hash token based on the specified information. The
     * first character provided is the pound sign (#) and then this
     * method reads a name afterward.
     * @param {String} first The first character (#) in the hash name.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method hashToken
     */
    hashToken: function (first, startLine, startCol) {
      var name = this.readName(first);
      return this.createToken(Tokens.HASH, name, startLine, startCol);
    },
    /**
     * Produces a CDO or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method htmlCommentStartToken
     */
    htmlCommentStartToken: function (first, startLine, startCol) {
      var reader = this._reader,
        text = first;
      reader.mark();
      text += reader.readCount(3);
      if (text === "<!--") {
        return this.createToken(Tokens.CDO, text, startLine, startCol);
      } else {
        reader.reset();
        return this.charToken(first, startLine, startCol);
      }
    },
    /**
     * Produces a CDC or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method htmlCommentEndToken
     */
    htmlCommentEndToken: function (first, startLine, startCol) {
      var reader = this._reader,
        text = first;
      reader.mark();
      text += reader.readCount(2);
      if (text === "-->") {
        return this.createToken(Tokens.CDC, text, startLine, startCol);
      } else {
        reader.reset();
        return this.charToken(first, startLine, startCol);
      }
    },
    /**
     * Produces an IDENT or FUNCTION token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the identifier.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method identOrFunctionToken
     */
    identOrFunctionToken: function (first, startLine, startCol) {
      var reader = this._reader,
        ident = this.readName(first),
        tt = Tokens.IDENT,
        uriFns = ["url(", "url-prefix(", "domain("];

      //if there's a left paren immediately after, it's a URI or function
      if (reader.peek() === "(") {
        ident += reader.read();
        if (uriFns.indexOf(ident.toLowerCase()) > -1) {
          tt = Tokens.URI;
          ident = this.readURI(ident);

          //didn't find a valid URL or there's no closing paren
          if (uriFns.indexOf(ident.toLowerCase()) > -1) {
            tt = Tokens.FUNCTION;
          }
        } else {
          tt = Tokens.FUNCTION;
        }
      } else if (reader.peek() === ":") {
        //might be an IE function

        //IE-specific functions always being with progid:
        if (ident.toLowerCase() === "progid") {
          ident += reader.readTo("(");
          tt = Tokens.IE_FUNCTION;
        }
      }
      return this.createToken(tt, ident, startLine, startCol);
    },
    /**
     * Produces an IMPORTANT_SYM or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method importantToken
     */
    importantToken: function (first, startLine, startCol) {
      var reader = this._reader,
        important = first,
        tt = Tokens.CHAR,
        temp,
        c;
      reader.mark();
      c = reader.read();
      while (c) {
        //there can be a comment in here
        if (c === "/") {
          //if the next character isn't a star, then this isn't a valid !important token
          if (reader.peek() !== "*") {
            break;
          } else {
            temp = this.readComment(c);
            if (temp === "") {
              //broken!
              break;
            }
          }
        } else if (isWhitespace(c)) {
          important += c + this.readWhitespace();
        } else if (/i/i.test(c)) {
          temp = reader.readCount(8);
          if (/mportant/i.test(temp)) {
            important += c + temp;
            tt = Tokens.IMPORTANT_SYM;
          }
          break; //we're done
        } else {
          break;
        }
        c = reader.read();
      }
      if (tt === Tokens.CHAR) {
        reader.reset();
        return this.charToken(first, startLine, startCol);
      } else {
        return this.createToken(tt, important, startLine, startCol);
      }
    },
    /**
     * Produces a NOT or CHAR token based on the specified information. The
     * first character is provided and the rest is read by the function to determine
     * the correct token to create.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method notToken
     */
    notToken: function (first, startLine, startCol) {
      var reader = this._reader,
        text = first;
      reader.mark();
      text += reader.readCount(4);
      if (text.toLowerCase() === ":not(") {
        return this.createToken(Tokens.NOT, text, startLine, startCol);
      } else {
        reader.reset();
        return this.charToken(first, startLine, startCol);
      }
    },
    /**
     * Produces a number token based on the given character
     * and location in the stream. This may return a token of
     * NUMBER, EMS, EXS, LENGTH, ANGLE, TIME, FREQ, DIMENSION,
     * or PERCENTAGE.
     * @param {String} first The first character for the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method numberToken
     */
    numberToken: function (first, startLine, startCol) {
      var reader = this._reader,
        value = this.readNumber(first),
        ident,
        tt = Tokens.NUMBER,
        c = reader.peek();
      if (isIdentStart(c)) {
        ident = this.readName(reader.read());
        value += ident;
        if (/^em$|^ex$|^px$|^gd$|^rem$|^vw$|^vh$|^vmax$|^vmin$|^ch$|^cm$|^mm$|^in$|^pt$|^pc$/i.test(ident)) {
          tt = Tokens.LENGTH;
        } else if (/^deg|^rad$|^grad$/i.test(ident)) {
          tt = Tokens.ANGLE;
        } else if (/^ms$|^s$/i.test(ident)) {
          tt = Tokens.TIME;
        } else if (/^hz$|^khz$/i.test(ident)) {
          tt = Tokens.FREQ;
        } else if (/^dpi$|^dpcm$/i.test(ident)) {
          tt = Tokens.RESOLUTION;
        } else {
          tt = Tokens.DIMENSION;
        }
      } else if (c === "%") {
        value += reader.read();
        tt = Tokens.PERCENTAGE;
      }
      return this.createToken(tt, value, startLine, startCol);
    },
    /**
     * Produces a string token based on the given character
     * and location in the stream. Since strings may be indicated
     * by single or double quotes, a failure to match starting
     * and ending quotes results in an INVALID token being generated.
     * The first character in the string is passed in and then
     * the rest are read up to and including the final quotation mark.
     * @param {String} first The first character in the string.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method stringToken
     */
    stringToken: function (first, startLine, startCol) {
      var delim = first,
        string = first,
        reader = this._reader,
        prev = first,
        tt = Tokens.STRING,
        c = reader.read();
      while (c) {
        string += c;

        //if the delimiter is found with an escapement, we're done.
        if (c === delim && prev !== "\\") {
          break;
        }

        //if there's a newline without an escapement, it's an invalid string
        if (isNewLine(reader.peek()) && c !== "\\") {
          tt = Tokens.INVALID;
          break;
        }

        //save previous and get next
        prev = c;
        c = reader.read();
      }

      //if c is null, that means we're out of input and the string was never closed
      if (c === null) {
        tt = Tokens.INVALID;
      }
      return this.createToken(tt, string, startLine, startCol);
    },
    unicodeRangeToken: function (first, startLine, startCol) {
      var reader = this._reader,
        value = first,
        temp,
        tt = Tokens.CHAR;

      //then it should be a unicode range
      if (reader.peek() === "+") {
        reader.mark();
        value += reader.read();
        value += this.readUnicodeRangePart(true);

        //ensure there's an actual unicode range here
        if (value.length === 2) {
          reader.reset();
        } else {
          tt = Tokens.UNICODE_RANGE;

          //if there's a ? in the first part, there can't be a second part
          if (value.indexOf("?") === -1) {
            if (reader.peek() === "-") {
              reader.mark();
              temp = reader.read();
              temp += this.readUnicodeRangePart(false);

              //if there's not another value, back up and just take the first
              if (temp.length === 1) {
                reader.reset();
              } else {
                value += temp;
              }
            }
          }
        }
      }
      return this.createToken(tt, value, startLine, startCol);
    },
    /**
     * Produces a S token based on the specified information. Since whitespace
     * may have multiple characters, this consumes all whitespace characters
     * into a single token.
     * @param {String} first The first character in the token.
     * @param {int} startLine The beginning line for the character.
     * @param {int} startCol The beginning column for the character.
     * @return {Object} A token object.
     * @method whitespaceToken
     */
    whitespaceToken: function (first, startLine, startCol) {
      var value = first + this.readWhitespace();
      return this.createToken(Tokens.S, value, startLine, startCol);
    },
    //-------------------------------------------------------------------------
    // Methods to read values from the string stream
    //-------------------------------------------------------------------------

    readUnicodeRangePart: function (allowQuestionMark) {
      var reader = this._reader,
        part = "",
        c = reader.peek();

      //first read hex digits
      while (isHexDigit(c) && part.length < 6) {
        reader.read();
        part += c;
        c = reader.peek();
      }

      //then read question marks if allowed
      if (allowQuestionMark) {
        while (c === "?" && part.length < 6) {
          reader.read();
          part += c;
          c = reader.peek();
        }
      }

      //there can't be any other characters after this point

      return part;
    },
    readWhitespace: function () {
      var reader = this._reader,
        whitespace = "",
        c = reader.peek();
      while (isWhitespace(c)) {
        reader.read();
        whitespace += c;
        c = reader.peek();
      }
      return whitespace;
    },
    readNumber: function (first) {
      var reader = this._reader,
        number = first,
        hasDot = first === ".",
        c = reader.peek();
      while (c) {
        if (isDigit(c)) {
          number += reader.read();
        } else if (c === ".") {
          if (hasDot) {
            break;
          } else {
            hasDot = true;
            number += reader.read();
          }
        } else {
          break;
        }
        c = reader.peek();
      }
      return number;
    },
    readString: function () {
      var reader = this._reader,
        delim = reader.read(),
        string = delim,
        prev = delim,
        c = reader.peek();
      while (c) {
        c = reader.read();
        string += c;

        //if the delimiter is found with an escapement, we're done.
        if (c === delim && prev !== "\\") {
          break;
        }

        //if there's a newline without an escapement, it's an invalid string
        if (isNewLine(reader.peek()) && c !== "\\") {
          string = "";
          break;
        }

        //save previous and get next
        prev = c;
        c = reader.peek();
      }

      //if c is null, that means we're out of input and the string was never closed
      if (c === null) {
        string = "";
      }
      return string;
    },
    readURI: function (first) {
      var reader = this._reader,
        uri = first,
        inner = "",
        c = reader.peek();
      reader.mark();

      //skip whitespace before
      while (c && isWhitespace(c)) {
        reader.read();
        c = reader.peek();
      }

      //it's a string
      if (c === "'" || c === "\"") {
        inner = this.readString();
      } else {
        inner = this.readURL();
      }
      c = reader.peek();

      //skip whitespace after
      while (c && isWhitespace(c)) {
        reader.read();
        c = reader.peek();
      }

      //if there was no inner value or the next character isn't closing paren, it's not a URI
      if (inner === "" || c !== ")") {
        uri = first;
        reader.reset();
      } else {
        uri += inner + reader.read();
      }
      return uri;
    },
    readURL: function () {
      var reader = this._reader,
        url = "",
        c = reader.peek();

      //TODO: Check for escape and nonascii
      while (/^[!#$%&\\*-~]$/.test(c)) {
        url += reader.read();
        c = reader.peek();
      }
      return url;
    },
    readName: function (first) {
      var reader = this._reader,
        ident = first || "",
        c = reader.peek();
      while (true) {
        if (c === "\\") {
          ident += this.readEscape(reader.read());
          c = reader.peek();
        } else if (c && isNameChar(c)) {
          ident += reader.read();
          c = reader.peek();
        } else {
          break;
        }
      }
      return ident;
    },
    readEscape: function (first) {
      var reader = this._reader,
        cssEscape = first || "",
        i = 0,
        c = reader.peek();
      if (isHexDigit(c)) {
        do {
          cssEscape += reader.read();
          c = reader.peek();
        } while (c && isHexDigit(c) && ++i < 6);
      }
      if (cssEscape.length === 3 && /\s/.test(c) || cssEscape.length === 7 || cssEscape.length === 1) {
        reader.read();
      } else {
        c = "";
      }
      return cssEscape + c;
    },
    readComment: function (first) {
      var reader = this._reader,
        comment = first || "",
        c = reader.read();
      if (c === "*") {
        while (c) {
          comment += c;

          //look for end of comment
          if (comment.length > 2 && c === "*" && reader.peek() === "/") {
            comment += reader.read();
            break;
          }
          c = reader.read();
        }
        return comment;
      } else {
        return "";
      }
    }
  });
  var Tokens = [
  /*
   * The following token names are defined in CSS3 Grammar: http://www.w3.org/TR/css3-syntax/#lexical
   */

  //HTML-style comments
  {
    name: "CDO"
  }, {
    name: "CDC"
  },
  //ignorables
  {
    name: "S",
    whitespace: true /*, channel: "ws"*/
  }, {
    name: "COMMENT",
    comment: true,
    hide: true,
    channel: "comment"
  },
  //attribute equality
  {
    name: "INCLUDES",
    text: "~="
  }, {
    name: "DASHMATCH",
    text: "|="
  }, {
    name: "PREFIXMATCH",
    text: "^="
  }, {
    name: "SUFFIXMATCH",
    text: "$="
  }, {
    name: "SUBSTRINGMATCH",
    text: "*="
  },
  //identifier types
  {
    name: "STRING"
  }, {
    name: "IDENT"
  }, {
    name: "HASH"
  },
  //at-keywords
  {
    name: "IMPORT_SYM",
    text: "@import"
  }, {
    name: "PAGE_SYM",
    text: "@page"
  }, {
    name: "MEDIA_SYM",
    text: "@media"
  }, {
    name: "FONT_FACE_SYM",
    text: "@font-face"
  }, {
    name: "CHARSET_SYM",
    text: "@charset"
  }, {
    name: "NAMESPACE_SYM",
    text: "@namespace"
  }, {
    name: "VIEWPORT_SYM",
    text: ["@viewport", "@-ms-viewport", "@-o-viewport"]
  }, {
    name: "DOCUMENT_SYM",
    text: ["@document", "@-moz-document"]
  }, {
    name: "UNKNOWN_SYM"
  },
  //{ name: "ATKEYWORD"},

  //CSS3 animations
  {
    name: "KEYFRAMES_SYM",
    text: ["@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes"]
  },
  //important symbol
  {
    name: "IMPORTANT_SYM"
  },
  //measurements
  {
    name: "LENGTH"
  }, {
    name: "ANGLE"
  }, {
    name: "TIME"
  }, {
    name: "FREQ"
  }, {
    name: "DIMENSION"
  }, {
    name: "PERCENTAGE"
  }, {
    name: "NUMBER"
  },
  //functions
  {
    name: "URI"
  }, {
    name: "FUNCTION"
  },
  //Unicode ranges
  {
    name: "UNICODE_RANGE"
  },
  /*
   * The following token names are defined in CSS3 Selectors: http://www.w3.org/TR/css3-selectors/#selector-syntax
   */

  //invalid string
  {
    name: "INVALID"
  },
  //combinators
  {
    name: "PLUS",
    text: "+"
  }, {
    name: "GREATER",
    text: ">"
  }, {
    name: "COMMA",
    text: ","
  }, {
    name: "TILDE",
    text: "~"
  },
  //modifier
  {
    name: "NOT"
  },
  /*
   * Defined in CSS3 Paged Media
   */
  {
    name: "TOPLEFTCORNER_SYM",
    text: "@top-left-corner"
  }, {
    name: "TOPLEFT_SYM",
    text: "@top-left"
  }, {
    name: "TOPCENTER_SYM",
    text: "@top-center"
  }, {
    name: "TOPRIGHT_SYM",
    text: "@top-right"
  }, {
    name: "TOPRIGHTCORNER_SYM",
    text: "@top-right-corner"
  }, {
    name: "BOTTOMLEFTCORNER_SYM",
    text: "@bottom-left-corner"
  }, {
    name: "BOTTOMLEFT_SYM",
    text: "@bottom-left"
  }, {
    name: "BOTTOMCENTER_SYM",
    text: "@bottom-center"
  }, {
    name: "BOTTOMRIGHT_SYM",
    text: "@bottom-right"
  }, {
    name: "BOTTOMRIGHTCORNER_SYM",
    text: "@bottom-right-corner"
  }, {
    name: "LEFTTOP_SYM",
    text: "@left-top"
  }, {
    name: "LEFTMIDDLE_SYM",
    text: "@left-middle"
  }, {
    name: "LEFTBOTTOM_SYM",
    text: "@left-bottom"
  }, {
    name: "RIGHTTOP_SYM",
    text: "@right-top"
  }, {
    name: "RIGHTMIDDLE_SYM",
    text: "@right-middle"
  }, {
    name: "RIGHTBOTTOM_SYM",
    text: "@right-bottom"
  },
  /*
   * The following token names are defined in CSS3 Media Queries: http://www.w3.org/TR/css3-mediaqueries/#syntax
   */
  /*{ name: "MEDIA_ONLY", state: "media"},
  { name: "MEDIA_NOT", state: "media"},
  { name: "MEDIA_AND", state: "media"},*/
  {
    name: "RESOLUTION",
    state: "media"
  },
  /*
   * The following token names are not defined in any CSS specification but are used by the lexer.
   */

  //not a real token, but useful for stupid IE filters
  {
    name: "IE_FUNCTION"
  },
  //part of CSS3 grammar but not the Flex code
  {
    name: "CHAR"
  },
  //TODO: Needed?
  //Not defined as tokens, but might as well be
  {
    name: "PIPE",
    text: "|"
  }, {
    name: "SLASH",
    text: "/"
  }, {
    name: "MINUS",
    text: "-"
  }, {
    name: "STAR",
    text: "*"
  }, {
    name: "LBRACE",
    endChar: "}",
    text: "{"
  }, {
    name: "RBRACE",
    text: "}"
  }, {
    name: "LBRACKET",
    endChar: "]",
    text: "["
  }, {
    name: "RBRACKET",
    text: "]"
  }, {
    name: "EQUALS",
    text: "="
  }, {
    name: "COLON",
    text: ":"
  }, {
    name: "SEMICOLON",
    text: ";"
  }, {
    name: "LPAREN",
    endChar: ")",
    text: "("
  }, {
    name: "RPAREN",
    text: ")"
  }, {
    name: "DOT",
    text: "."
  }];
  (function () {
    var nameMap = [],
      typeMap = Object.create(null);
    Tokens.UNKNOWN = -1;
    Tokens.unshift({
      name: "EOF"
    });
    for (var i = 0, len = Tokens.length; i < len; i++) {
      nameMap.push(Tokens[i].name);
      Tokens[Tokens[i].name] = i;
      if (Tokens[i].text) {
        if (Tokens[i].text instanceof Array) {
          for (var j = 0; j < Tokens[i].text.length; j++) {
            typeMap[Tokens[i].text[j]] = i;
          }
        } else {
          typeMap[Tokens[i].text] = i;
        }
      }
    }
    Tokens.name = function (tt) {
      return nameMap[tt];
    };
    Tokens.type = function (c) {
      return typeMap[c] || -1;
    };
  })();

  //This file will likely change a lot! Very experimental!
  var Validation = {
    validate: function (property, value) {
      //normalize name
      var name = property.toString().toLowerCase(),
        expression = new PropertyValueIterator(value),
        spec = Properties[name];
      if (!spec) {
        if (name.indexOf("-") !== 0) {
          //vendor prefixed are ok
          throw new ValidationError("Unknown property '" + property + "'.", property.line, property.col);
        }
      } else if (typeof spec !== "number") {
        //initialization
        if (typeof spec === "string") {
          if (spec.indexOf("||") > -1) {
            this.groupProperty(spec, expression);
          } else {
            this.singleProperty(spec, expression, 1);
          }
        } else if (spec.multi) {
          this.multiProperty(spec.multi, expression, spec.comma, spec.max || Infinity);
        } else if (typeof spec === "function") {
          spec(expression);
        }
      }
    },
    singleProperty: function (types, expression, max, partial) {
      var result = false,
        value = expression.value,
        count = 0,
        part;
      while (expression.hasNext() && count < max) {
        result = ValidationTypes.isAny(expression, types);
        if (!result) {
          break;
        }
        count++;
      }
      if (!result) {
        if (expression.hasNext() && !expression.isFirst()) {
          part = expression.peek();
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
        }
      } else if (expression.hasNext()) {
        part = expression.next();
        throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
      }
    },
    multiProperty: function (types, expression, comma, max) {
      var result = false,
        value = expression.value,
        count = 0,
        part;
      while (expression.hasNext() && !result && count < max) {
        if (ValidationTypes.isAny(expression, types)) {
          count++;
          if (!expression.hasNext()) {
            result = true;
          } else if (comma) {
            if (String(expression.peek()) === ",") {
              part = expression.next();
            } else {
              break;
            }
          }
        } else {
          break;
        }
      }
      if (!result) {
        if (expression.hasNext() && !expression.isFirst()) {
          part = expression.peek();
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          part = expression.previous();
          if (comma && String(part) === ",") {
            throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
          } else {
            throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
          }
        }
      } else if (expression.hasNext()) {
        part = expression.next();
        throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
      }
    },
    groupProperty: function (types, expression, comma) {
      var result = false,
        value = expression.value,
        typeCount = types.split("||").length,
        groups = {
          count: 0
        },
        partial = false,
        name,
        part;
      while (expression.hasNext() && !result) {
        name = ValidationTypes.isAnyOfGroup(expression, types);
        if (name) {
          //no dupes
          if (groups[name]) {
            break;
          } else {
            groups[name] = 1;
            groups.count++;
            partial = true;
            if (groups.count === typeCount || !expression.hasNext()) {
              result = true;
            }
          }
        } else {
          break;
        }
      }
      if (!result) {
        if (partial && expression.hasNext()) {
          part = expression.peek();
          throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
        } else {
          throw new ValidationError("Expected (" + types + ") but found '" + value + "'.", value.line, value.col);
        }
      } else if (expression.hasNext()) {
        part = expression.next();
        throw new ValidationError("Expected end of value but found '" + part + "'.", part.line, part.col);
      }
    }
  };
  /**
   * Type to use when a validation error occurs.
   * @class ValidationError
   * @namespace parserlib.util
   * @constructor
   * @param {String} message The error message.
   * @param {int} line The line at which the error occurred.
   * @param {int} col The column at which the error occurred.
   */
  function ValidationError(message, line, col) {
    /**
     * The column at which the error occurred.
     * @type int
     * @property col
     */
    this.col = col;

    /**
     * The line at which the error occurred.
     * @type int
     * @property line
     */
    this.line = line;

    /**
     * The text representation of the unit.
     * @type String
     * @property text
     */
    this.message = message;
  }

  //inherit from Error
  ValidationError.prototype = new Error();
  //This file will likely change a lot! Very experimental!
  var ValidationTypes = {
    isLiteral: function (part, literals) {
      var text = part.text.toString().toLowerCase(),
        args = literals.split(" | "),
        i,
        len,
        found = false;
      for (i = 0, len = args.length; i < len && !found; i++) {
        if (text === args[i].toLowerCase()) {
          found = true;
        }
      }
      return found;
    },
    isSimple: function (type) {
      return !!this.simple[type];
    },
    isComplex: function (type) {
      return !!this.complex[type];
    },
    /**
     * Determines if the next part(s) of the given expression
     * are any of the given types.
     */
    isAny: function (expression, types) {
      var args = types.split(" | "),
        i,
        len,
        found = false;
      for (i = 0, len = args.length; i < len && !found && expression.hasNext(); i++) {
        found = this.isType(expression, args[i]);
      }
      return found;
    },
    /**
     * Determines if the next part(s) of the given expression
     * are one of a group.
     */
    isAnyOfGroup: function (expression, types) {
      var args = types.split(" || "),
        i,
        len,
        found = false;
      for (i = 0, len = args.length; i < len && !found; i++) {
        found = this.isType(expression, args[i]);
      }
      return found ? args[i - 1] : false;
    },
    /**
     * Determines if the next part(s) of the given expression
     * are of a given type.
     */
    isType: function (expression, type) {
      var part = expression.peek(),
        result = false;
      if (type.charAt(0) !== "<") {
        result = this.isLiteral(part, type);
        if (result) {
          expression.next();
        }
      } else if (this.simple[type]) {
        result = this.simple[type](part);
        if (result) {
          expression.next();
        }
      } else {
        result = this.complex[type](expression);
      }
      return result;
    },
    simple: {
      __proto__: null,
      "<absolute-size>": function (part) {
        return ValidationTypes.isLiteral(part, "xx-small | x-small | small | medium | large | x-large | xx-large");
      },
      "<attachment>": function (part) {
        return ValidationTypes.isLiteral(part, "scroll | fixed | local");
      },
      "<attr>": function (part) {
        return part.type === "function" && part.name === "attr";
      },
      "<bg-image>": function (part) {
        return this["<image>"](part) || this["<gradient>"](part) || String(part) === "none";
      },
      "<gradient>": function (part) {
        return part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?(?:repeating\-)?(?:radial\-|linear\-)?gradient/i.test(part);
      },
      "<box>": function (part) {
        return ValidationTypes.isLiteral(part, "padding-box | border-box | content-box");
      },
      "<content>": function (part) {
        return part.type === "function" && part.name === "content";
      },
      "<relative-size>": function (part) {
        return ValidationTypes.isLiteral(part, "smaller | larger");
      },
      //any identifier
      "<ident>": function (part) {
        return part.type === "identifier";
      },
      "<length>": function (part) {
        if (part.type === "function" && /^(?:\-(?:ms|moz|o|webkit)\-)?calc/i.test(part)) {
          return true;
        } else {
          return part.type === "length" || part.type === "number" || part.type === "integer" || String(part) === "0";
        }
      },
      "<color>": function (part) {
        return part.type === "color" || String(part) === "transparent" || String(part) === "currentColor";
      },
      "<number>": function (part) {
        return part.type === "number" || this["<integer>"](part);
      },
      "<integer>": function (part) {
        return part.type === "integer";
      },
      "<line>": function (part) {
        return part.type === "integer";
      },
      "<angle>": function (part) {
        return part.type === "angle";
      },
      "<uri>": function (part) {
        return part.type === "uri";
      },
      "<image>": function (part) {
        return this["<uri>"](part);
      },
      "<percentage>": function (part) {
        return part.type === "percentage" || String(part) === "0";
      },
      "<border-width>": function (part) {
        return this["<length>"](part) || ValidationTypes.isLiteral(part, "thin | medium | thick");
      },
      "<border-style>": function (part) {
        return ValidationTypes.isLiteral(part, "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset");
      },
      "<content-sizing>": function (part) {
        // http://www.w3.org/TR/css3-sizing/#width-height-keywords
        return ValidationTypes.isLiteral(part, "fill-available | -moz-available | -webkit-fill-available | max-content | -moz-max-content | -webkit-max-content | min-content | -moz-min-content | -webkit-min-content | fit-content | -moz-fit-content | -webkit-fit-content");
      },
      "<margin-width>": function (part) {
        return this["<length>"](part) || this["<percentage>"](part) || ValidationTypes.isLiteral(part, "auto");
      },
      "<padding-width>": function (part) {
        return this["<length>"](part) || this["<percentage>"](part);
      },
      "<shape>": function (part) {
        return part.type === "function" && (part.name === "rect" || part.name === "inset-rect");
      },
      "<time>": function (part) {
        return part.type === "time";
      },
      "<flex-grow>": function (part) {
        return this["<number>"](part);
      },
      "<flex-shrink>": function (part) {
        return this["<number>"](part);
      },
      "<width>": function (part) {
        return this["<margin-width>"](part);
      },
      "<flex-basis>": function (part) {
        return this["<width>"](part);
      },
      "<flex-direction>": function (part) {
        return ValidationTypes.isLiteral(part, "row | row-reverse | column | column-reverse");
      },
      "<flex-wrap>": function (part) {
        return ValidationTypes.isLiteral(part, "nowrap | wrap | wrap-reverse");
      },
      "<feature-tag-value>": function (part) {
        return part.type === "function" && /^[A-Z0-9]{4}$/i.test(part);
      }
    },
    complex: {
      __proto__: null,
      "<bg-position>": function (expression) {
        var result = false,
          numeric = "<percentage> | <length>",
          xDir = "left | right",
          yDir = "top | bottom",
          count = 0;
        while (expression.peek(count) && expression.peek(count).text !== ",") {
          count++;
        }

        /*
        <position> = [
          [ left | center | right | top | bottom | <percentage> | <length> ]
        |
          [ left | center | right | <percentage> | <length> ]
          [ top | center | bottom | <percentage> | <length> ]
        |
          [ center | [ left | right ] [ <percentage> | <length> ]? ] &&
          [ center | [ top | bottom ] [ <percentage> | <length> ]? ]
        ]
        */

        if (count < 3) {
          if (ValidationTypes.isAny(expression, xDir + " | center | " + numeric)) {
            result = true;
            ValidationTypes.isAny(expression, yDir + " | center | " + numeric);
          } else if (ValidationTypes.isAny(expression, yDir)) {
            result = true;
            ValidationTypes.isAny(expression, xDir + " | center");
          }
        } else {
          if (ValidationTypes.isAny(expression, xDir)) {
            if (ValidationTypes.isAny(expression, yDir)) {
              result = true;
              ValidationTypes.isAny(expression, numeric);
            } else if (ValidationTypes.isAny(expression, numeric)) {
              if (ValidationTypes.isAny(expression, yDir)) {
                result = true;
                ValidationTypes.isAny(expression, numeric);
              } else if (ValidationTypes.isAny(expression, "center")) {
                result = true;
              }
            }
          } else if (ValidationTypes.isAny(expression, yDir)) {
            if (ValidationTypes.isAny(expression, xDir)) {
              result = true;
              ValidationTypes.isAny(expression, numeric);
            } else if (ValidationTypes.isAny(expression, numeric)) {
              if (ValidationTypes.isAny(expression, xDir)) {
                result = true;
                ValidationTypes.isAny(expression, numeric);
              } else if (ValidationTypes.isAny(expression, "center")) {
                result = true;
              }
            }
          } else if (ValidationTypes.isAny(expression, "center")) {
            if (ValidationTypes.isAny(expression, xDir + " | " + yDir)) {
              result = true;
              ValidationTypes.isAny(expression, numeric);
            }
          }
        }
        return result;
      },
      "<bg-size>": function (expression) {
        //<bg-size> = [ <length> | <percentage> | auto ]{1,2} | cover | contain
        var result = false,
          numeric = "<percentage> | <length> | auto";
        if (ValidationTypes.isAny(expression, "cover | contain")) {
          result = true;
        } else if (ValidationTypes.isAny(expression, numeric)) {
          result = true;
          ValidationTypes.isAny(expression, numeric);
        }
        return result;
      },
      "<repeat-style>": function (expression) {
        //repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2}
        var result = false,
          values = "repeat | space | round | no-repeat",
          part;
        if (expression.hasNext()) {
          part = expression.next();
          if (ValidationTypes.isLiteral(part, "repeat-x | repeat-y")) {
            result = true;
          } else if (ValidationTypes.isLiteral(part, values)) {
            result = true;
            if (expression.hasNext() && ValidationTypes.isLiteral(expression.peek(), values)) {
              expression.next();
            }
          }
        }
        return result;
      },
      "<shadow>": function (expression) {
        //inset? && [ <length>{2,4} && <color>? ]
        var result = false,
          count = 0,
          inset = false,
          color = false;
        if (expression.hasNext()) {
          if (ValidationTypes.isAny(expression, "inset")) {
            inset = true;
          }
          if (ValidationTypes.isAny(expression, "<color>")) {
            color = true;
          }
          while (ValidationTypes.isAny(expression, "<length>") && count < 4) {
            count++;
          }
          if (expression.hasNext()) {
            if (!color) {
              ValidationTypes.isAny(expression, "<color>");
            }
            if (!inset) {
              ValidationTypes.isAny(expression, "inset");
            }
          }
          result = count >= 2 && count <= 4;
        }
        return result;
      },
      "<x-one-radius>": function (expression) {
        //[ <length> | <percentage> ] [ <length> | <percentage> ]?
        var result = false,
          simple = "<length> | <percentage> | inherit";
        if (ValidationTypes.isAny(expression, simple)) {
          result = true;
          ValidationTypes.isAny(expression, simple);
        }
        return result;
      },
      "<flex>": function (expression) {
        // http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/#flex-property
        // none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]
        // Valid syntaxes, according to https://developer.mozilla.org/en-US/docs/Web/CSS/flex#Syntax
        // * none
        // * <flex-grow>
        // * <flex-basis>
        // * <flex-grow> <flex-basis>
        // * <flex-grow> <flex-shrink>
        // * <flex-grow> <flex-shrink> <flex-basis>
        // * inherit
        var part,
          result = false;
        if (ValidationTypes.isAny(expression, "none | inherit")) {
          result = true;
        } else {
          if (ValidationTypes.isType(expression, "<flex-grow>")) {
            if (expression.peek()) {
              if (ValidationTypes.isType(expression, "<flex-shrink>")) {
                if (expression.peek()) {
                  result = ValidationTypes.isType(expression, "<flex-basis>");
                } else {
                  result = true;
                }
              } else if (ValidationTypes.isType(expression, "<flex-basis>")) {
                result = expression.peek() === null;
              }
            } else {
              result = true;
            }
          } else if (ValidationTypes.isType(expression, "<flex-basis>")) {
            result = true;
          }
        }
        if (!result) {
          // Generate a more verbose error than "Expected <flex>..."
          part = expression.peek();
          throw new ValidationError("Expected (none | [ <flex-grow> <flex-shrink>? || <flex-basis> ]) but found '" + expression.value.text + "'.", part.line, part.col);
        }
        return result;
      }
    }
  };
  parserlib.css = {
    __proto__: null,
    Colors: Colors,
    Combinator: Combinator,
    Parser: Parser,
    PropertyName: PropertyName,
    PropertyValue: PropertyValue,
    PropertyValuePart: PropertyValuePart,
    MediaFeature: MediaFeature,
    MediaQuery: MediaQuery,
    Selector: Selector,
    SelectorPart: SelectorPart,
    SelectorSubPart: SelectorSubPart,
    Specificity: Specificity,
    TokenStream: TokenStream,
    Tokens: Tokens,
    ValidationError: ValidationError
  };
})();
(function () {
  /* jshint forin:false */
  for (var prop in parserlib) {
    exports[prop] = parserlib[prop];
  }
})();

/***/ }),

/***/ 31432:
/*!**************************************************!*\
  !*** ./node_modules/domino/lib/defineElement.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var attributes = __webpack_require__(/*! ./attributes */ 38208);
var sloppy = __webpack_require__(/*! ./sloppy */ 78602);
var isApiWritable = (__webpack_require__(/*! ./config */ 63535).isApiWritable);
module.exports = function (spec, defaultConstructor, tagList, tagNameToImpl) {
  var c = spec.ctor;
  if (c) {
    var props = spec.props || {};
    if (spec.attributes) {
      for (var n in spec.attributes) {
        var attr = spec.attributes[n];
        if (typeof attr !== 'object' || Array.isArray(attr)) attr = {
          type: attr
        };
        if (!attr.name) attr.name = n.toLowerCase();
        props[n] = attributes.property(attr);
      }
    }
    props.constructor = {
      value: c,
      writable: isApiWritable
    };
    c.prototype = Object.create((spec.superclass || defaultConstructor).prototype, props);
    if (spec.events) {
      addEventHandlers(c, spec.events);
    }
    tagList[c.name] = c;
  } else {
    c = defaultConstructor;
  }
  (spec.tags || spec.tag && [spec.tag] || []).forEach(function (tag) {
    tagNameToImpl[tag] = c;
  });
  return c;
};
function EventHandlerBuilder(body, document, form, element) {
  this.body = body;
  this.document = document;
  this.form = form;
  this.element = element;
}
EventHandlerBuilder.prototype.build = sloppy.EventHandlerBuilder_build;
function EventHandlerChangeHandler(elt, name, oldval, newval) {
  var doc = elt.ownerDocument || Object.create(null);
  var form = elt.form || Object.create(null);
  elt[name] = new EventHandlerBuilder(newval, doc, form, elt).build();
}
function addEventHandlers(c, eventHandlerTypes) {
  var p = c.prototype;
  eventHandlerTypes.forEach(function (type) {
    // Define the event handler registration IDL attribute for this type
    Object.defineProperty(p, "on" + type, {
      get: function () {
        return this._getEventHandler(type);
      },
      set: function (v) {
        this._setEventHandler(type, v);
      }
    });

    // Define special behavior for the content attribute as well
    attributes.registerChangeHandler(c, "on" + type, EventHandlerChangeHandler);
  });
}

/***/ }),

/***/ 15440:
/*!*******************************************!*\
  !*** ./node_modules/domino/lib/events.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


module.exports = {
  Event: __webpack_require__(/*! ./Event */ 76165),
  UIEvent: __webpack_require__(/*! ./UIEvent */ 56431),
  MouseEvent: __webpack_require__(/*! ./MouseEvent */ 77068),
  CustomEvent: __webpack_require__(/*! ./CustomEvent */ 68468)
};

/***/ }),

/***/ 8024:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/htmlelts.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var Node = __webpack_require__(/*! ./Node */ 88869);
var Element = __webpack_require__(/*! ./Element */ 60601);
var CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ 84361);
var utils = __webpack_require__(/*! ./utils */ 7976);
var URLUtils = __webpack_require__(/*! ./URLUtils */ 66519);
var defineElement = __webpack_require__(/*! ./defineElement */ 31432);
var htmlElements = exports.elements = {};
var htmlNameToImpl = Object.create(null);
exports.createElement = function (doc, localName, prefix) {
  var impl = htmlNameToImpl[localName] || HTMLUnknownElement;
  return new impl(doc, localName, prefix);
};
function define(spec) {
  return defineElement(spec, HTMLElement, htmlElements, htmlNameToImpl);
}
function URL(attr) {
  return {
    get: function () {
      var v = this._getattr(attr);
      if (v === null) {
        return '';
      }
      var url = this.doc._resolve(v);
      return url === null ? v : url;
    },
    set: function (value) {
      this._setattr(attr, value);
    }
  };
}
function CORS(attr) {
  return {
    get: function () {
      var v = this._getattr(attr);
      if (v === null) {
        return null;
      }
      if (v.toLowerCase() === 'use-credentials') {
        return 'use-credentials';
      }
      return 'anonymous';
    },
    set: function (value) {
      if (value === null || value === undefined) {
        this.removeAttribute(attr);
      } else {
        this._setattr(attr, value);
      }
    }
  };
}
var REFERRER = {
  type: ["", "no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", "unsafe-url"],
  missing: ''
};

// XXX: the default value for tabIndex should be 0 if the element is
// focusable and -1 if it is not.  But the full definition of focusable
// is actually hard to compute, so for now, I'll follow Firefox and
// just base the default value on the type of the element.
var focusableElements = {
  "A": true,
  "LINK": true,
  "BUTTON": true,
  "INPUT": true,
  "SELECT": true,
  "TEXTAREA": true,
  "COMMAND": true
};
var HTMLFormElement = function (doc, localName, prefix) {
  HTMLElement.call(this, doc, localName, prefix);
  this._form = null; // Prevent later deoptimization
};

var HTMLElement = exports.HTMLElement = define({
  superclass: Element,
  ctor: function HTMLElement(doc, localName, prefix) {
    Element.call(this, doc, localName, utils.NAMESPACE.HTML, prefix);
  },
  props: {
    innerHTML: {
      get: function () {
        return this.serialize();
      },
      set: function (v) {
        var parser = this.ownerDocument.implementation.mozHTMLParser(this.ownerDocument._address, this);
        parser.parse(v === null ? '' : String(v), true);

        // Remove any existing children of this node
        var target = this instanceof htmlNameToImpl.template ? this.content : this;
        while (target.hasChildNodes()) target.removeChild(target.firstChild);

        // Now copy newly parsed children to this node
        target.appendChild(parser._asDocumentFragment());
      }
    },
    style: {
      get: function () {
        if (!this._style) this._style = new CSSStyleDeclaration(this);
        return this._style;
      },
      set: function (v) {
        if (v === null || v === undefined) {
          v = '';
        }
        this._setattr('style', String(v));
      }
    },
    // These can't really be implemented server-side in a reasonable way.
    blur: {
      value: function () {}
    },
    focus: {
      value: function () {}
    },
    forceSpellCheck: {
      value: function () {}
    },
    click: {
      value: function () {
        if (this._click_in_progress) return;
        this._click_in_progress = true;
        try {
          if (this._pre_click_activation_steps) this._pre_click_activation_steps();
          var event = this.ownerDocument.createEvent("MouseEvent");
          event.initMouseEvent("click", true, true, this.ownerDocument.defaultView, 1, 0, 0, 0, 0,
          // These 4 should be initialized with
          // the actually current keyboard state
          // somehow...
          false, false, false, false, 0, null);

          // Dispatch this as an untrusted event since it is synthetic
          var success = this.dispatchEvent(event);
          if (success) {
            if (this._post_click_activation_steps) this._post_click_activation_steps(event);
          } else {
            if (this._cancelled_activation_steps) this._cancelled_activation_steps();
          }
        } finally {
          this._click_in_progress = false;
        }
      }
    },
    submit: {
      value: utils.nyi
    }
  },
  attributes: {
    title: String,
    lang: String,
    dir: {
      type: ["ltr", "rtl", "auto"],
      missing: ''
    },
    accessKey: String,
    hidden: Boolean,
    tabIndex: {
      type: "long",
      default: function () {
        if (this.tagName in focusableElements || this.contentEditable) return 0;else return -1;
      }
    }
  },
  events: ["abort", "canplay", "canplaythrough", "change", "click", "contextmenu", "cuechange", "dblclick", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "durationchange", "emptied", "ended", "input", "invalid", "keydown", "keypress", "keyup", "loadeddata", "loadedmetadata", "loadstart", "mousedown", "mousemove", "mouseout", "mouseover", "mouseup", "mousewheel", "pause", "play", "playing", "progress", "ratechange", "readystatechange", "reset", "seeked", "seeking", "select", "show", "stalled", "submit", "suspend", "timeupdate", "volumechange", "waiting",
  // These last 5 event types will be overriden by HTMLBodyElement
  "blur", "error", "focus", "load", "scroll"]
});

// XXX: reflect contextmenu as contextMenu, with element type

// style: the spec doesn't call this a reflected attribute.
//   may want to handle it manually.

// contentEditable: enumerated, not clear if it is actually
// reflected or requires custom getter/setter. Not listed as
// "limited to known values".  Raises syntax_err on bad setting,
// so I think this is custom.

// contextmenu: content is element id, idl type is an element
// draggable: boolean, but not a reflected attribute
// dropzone: reflected SettableTokenList, experimental, so don't
//   implement it right away.

// data-* attributes: need special handling in setAttribute?
// Or maybe that isn't necessary. Can I just scan the attribute list
// when building the dataset?  Liveness and caching issues?

// microdata attributes: many are simple reflected attributes, but
// I'm not going to implement this now.

var HTMLUnknownElement = define({
  ctor: function HTMLUnknownElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
var formAssociatedProps = {
  // See http://www.w3.org/TR/html5/association-of-controls-and-forms.html#form-owner
  form: {
    get: function () {
      return this._form;
    }
  }
};
define({
  tag: 'a',
  ctor: function HTMLAnchorElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    _post_click_activation_steps: {
      value: function (e) {
        if (this.href) {
          // Follow the link
          // XXX: this is just a quick hack
          // XXX: the HTML spec probably requires more than this
          this.ownerDocument.defaultView.location = this.href;
        }
      }
    }
  },
  attributes: {
    href: URL,
    ping: String,
    download: String,
    target: String,
    rel: String,
    media: String,
    hreflang: String,
    type: String,
    referrerPolicy: REFERRER,
    // Obsolete
    coords: String,
    charset: String,
    name: String,
    rev: String,
    shape: String
  }
});
// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils
URLUtils._inherit(htmlNameToImpl.a.prototype);
define({
  tag: 'area',
  ctor: function HTMLAreaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    alt: String,
    target: String,
    download: String,
    rel: String,
    media: String,
    href: URL,
    hreflang: String,
    type: String,
    shape: String,
    coords: String,
    ping: String,
    // XXX: also reflect relList
    referrerPolicy: REFERRER,
    // Obsolete
    noHref: Boolean
  }
});
// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils
URLUtils._inherit(htmlNameToImpl.area.prototype);
define({
  tag: 'br',
  ctor: function HTMLBRElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    clear: String
  }
});
define({
  tag: 'base',
  ctor: function HTMLBaseElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    "target": String
  }
});
define({
  tag: 'body',
  ctor: function HTMLBodyElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  // Certain event handler attributes on a <body> tag actually set
  // handlers for the window rather than just that element.  Define
  // getters and setters for those here.  Note that some of these override
  // properties on HTMLElement.prototype.
  // XXX: If I add support for <frameset>, these have to go there, too
  // XXX
  // When the Window object is implemented, these attribute will have
  // to work with the same-named attributes on the Window.
  events: ["afterprint", "beforeprint", "beforeunload", "blur", "error", "focus", "hashchange", "load", "message", "offline", "online", "pagehide", "pageshow", "popstate", "resize", "scroll", "storage", "unload"],
  attributes: {
    // Obsolete
    text: {
      type: String,
      treatNullAsEmptyString: true
    },
    link: {
      type: String,
      treatNullAsEmptyString: true
    },
    vLink: {
      type: String,
      treatNullAsEmptyString: true
    },
    aLink: {
      type: String,
      treatNullAsEmptyString: true
    },
    bgColor: {
      type: String,
      treatNullAsEmptyString: true
    },
    background: String
  }
});
define({
  tag: 'button',
  ctor: function HTMLButtonElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    name: String,
    value: String,
    disabled: Boolean,
    autofocus: Boolean,
    type: {
      type: ["submit", "reset", "button", "menu"],
      missing: 'submit'
    },
    formTarget: String,
    formNoValidate: Boolean,
    formMethod: {
      type: ["get", "post", "dialog"],
      invalid: 'get',
      missing: ''
    },
    formEnctype: {
      type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
      invalid: "application/x-www-form-urlencoded",
      missing: ''
    }
  }
});
define({
  tag: 'dl',
  ctor: function HTMLDListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    compact: Boolean
  }
});
define({
  tag: 'data',
  ctor: function HTMLDataElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    value: String
  }
});
define({
  tag: 'datalist',
  ctor: function HTMLDataListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'details',
  ctor: function HTMLDetailsElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    "open": Boolean
  }
});
define({
  tag: 'div',
  ctor: function HTMLDivElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});
define({
  tag: 'embed',
  ctor: function HTMLEmbedElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    type: String,
    width: String,
    height: String,
    // Obsolete
    align: String,
    name: String
  }
});
define({
  tag: 'fieldset',
  ctor: function HTMLFieldSetElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    disabled: Boolean,
    name: String
  }
});
define({
  tag: 'form',
  ctor: function HTMLFormElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    action: String,
    autocomplete: {
      type: ['on', 'off'],
      missing: 'on'
    },
    name: String,
    acceptCharset: {
      name: "accept-charset"
    },
    target: String,
    noValidate: Boolean,
    method: {
      type: ["get", "post", "dialog"],
      invalid: 'get',
      missing: 'get'
    },
    // Both enctype and encoding reflect the enctype content attribute
    enctype: {
      type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
      invalid: "application/x-www-form-urlencoded",
      missing: "application/x-www-form-urlencoded"
    },
    encoding: {
      name: 'enctype',
      type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
      invalid: "application/x-www-form-urlencoded",
      missing: "application/x-www-form-urlencoded"
    }
  }
});
define({
  tag: 'hr',
  ctor: function HTMLHRElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String,
    color: String,
    noShade: Boolean,
    size: String,
    width: String
  }
});
define({
  tag: 'head',
  ctor: function HTMLHeadElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
define({
  tags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  ctor: function HTMLHeadingElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});
define({
  tag: 'html',
  ctor: function HTMLHtmlElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    version: String
  }
});
define({
  tag: 'iframe',
  ctor: function HTMLIFrameElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
    var Window = __webpack_require__(/*! ./Window */ 45973); // Avoid circular dependencies.
    this._contentWindow = new Window();
  },
  props: {
    contentWindow: {
      get: function () {
        return this._contentWindow;
      }
    },
    contentDocument: {
      get: function () {
        return this.contentWindow.document;
      }
    }
  },
  attributes: {
    src: URL,
    srcdoc: String,
    name: String,
    width: String,
    height: String,
    // XXX: sandbox is a reflected settable token list
    seamless: Boolean,
    allowFullscreen: Boolean,
    allowUserMedia: Boolean,
    allowPaymentRequest: Boolean,
    referrerPolicy: REFERRER,
    // Obsolete
    align: String,
    scrolling: String,
    frameBorder: String,
    longDesc: URL,
    marginHeight: {
      type: String,
      treatNullAsEmptyString: true
    },
    marginWidth: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tag: 'img',
  ctor: function HTMLImageElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    alt: String,
    src: URL,
    srcset: String,
    crossOrigin: CORS,
    useMap: String,
    isMap: Boolean,
    height: {
      type: "unsigned long",
      default: 0
    },
    width: {
      type: "unsigned long",
      default: 0
    },
    referrerPolicy: REFERRER,
    // Obsolete:
    name: String,
    lowsrc: URL,
    align: String,
    hspace: {
      type: "unsigned long",
      default: 0
    },
    vspace: {
      type: "unsigned long",
      default: 0
    },
    longDesc: URL,
    border: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tag: 'input',
  ctor: function HTMLInputElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: {
    form: formAssociatedProps.form,
    _post_click_activation_steps: {
      value: function (e) {
        if (this.type === 'checkbox') {
          this.checked = !this.checked;
        } else if (this.type === 'radio') {
          var group = this.form.getElementsByName(this.name);
          for (var i = group.length - 1; i >= 0; i--) {
            var el = group[i];
            el.checked = el === this;
          }
        }
      }
    }
  },
  attributes: {
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    accept: String,
    alt: String,
    max: String,
    min: String,
    pattern: String,
    placeholder: String,
    step: String,
    dirName: String,
    defaultValue: {
      name: 'value'
    },
    multiple: Boolean,
    required: Boolean,
    readOnly: Boolean,
    checked: Boolean,
    value: String,
    src: URL,
    defaultChecked: {
      name: 'checked',
      type: Boolean
    },
    size: {
      type: 'unsigned long',
      default: 20,
      min: 1,
      setmin: 1
    },
    width: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: 0
    },
    height: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: 0
    },
    minLength: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: -1
    },
    maxLength: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: -1
    },
    autocomplete: String,
    // It's complicated
    type: {
      type: ["text", "hidden", "search", "tel", "url", "email", "password", "datetime", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button"],
      missing: 'text'
    },
    formTarget: String,
    formNoValidate: Boolean,
    formMethod: {
      type: ["get", "post"],
      invalid: 'get',
      missing: ''
    },
    formEnctype: {
      type: ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
      invalid: "application/x-www-form-urlencoded",
      missing: ''
    },
    inputMode: {
      type: ["verbatim", "latin", "latin-name", "latin-prose", "full-width-latin", "kana", "kana-name", "katakana", "numeric", "tel", "email", "url"],
      missing: ''
    },
    // Obsolete
    align: String,
    useMap: String
  }
});
define({
  tag: 'keygen',
  ctor: function HTMLKeygenElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    challenge: String,
    keytype: {
      type: ["rsa"],
      missing: ''
    }
  }
});
define({
  tag: 'li',
  ctor: function HTMLLIElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    value: {
      type: "long",
      default: 0
    },
    // Obsolete
    type: String
  }
});
define({
  tag: 'label',
  ctor: function HTMLLabelElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    htmlFor: {
      name: 'for',
      type: String
    }
  }
});
define({
  tag: 'legend',
  ctor: function HTMLLegendElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});
define({
  tag: 'link',
  ctor: function HTMLLinkElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // XXX Reflect DOMSettableTokenList sizes also DOMTokenList relList
    href: URL,
    rel: String,
    media: String,
    hreflang: String,
    type: String,
    crossOrigin: CORS,
    nonce: String,
    integrity: String,
    referrerPolicy: REFERRER,
    // Obsolete
    charset: String,
    rev: String,
    target: String
  }
});
define({
  tag: 'map',
  ctor: function HTMLMapElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String
  }
});
define({
  tag: 'menu',
  ctor: function HTMLMenuElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // XXX: not quite right, default should be popup if parent element is
    // popup.
    type: {
      type: ['context', 'popup', 'toolbar'],
      missing: 'toolbar'
    },
    label: String,
    // Obsolete
    compact: Boolean
  }
});
define({
  tag: 'meta',
  ctor: function HTMLMetaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String,
    content: String,
    httpEquiv: {
      name: 'http-equiv',
      type: String
    },
    // Obsolete
    scheme: String
  }
});
define({
  tag: 'meter',
  ctor: function HTMLMeterElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps
});
define({
  tags: ['ins', 'del'],
  ctor: function HTMLModElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    cite: URL,
    dateTime: String
  }
});
define({
  tag: 'ol',
  ctor: function HTMLOListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    // Utility function (see the start attribute default value). Returns
    // the number of <li> children of this element
    _numitems: {
      get: function () {
        var items = 0;
        this.childNodes.forEach(function (n) {
          if (n.nodeType === Node.ELEMENT_NODE && n.tagName === "LI") items++;
        });
        return items;
      }
    }
  },
  attributes: {
    type: String,
    reversed: Boolean,
    start: {
      type: "long",
      default: function () {
        // The default value of the start attribute is 1 unless the list is
        // reversed. Then it is the # of li children
        if (this.reversed) return this._numitems;else return 1;
      }
    },
    // Obsolete
    compact: Boolean
  }
});
define({
  tag: 'object',
  ctor: function HTMLObjectElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    data: URL,
    type: String,
    name: String,
    useMap: String,
    typeMustMatch: Boolean,
    width: String,
    height: String,
    // Obsolete
    align: String,
    archive: String,
    code: String,
    declare: Boolean,
    hspace: {
      type: "unsigned long",
      default: 0
    },
    standby: String,
    vspace: {
      type: "unsigned long",
      default: 0
    },
    codeBase: URL,
    codeType: String,
    border: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tag: 'optgroup',
  ctor: function HTMLOptGroupElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    disabled: Boolean,
    label: String
  }
});
define({
  tag: 'option',
  ctor: function HTMLOptionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    form: {
      get: function () {
        var p = this.parentNode;
        while (p && p.nodeType === Node.ELEMENT_NODE) {
          if (p.localName === 'select') return p.form;
          p = p.parentNode;
        }
      }
    },
    value: {
      get: function () {
        return this._getattr('value') || this.text;
      },
      set: function (v) {
        this._setattr('value', v);
      }
    },
    text: {
      get: function () {
        // Strip and collapse whitespace
        return this.textContent.replace(/[ \t\n\f\r]+/g, ' ').trim();
      },
      set: function (v) {
        this.textContent = v;
      }
    }
    // missing: index
  },

  attributes: {
    disabled: Boolean,
    defaultSelected: {
      name: 'selected',
      type: Boolean
    },
    label: String
  }
});
define({
  tag: 'output',
  ctor: function HTMLOutputElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    // XXX Reflect for/htmlFor as a settable token list
    name: String
  }
});
define({
  tag: 'p',
  ctor: function HTMLParagraphElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});
define({
  tag: 'param',
  ctor: function HTMLParamElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    name: String,
    value: String,
    // Obsolete
    type: String,
    valueType: String
  }
});
define({
  tags: ['pre', /*legacy elements:*/'listing', 'xmp'],
  ctor: function HTMLPreElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    width: {
      type: "long",
      default: 0
    }
  }
});
define({
  tag: 'progress',
  ctor: function HTMLProgressElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: formAssociatedProps,
  attributes: {
    max: {
      type: Number,
      float: true,
      default: 1.0,
      min: 0
    }
  }
});
define({
  tags: ['q', 'blockquote'],
  ctor: function HTMLQuoteElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    cite: URL
  }
});
define({
  tag: 'script',
  ctor: function HTMLScriptElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    text: {
      get: function () {
        var s = "";
        for (var i = 0, n = this.childNodes.length; i < n; i++) {
          var child = this.childNodes[i];
          if (child.nodeType === Node.TEXT_NODE) s += child._data;
        }
        return s;
      },
      set: function (value) {
        this.removeChildren();
        if (value !== null && value !== "") {
          this.appendChild(this.ownerDocument.createTextNode(value));
        }
      }
    }
  },
  attributes: {
    src: URL,
    type: String,
    charset: String,
    defer: Boolean,
    async: Boolean,
    crossOrigin: CORS,
    nonce: String,
    integrity: String
  }
});
define({
  tag: 'select',
  ctor: function HTMLSelectElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: {
    form: formAssociatedProps.form,
    options: {
      get: function () {
        return this.getElementsByTagName('option');
      }
    }
  },
  attributes: {
    autocomplete: String,
    // It's complicated
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    multiple: Boolean,
    required: Boolean,
    size: {
      type: "unsigned long",
      default: 0
    }
  }
});
define({
  tag: 'source',
  ctor: function HTMLSourceElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    type: String,
    media: String
  }
});
define({
  tag: 'span',
  ctor: function HTMLSpanElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'style',
  ctor: function HTMLStyleElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    media: String,
    type: String,
    scoped: Boolean
  }
});
define({
  tag: 'caption',
  ctor: function HTMLTableCaptionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    // Obsolete
    align: String
  }
});
define({
  ctor: function HTMLTableCellElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    colSpan: {
      type: "unsigned long",
      default: 1
    },
    rowSpan: {
      type: "unsigned long",
      default: 1
    },
    //XXX Also reflect settable token list headers
    scope: {
      type: ['row', 'col', 'rowgroup', 'colgroup'],
      missing: ''
    },
    abbr: String,
    // Obsolete
    align: String,
    axis: String,
    height: String,
    width: String,
    ch: {
      name: 'char',
      type: String
    },
    chOff: {
      name: 'charoff',
      type: String
    },
    noWrap: Boolean,
    vAlign: String,
    bgColor: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tags: ['col', 'colgroup'],
  ctor: function HTMLTableColElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    span: {
      type: 'limited unsigned long with fallback',
      default: 1,
      min: 1
    },
    // Obsolete
    align: String,
    ch: {
      name: 'char',
      type: String
    },
    chOff: {
      name: 'charoff',
      type: String
    },
    vAlign: String,
    width: String
  }
});
define({
  tag: 'table',
  ctor: function HTMLTableElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    rows: {
      get: function () {
        return this.getElementsByTagName('tr');
      }
    }
  },
  attributes: {
    // Obsolete
    align: String,
    border: String,
    frame: String,
    rules: String,
    summary: String,
    width: String,
    bgColor: {
      type: String,
      treatNullAsEmptyString: true
    },
    cellPadding: {
      type: String,
      treatNullAsEmptyString: true
    },
    cellSpacing: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tag: 'template',
  ctor: function HTMLTemplateElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
    this._contentFragment = doc._templateDoc.createDocumentFragment();
  },
  props: {
    content: {
      get: function () {
        return this._contentFragment;
      }
    },
    serialize: {
      value: function () {
        return this.content.serialize();
      }
    }
  }
});
define({
  tag: 'tr',
  ctor: function HTMLTableRowElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    cells: {
      get: function () {
        return this.querySelectorAll('td,th');
      }
    }
  },
  attributes: {
    // Obsolete
    align: String,
    ch: {
      name: 'char',
      type: String
    },
    chOff: {
      name: 'charoff',
      type: String
    },
    vAlign: String,
    bgColor: {
      type: String,
      treatNullAsEmptyString: true
    }
  }
});
define({
  tags: ['thead', 'tfoot', 'tbody'],
  ctor: function HTMLTableSectionElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    rows: {
      get: function () {
        return this.getElementsByTagName('tr');
      }
    }
  },
  attributes: {
    // Obsolete
    align: String,
    ch: {
      name: 'char',
      type: String
    },
    chOff: {
      name: 'charoff',
      type: String
    },
    vAlign: String
  }
});
define({
  tag: 'textarea',
  ctor: function HTMLTextAreaElement(doc, localName, prefix) {
    HTMLFormElement.call(this, doc, localName, prefix);
  },
  props: {
    form: formAssociatedProps.form,
    type: {
      get: function () {
        return 'textarea';
      }
    },
    defaultValue: {
      get: function () {
        return this.textContent;
      },
      set: function (v) {
        this.textContent = v;
      }
    },
    value: {
      get: function () {
        return this.defaultValue; /* never dirty */
      },
      set: function (v) {
        // This isn't completely correct: according to the spec, this
        // should "dirty" the API value, and result in
        // `this.value !== this.defaultValue`.  But for most of what
        // folks want to do, this implementation should be fine:
        this.defaultValue = v;
      }
    },
    textLength: {
      get: function () {
        return this.value.length;
      }
    }
  },
  attributes: {
    autocomplete: String,
    // It's complicated
    name: String,
    disabled: Boolean,
    autofocus: Boolean,
    placeholder: String,
    wrap: String,
    dirName: String,
    required: Boolean,
    readOnly: Boolean,
    rows: {
      type: 'limited unsigned long with fallback',
      default: 2
    },
    cols: {
      type: 'limited unsigned long with fallback',
      default: 20
    },
    maxLength: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: -1
    },
    minLength: {
      type: 'unsigned long',
      min: 0,
      setmin: 0,
      default: -1
    },
    inputMode: {
      type: ["verbatim", "latin", "latin-name", "latin-prose", "full-width-latin", "kana", "kana-name", "katakana", "numeric", "tel", "email", "url"],
      missing: ''
    }
  }
});
define({
  tag: 'time',
  ctor: function HTMLTimeElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    dateTime: String,
    pubDate: Boolean
  }
});
define({
  tag: 'title',
  ctor: function HTMLTitleElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    text: {
      get: function () {
        return this.textContent;
      }
    }
  }
});
define({
  tag: 'ul',
  ctor: function HTMLUListElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    type: String,
    // Obsolete
    compact: Boolean
  }
});
define({
  ctor: function HTMLMediaElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    crossOrigin: CORS,
    preload: {
      type: ["metadata", "none", "auto", {
        value: "",
        alias: "auto"
      }],
      missing: 'auto'
    },
    loop: Boolean,
    autoplay: Boolean,
    mediaGroup: String,
    controls: Boolean,
    defaultMuted: {
      name: "muted",
      type: Boolean
    }
  }
});
define({
  tag: 'audio',
  superclass: htmlElements.HTMLMediaElement,
  ctor: function HTMLAudioElement(doc, localName, prefix) {
    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'video',
  superclass: htmlElements.HTMLMediaElement,
  ctor: function HTMLVideoElement(doc, localName, prefix) {
    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);
  },
  attributes: {
    poster: URL,
    width: {
      type: "unsigned long",
      min: 0,
      default: 0
    },
    height: {
      type: "unsigned long",
      min: 0,
      default: 0
    }
  }
});
define({
  tag: 'td',
  superclass: htmlElements.HTMLTableCellElement,
  ctor: function HTMLTableDataCellElement(doc, localName, prefix) {
    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'th',
  superclass: htmlElements.HTMLTableCellElement,
  ctor: function HTMLTableHeaderCellElement(doc, localName, prefix) {
    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'frameset',
  ctor: function HTMLFrameSetElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'frame',
  ctor: function HTMLFrameElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  }
});
define({
  tag: 'canvas',
  ctor: function HTMLCanvasElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    getContext: {
      value: utils.nyi
    },
    probablySupportsContext: {
      value: utils.nyi
    },
    setContext: {
      value: utils.nyi
    },
    transferControlToProxy: {
      value: utils.nyi
    },
    toDataURL: {
      value: utils.nyi
    },
    toBlob: {
      value: utils.nyi
    }
  },
  attributes: {
    width: {
      type: "unsigned long",
      default: 300
    },
    height: {
      type: "unsigned long",
      default: 150
    }
  }
});
define({
  tag: 'dialog',
  ctor: function HTMLDialogElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    show: {
      value: utils.nyi
    },
    showModal: {
      value: utils.nyi
    },
    close: {
      value: utils.nyi
    }
  },
  attributes: {
    open: Boolean,
    returnValue: String
  }
});
define({
  tag: 'menuitem',
  ctor: function HTMLMenuItemElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  props: {
    // The menuitem's label
    _label: {
      get: function () {
        var val = this._getattr('label');
        if (val !== null && val !== '') {
          return val;
        }
        val = this.textContent;
        // Strip and collapse whitespace
        return val.replace(/[ \t\n\f\r]+/g, ' ').trim();
      }
    },
    // The menuitem label IDL attribute
    label: {
      get: function () {
        var val = this._getattr('label');
        if (val !== null) {
          return val;
        }
        return this._label;
      },
      set: function (v) {
        this._setattr('label', v);
      }
    }
  },
  attributes: {
    type: {
      type: ["command", "checkbox", "radio"],
      missing: 'command'
    },
    icon: URL,
    disabled: Boolean,
    checked: Boolean,
    radiogroup: String,
    default: Boolean
  }
});
define({
  tag: 'source',
  ctor: function HTMLSourceElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    srcset: String,
    sizes: String,
    media: String,
    src: URL,
    type: String
  }
});
define({
  tag: 'track',
  ctor: function HTMLTrackElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    src: URL,
    srclang: String,
    label: String,
    default: Boolean,
    kind: {
      type: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
      missing: 'subtitles',
      invalid: 'metadata'
    }
  },
  props: {
    NONE: {
      get: function () {
        return 0;
      }
    },
    LOADING: {
      get: function () {
        return 1;
      }
    },
    LOADED: {
      get: function () {
        return 2;
      }
    },
    ERROR: {
      get: function () {
        return 3;
      }
    },
    readyState: {
      get: utils.nyi
    },
    track: {
      get: utils.nyi
    }
  }
});
define({
  // obsolete
  tag: 'font',
  ctor: function HTMLFontElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    color: {
      type: String,
      treatNullAsEmptyString: true
    },
    face: {
      type: String
    },
    size: {
      type: String
    }
  }
});
define({
  // obsolete
  tag: 'dir',
  ctor: function HTMLDirectoryElement(doc, localName, prefix) {
    HTMLElement.call(this, doc, localName, prefix);
  },
  attributes: {
    compact: Boolean
  }
});
define({
  tags: ["abbr", "address", "article", "aside", "b", "bdi", "bdo", "cite", "code", "dd", "dfn", "dt", "em", "figcaption", "figure", "footer", "header", "hgroup", "i", "kbd", "main", "mark", "nav", "noscript", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "section", "small", "strong", "sub", "summary", "sup", "u", "var", "wbr",
  // Legacy elements
  "acronym", "basefont", "big", "center", "nobr", "noembed", "noframes", "plaintext", "strike", "tt"]
});

/***/ }),

/***/ 93355:
/*!*****************************************!*\
  !*** ./node_modules/domino/lib/impl.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ 7976);
exports = module.exports = {
  CSSStyleDeclaration: __webpack_require__(/*! ./CSSStyleDeclaration */ 84361),
  CharacterData: __webpack_require__(/*! ./CharacterData */ 2482),
  Comment: __webpack_require__(/*! ./Comment */ 63512),
  DOMException: __webpack_require__(/*! ./DOMException */ 90864),
  DOMImplementation: __webpack_require__(/*! ./DOMImplementation */ 94711),
  DOMTokenList: __webpack_require__(/*! ./DOMTokenList */ 30020),
  Document: __webpack_require__(/*! ./Document */ 30168),
  DocumentFragment: __webpack_require__(/*! ./DocumentFragment */ 80312),
  DocumentType: __webpack_require__(/*! ./DocumentType */ 35840),
  Element: __webpack_require__(/*! ./Element */ 60601),
  HTMLParser: __webpack_require__(/*! ./HTMLParser */ 95643),
  NamedNodeMap: __webpack_require__(/*! ./NamedNodeMap */ 83600),
  Node: __webpack_require__(/*! ./Node */ 88869),
  NodeList: __webpack_require__(/*! ./NodeList */ 48649),
  NodeFilter: __webpack_require__(/*! ./NodeFilter */ 62659),
  ProcessingInstruction: __webpack_require__(/*! ./ProcessingInstruction */ 72860),
  Text: __webpack_require__(/*! ./Text */ 17182),
  Window: __webpack_require__(/*! ./Window */ 45973)
};
utils.merge(exports, __webpack_require__(/*! ./events */ 15440));
utils.merge(exports, (__webpack_require__(/*! ./htmlelts */ 8024).elements));
utils.merge(exports, (__webpack_require__(/*! ./svg */ 5923).elements));

/***/ }),

/***/ 44157:
/*!******************************************!*\
  !*** ./node_modules/domino/lib/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ 94711);
var HTMLParser = __webpack_require__(/*! ./HTMLParser */ 95643);
var Window = __webpack_require__(/*! ./Window */ 45973);
exports.createDOMImplementation = function () {
  return new DOMImplementation(null);
};
exports.createDocument = function (html, force) {
  // Previous API couldn't let you pass '' as a document, and that
  // yields a slightly different document than createHTMLDocument('')
  // does.  The new `force` parameter lets you pass '' if you want to.
  if (html || force) {
    var parser = new HTMLParser();
    parser.parse(html || '', true);
    return parser.document();
  }
  return new DOMImplementation(null).createHTMLDocument("");
};
exports.createIncrementalHTMLParser = function () {
  var parser = new HTMLParser();
  /** API for incremental parser. */
  return {
    /** Provide an additional chunk of text to be parsed. */
    write: function (s) {
      if (s.length > 0) {
        parser.parse(s, false, function () {
          return true;
        });
      }
    },
    /**
     * Signal that we are done providing input text, optionally
     * providing one last chunk as a parameter.
     */
    end: function (s) {
      parser.parse(s || '', true, function () {
        return true;
      });
    },
    /**
     * Performs a chunk of parsing work, returning at the end of
     * the next token as soon as shouldPauseFunc() returns true.
     * Returns true iff there is more work to do.
     *
     * For example:
     * ```
     *  var incrParser = domino.createIncrementalHTMLParser();
     *  incrParser.end('...long html document...');
     *  while (true) {
     *    // Pause every 10ms
     *    var start = Date.now();
     *    var pauseIn10 = function() { return (Date.now() - start) >= 10; };
     *    if (!incrParser.process(pauseIn10)) {
     *      break;
     *    }
     *    ...yield to other tasks, do other housekeeping, etc...
     *  }
     * ```
     */
    process: function (shouldPauseFunc) {
      return parser.parse('', false, shouldPauseFunc);
    },
    /**
     * Returns the result of the incremental parse.  Valid after
     * `this.end()` has been called and `this.process()` has returned
     * false.
     */
    document: function () {
      return parser.document();
    }
  };
};
exports.createWindow = function (html, address) {
  var document = exports.createDocument(html);
  if (address !== undefined) {
    document._address = address;
  }
  return new Window(document);
};
exports.impl = __webpack_require__(/*! ./impl */ 93355);

/***/ }),

/***/ 6201:
/*!*******************************************!*\
  !*** ./node_modules/domino/lib/select.js ***!
  \*******************************************/
/***/ (function(module, exports) {

"use strict";


/* jshint eqnull: true */
/**
 * Zest (https://github.com/chjj/zest)
 * A css selector engine.
 * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)
 * Domino version based on Zest v0.1.3 with bugfixes applied.
 */

/**
 * Helpers
 */
var window = Object.create(null, {
  location: {
    get: function () {
      throw new Error('window.location is not supported.');
    }
  }
});
var compareDocumentPosition = function (a, b) {
  return a.compareDocumentPosition(b);
};
var order = function (a, b) {
  /* jshint bitwise: false */
  return compareDocumentPosition(a, b) & 2 ? 1 : -1;
};
var next = function (el) {
  while ((el = el.nextSibling) && el.nodeType !== 1);
  return el;
};
var prev = function (el) {
  while ((el = el.previousSibling) && el.nodeType !== 1);
  return el;
};
var child = function (el) {
  /*jshint -W084 */
  if (el = el.firstChild) {
    while (el.nodeType !== 1 && (el = el.nextSibling));
  }
  return el;
};
var lastChild = function (el) {
  /*jshint -W084 */
  if (el = el.lastChild) {
    while (el.nodeType !== 1 && (el = el.previousSibling));
  }
  return el;
};
var parentIsElement = function (n) {
  if (!n.parentNode) {
    return false;
  }
  var nodeType = n.parentNode.nodeType;
  // The root `html` element can be a first- or last-child, too.
  return nodeType === 1 || nodeType === 9;
};
var unquote = function (str) {
  if (!str) return str;
  var ch = str[0];
  if (ch === '"' || ch === '\'') {
    if (str[str.length - 1] === ch) {
      str = str.slice(1, -1);
    } else {
      // bad string.
      str = str.slice(1);
    }
    return str.replace(rules.str_escape, function (s) {
      var m = /^\\(?:([0-9A-Fa-f]+)|([\r\n\f]+))/.exec(s);
      if (!m) {
        return s.slice(1);
      }
      if (m[2]) {
        return ''; /* escaped newlines are ignored in strings. */
      }
      var cp = parseInt(m[1], 16);
      return String.fromCodePoint ? String.fromCodePoint(cp) :
      // Not all JavaScript implementations have String.fromCodePoint yet.
      String.fromCharCode(cp);
    });
  } else if (rules.ident.test(str)) {
    return decodeid(str);
  } else {
    // NUMBER, PERCENTAGE, DIMENSION, etc
    return str;
  }
};
var decodeid = function (str) {
  return str.replace(rules.escape, function (s) {
    var m = /^\\([0-9A-Fa-f]+)/.exec(s);
    if (!m) {
      return s[1];
    }
    var cp = parseInt(m[1], 16);
    return String.fromCodePoint ? String.fromCodePoint(cp) :
    // Not all JavaScript implementations have String.fromCodePoint yet.
    String.fromCharCode(cp);
  });
};
var indexOf = function () {
  if (Array.prototype.indexOf) {
    return Array.prototype.indexOf;
  }
  return function (obj, item) {
    var i = this.length;
    while (i--) {
      if (this[i] === item) return i;
    }
    return -1;
  };
}();
var makeInside = function (start, end) {
  var regex = rules.inside.source.replace(/</g, start).replace(/>/g, end);
  return new RegExp(regex);
};
var replace = function (regex, name, val) {
  regex = regex.source;
  regex = regex.replace(name, val.source || val);
  return new RegExp(regex);
};
var truncateUrl = function (url, num) {
  return url.replace(/^(?:\w+:\/\/|\/+)/, '').replace(/(?:\/+|\/*#.*?)$/, '').split('/', num).join('/');
};

/**
 * Handle `nth` Selectors
 */

var parseNth = function (param_, test) {
  var param = param_.replace(/\s+/g, ''),
    cap;
  if (param === 'even') {
    param = '2n+0';
  } else if (param === 'odd') {
    param = '2n+1';
  } else if (param.indexOf('n') === -1) {
    param = '0n' + param;
  }
  cap = /^([+-])?(\d+)?n([+-])?(\d+)?$/.exec(param);
  return {
    group: cap[1] === '-' ? -(cap[2] || 1) : +(cap[2] || 1),
    offset: cap[4] ? cap[3] === '-' ? -cap[4] : +cap[4] : 0
  };
};
var nth = function (param_, test, last) {
  var param = parseNth(param_),
    group = param.group,
    offset = param.offset,
    find = !last ? child : lastChild,
    advance = !last ? next : prev;
  return function (el) {
    if (!parentIsElement(el)) return;
    var rel = find(el.parentNode),
      pos = 0;
    while (rel) {
      if (test(rel, el)) pos++;
      if (rel === el) {
        pos -= offset;
        return group && pos ? pos % group === 0 && pos < 0 === group < 0 : !pos;
      }
      rel = advance(rel);
    }
  };
};

/**
 * Simple Selectors
 */

var selectors = {
  '*': function () {
    if (false /*function() {
              var el = document.createElement('div');
              el.appendChild(document.createComment(''));
              return !!el.getElementsByTagName('*')[0];
              }()*/) {}
    return function () {
      return true;
    };
  }(),
  'type': function (type) {
    type = type.toLowerCase();
    return function (el) {
      return el.nodeName.toLowerCase() === type;
    };
  },
  'attr': function (key, op, val, i) {
    op = operators[op];
    return function (el) {
      var attr;
      switch (key) {
        case 'for':
          attr = el.htmlFor;
          break;
        case 'class':
          // className is '' when non-existent
          // getAttribute('class') is null
          attr = el.className;
          if (attr === '' && el.getAttribute('class') == null) {
            attr = null;
          }
          break;
        case 'href':
        case 'src':
          attr = el.getAttribute(key, 2);
          break;
        case 'title':
          // getAttribute('title') can be '' when non-existent sometimes?
          attr = el.getAttribute('title') || null;
          break;
        // careful with attributes with special getter functions
        case 'id':
        case 'lang':
        case 'dir':
        case 'accessKey':
        case 'hidden':
        case 'tabIndex':
        case 'style':
          if (el.getAttribute) {
            attr = el.getAttribute(key);
            break;
          }
        /* falls through */
        default:
          if (el.hasAttribute && !el.hasAttribute(key)) {
            break;
          }
          attr = el[key] != null ? el[key] : el.getAttribute && el.getAttribute(key);
          break;
      }
      if (attr == null) return;
      attr = attr + '';
      if (i) {
        attr = attr.toLowerCase();
        val = val.toLowerCase();
      }
      return op(attr, val);
    };
  },
  ':first-child': function (el) {
    return !prev(el) && parentIsElement(el);
  },
  ':last-child': function (el) {
    return !next(el) && parentIsElement(el);
  },
  ':only-child': function (el) {
    return !prev(el) && !next(el) && parentIsElement(el);
  },
  ':nth-child': function (param, last) {
    return nth(param, function () {
      return true;
    }, last);
  },
  ':nth-last-child': function (param) {
    return selectors[':nth-child'](param, true);
  },
  ':root': function (el) {
    return el.ownerDocument.documentElement === el;
  },
  ':empty': function (el) {
    return !el.firstChild;
  },
  ':not': function (sel) {
    var test = compileGroup(sel);
    return function (el) {
      return !test(el);
    };
  },
  ':first-of-type': function (el) {
    if (!parentIsElement(el)) return;
    var type = el.nodeName;
    /*jshint -W084 */
    while (el = prev(el)) {
      if (el.nodeName === type) return;
    }
    return true;
  },
  ':last-of-type': function (el) {
    if (!parentIsElement(el)) return;
    var type = el.nodeName;
    /*jshint -W084 */
    while (el = next(el)) {
      if (el.nodeName === type) return;
    }
    return true;
  },
  ':only-of-type': function (el) {
    return selectors[':first-of-type'](el) && selectors[':last-of-type'](el);
  },
  ':nth-of-type': function (param, last) {
    return nth(param, function (rel, el) {
      return rel.nodeName === el.nodeName;
    }, last);
  },
  ':nth-last-of-type': function (param) {
    return selectors[':nth-of-type'](param, true);
  },
  ':checked': function (el) {
    return !!(el.checked || el.selected);
  },
  ':indeterminate': function (el) {
    return !selectors[':checked'](el);
  },
  ':enabled': function (el) {
    return !el.disabled && el.type !== 'hidden';
  },
  ':disabled': function (el) {
    return !!el.disabled;
  },
  ':target': function (el) {
    return el.id === window.location.hash.substring(1);
  },
  ':focus': function (el) {
    return el === el.ownerDocument.activeElement;
  },
  ':is': function (sel) {
    return compileGroup(sel);
  },
  // :matches is an older name for :is; see
  // https://github.com/w3c/csswg-drafts/issues/3258
  ':matches': function (sel) {
    return selectors[':is'](sel);
  },
  ':nth-match': function (param, last) {
    var args = param.split(/\s*,\s*/),
      arg = args.shift(),
      test = compileGroup(args.join(','));
    return nth(arg, test, last);
  },
  ':nth-last-match': function (param) {
    return selectors[':nth-match'](param, true);
  },
  ':links-here': function (el) {
    return el + '' === window.location + '';
  },
  ':lang': function (param) {
    return function (el) {
      while (el) {
        if (el.lang) return el.lang.indexOf(param) === 0;
        el = el.parentNode;
      }
    };
  },
  ':dir': function (param) {
    return function (el) {
      while (el) {
        if (el.dir) return el.dir === param;
        el = el.parentNode;
      }
    };
  },
  ':scope': function (el, con) {
    var context = con || el.ownerDocument;
    if (context.nodeType === 9) {
      return el === context.documentElement;
    }
    return el === context;
  },
  ':any-link': function (el) {
    return typeof el.href === 'string';
  },
  ':local-link': function (el) {
    if (el.nodeName) {
      return el.href && el.host === window.location.host;
    }
    var param = +el + 1;
    return function (el) {
      if (!el.href) return;
      var url = window.location + '',
        href = el + '';
      return truncateUrl(url, param) === truncateUrl(href, param);
    };
  },
  ':default': function (el) {
    return !!el.defaultSelected;
  },
  ':valid': function (el) {
    return el.willValidate || el.validity && el.validity.valid;
  },
  ':invalid': function (el) {
    return !selectors[':valid'](el);
  },
  ':in-range': function (el) {
    return el.value > el.min && el.value <= el.max;
  },
  ':out-of-range': function (el) {
    return !selectors[':in-range'](el);
  },
  ':required': function (el) {
    return !!el.required;
  },
  ':optional': function (el) {
    return !el.required;
  },
  ':read-only': function (el) {
    if (el.readOnly) return true;
    var attr = el.getAttribute('contenteditable'),
      prop = el.contentEditable,
      name = el.nodeName.toLowerCase();
    name = name !== 'input' && name !== 'textarea';
    return (name || el.disabled) && attr == null && prop !== 'true';
  },
  ':read-write': function (el) {
    return !selectors[':read-only'](el);
  },
  ':hover': function () {
    throw new Error(':hover is not supported.');
  },
  ':active': function () {
    throw new Error(':active is not supported.');
  },
  ':link': function () {
    throw new Error(':link is not supported.');
  },
  ':visited': function () {
    throw new Error(':visited is not supported.');
  },
  ':column': function () {
    throw new Error(':column is not supported.');
  },
  ':nth-column': function () {
    throw new Error(':nth-column is not supported.');
  },
  ':nth-last-column': function () {
    throw new Error(':nth-last-column is not supported.');
  },
  ':current': function () {
    throw new Error(':current is not supported.');
  },
  ':past': function () {
    throw new Error(':past is not supported.');
  },
  ':future': function () {
    throw new Error(':future is not supported.');
  },
  // Non-standard, for compatibility purposes.
  ':contains': function (param) {
    return function (el) {
      var text = el.innerText || el.textContent || el.value || '';
      return text.indexOf(param) !== -1;
    };
  },
  ':has': function (param) {
    return function (el) {
      return find(param, el).length > 0;
    };
  }
  // Potentially add more pseudo selectors for
  // compatibility with sizzle and most other
  // selector engines (?).
};

/**
 * Attribute Operators
 */

var operators = {
  '-': function () {
    return true;
  },
  '=': function (attr, val) {
    return attr === val;
  },
  '*=': function (attr, val) {
    return attr.indexOf(val) !== -1;
  },
  '~=': function (attr, val) {
    var i, s, f, l;
    for (s = 0; true; s = i + 1) {
      i = attr.indexOf(val, s);
      if (i === -1) return false;
      f = attr[i - 1];
      l = attr[i + val.length];
      if ((!f || f === ' ') && (!l || l === ' ')) return true;
    }
  },
  '|=': function (attr, val) {
    var i = attr.indexOf(val),
      l;
    if (i !== 0) return;
    l = attr[i + val.length];
    return l === '-' || !l;
  },
  '^=': function (attr, val) {
    return attr.indexOf(val) === 0;
  },
  '$=': function (attr, val) {
    var i = attr.lastIndexOf(val);
    return i !== -1 && i + val.length === attr.length;
  },
  // non-standard
  '!=': function (attr, val) {
    return attr !== val;
  }
};

/**
 * Combinator Logic
 */

var combinators = {
  ' ': function (test) {
    return function (el) {
      /*jshint -W084 */
      while (el = el.parentNode) {
        if (test(el)) return el;
      }
    };
  },
  '>': function (test) {
    return function (el) {
      /*jshint -W084 */
      if (el = el.parentNode) {
        return test(el) && el;
      }
    };
  },
  '+': function (test) {
    return function (el) {
      /*jshint -W084 */
      if (el = prev(el)) {
        return test(el) && el;
      }
    };
  },
  '~': function (test) {
    return function (el) {
      /*jshint -W084 */
      while (el = prev(el)) {
        if (test(el)) return el;
      }
    };
  },
  'noop': function (test) {
    return function (el) {
      return test(el) && el;
    };
  },
  'ref': function (test, name) {
    var node;
    function ref(el) {
      var doc = el.ownerDocument,
        nodes = doc.getElementsByTagName('*'),
        i = nodes.length;
      while (i--) {
        node = nodes[i];
        if (ref.test(el)) {
          node = null;
          return true;
        }
      }
      node = null;
    }
    ref.combinator = function (el) {
      if (!node || !node.getAttribute) return;
      var attr = node.getAttribute(name) || '';
      if (attr[0] === '#') attr = attr.substring(1);
      if (attr === el.id && test(node)) {
        return node;
      }
    };
    return ref;
  }
};

/**
 * Grammar
 */

var rules = {
  escape: /\\(?:[^0-9A-Fa-f\r\n]|[0-9A-Fa-f]{1,6}[\r\n\t ]?)/g,
  str_escape: /(escape)|\\(\n|\r\n?|\f)/g,
  nonascii: /[\u00A0-\uFFFF]/,
  cssid: /(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,
  qname: /^ *(cssid|\*)/,
  simple: /^(?:([.#]cssid)|pseudo|attr)/,
  ref: /^ *\/(cssid)\/ */,
  combinator: /^(?: +([^ \w*.#\\]) +|( )+|([^ \w*.#\\]))(?! *$)/,
  attr: /^\[(cssid)(?:([^\w]?=)(inside))?\]/,
  pseudo: /^(:cssid)(?:\((inside)\))?/,
  inside: /(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|<[^"'>]*>|\\["'>]|[^"'>])*/,
  ident: /^(cssid)$/
};
rules.cssid = replace(rules.cssid, 'nonascii', rules.nonascii);
rules.cssid = replace(rules.cssid, 'escape', rules.escape);
rules.qname = replace(rules.qname, 'cssid', rules.cssid);
rules.simple = replace(rules.simple, 'cssid', rules.cssid);
rules.ref = replace(rules.ref, 'cssid', rules.cssid);
rules.attr = replace(rules.attr, 'cssid', rules.cssid);
rules.pseudo = replace(rules.pseudo, 'cssid', rules.cssid);
rules.inside = replace(rules.inside, '[^"\'>]*', rules.inside);
rules.attr = replace(rules.attr, 'inside', makeInside('\\[', '\\]'));
rules.pseudo = replace(rules.pseudo, 'inside', makeInside('\\(', '\\)'));
rules.simple = replace(rules.simple, 'pseudo', rules.pseudo);
rules.simple = replace(rules.simple, 'attr', rules.attr);
rules.ident = replace(rules.ident, 'cssid', rules.cssid);
rules.str_escape = replace(rules.str_escape, 'escape', rules.escape);

/**
 * Compiling
 */

var compile = function (sel_) {
  var sel = sel_.replace(/^\s+|\s+$/g, ''),
    test,
    filter = [],
    buff = [],
    subject,
    qname,
    cap,
    op,
    ref;

  /*jshint -W084 */
  while (sel) {
    if (cap = rules.qname.exec(sel)) {
      sel = sel.substring(cap[0].length);
      qname = decodeid(cap[1]);
      buff.push(tok(qname, true));
    } else if (cap = rules.simple.exec(sel)) {
      sel = sel.substring(cap[0].length);
      qname = '*';
      buff.push(tok(qname, true));
      buff.push(tok(cap));
    } else {
      throw new SyntaxError('Invalid selector.');
    }
    while (cap = rules.simple.exec(sel)) {
      sel = sel.substring(cap[0].length);
      buff.push(tok(cap));
    }
    if (sel[0] === '!') {
      sel = sel.substring(1);
      subject = makeSubject();
      subject.qname = qname;
      buff.push(subject.simple);
    }
    if (cap = rules.ref.exec(sel)) {
      sel = sel.substring(cap[0].length);
      ref = combinators.ref(makeSimple(buff), decodeid(cap[1]));
      filter.push(ref.combinator);
      buff = [];
      continue;
    }
    if (cap = rules.combinator.exec(sel)) {
      sel = sel.substring(cap[0].length);
      op = cap[1] || cap[2] || cap[3];
      if (op === ',') {
        filter.push(combinators.noop(makeSimple(buff)));
        break;
      }
    } else {
      op = 'noop';
    }
    if (!combinators[op]) {
      throw new SyntaxError('Bad combinator.');
    }
    filter.push(combinators[op](makeSimple(buff)));
    buff = [];
  }
  test = makeTest(filter);
  test.qname = qname;
  test.sel = sel;
  if (subject) {
    subject.lname = test.qname;
    subject.test = test;
    subject.qname = subject.qname;
    subject.sel = test.sel;
    test = subject;
  }
  if (ref) {
    ref.test = test;
    ref.qname = test.qname;
    ref.sel = test.sel;
    test = ref;
  }
  return test;
};
var tok = function (cap, qname) {
  // qname
  if (qname) {
    return cap === '*' ? selectors['*'] : selectors.type(cap);
  }

  // class/id
  if (cap[1]) {
    return cap[1][0] === '.'
    // XXX unescape here?  or in attr?
    ? selectors.attr('class', '~=', decodeid(cap[1].substring(1)), false) : selectors.attr('id', '=', decodeid(cap[1].substring(1)), false);
  }

  // pseudo-name
  // inside-pseudo
  if (cap[2]) {
    return cap[3] ? selectors[decodeid(cap[2])](unquote(cap[3])) : selectors[decodeid(cap[2])];
  }

  // attr name
  // attr op
  // attr value
  if (cap[4]) {
    var value = cap[6];
    var i = /["'\s]\s*I$/i.test(value);
    if (i) {
      value = value.replace(/\s*I$/i, '');
    }
    return selectors.attr(decodeid(cap[4]), cap[5] || '-', unquote(value), i);
  }
  throw new SyntaxError('Unknown Selector.');
};
var makeSimple = function (func) {
  var l = func.length,
    i;

  // Potentially make sure
  // `el` is truthy.
  if (l < 2) return func[0];
  return function (el) {
    if (!el) return;
    for (i = 0; i < l; i++) {
      if (!func[i](el)) return;
    }
    return true;
  };
};
var makeTest = function (func) {
  if (func.length < 2) {
    return function (el) {
      return !!func[0](el);
    };
  }
  return function (el) {
    var i = func.length;
    while (i--) {
      if (!(el = func[i](el))) return;
    }
    return true;
  };
};
var makeSubject = function () {
  var target;
  function subject(el) {
    var node = el.ownerDocument,
      scope = node.getElementsByTagName(subject.lname),
      i = scope.length;
    while (i--) {
      if (subject.test(scope[i]) && target === el) {
        target = null;
        return true;
      }
    }
    target = null;
  }
  subject.simple = function (el) {
    target = el;
    return true;
  };
  return subject;
};
var compileGroup = function (sel) {
  var test = compile(sel),
    tests = [test];
  while (test.sel) {
    test = compile(test.sel);
    tests.push(test);
  }
  if (tests.length < 2) return test;
  return function (el) {
    var l = tests.length,
      i = 0;
    for (; i < l; i++) {
      if (tests[i](el)) return true;
    }
  };
};

/**
 * Selection
 */

var find = function (sel, node) {
  var results = [],
    test = compile(sel),
    scope = node.getElementsByTagName(test.qname),
    i = 0,
    el;

  /*jshint -W084 */
  while (el = scope[i++]) {
    if (test(el)) results.push(el);
  }
  if (test.sel) {
    while (test.sel) {
      test = compile(test.sel);
      scope = node.getElementsByTagName(test.qname);
      i = 0;
      /*jshint -W084 */
      while (el = scope[i++]) {
        if (test(el) && indexOf.call(results, el) === -1) {
          results.push(el);
        }
      }
    }
    results.sort(order);
  }
  return results;
};

/**
 * Expose
 */

module.exports = exports = function (sel, context) {
  /* when context isn't a DocumentFragment and the selector is simple: */
  var id, r;
  if (context.nodeType !== 11 && sel.indexOf(' ') === -1) {
    if (sel[0] === '#' && context.rooted && /^#[A-Z_][-A-Z0-9_]*$/i.test(sel)) {
      if (context.doc._hasMultipleElementsWithId) {
        id = sel.substring(1);
        if (!context.doc._hasMultipleElementsWithId(id)) {
          r = context.doc.getElementById(id);
          return r ? [r] : [];
        }
      }
    }
    if (sel[0] === '.' && /^\.\w+$/.test(sel)) {
      return context.getElementsByClassName(sel.substring(1));
    }
    if (/^\w+$/.test(sel)) {
      return context.getElementsByTagName(sel);
    }
  }
  /* do things the hard/slow way */
  return find(sel, context);
};
exports.selectors = selectors;
exports.operators = operators;
exports.combinators = combinators;
exports.matches = function (el, sel) {
  var test = {
    sel: sel
  };
  do {
    test = compile(test.sel);
    if (test(el)) {
      return true;
    }
  } while (test.sel);
  return false;
};

/***/ }),

/***/ 78602:
/*!*******************************************!*\
  !*** ./node_modules/domino/lib/sloppy.js ***!
  \*******************************************/
/***/ (function(module) {

/* Domino uses sloppy-mode features (in particular, `with`) for a few
 * minor things.  This file encapsulates all the sloppiness; every
 * other module should be strict. */
/* jshint strict: false */
/* jshint evil: true */
/* jshint -W085 */
module.exports = {
  Window_run: function _run(code, file) {
    if (file) code += '\n//@ sourceURL=' + file;
    with (this) eval(code);
  },
  EventHandlerBuilder_build: function build() {
    try {
      with (this.document.defaultView || Object.create(null)) with (this.document) with (this.form) with (this.element) return eval("(function(event){" + this.body + "})");
    } catch (err) {
      return function () {
        throw err;
      };
    }
  }
};

/***/ }),

/***/ 5923:
/*!****************************************!*\
  !*** ./node_modules/domino/lib/svg.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var Element = __webpack_require__(/*! ./Element */ 60601);
var defineElement = __webpack_require__(/*! ./defineElement */ 31432);
var utils = __webpack_require__(/*! ./utils */ 7976);
var CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ 84361);
var svgElements = exports.elements = {};
var svgNameToImpl = Object.create(null);
exports.createElement = function (doc, localName, prefix) {
  var impl = svgNameToImpl[localName] || SVGElement;
  return new impl(doc, localName, prefix);
};
function define(spec) {
  return defineElement(spec, SVGElement, svgElements, svgNameToImpl);
}
var SVGElement = define({
  superclass: Element,
  ctor: function SVGElement(doc, localName, prefix) {
    Element.call(this, doc, localName, utils.NAMESPACE.SVG, prefix);
  },
  props: {
    style: {
      get: function () {
        if (!this._style) this._style = new CSSStyleDeclaration(this);
        return this._style;
      }
    }
  }
});
define({
  ctor: function SVGSVGElement(doc, localName, prefix) {
    SVGElement.call(this, doc, localName, prefix);
  },
  tag: 'svg',
  props: {
    createSVGRect: {
      value: function () {
        return exports.createElement(this.ownerDocument, 'rect', null);
      }
    }
  }
});
define({
  tags: ['a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor', 'animateMotion', 'animateTransform', 'circle', 'clipPath', 'color-profile', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignObject', 'g', 'glyph', 'glyphRef', 'hkern', 'image', 'line', 'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script', 'set', 'stop', 'style', 'switch', 'symbol', 'text', 'textPath', 'title', 'tref', 'tspan', 'use', 'view', 'vkern']
});

/***/ }),

/***/ 7976:
/*!******************************************!*\
  !*** ./node_modules/domino/lib/utils.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var DOMException = __webpack_require__(/*! ./DOMException */ 90864);
var ERR = DOMException;
var isApiWritable = (__webpack_require__(/*! ./config */ 63535).isApiWritable);
exports.NAMESPACE = {
  HTML: 'http://www.w3.org/1999/xhtml',
  XML: 'http://www.w3.org/XML/1998/namespace',
  XMLNS: 'http://www.w3.org/2000/xmlns/',
  MATHML: 'http://www.w3.org/1998/Math/MathML',
  SVG: 'http://www.w3.org/2000/svg',
  XLINK: 'http://www.w3.org/1999/xlink'
};

//
// Shortcut functions for throwing errors of various types.
//
exports.IndexSizeError = function () {
  throw new DOMException(ERR.INDEX_SIZE_ERR);
};
exports.HierarchyRequestError = function () {
  throw new DOMException(ERR.HIERARCHY_REQUEST_ERR);
};
exports.WrongDocumentError = function () {
  throw new DOMException(ERR.WRONG_DOCUMENT_ERR);
};
exports.InvalidCharacterError = function () {
  throw new DOMException(ERR.INVALID_CHARACTER_ERR);
};
exports.NoModificationAllowedError = function () {
  throw new DOMException(ERR.NO_MODIFICATION_ALLOWED_ERR);
};
exports.NotFoundError = function () {
  throw new DOMException(ERR.NOT_FOUND_ERR);
};
exports.NotSupportedError = function () {
  throw new DOMException(ERR.NOT_SUPPORTED_ERR);
};
exports.InvalidStateError = function () {
  throw new DOMException(ERR.INVALID_STATE_ERR);
};
exports.SyntaxError = function () {
  throw new DOMException(ERR.SYNTAX_ERR);
};
exports.InvalidModificationError = function () {
  throw new DOMException(ERR.INVALID_MODIFICATION_ERR);
};
exports.NamespaceError = function () {
  throw new DOMException(ERR.NAMESPACE_ERR);
};
exports.InvalidAccessError = function () {
  throw new DOMException(ERR.INVALID_ACCESS_ERR);
};
exports.TypeMismatchError = function () {
  throw new DOMException(ERR.TYPE_MISMATCH_ERR);
};
exports.SecurityError = function () {
  throw new DOMException(ERR.SECURITY_ERR);
};
exports.NetworkError = function () {
  throw new DOMException(ERR.NETWORK_ERR);
};
exports.AbortError = function () {
  throw new DOMException(ERR.ABORT_ERR);
};
exports.UrlMismatchError = function () {
  throw new DOMException(ERR.URL_MISMATCH_ERR);
};
exports.QuotaExceededError = function () {
  throw new DOMException(ERR.QUOTA_EXCEEDED_ERR);
};
exports.TimeoutError = function () {
  throw new DOMException(ERR.TIMEOUT_ERR);
};
exports.InvalidNodeTypeError = function () {
  throw new DOMException(ERR.INVALID_NODE_TYPE_ERR);
};
exports.DataCloneError = function () {
  throw new DOMException(ERR.DATA_CLONE_ERR);
};
exports.nyi = function () {
  throw new Error("NotYetImplemented");
};
exports.shouldOverride = function () {
  throw new Error("Abstract function; should be overriding in subclass.");
};
exports.assert = function (expr, msg) {
  if (!expr) {
    throw new Error("Assertion failed: " + (msg || "") + "\n" + new Error().stack);
  }
};
exports.expose = function (src, c) {
  for (var n in src) {
    Object.defineProperty(c.prototype, n, {
      value: src[n],
      writable: isApiWritable
    });
  }
};
exports.merge = function (a, b) {
  for (var n in b) {
    a[n] = b[n];
  }
};

// Compare two nodes based on their document order. This function is intended
// to be passed to sort(). Assumes that the array being sorted does not
// contain duplicates.  And that all nodes are connected and comparable.
// Clever code by ppk via jeresig.
exports.documentOrder = function (n, m) {
  /* jshint bitwise: false */
  return 3 - (n.compareDocumentPosition(m) & 6);
};
exports.toASCIILowerCase = function (s) {
  return s.replace(/[A-Z]+/g, function (c) {
    return c.toLowerCase();
  });
};
exports.toASCIIUpperCase = function (s) {
  return s.replace(/[a-z]+/g, function (c) {
    return c.toUpperCase();
  });
};

/***/ }),

/***/ 71018:
/*!*********************************************!*\
  !*** ./node_modules/domino/lib/xmlnames.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


// This grammar is from the XML and XML Namespace specs. It specifies whether
// a string (such as an element or attribute name) is a valid Name or QName.
//
// Name           ::= NameStartChar (NameChar)*
// NameStartChar  ::= ":" | [A-Z] | "_" | [a-z] |
//                    [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] |
//                    [#x370-#x37D] | [#x37F-#x1FFF] |
//                    [#x200C-#x200D] | [#x2070-#x218F] |
//                    [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
//                    [#xF900-#xFDCF] | [#xFDF0-#xFFFD] |
//                    [#x10000-#xEFFFF]
//
// NameChar       ::= NameStartChar | "-" | "." | [0-9] |
//                    #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//
// QName          ::= PrefixedName| UnprefixedName
// PrefixedName   ::= Prefix ':' LocalPart
// UnprefixedName ::= LocalPart
// Prefix         ::= NCName
// LocalPart      ::= NCName
// NCName         ::= Name - (Char* ':' Char*)
//                    # An XML Name, minus the ":"
//
exports.isValidName = isValidName;
exports.isValidQName = isValidQName;

// Most names will be ASCII only. Try matching against simple regexps first
var simplename = /^[_:A-Za-z][-.:\w]+$/;
var simpleqname = /^([_A-Za-z][-.\w]+|[_A-Za-z][-.\w]+:[_A-Za-z][-.\w]+)$/;

// If the regular expressions above fail, try more complex ones that work
// for any identifiers using codepoints from the Unicode BMP
var ncnamestartchars = "_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02ff\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
var ncnamechars = "-._A-Za-z0-9\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02ff\u0300-\u037D\u037F-\u1FFF\u200C\u200D\u203f\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
var ncname = "[" + ncnamestartchars + "][" + ncnamechars + "]*";
var namestartchars = ncnamestartchars + ":";
var namechars = ncnamechars + ":";
var name = new RegExp("^[" + namestartchars + "]" + "[" + namechars + "]*$");
var qname = new RegExp("^(" + ncname + "|" + ncname + ":" + ncname + ")$");

// XML says that these characters are also legal:
// [#x10000-#xEFFFF].  So if the patterns above fail, and the
// target string includes surrogates, then try the following
// patterns that allow surrogates and then run an extra validation
// step to make sure that the surrogates are in valid pairs and in
// the right range.  Note that since the characters \uf0000 to \u1f0000
// are not allowed, it means that the high surrogate can only go up to
// \uDB7f instead of \uDBFF.
var hassurrogates = /[\uD800-\uDB7F\uDC00-\uDFFF]/;
var surrogatechars = /[\uD800-\uDB7F\uDC00-\uDFFF]/g;
var surrogatepairs = /[\uD800-\uDB7F][\uDC00-\uDFFF]/g;

// Modify the variables above to allow surrogates
ncnamestartchars += "\uD800-\uDB7F\uDC00-\uDFFF";
ncnamechars += "\uD800-\uDB7F\uDC00-\uDFFF";
ncname = "[" + ncnamestartchars + "][" + ncnamechars + "]*";
namestartchars = ncnamestartchars + ":";
namechars = ncnamechars + ":";

// Build another set of regexps that include surrogates
var surrogatename = new RegExp("^[" + namestartchars + "]" + "[" + namechars + "]*$");
var surrogateqname = new RegExp("^(" + ncname + "|" + ncname + ":" + ncname + ")$");
function isValidName(s) {
  if (simplename.test(s)) return true; // Plain ASCII
  if (name.test(s)) return true; // Unicode BMP

  // Maybe the tests above failed because s includes surrogate pairs
  // Most likely, though, they failed for some more basic syntax problem
  if (!hassurrogates.test(s)) return false;

  // Is the string a valid name if we allow surrogates?
  if (!surrogatename.test(s)) return false;

  // Finally, are the surrogates all correctly paired up?
  var chars = s.match(surrogatechars),
    pairs = s.match(surrogatepairs);
  return pairs !== null && 2 * pairs.length === chars.length;
}
function isValidQName(s) {
  if (simpleqname.test(s)) return true; // Plain ASCII
  if (qname.test(s)) return true; // Unicode BMP

  if (!hassurrogates.test(s)) return false;
  if (!surrogateqname.test(s)) return false;
  var chars = s.match(surrogatechars),
    pairs = s.match(surrogatepairs);
  return pairs !== null && 2 * pairs.length === chars.length;
}

/***/ }),

/***/ 87421:
/*!***************************************!*\
  !*** ./node_modules/xhr2/lib/xhr2.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// Generated by CoffeeScript 2.5.1
(function () {
  // This file's name is set up in such a way that it will always show up first in
  // the list of files given to coffee --join, so that the other files can assume
  // that XMLHttpRequestEventTarget was already defined.

  // The DOM EventTarget subclass used by XMLHttpRequest.

  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest
  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;
  XMLHttpRequestEventTarget = function () {
    class XMLHttpRequestEventTarget {
      // @private
      // This is an abstract class and should not be instantiated directly.
      constructor() {
        this.onloadstart = null;
        this.onprogress = null;
        this.onabort = null;
        this.onerror = null;
        this.onload = null;
        this.ontimeout = null;
        this.onloadend = null;
        this._listeners = {};
      }

      // Adds a new-style listener for one of the XHR events.

      // @see http://www.w3.org/TR/XMLHttpRequest/#events

      // @param {String} eventType an XHR event type, such as 'readystatechange'
      // @param {function(ProgressEvent)} listener function that will be called when
      //   the event fires
      // @return {undefined} undefined
      addEventListener(eventType, listener) {
        var base;
        eventType = eventType.toLowerCase();
        (base = this._listeners)[eventType] || (base[eventType] = []);
        this._listeners[eventType].push(listener);
        return void 0;
      }

      // Removes an event listener added by calling addEventListener.

      // @param {String} eventType an XHR event type, such as 'readystatechange'
      // @param {function(ProgressEvent)} listener the value passed in a previous
      //   call to addEventListener.
      // @return {undefined} undefined
      removeEventListener(eventType, listener) {
        var index;
        eventType = eventType.toLowerCase();
        if (this._listeners[eventType]) {
          index = this._listeners[eventType].indexOf(listener);
          if (index !== -1) {
            this._listeners[eventType].splice(index, 1);
          }
        }
        return void 0;
      }

      // Calls all the listeners for an event.

      // @param {ProgressEvent} event the event to be dispatched
      // @return {undefined} undefined
      dispatchEvent(event) {
        var eventType, j, len, listener, listeners;
        event.currentTarget = event.target = this;
        eventType = event.type;
        if (listeners = this._listeners[eventType]) {
          for (j = 0, len = listeners.length; j < len; j++) {
            listener = listeners[j];
            listener.call(this, event);
          }
        }
        if (listener = this[`on${eventType}`]) {
          listener.call(this, event);
        }
        return void 0;
      }
    }
    ;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'loadstart' event
    XMLHttpRequestEventTarget.prototype.onloadstart = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'progress' event
    XMLHttpRequestEventTarget.prototype.onprogress = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'abort' event
    XMLHttpRequestEventTarget.prototype.onabort = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'error' event
    XMLHttpRequestEventTarget.prototype.onerror = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'load' event
    XMLHttpRequestEventTarget.prototype.onload = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'timeout' event
    XMLHttpRequestEventTarget.prototype.ontimeout = null;

    // @property {function(ProgressEvent)} DOM level 0-style handler
    //   for the 'loadend' event
    XMLHttpRequestEventTarget.prototype.onloadend = null;
    return XMLHttpRequestEventTarget;
  }.call(this);

  // This file's name is set up in such a way that it will always show up second
  // in the list of files given to coffee --join, so it can use the
  // XMLHttpRequestEventTarget definition and so that the other files can assume
  // that XMLHttpRequest was already defined.
  http = __webpack_require__(/*! http */ 58611);
  https = __webpack_require__(/*! https */ 65692);
  os = __webpack_require__(/*! os */ 70857);
  url = __webpack_require__(/*! url */ 87016);
  XMLHttpRequest = function () {
    // The ECMAScript HTTP API.

    // @see http://www.w3.org/TR/XMLHttpRequest/#introduction
    class XMLHttpRequest extends XMLHttpRequestEventTarget {
      // Creates a new request.

      // @param {Object} options one or more of the options below
      // @option options {Boolean} anon if true, the request's anonymous flag
      //   will be set
      // @see http://www.w3.org/TR/XMLHttpRequest/#constructors
      // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag
      constructor(options) {
        super();
        this.onreadystatechange = null;
        this._anonymous = options && options.anon;
        this.readyState = XMLHttpRequest.UNSENT;
        this.response = null;
        this.responseText = '';
        this.responseType = '';
        this.responseURL = '';
        this.status = 0;
        this.statusText = '';
        this.timeout = 0;
        this.upload = new XMLHttpRequestUpload(this);
        this._method = null; // String
        this._url = null; // Return value of url.parse()
        this._sync = false;
        this._headers = null; // Object<String, String>
        this._loweredHeaders = null; // Object<lowercase String, String>
        this._mimeOverride = null;
        this._request = null; // http.ClientRequest
        this._response = null; // http.ClientResponse
        this._responseParts = null; // Array<Buffer, String>
        this._responseHeaders = null; // Object<lowercase String, String>
        this._aborting = null;
        this._error = null;
        this._loadedBytes = 0;
        this._totalBytes = 0;
        this._lengthComputable = false;
      }

      // Sets the XHR's method, URL, synchronous flag, and authentication params.

      // @param {String} method the HTTP method to be used
      // @param {String} url the URL that the request will be made to
      // @param {?Boolean} async if false, the XHR should be processed
      //   synchronously; true by default
      // @param {?String} user the user credential to be used in HTTP basic
      //   authentication
      // @param {?String} password the password credential to be used in HTTP basic
      //   authentication
      // @return {undefined} undefined
      // @throw {SecurityError} method is not one of the allowed methods
      // @throw {SyntaxError} urlString is not a valid URL
      // @throw {Error} the URL contains an unsupported protocol; the supported
      //   protocols are file, http and https
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method
      open(method, url, async, user, password) {
        var xhrUrl;
        method = method.toUpperCase();
        if (method in this._restrictedMethods) {
          throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);
        }
        xhrUrl = this._parseUrl(url);
        if (async === void 0) {
          async = true;
        }
        switch (this.readyState) {
          case XMLHttpRequest.UNSENT:
          case XMLHttpRequest.OPENED:
          case XMLHttpRequest.DONE:
            // Nothing to do here.
            null;
            break;
          case XMLHttpRequest.HEADERS_RECEIVED:
          case XMLHttpRequest.LOADING:
            // TODO(pwnall): terminate abort(), terminate send()
            null;
        }
        this._method = method;
        this._url = xhrUrl;
        this._sync = !async;
        this._headers = {};
        this._loweredHeaders = {};
        this._mimeOverride = null;
        this._setReadyState(XMLHttpRequest.OPENED);
        this._request = null;
        this._response = null;
        this.status = 0;
        this.statusText = '';
        this._responseParts = [];
        this._responseHeaders = null;
        this._loadedBytes = 0;
        this._totalBytes = 0;
        this._lengthComputable = false;
        return void 0;
      }

      // Appends a header to the list of author request headers.

      // @param {String} name the HTTP header name
      // @param {String} value the HTTP header value
      // @return {undefined} undefined
      // @throw {InvalidStateError} readyState is not OPENED
      // @throw {SyntaxError} name is not a valid HTTP header name or value is not
      //   a valid HTTP header value
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method
      setRequestHeader(name, value) {
        var loweredName;
        if (this.readyState !== XMLHttpRequest.OPENED) {
          throw new InvalidStateError("XHR readyState must be OPENED");
        }
        loweredName = name.toLowerCase();
        if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
          console.warn(`Refused to set unsafe header \"${name}\"`);
          return void 0;
        }
        value = value.toString();
        if (loweredName in this._loweredHeaders) {
          // Combine value with the existing header value.
          name = this._loweredHeaders[loweredName];
          this._headers[name] = this._headers[name] + ', ' + value;
        } else {
          // New header.
          this._loweredHeaders[loweredName] = name;
          this._headers[name] = value;
        }
        return void 0;
      }

      // Initiates the request.

      // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for
      //   GET and HEAD requests
      // @return {undefined} undefined
      // @throw {InvalidStateError} readyState is not OPENED
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method
      send(data) {
        if (this.readyState !== XMLHttpRequest.OPENED) {
          throw new InvalidStateError("XHR readyState must be OPENED");
        }
        if (this._request) {
          throw new InvalidStateError("send() already called");
        }
        switch (this._url.protocol) {
          case 'file:':
            this._sendFile(data);
            break;
          case 'http:':
          case 'https:':
            this._sendHttp(data);
            break;
          default:
            throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);
        }
        return void 0;
      }

      // Cancels the network activity performed by this request.

      // @return {undefined} undefined
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method
      abort() {
        if (!this._request) {
          return;
        }
        this._request.abort();
        this._setError();
        this._dispatchProgress('abort');
        this._dispatchProgress('loadend');
        return void 0;
      }

      // Returns a header value in the HTTP response for this XHR.

      // @param {String} name case-insensitive HTTP header name
      // @return {?String} value the value of the header whose name matches the
      //   given name, or null if there is no such header
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
      getResponseHeader(name) {
        var loweredName;
        if (!this._responseHeaders) {
          return null;
        }
        loweredName = name.toLowerCase();
        if (loweredName in this._responseHeaders) {
          return this._responseHeaders[loweredName];
        } else {
          return null;
        }
      }

      // Returns all the HTTP headers in this XHR's response.

      // @return {String} header lines separated by CR LF, where each header line
      //   has the name and value separated by a ": " (colon, space); the empty
      //   string is returned if the headers are not available
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method
      getAllResponseHeaders() {
        var lines, name, value;
        if (!this._responseHeaders) {
          return '';
        }
        lines = function () {
          var ref, results;
          ref = this._responseHeaders;
          results = [];
          for (name in ref) {
            value = ref[name];
            results.push(`${name}: ${value}`);
          }
          return results;
        }.call(this);
        return lines.join("\r\n");
      }

      // Overrides the Content-Type

      // @return {undefined} undefined
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method
      overrideMimeType(newMimeType) {
        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
          throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
        }
        this._mimeOverride = newMimeType.toLowerCase();
        return void 0;
      }

      // Network configuration not exposed in the XHR API.

      // Although the XMLHttpRequest specification calls itself "ECMAScript HTTP",
      // it assumes that requests are always performed in the context of a browser
      // application, where some network parameters are set by the browser user and
      // should not be modified by Web applications. This API provides access to
      // these network parameters.

      // NOTE: this is not in the XMLHttpRequest API, and will not work in
      // browsers.  It is a stable node-xhr2 API.

      // @param {Object} options one or more of the options below
      // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent
      //   property (the agent used for HTTP requests)
      // @option options {?https.Agent} httpsAgent the value for the
      //   nodejsHttpsAgent property (the agent used for HTTPS requests)
      // @return {undefined} undefined
      nodejsSet(options) {
        var baseUrl, parsedUrl;
        if ('httpAgent' in options) {
          this.nodejsHttpAgent = options.httpAgent;
        }
        if ('httpsAgent' in options) {
          this.nodejsHttpsAgent = options.httpsAgent;
        }
        if ('baseUrl' in options) {
          baseUrl = options.baseUrl;
          if (baseUrl !== null) {
            parsedUrl = url.parse(baseUrl, false, true);
            if (!parsedUrl.protocol) {
              throw new SyntaxError("baseUrl must be an absolute URL");
            }
          }
          this.nodejsBaseUrl = baseUrl;
        }
        return void 0;
      }

      // Default settings for the network configuration not exposed in the XHR API.

      // NOTE: this is not in the XMLHttpRequest API, and will not work in
      // browsers.  It is a stable node-xhr2 API.

      // @param {Object} options one or more of the options below
      // @option options {?http.Agent} httpAgent the default value for the
      //   nodejsHttpAgent property (the agent used for HTTP requests)
      // @option options {https.Agent} httpsAgent the default value for the
      //   nodejsHttpsAgent property (the agent used for HTTPS requests)
      // @return {undefined} undefined
      // @see XMLHttpRequest.nodejsSet
      static nodejsSet(options) {
        // "this" will be set to XMLHttpRequest.prototype, so the instance nodejsSet
        // operates on default property values.
        XMLHttpRequest.prototype.nodejsSet(options);
        return void 0;
      }

      // Sets the readyState property and fires the readystatechange event.

      // @private
      // @param {Number} newReadyState the new value of readyState
      // @return {undefined} undefined
      _setReadyState(newReadyState) {
        var event;
        this.readyState = newReadyState;
        event = new ProgressEvent('readystatechange');
        this.dispatchEvent(event);
        return void 0;
      }

      // XMLHttpRequest#send() implementation for the file: protocol.

      // @private
      _sendFile() {
        if (this._url.method !== 'GET') {
          throw new NetworkError('The file protocol only supports GET');
        }
        throw new Error("Protocol file: not implemented");
      }

      // XMLHttpRequest#send() implementation for the http: and https: protocols.

      // @private
      // This method sets the instance variables and calls _sendHxxpRequest(), which
      // is responsible for building a node.js request and firing it off. The code
      // in _sendHxxpRequest() is separated off so it can be reused when handling
      // redirects.

      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method
      _sendHttp(data) {
        if (this._sync) {
          throw new Error("Synchronous XHR processing not implemented");
        }
        if (data != null && (this._method === 'GET' || this._method === 'HEAD')) {
          console.warn(`Discarding entity body for ${this._method} requests`);
          data = null;
        } else {
          // Send Content-Length: 0
          data || (data = '');
        }
        // NOTE: this is called before finalizeHeaders so that the uploader can
        //       figure out Content-Length and Content-Type.
        this.upload._setData(data);
        this._finalizeHeaders();
        this._sendHxxpRequest();
        return void 0;
      }

      // Sets up and fires off a HTTP/HTTPS request using the node.js API.

      // @private
      // This method contains the bulk of the XMLHttpRequest#send() implementation,
      // and is also used to issue new HTTP requests when handling HTTP redirects.

      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method
      _sendHxxpRequest() {
        var agent, hxxp, request;
        if (this._url.protocol === 'http:') {
          hxxp = http;
          agent = this.nodejsHttpAgent;
        } else {
          hxxp = https;
          agent = this.nodejsHttpsAgent;
        }
        request = hxxp.request({
          hostname: this._url.hostname,
          port: this._url.port,
          path: this._url.path,
          auth: this._url.auth,
          method: this._method,
          headers: this._headers,
          agent: agent
        });
        this._request = request;
        if (this.timeout) {
          request.setTimeout(this.timeout, () => {
            return this._onHttpTimeout(request);
          });
        }
        request.on('response', response => {
          return this._onHttpResponse(request, response);
        });
        request.on('error', error => {
          return this._onHttpRequestError(request, error);
        });
        this.upload._startUpload(request);
        if (this._request === request) {
          // An http error might have already fired.
          this._dispatchProgress('loadstart');
        }
        return void 0;
      }

      // Fills in the restricted HTTP headers with default values.

      // This is called right before the HTTP request is sent off.

      // @private
      // @return {undefined} undefined
      _finalizeHeaders() {
        var base;
        this._headers['Connection'] = 'keep-alive';
        this._headers['Host'] = this._url.host;
        if (this._anonymous) {
          this._headers['Referer'] = 'about:blank';
        }
        (base = this._headers)['User-Agent'] || (base['User-Agent'] = this._userAgent);
        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
        return void 0;
      }

      // Called when the headers of an HTTP response have been received.

      // @private
      // @param {http.ClientRequest} request the node.js ClientRequest instance that
      //   produced this response
      // @param {http.ClientResponse} response the node.js ClientResponse instance
      //   passed to
      _onHttpResponse(request, response) {
        var lengthString;
        if (this._request !== request) {
          return;
        }
        // Transparent redirection handling.
        switch (response.statusCode) {
          case 301:
          case 302:
          case 303:
          case 307:
          case 308:
            this._url = this._parseUrl(response.headers['location']);
            this._method = 'GET';
            if ('content-type' in this._loweredHeaders) {
              delete this._headers[this._loweredHeaders['content-type']];
              delete this._loweredHeaders['content-type'];
            }
            // XMLHttpRequestUpload#_finalizeHeaders() sets Content-Type directly.
            if ('Content-Type' in this._headers) {
              delete this._headers['Content-Type'];
            }
            // Restricted headers can't be set by the user, no need to check
            // loweredHeaders.
            delete this._headers['Content-Length'];
            this.upload._reset();
            this._finalizeHeaders();
            this._sendHxxpRequest();
            return;
        }
        this._response = response;
        this._response.on('data', data => {
          return this._onHttpResponseData(response, data);
        });
        this._response.on('end', () => {
          return this._onHttpResponseEnd(response);
        });
        this._response.on('close', () => {
          return this._onHttpResponseClose(response);
        });
        this.responseURL = this._url.href.split('#')[0];
        this.status = this._response.statusCode;
        this.statusText = http.STATUS_CODES[this.status];
        this._parseResponseHeaders(response);
        if (lengthString = this._responseHeaders['content-length']) {
          this._totalBytes = parseInt(lengthString);
          this._lengthComputable = true;
        } else {
          this._lengthComputable = false;
        }
        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
      }

      // Called when some data has been received on a HTTP connection.

      // @private
      // @param {http.ClientResponse} response the node.js ClientResponse instance
      //   that fired this event
      // @param {String, Buffer} data the data that has been received
      _onHttpResponseData(response, data) {
        if (this._response !== response) {
          return;
        }
        this._responseParts.push(data);
        this._loadedBytes += data.length;
        if (this.readyState !== XMLHttpRequest.LOADING) {
          this._setReadyState(XMLHttpRequest.LOADING);
        }
        return this._dispatchProgress('progress');
      }

      // Called when the HTTP request finished processing.

      // @private
      // @param {http.ClientResponse} response the node.js ClientResponse instance
      //   that fired this event
      _onHttpResponseEnd(response) {
        if (this._response !== response) {
          return;
        }
        this._parseResponse();
        this._request = null;
        this._response = null;
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('load');
        return this._dispatchProgress('loadend');
      }

      // Called when the underlying HTTP connection was closed prematurely.

      // If this method is called, it will be called after or instead of
      // onHttpResponseEnd.

      // @private
      // @param {http.ClientResponse} response the node.js ClientResponse instance
      //   that fired this event
      _onHttpResponseClose(response) {
        var request;
        if (this._response !== response) {
          return;
        }
        request = this._request;
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        return this._dispatchProgress('loadend');
      }

      // Called when the timeout set on the HTTP socket expires.

      // @private
      // @param {http.ClientRequest} request the node.js ClientRequest instance that
      //   fired this event
      _onHttpTimeout(request) {
        if (this._request !== request) {
          return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('timeout');
        return this._dispatchProgress('loadend');
      }

      // Called when something wrong happens on the HTTP socket

      // @private
      // @param {http.ClientRequest} request the node.js ClientRequest instance that
      //   fired this event
      // @param {Error} error emitted exception
      _onHttpRequestError(request, error) {
        if (this._request !== request) {
          return;
        }
        this._setError();
        request.abort();
        this._setReadyState(XMLHttpRequest.DONE);
        this._dispatchProgress('error');
        return this._dispatchProgress('loadend');
      }

      // Fires an XHR progress event.

      // @private
      // @param {String} eventType one of the XHR progress event types, such as
      //   'load' and 'progress'
      _dispatchProgress(eventType) {
        var event;
        event = new ProgressEvent(eventType);
        event.lengthComputable = this._lengthComputable;
        event.loaded = this._loadedBytes;
        event.total = this._totalBytes;
        this.dispatchEvent(event);
        return void 0;
      }

      // Sets up the XHR to reflect the fact that an error has occurred.

      // The possible errors are a network error, a timeout, or an abort.

      // @private
      _setError() {
        this._request = null;
        this._response = null;
        this._responseHeaders = null;
        this._responseParts = null;
        return void 0;
      }

      // Parses a request URL string.

      // @private
      // This method is a thin wrapper around url.parse() that normalizes HTTP
      // user/password credentials. It is used to parse the URL string passed to
      // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect
      // responses.

      // @param {String} urlString the URL to be parsed
      // @return {Object} parsed URL
      _parseUrl(urlString) {
        var absoluteUrlString, index, password, user, xhrUrl;
        if (this.nodejsBaseUrl === null) {
          absoluteUrlString = urlString;
        } else {
          absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);
        }
        xhrUrl = url.parse(absoluteUrlString, false, true);
        xhrUrl.hash = null;
        if (xhrUrl.auth && (typeof user !== "undefined" && user !== null || typeof password !== "undefined" && password !== null)) {
          index = xhrUrl.auth.indexOf(':');
          if (index === -1) {
            if (!user) {
              user = xhrUrl.auth;
            }
          } else {
            if (!user) {
              user = xhrUrl.substring(0, index);
            }
            if (!password) {
              password = xhrUrl.substring(index + 1);
            }
          }
        }
        if (user || password) {
          xhrUrl.auth = `${user}:${password}`;
        }
        return xhrUrl;
      }

      // Reads the headers from a node.js ClientResponse instance.

      // @private
      // @param {http.ClientResponse} response the response whose headers will be
      //   imported into this XMLHttpRequest's state
      // @return {undefined} undefined
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method
      _parseResponseHeaders(response) {
        var loweredName, name, ref, value;
        this._responseHeaders = {};
        ref = response.headers;
        for (name in ref) {
          value = ref[name];
          loweredName = name.toLowerCase();
          if (this._privateHeaders[loweredName]) {
            continue;
          }
          if (this._mimeOverride !== null && loweredName === 'content-type') {
            value = this._mimeOverride;
          }
          this._responseHeaders[loweredName] = value;
        }
        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {
          this._responseHeaders['content-type'] = this._mimeOverride;
        }
        return void 0;
      }

      // Sets the response and responseText properties when an XHR completes.

      // @private
      // @return {undefined} undefined
      _parseResponse() {
        var arrayBuffer, buffer, i, j, jsonError, ref, view;
        if (Buffer.concat) {
          buffer = Buffer.concat(this._responseParts);
        } else {
          // node 0.6
          buffer = this._concatBuffers(this._responseParts);
        }
        this._responseParts = null;
        switch (this.responseType) {
          case 'text':
            this._parseTextResponse(buffer);
            break;
          case 'json':
            this.responseText = null;
            try {
              this.response = JSON.parse(buffer.toString('utf-8'));
            } catch (error1) {
              jsonError = error1;
              this.response = null;
            }
            break;
          case 'buffer':
            this.responseText = null;
            this.response = buffer;
            break;
          case 'arraybuffer':
            this.responseText = null;
            arrayBuffer = new ArrayBuffer(buffer.length);
            view = new Uint8Array(arrayBuffer);
            for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              view[i] = buffer[i];
            }
            this.response = arrayBuffer;
            break;
          default:
            // TODO(pwnall): content-base detection
            this._parseTextResponse(buffer);
        }
        return void 0;
      }

      // Sets response and responseText for a 'text' response type.

      // @private
      // @param {Buffer} buffer the node.js Buffer containing the binary response
      // @return {undefined} undefined
      _parseTextResponse(buffer) {
        var e;
        try {
          this.responseText = buffer.toString(this._parseResponseEncoding());
        } catch (error1) {
          e = error1;
          // Unknown encoding.
          this.responseText = buffer.toString('binary');
        }
        this.response = this.responseText;
        return void 0;
      }

      // Figures out the string encoding of the XHR's response.

      // This is called to determine the encoding when responseText is set.

      // @private
      // @return {String} a string encoding, e.g. 'utf-8'
      _parseResponseEncoding() {
        var contentType, encoding, match;
        encoding = null;
        if (contentType = this._responseHeaders['content-type']) {
          if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
            return match[1];
          }
        }
        return 'utf-8';
      }

      // Buffer.concat implementation for node 0.6.

      // @private
      // @param {Array<Buffer>} buffers the buffers whose contents will be merged
      // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above
      _concatBuffers(buffers) {
        var buffer, j, k, len, len1, length, target;
        if (buffers.length === 0) {
          return Buffer.alloc(0);
        }
        if (buffers.length === 1) {
          return buffers[0];
        }
        length = 0;
        for (j = 0, len = buffers.length; j < len; j++) {
          buffer = buffers[j];
          length += buffer.length;
        }
        target = Buffer.alloc(length);
        length = 0;
        for (k = 0, len1 = buffers.length; k < len1; k++) {
          buffer = buffers[k];
          buffer.copy(target, length);
          length += buffer.length;
        }
        return target;
      }
    }
    ;

    // @property {function(ProgressEvent)} DOM level 0-style handler for the
    //   'readystatechange' event
    XMLHttpRequest.prototype.onreadystatechange = null;

    // @property {Number} the current state of the XHR object
    // @see http://www.w3.org/TR/XMLHttpRequest/#states
    XMLHttpRequest.prototype.readyState = null;

    // @property {String, ArrayBuffer, Buffer, Object} processed XHR response
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute
    XMLHttpRequest.prototype.response = null;

    // @property {String} response string, if responseType is '' or 'text'
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute
    XMLHttpRequest.prototype.responseText = null;

    // @property {String} sets the parsing method for the XHR response
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute
    XMLHttpRequest.prototype.responseType = null;

    // @property {Number} the HTTP
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute
    XMLHttpRequest.prototype.status = null;

    // @property {Number} milliseconds to wait for the request to complete
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute
    XMLHttpRequest.prototype.timeout = null;

    // @property {XMLHttpRequestUpload} the associated upload information
    // @see http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute
    XMLHttpRequest.prototype.upload = null;

    // readyState value before XMLHttpRequest#open() is called
    XMLHttpRequest.prototype.UNSENT = 0;

    // readyState value before XMLHttpRequest#open() is called
    XMLHttpRequest.UNSENT = 0;

    // readyState value after XMLHttpRequest#open() is called, and before
    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be
    //   called in this state
    XMLHttpRequest.prototype.OPENED = 1;

    // readyState value after XMLHttpRequest#open() is called, and before
    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be
    //   called in this state
    XMLHttpRequest.OPENED = 1;

    // readyState value after redirects have been followed and the HTTP headers of
    //   the final response have been received
    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;

    // readyState value after redirects have been followed and the HTTP headers of
    //   the final response have been received
    XMLHttpRequest.HEADERS_RECEIVED = 2;

    // readyState value when the response entity body is being received
    XMLHttpRequest.prototype.LOADING = 3;

    // readyState value when the response entity body is being received
    XMLHttpRequest.LOADING = 3;

    // readyState value after the request has been completely processed
    XMLHttpRequest.prototype.DONE = 4;

    // readyState value after the request has been completely processed
    XMLHttpRequest.DONE = 4;

    // @property {http.Agent} the agent option passed to HTTP requests

    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.
    // It is a stable node-xhr2 API that is useful for testing & going through
    // web-proxies.
    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;

    // @property {https.Agent} the agent option passed to HTTPS requests

    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.
    // It is a stable node-xhr2 API that is useful for testing & going through
    // web-proxies.
    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;

    // @property {String} the base URL that relative URLs get resolved to

    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.
    // Its browser equivalent is the base URL of the document associated with the
    // Window object. It is a stable node-xhr2 API provided for libraries such as
    // Angular Universal.
    XMLHttpRequest.prototype.nodejsBaseUrl = null;

    // HTTP methods that are disallowed in the XHR spec.

    // @private
    // @see Step 6 in http://www.w3.org/TR/XMLHttpRequest/#the-open()-method
    XMLHttpRequest.prototype._restrictedMethods = {
      CONNECT: true,
      TRACE: true,
      TRACK: true
    };

    // HTTP request headers that are disallowed in the XHR spec.

    // @private
    // @see Step 5 in
    //   http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method
    XMLHttpRequest.prototype._restrictedHeaders = {
      'accept-charset': true,
      'accept-encoding': true,
      'access-control-request-headers': true,
      'access-control-request-method': true,
      connection: true,
      'content-length': true,
      cookie: true,
      cookie2: true,
      date: true,
      dnt: true,
      expect: true,
      host: true,
      'keep-alive': true,
      origin: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      via: true
    };

    // HTTP response headers that should not be exposed according to the XHR spec.

    // @private
    // @see Step 3 in
    //     http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method
    XMLHttpRequest.prototype._privateHeaders = {
      'set-cookie': true,
      'set-cookie2': true
    };

    // The default value of the User-Agent header.
    XMLHttpRequest.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) ` + `node.js/${process.versions.node} v8/${process.versions.v8}`;
    return XMLHttpRequest;
  }.call(this);

  // XMLHttpRequest is the result of require('node-xhr2').
  module.exports = XMLHttpRequest;

  // Make node-xhr2 work as a drop-in replacement for libraries that promote the
  // following usage pattern:
  //     var XMLHttpRequest = require('xhr-library-name').XMLHttpRequest
  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  // This file defines the custom errors used in the XMLHttpRequest specification.

  // Thrown if the XHR security policy is violated.
  SecurityError = class SecurityError extends Error {
    // @private
    constructor() {
      super();
    }
  };

  // Thrown if the XHR security policy is violated.
  XMLHttpRequest.SecurityError = SecurityError;

  // Usually thrown if the XHR is in the wrong readyState for an operation.
  InvalidStateError = class InvalidStateError extends Error {
    // @private
    constructor() {
      super();
    }
  };

  // Usually thrown if the XHR is in the wrong readyState for an operation.
  InvalidStateError = class InvalidStateError extends Error {};
  XMLHttpRequest.InvalidStateError = InvalidStateError;

  // Thrown if there is a problem with the URL passed to the XHR.
  NetworkError = class NetworkError extends Error {
    // @private
    constructor() {
      super();
    }
  };

  // Thrown if parsing URLs errors out.
  XMLHttpRequest.SyntaxError = SyntaxError;
  SyntaxError = class SyntaxError extends Error {
    // @private:
    constructor() {
      super();
    }
  };
  ProgressEvent = function () {
    // http://xhr.spec.whatwg.org/#interface-progressevent
    class ProgressEvent {
      // Creates a new event.

      // @param {String} type the event type, e.g. 'readystatechange'; must be
      //   lowercased
      constructor(type) {
        this.type = type;
        this.target = null;
        this.currentTarget = null;
        this.lengthComputable = false;
        this.loaded = 0;
        this.total = 0;
      }
    }
    ;

    // Getting the time from the OS is expensive, skip on that for now.
    // @timeStamp = Date.now()

    // @property {Boolean} for compatibility with DOM events
    ProgressEvent.prototype.bubbles = false;

    // @property {Boolean} for fompatibility with DOM events
    ProgressEvent.prototype.cancelable = false;

    // @property {XMLHttpRequest} the request that caused this event
    ProgressEvent.prototype.target = null;

    // @property {Number} number of bytes that have already been downloaded or
    //   uploaded
    ProgressEvent.prototype.loaded = null;

    // @property {Boolean} true if the Content-Length response header is available
    //   and the value of the event's total property is meaningful
    ProgressEvent.prototype.lengthComputable = null;

    // @property {Number} number of bytes that will be downloaded or uploaded by
    //   the request that fired the event
    ProgressEvent.prototype.total = null;
    return ProgressEvent;
  }.call(this);

  // The XHR spec exports the ProgressEvent constructor.
  XMLHttpRequest.ProgressEvent = ProgressEvent;

  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest
  XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
    // @private
    // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is
    //   associated with
    constructor(request) {
      super();
      this._request = request;
      this._reset();
    }

    // Sets up this Upload to handle a new request.

    // @private
    // @return {undefined} undefined
    _reset() {
      this._contentType = null;
      this._body = null;
      return void 0;
    }

    // Implements the upload-related part of the send() XHR specification.

    // @private
    // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to
    //   XMLHttpRequest#send()
    // @return {undefined} undefined
    // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method
    _setData(data) {
      var body, i, j, k, offset, ref, ref1, view;
      if (typeof data === 'undefined' || data === null) {
        return;
      }
      if (typeof data === 'string') {
        // DOMString
        if (data.length !== 0) {
          this._contentType = 'text/plain;charset=UTF-8';
        }
        this._body = Buffer.from(data, 'utf8');
      } else if (Buffer.isBuffer(data)) {
        // node.js Buffer
        this._body = data;
      } else if (data instanceof ArrayBuffer) {
        // ArrayBuffer arguments were supported in an old revision of the spec.
        body = Buffer.alloc(data.byteLength);
        view = new Uint8Array(data);
        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          body[i] = view[i];
        }
        this._body = body;
      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
        // ArrayBufferView
        body = Buffer.alloc(data.byteLength);
        offset = data.byteOffset;
        view = new Uint8Array(data.buffer);
        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
          body[i] = view[i + offset];
        }
        this._body = body;
      } else {
        // NOTE: diverging from the XHR specification of coercing everything else
        //       to Strings via toString() because that behavior masks bugs and is
        //       rarely useful
        throw new Error(`Unsupported send() data ${data}`);
      }
      return void 0;
    }

    // Updates the HTTP headers right before the request is sent.

    // This is used to set data-dependent headers such as Content-Length and
    // Content-Type.

    // @private
    // @param {Object<String, String>} headers the HTTP headers to be sent
    // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header
    //   names (e.g., 'content-type') to the actual names used in the headers
    //   parameter (e.g., 'Content-Type')
    // @return {undefined} undefined
    _finalizeHeaders(headers, loweredHeaders) {
      if (this._contentType) {
        if (!('content-type' in loweredHeaders)) {
          headers['Content-Type'] = this._contentType;
        }
      }
      if (this._body) {
        // Restricted headers can't be set by the user, no need to check
        // loweredHeaders.
        headers['Content-Length'] = this._body.length.toString();
      }
      return void 0;
    }

    // Starts sending the HTTP request data.

    // @private
    // @param {http.ClientRequest} request the HTTP request
    // @return {undefined} undefined
    _startUpload(request) {
      if (this._body) {
        request.write(this._body);
      }
      request.end();
      return void 0;
    }
  };

  // Export the XMLHttpRequestUpload constructor.
  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;
}).call(this);

/***/ }),

/***/ 75522:
/*!**************************************************************!*\
  !*** ./node_modules/@angular/compiler/fesm2020/compiler.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AST: function() { return /* binding */ AST; },
/* harmony export */   ASTWithName: function() { return /* binding */ ASTWithName; },
/* harmony export */   ASTWithSource: function() { return /* binding */ ASTWithSource; },
/* harmony export */   AbsoluteSourceSpan: function() { return /* binding */ AbsoluteSourceSpan; },
/* harmony export */   ArrayType: function() { return /* binding */ ArrayType; },
/* harmony export */   AstMemoryEfficientTransformer: function() { return /* binding */ AstMemoryEfficientTransformer; },
/* harmony export */   AstTransformer: function() { return /* binding */ AstTransformer; },
/* harmony export */   Attribute: function() { return /* binding */ Attribute; },
/* harmony export */   Binary: function() { return /* binding */ Binary; },
/* harmony export */   BinaryOperator: function() { return /* binding */ BinaryOperator; },
/* harmony export */   BinaryOperatorExpr: function() { return /* binding */ BinaryOperatorExpr; },
/* harmony export */   BindingPipe: function() { return /* binding */ BindingPipe; },
/* harmony export */   BoundElementProperty: function() { return /* binding */ BoundElementProperty; },
/* harmony export */   BuiltinType: function() { return /* binding */ BuiltinType; },
/* harmony export */   BuiltinTypeName: function() { return /* binding */ BuiltinTypeName; },
/* harmony export */   CUSTOM_ELEMENTS_SCHEMA: function() { return /* binding */ CUSTOM_ELEMENTS_SCHEMA; },
/* harmony export */   Call: function() { return /* binding */ Call; },
/* harmony export */   Chain: function() { return /* binding */ Chain; },
/* harmony export */   ChangeDetectionStrategy: function() { return /* binding */ ChangeDetectionStrategy; },
/* harmony export */   CommaExpr: function() { return /* binding */ CommaExpr; },
/* harmony export */   Comment: function() { return /* binding */ Comment; },
/* harmony export */   CompilerConfig: function() { return /* binding */ CompilerConfig; },
/* harmony export */   Conditional: function() { return /* binding */ Conditional; },
/* harmony export */   ConditionalExpr: function() { return /* binding */ ConditionalExpr; },
/* harmony export */   ConstantPool: function() { return /* binding */ ConstantPool; },
/* harmony export */   CssSelector: function() { return /* binding */ CssSelector; },
/* harmony export */   DEFAULT_INTERPOLATION_CONFIG: function() { return /* binding */ DEFAULT_INTERPOLATION_CONFIG; },
/* harmony export */   DYNAMIC_TYPE: function() { return /* binding */ DYNAMIC_TYPE; },
/* harmony export */   DeclareFunctionStmt: function() { return /* binding */ DeclareFunctionStmt; },
/* harmony export */   DeclareVarStmt: function() { return /* binding */ DeclareVarStmt; },
/* harmony export */   DomElementSchemaRegistry: function() { return /* binding */ DomElementSchemaRegistry; },
/* harmony export */   EOF: function() { return /* binding */ EOF; },
/* harmony export */   Element: function() { return /* binding */ Element; },
/* harmony export */   ElementSchemaRegistry: function() { return /* binding */ ElementSchemaRegistry; },
/* harmony export */   EmitterVisitorContext: function() { return /* binding */ EmitterVisitorContext; },
/* harmony export */   EmptyExpr: function() { return /* binding */ EmptyExpr; },
/* harmony export */   Expansion: function() { return /* binding */ Expansion; },
/* harmony export */   ExpansionCase: function() { return /* binding */ ExpansionCase; },
/* harmony export */   Expression: function() { return /* binding */ Expression; },
/* harmony export */   ExpressionBinding: function() { return /* binding */ ExpressionBinding; },
/* harmony export */   ExpressionStatement: function() { return /* binding */ ExpressionStatement; },
/* harmony export */   ExpressionType: function() { return /* binding */ ExpressionType; },
/* harmony export */   ExternalExpr: function() { return /* binding */ ExternalExpr; },
/* harmony export */   ExternalReference: function() { return /* binding */ ExternalReference; },
/* harmony export */   FactoryTarget: function() { return /* binding */ FactoryTarget$1; },
/* harmony export */   FunctionExpr: function() { return /* binding */ FunctionExpr; },
/* harmony export */   HtmlParser: function() { return /* binding */ HtmlParser; },
/* harmony export */   HtmlTagDefinition: function() { return /* binding */ HtmlTagDefinition; },
/* harmony export */   I18NHtmlParser: function() { return /* binding */ I18NHtmlParser; },
/* harmony export */   IfStmt: function() { return /* binding */ IfStmt; },
/* harmony export */   ImplicitReceiver: function() { return /* binding */ ImplicitReceiver; },
/* harmony export */   InstantiateExpr: function() { return /* binding */ InstantiateExpr; },
/* harmony export */   Interpolation: function() { return /* binding */ Interpolation; },
/* harmony export */   InterpolationConfig: function() { return /* binding */ InterpolationConfig; },
/* harmony export */   InvokeFunctionExpr: function() { return /* binding */ InvokeFunctionExpr; },
/* harmony export */   JSDocComment: function() { return /* binding */ JSDocComment; },
/* harmony export */   JitEvaluator: function() { return /* binding */ JitEvaluator; },
/* harmony export */   KeyedRead: function() { return /* binding */ KeyedRead; },
/* harmony export */   KeyedWrite: function() { return /* binding */ KeyedWrite; },
/* harmony export */   LeadingComment: function() { return /* binding */ LeadingComment; },
/* harmony export */   Lexer: function() { return /* binding */ Lexer; },
/* harmony export */   LiteralArray: function() { return /* binding */ LiteralArray; },
/* harmony export */   LiteralArrayExpr: function() { return /* binding */ LiteralArrayExpr; },
/* harmony export */   LiteralExpr: function() { return /* binding */ LiteralExpr; },
/* harmony export */   LiteralMap: function() { return /* binding */ LiteralMap; },
/* harmony export */   LiteralMapExpr: function() { return /* binding */ LiteralMapExpr; },
/* harmony export */   LiteralPrimitive: function() { return /* binding */ LiteralPrimitive; },
/* harmony export */   LocalizedString: function() { return /* binding */ LocalizedString; },
/* harmony export */   MapType: function() { return /* binding */ MapType; },
/* harmony export */   MessageBundle: function() { return /* binding */ MessageBundle; },
/* harmony export */   NONE_TYPE: function() { return /* binding */ NONE_TYPE; },
/* harmony export */   NO_ERRORS_SCHEMA: function() { return /* binding */ NO_ERRORS_SCHEMA; },
/* harmony export */   NodeWithI18n: function() { return /* binding */ NodeWithI18n; },
/* harmony export */   NonNullAssert: function() { return /* binding */ NonNullAssert; },
/* harmony export */   NotExpr: function() { return /* binding */ NotExpr; },
/* harmony export */   ParseError: function() { return /* binding */ ParseError; },
/* harmony export */   ParseErrorLevel: function() { return /* binding */ ParseErrorLevel; },
/* harmony export */   ParseLocation: function() { return /* binding */ ParseLocation; },
/* harmony export */   ParseSourceFile: function() { return /* binding */ ParseSourceFile; },
/* harmony export */   ParseSourceSpan: function() { return /* binding */ ParseSourceSpan; },
/* harmony export */   ParseSpan: function() { return /* binding */ ParseSpan; },
/* harmony export */   ParseTreeResult: function() { return /* binding */ ParseTreeResult; },
/* harmony export */   ParsedEvent: function() { return /* binding */ ParsedEvent; },
/* harmony export */   ParsedProperty: function() { return /* binding */ ParsedProperty; },
/* harmony export */   ParsedPropertyType: function() { return /* binding */ ParsedPropertyType; },
/* harmony export */   ParsedVariable: function() { return /* binding */ ParsedVariable; },
/* harmony export */   Parser: function() { return /* binding */ Parser$1; },
/* harmony export */   ParserError: function() { return /* binding */ ParserError; },
/* harmony export */   PrefixNot: function() { return /* binding */ PrefixNot; },
/* harmony export */   PropertyRead: function() { return /* binding */ PropertyRead; },
/* harmony export */   PropertyWrite: function() { return /* binding */ PropertyWrite; },
/* harmony export */   R3BoundTarget: function() { return /* binding */ R3BoundTarget; },
/* harmony export */   R3Identifiers: function() { return /* binding */ Identifiers; },
/* harmony export */   R3SelectorScopeMode: function() { return /* binding */ R3SelectorScopeMode; },
/* harmony export */   R3TargetBinder: function() { return /* binding */ R3TargetBinder; },
/* harmony export */   R3TemplateDependencyKind: function() { return /* binding */ R3TemplateDependencyKind; },
/* harmony export */   ReadKeyExpr: function() { return /* binding */ ReadKeyExpr; },
/* harmony export */   ReadPropExpr: function() { return /* binding */ ReadPropExpr; },
/* harmony export */   ReadVarExpr: function() { return /* binding */ ReadVarExpr; },
/* harmony export */   RecursiveAstVisitor: function() { return /* binding */ RecursiveAstVisitor; },
/* harmony export */   RecursiveVisitor: function() { return /* binding */ RecursiveVisitor; },
/* harmony export */   ResourceLoader: function() { return /* binding */ ResourceLoader; },
/* harmony export */   ReturnStatement: function() { return /* binding */ ReturnStatement; },
/* harmony export */   STRING_TYPE: function() { return /* binding */ STRING_TYPE; },
/* harmony export */   SafeCall: function() { return /* binding */ SafeCall; },
/* harmony export */   SafeKeyedRead: function() { return /* binding */ SafeKeyedRead; },
/* harmony export */   SafePropertyRead: function() { return /* binding */ SafePropertyRead; },
/* harmony export */   SelectorContext: function() { return /* binding */ SelectorContext; },
/* harmony export */   SelectorListContext: function() { return /* binding */ SelectorListContext; },
/* harmony export */   SelectorMatcher: function() { return /* binding */ SelectorMatcher; },
/* harmony export */   Serializer: function() { return /* binding */ Serializer; },
/* harmony export */   SplitInterpolation: function() { return /* binding */ SplitInterpolation; },
/* harmony export */   Statement: function() { return /* binding */ Statement; },
/* harmony export */   StmtModifier: function() { return /* binding */ StmtModifier; },
/* harmony export */   TagContentType: function() { return /* binding */ TagContentType; },
/* harmony export */   TaggedTemplateExpr: function() { return /* binding */ TaggedTemplateExpr; },
/* harmony export */   TemplateBindingParseResult: function() { return /* binding */ TemplateBindingParseResult; },
/* harmony export */   TemplateLiteral: function() { return /* binding */ TemplateLiteral; },
/* harmony export */   TemplateLiteralElement: function() { return /* binding */ TemplateLiteralElement; },
/* harmony export */   Text: function() { return /* binding */ Text; },
/* harmony export */   ThisReceiver: function() { return /* binding */ ThisReceiver; },
/* harmony export */   TmplAstBoundAttribute: function() { return /* binding */ BoundAttribute; },
/* harmony export */   TmplAstBoundEvent: function() { return /* binding */ BoundEvent; },
/* harmony export */   TmplAstBoundText: function() { return /* binding */ BoundText; },
/* harmony export */   TmplAstContent: function() { return /* binding */ Content; },
/* harmony export */   TmplAstElement: function() { return /* binding */ Element$1; },
/* harmony export */   TmplAstIcu: function() { return /* binding */ Icu$1; },
/* harmony export */   TmplAstRecursiveVisitor: function() { return /* binding */ RecursiveVisitor$1; },
/* harmony export */   TmplAstReference: function() { return /* binding */ Reference; },
/* harmony export */   TmplAstTemplate: function() { return /* binding */ Template; },
/* harmony export */   TmplAstText: function() { return /* binding */ Text$3; },
/* harmony export */   TmplAstTextAttribute: function() { return /* binding */ TextAttribute; },
/* harmony export */   TmplAstVariable: function() { return /* binding */ Variable; },
/* harmony export */   Token: function() { return /* binding */ Token; },
/* harmony export */   TokenType: function() { return /* binding */ TokenType; },
/* harmony export */   TreeError: function() { return /* binding */ TreeError; },
/* harmony export */   Type: function() { return /* binding */ Type; },
/* harmony export */   TypeModifier: function() { return /* binding */ TypeModifier; },
/* harmony export */   TypeofExpr: function() { return /* binding */ TypeofExpr; },
/* harmony export */   Unary: function() { return /* binding */ Unary; },
/* harmony export */   UnaryOperator: function() { return /* binding */ UnaryOperator; },
/* harmony export */   UnaryOperatorExpr: function() { return /* binding */ UnaryOperatorExpr; },
/* harmony export */   VERSION: function() { return /* binding */ VERSION; },
/* harmony export */   VariableBinding: function() { return /* binding */ VariableBinding; },
/* harmony export */   Version: function() { return /* binding */ Version; },
/* harmony export */   ViewEncapsulation: function() { return /* binding */ ViewEncapsulation; },
/* harmony export */   WrappedNodeExpr: function() { return /* binding */ WrappedNodeExpr; },
/* harmony export */   WriteKeyExpr: function() { return /* binding */ WriteKeyExpr; },
/* harmony export */   WritePropExpr: function() { return /* binding */ WritePropExpr; },
/* harmony export */   WriteVarExpr: function() { return /* binding */ WriteVarExpr; },
/* harmony export */   Xliff: function() { return /* binding */ Xliff; },
/* harmony export */   Xliff2: function() { return /* binding */ Xliff2; },
/* harmony export */   Xmb: function() { return /* binding */ Xmb; },
/* harmony export */   XmlParser: function() { return /* binding */ XmlParser; },
/* harmony export */   Xtb: function() { return /* binding */ Xtb; },
/* harmony export */   _ParseAST: function() { return /* binding */ _ParseAST; },
/* harmony export */   compileClassMetadata: function() { return /* binding */ compileClassMetadata; },
/* harmony export */   compileComponentFromMetadata: function() { return /* binding */ compileComponentFromMetadata; },
/* harmony export */   compileDeclareClassMetadata: function() { return /* binding */ compileDeclareClassMetadata; },
/* harmony export */   compileDeclareComponentFromMetadata: function() { return /* binding */ compileDeclareComponentFromMetadata; },
/* harmony export */   compileDeclareDirectiveFromMetadata: function() { return /* binding */ compileDeclareDirectiveFromMetadata; },
/* harmony export */   compileDeclareFactoryFunction: function() { return /* binding */ compileDeclareFactoryFunction; },
/* harmony export */   compileDeclareInjectableFromMetadata: function() { return /* binding */ compileDeclareInjectableFromMetadata; },
/* harmony export */   compileDeclareInjectorFromMetadata: function() { return /* binding */ compileDeclareInjectorFromMetadata; },
/* harmony export */   compileDeclareNgModuleFromMetadata: function() { return /* binding */ compileDeclareNgModuleFromMetadata; },
/* harmony export */   compileDeclarePipeFromMetadata: function() { return /* binding */ compileDeclarePipeFromMetadata; },
/* harmony export */   compileDirectiveFromMetadata: function() { return /* binding */ compileDirectiveFromMetadata; },
/* harmony export */   compileFactoryFunction: function() { return /* binding */ compileFactoryFunction; },
/* harmony export */   compileInjectable: function() { return /* binding */ compileInjectable; },
/* harmony export */   compileInjector: function() { return /* binding */ compileInjector; },
/* harmony export */   compileNgModule: function() { return /* binding */ compileNgModule; },
/* harmony export */   compilePipeFromMetadata: function() { return /* binding */ compilePipeFromMetadata; },
/* harmony export */   computeMsgId: function() { return /* binding */ computeMsgId; },
/* harmony export */   core: function() { return /* binding */ core; },
/* harmony export */   createInjectableType: function() { return /* binding */ createInjectableType; },
/* harmony export */   createMayBeForwardRefExpression: function() { return /* binding */ createMayBeForwardRefExpression; },
/* harmony export */   devOnlyGuardedExpression: function() { return /* binding */ devOnlyGuardedExpression; },
/* harmony export */   emitDistinctChangesOnlyDefaultValue: function() { return /* binding */ emitDistinctChangesOnlyDefaultValue; },
/* harmony export */   getHtmlTagDefinition: function() { return /* binding */ getHtmlTagDefinition; },
/* harmony export */   getNsPrefix: function() { return /* binding */ getNsPrefix; },
/* harmony export */   getSafePropertyAccessString: function() { return /* binding */ getSafePropertyAccessString; },
/* harmony export */   identifierName: function() { return /* binding */ identifierName; },
/* harmony export */   isIdentifier: function() { return /* binding */ isIdentifier; },
/* harmony export */   isNgContainer: function() { return /* binding */ isNgContainer; },
/* harmony export */   isNgContent: function() { return /* binding */ isNgContent; },
/* harmony export */   isNgTemplate: function() { return /* binding */ isNgTemplate; },
/* harmony export */   jsDocComment: function() { return /* binding */ jsDocComment; },
/* harmony export */   leadingComment: function() { return /* binding */ leadingComment; },
/* harmony export */   literalMap: function() { return /* binding */ literalMap; },
/* harmony export */   makeBindingParser: function() { return /* binding */ makeBindingParser; },
/* harmony export */   mergeNsAndName: function() { return /* binding */ mergeNsAndName; },
/* harmony export */   outputAst: function() { return /* binding */ output_ast; },
/* harmony export */   parseHostBindings: function() { return /* binding */ parseHostBindings; },
/* harmony export */   parseTemplate: function() { return /* binding */ parseTemplate; },
/* harmony export */   preserveWhitespacesDefault: function() { return /* binding */ preserveWhitespacesDefault; },
/* harmony export */   publishFacade: function() { return /* binding */ publishFacade; },
/* harmony export */   r3JitTypeSourceSpan: function() { return /* binding */ r3JitTypeSourceSpan; },
/* harmony export */   sanitizeIdentifier: function() { return /* binding */ sanitizeIdentifier; },
/* harmony export */   splitNsName: function() { return /* binding */ splitNsName; },
/* harmony export */   verifyHostBindings: function() { return /* binding */ verifyHostBindings; },
/* harmony export */   visitAll: function() { return /* binding */ visitAll; }
/* harmony export */ });
/**
 * @license Angular v15.2.10
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */

const _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
// 1: ":not("
'(([\\.\\#]?)[-\\w]+)|' +
// 2: "tag"; 3: "."/"#";
// "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
// 4: attribute; 5: attribute_string; 6: attribute_value
'(?:\\[([-.\\w*\\\\$]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' +
// "[name]", "[name=value]",
// "[name="value"]",
// "[name='value']"
'(\\))|' +
// 7: ")"
'(\\s*,\\s*)',
// 8: ","
'g');
/**
 * A css selector contains an element name,
 * css classes and attribute/value pairs with the purpose
 * of selecting subsets out of them.
 */
class CssSelector {
  constructor() {
    this.element = null;
    this.classNames = [];
    /**
     * The selectors are encoded in pairs where:
     * - even locations are attribute names
     * - odd locations are attribute values.
     *
     * Example:
     * Selector: `[key1=value1][key2]` would parse to:
     * ```
     * ['key1', 'value1', 'key2', '']
     * ```
     */
    this.attrs = [];
    this.notSelectors = [];
  }
  static parse(selector) {
    const results = [];
    const _addResult = (res, cssSel) => {
      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
        cssSel.element = '*';
      }
      res.push(cssSel);
    };
    let cssSelector = new CssSelector();
    let match;
    let current = cssSelector;
    let inNot = false;
    _SELECTOR_REGEXP.lastIndex = 0;
    while (match = _SELECTOR_REGEXP.exec(selector)) {
      if (match[1 /* SelectorRegexp.NOT */]) {
        if (inNot) {
          throw new Error('Nesting :not in a selector is not allowed');
        }
        inNot = true;
        current = new CssSelector();
        cssSelector.notSelectors.push(current);
      }
      const tag = match[2 /* SelectorRegexp.TAG */];
      if (tag) {
        const prefix = match[3 /* SelectorRegexp.PREFIX */];
        if (prefix === '#') {
          // #hash
          current.addAttribute('id', tag.slice(1));
        } else if (prefix === '.') {
          // Class
          current.addClassName(tag.slice(1));
        } else {
          // Element
          current.setElement(tag);
        }
      }
      const attribute = match[4 /* SelectorRegexp.ATTRIBUTE */];
      if (attribute) {
        current.addAttribute(current.unescapeAttribute(attribute), match[6 /* SelectorRegexp.ATTRIBUTE_VALUE */]);
      }

      if (match[7 /* SelectorRegexp.NOT_END */]) {
        inNot = false;
        current = cssSelector;
      }
      if (match[8 /* SelectorRegexp.SEPARATOR */]) {
        if (inNot) {
          throw new Error('Multiple selectors in :not are not supported');
        }
        _addResult(results, cssSelector);
        cssSelector = current = new CssSelector();
      }
    }
    _addResult(results, cssSelector);
    return results;
  }
  /**
   * Unescape `\$` sequences from the CSS attribute selector.
   *
   * This is needed because `$` can have a special meaning in CSS selectors,
   * but we might want to match an attribute that contains `$`.
   * [MDN web link for more
   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
   * @param attr the attribute to unescape.
   * @returns the unescaped string.
   */
  unescapeAttribute(attr) {
    let result = '';
    let escaping = false;
    for (let i = 0; i < attr.length; i++) {
      const char = attr.charAt(i);
      if (char === '\\') {
        escaping = true;
        continue;
      }
      if (char === '$' && !escaping) {
        throw new Error(`Error in attribute selector "${attr}". ` + `Unescaped "$" is not supported. Please escape with "\\$".`);
      }
      escaping = false;
      result += char;
    }
    return result;
  }
  /**
   * Escape `$` sequences from the CSS attribute selector.
   *
   * This is needed because `$` can have a special meaning in CSS selectors,
   * with this method we are escaping `$` with `\$'.
   * [MDN web link for more
   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).
   * @param attr the attribute to escape.
   * @returns the escaped string.
   */
  escapeAttribute(attr) {
    return attr.replace(/\\/g, '\\\\').replace(/\$/g, '\\$');
  }
  isElementSelector() {
    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
  }
  hasElementSelector() {
    return !!this.element;
  }
  setElement(element = null) {
    this.element = element;
  }
  getAttrs() {
    const result = [];
    if (this.classNames.length > 0) {
      result.push('class', this.classNames.join(' '));
    }
    return result.concat(this.attrs);
  }
  addAttribute(name, value = '') {
    this.attrs.push(name, value && value.toLowerCase() || '');
  }
  addClassName(name) {
    this.classNames.push(name.toLowerCase());
  }
  toString() {
    let res = this.element || '';
    if (this.classNames) {
      this.classNames.forEach(klass => res += `.${klass}`);
    }
    if (this.attrs) {
      for (let i = 0; i < this.attrs.length; i += 2) {
        const name = this.escapeAttribute(this.attrs[i]);
        const value = this.attrs[i + 1];
        res += `[${name}${value ? '=' + value : ''}]`;
      }
    }
    this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);
    return res;
  }
}
/**
 * Reads a list of CssSelectors and allows to calculate which ones
 * are contained in a given CssSelector.
 */
class SelectorMatcher {
  constructor() {
    this._elementMap = new Map();
    this._elementPartialMap = new Map();
    this._classMap = new Map();
    this._classPartialMap = new Map();
    this._attrValueMap = new Map();
    this._attrValuePartialMap = new Map();
    this._listContexts = [];
  }
  static createNotMatcher(notSelectors) {
    const notMatcher = new SelectorMatcher();
    notMatcher.addSelectables(notSelectors, null);
    return notMatcher;
  }
  addSelectables(cssSelectors, callbackCtxt) {
    let listContext = null;
    if (cssSelectors.length > 1) {
      listContext = new SelectorListContext(cssSelectors);
      this._listContexts.push(listContext);
    }
    for (let i = 0; i < cssSelectors.length; i++) {
      this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
    }
  }
  /**
   * Add an object that can be found later on by calling `match`.
   * @param cssSelector A css selector
   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
   */
  _addSelectable(cssSelector, callbackCtxt, listContext) {
    let matcher = this;
    const element = cssSelector.element;
    const classNames = cssSelector.classNames;
    const attrs = cssSelector.attrs;
    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
    if (element) {
      const isTerminal = attrs.length === 0 && classNames.length === 0;
      if (isTerminal) {
        this._addTerminal(matcher._elementMap, element, selectable);
      } else {
        matcher = this._addPartial(matcher._elementPartialMap, element);
      }
    }
    if (classNames) {
      for (let i = 0; i < classNames.length; i++) {
        const isTerminal = attrs.length === 0 && i === classNames.length - 1;
        const className = classNames[i];
        if (isTerminal) {
          this._addTerminal(matcher._classMap, className, selectable);
        } else {
          matcher = this._addPartial(matcher._classPartialMap, className);
        }
      }
    }
    if (attrs) {
      for (let i = 0; i < attrs.length; i += 2) {
        const isTerminal = i === attrs.length - 2;
        const name = attrs[i];
        const value = attrs[i + 1];
        if (isTerminal) {
          const terminalMap = matcher._attrValueMap;
          let terminalValuesMap = terminalMap.get(name);
          if (!terminalValuesMap) {
            terminalValuesMap = new Map();
            terminalMap.set(name, terminalValuesMap);
          }
          this._addTerminal(terminalValuesMap, value, selectable);
        } else {
          const partialMap = matcher._attrValuePartialMap;
          let partialValuesMap = partialMap.get(name);
          if (!partialValuesMap) {
            partialValuesMap = new Map();
            partialMap.set(name, partialValuesMap);
          }
          matcher = this._addPartial(partialValuesMap, value);
        }
      }
    }
  }
  _addTerminal(map, name, selectable) {
    let terminalList = map.get(name);
    if (!terminalList) {
      terminalList = [];
      map.set(name, terminalList);
    }
    terminalList.push(selectable);
  }
  _addPartial(map, name) {
    let matcher = map.get(name);
    if (!matcher) {
      matcher = new SelectorMatcher();
      map.set(name, matcher);
    }
    return matcher;
  }
  /**
   * Find the objects that have been added via `addSelectable`
   * whose css selector is contained in the given css selector.
   * @param cssSelector A css selector
   * @param matchedCallback This callback will be called with the object handed into `addSelectable`
   * @return boolean true if a match was found
   */
  match(cssSelector, matchedCallback) {
    let result = false;
    const element = cssSelector.element;
    const classNames = cssSelector.classNames;
    const attrs = cssSelector.attrs;
    for (let i = 0; i < this._listContexts.length; i++) {
      this._listContexts[i].alreadyMatched = false;
    }
    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
    if (classNames) {
      for (let i = 0; i < classNames.length; i++) {
        const className = classNames[i];
        result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
      }
    }
    if (attrs) {
      for (let i = 0; i < attrs.length; i += 2) {
        const name = attrs[i];
        const value = attrs[i + 1];
        const terminalValuesMap = this._attrValueMap.get(name);
        if (value) {
          result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
        }
        result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
        const partialValuesMap = this._attrValuePartialMap.get(name);
        if (value) {
          result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
        }
        result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
      }
    }
    return result;
  }
  /** @internal */
  _matchTerminal(map, name, cssSelector, matchedCallback) {
    if (!map || typeof name !== 'string') {
      return false;
    }
    let selectables = map.get(name) || [];
    const starSelectables = map.get('*');
    if (starSelectables) {
      selectables = selectables.concat(starSelectables);
    }
    if (selectables.length === 0) {
      return false;
    }
    let selectable;
    let result = false;
    for (let i = 0; i < selectables.length; i++) {
      selectable = selectables[i];
      result = selectable.finalize(cssSelector, matchedCallback) || result;
    }
    return result;
  }
  /** @internal */
  _matchPartial(map, name, cssSelector, matchedCallback) {
    if (!map || typeof name !== 'string') {
      return false;
    }
    const nestedSelector = map.get(name);
    if (!nestedSelector) {
      return false;
    }
    // TODO(perf): get rid of recursion and measure again
    // TODO(perf): don't pass the whole selector into the recursion,
    // but only the not processed parts
    return nestedSelector.match(cssSelector, matchedCallback);
  }
}
class SelectorListContext {
  constructor(selectors) {
    this.selectors = selectors;
    this.alreadyMatched = false;
  }
}
// Store context to pass back selector and context when a selector is matched
class SelectorContext {
  constructor(selector, cbContext, listContext) {
    this.selector = selector;
    this.cbContext = cbContext;
    this.listContext = listContext;
    this.notSelectors = selector.notSelectors;
  }
  finalize(cssSelector, callback) {
    let result = true;
    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
      result = !notMatcher.match(cssSelector, null);
    }
    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
      if (this.listContext) {
        this.listContext.alreadyMatched = true;
      }
      callback(this.selector, this.cbContext);
    }
    return result;
  }
}

// Attention:
// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not
// explicitly set.
const emitDistinctChangesOnlyDefaultValue = true;
var ViewEncapsulation;
(function (ViewEncapsulation) {
  ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.
  ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));
var ChangeDetectionStrategy;
(function (ChangeDetectionStrategy) {
  ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
  ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
const CUSTOM_ELEMENTS_SCHEMA = {
  name: 'custom-elements'
};
const NO_ERRORS_SCHEMA = {
  name: 'no-errors-schema'
};
const Type$1 = Function;
var SecurityContext;
(function (SecurityContext) {
  SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
  SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
  SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
  SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext[SecurityContext["URL"] = 4] = "URL";
  SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext || (SecurityContext = {}));
var MissingTranslationStrategy;
(function (MissingTranslationStrategy) {
  MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
  MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
  MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
function parserSelectorToSimpleSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];
  const elementName = selector.element && selector.element !== '*' ? selector.element : '';
  return [elementName, ...selector.attrs, ...classes];
}
function parserSelectorToNegativeSelector(selector) {
  const classes = selector.classNames && selector.classNames.length ? [8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];
  if (selector.element) {
    return [1 /* SelectorFlags.NOT */ | 4 /* SelectorFlags.ELEMENT */, selector.element, ...selector.attrs, ...classes];
  } else if (selector.attrs.length) {
    return [1 /* SelectorFlags.NOT */ | 2 /* SelectorFlags.ATTRIBUTE */, ...selector.attrs, ...classes];
  } else {
    return selector.classNames && selector.classNames.length ? [1 /* SelectorFlags.NOT */ | 8 /* SelectorFlags.CLASS */, ...selector.classNames] : [];
  }
}
function parserSelectorToR3Selector(selector) {
  const positive = parserSelectorToSimpleSelector(selector);
  const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) : [];
  return positive.concat(...negative);
}
function parseSelectorToR3Selector(selector) {
  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
}
var core = /*#__PURE__*/Object.freeze({
  __proto__: null,
  emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,
  get ViewEncapsulation() {
    return ViewEncapsulation;
  },
  get ChangeDetectionStrategy() {
    return ChangeDetectionStrategy;
  },
  CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,
  NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,
  Type: Type$1,
  get SecurityContext() {
    return SecurityContext;
  },
  get MissingTranslationStrategy() {
    return MissingTranslationStrategy;
  },
  parseSelectorToR3Selector: parseSelectorToR3Selector
});

/**
 * Represents a big integer using a buffer of its individual digits, with the least significant
 * digit stored at the beginning of the array (little endian).
 *
 * For performance reasons, each instance is mutable. The addition operation can be done in-place
 * to reduce memory pressure of allocation for the digits array.
 */
class BigInteger {
  static zero() {
    return new BigInteger([0]);
  }
  static one() {
    return new BigInteger([1]);
  }
  /**
   * Creates a big integer using its individual digits in little endian storage.
   */
  constructor(digits) {
    this.digits = digits;
  }
  /**
   * Creates a clone of this instance.
   */
  clone() {
    return new BigInteger(this.digits.slice());
  }
  /**
   * Returns a new big integer with the sum of `this` and `other` as its value. This does not mutate
   * `this` but instead returns a new instance, unlike `addToSelf`.
   */
  add(other) {
    const result = this.clone();
    result.addToSelf(other);
    return result;
  }
  /**
   * Adds `other` to the instance itself, thereby mutating its value.
   */
  addToSelf(other) {
    const maxNrOfDigits = Math.max(this.digits.length, other.digits.length);
    let carry = 0;
    for (let i = 0; i < maxNrOfDigits; i++) {
      let digitSum = carry;
      if (i < this.digits.length) {
        digitSum += this.digits[i];
      }
      if (i < other.digits.length) {
        digitSum += other.digits[i];
      }
      if (digitSum >= 10) {
        this.digits[i] = digitSum - 10;
        carry = 1;
      } else {
        this.digits[i] = digitSum;
        carry = 0;
      }
    }
    // Apply a remaining carry if needed.
    if (carry > 0) {
      this.digits[maxNrOfDigits] = 1;
    }
  }
  /**
   * Builds the decimal string representation of the big integer. As this is stored in
   * little endian, the digits are concatenated in reverse order.
   */
  toString() {
    let res = '';
    for (let i = this.digits.length - 1; i >= 0; i--) {
      res += this.digits[i];
    }
    return res;
  }
}
/**
 * Represents a big integer which is optimized for multiplication operations, as its power-of-twos
 * are memoized. See `multiplyBy()` for details on the multiplication algorithm.
 */
class BigIntForMultiplication {
  constructor(value) {
    this.powerOfTwos = [value];
  }
  /**
   * Returns the big integer itself.
   */
  getValue() {
    return this.powerOfTwos[0];
  }
  /**
   * Computes the value for `num * b`, where `num` is a JS number and `b` is a big integer. The
   * value for `b` is represented by a storage model that is optimized for this computation.
   *
   * This operation is implemented in N(log2(num)) by continuous halving of the number, where the
   * least-significant bit (LSB) is tested in each iteration. If the bit is set, the bit's index is
   * used as exponent into the power-of-two multiplication of `b`.
   *
   * As an example, consider the multiplication num=42, b=1337. In binary 42 is 0b00101010 and the
   * algorithm unrolls into the following iterations:
   *
   *  Iteration | num        | LSB  | b * 2^iter | Add? | product
   * -----------|------------|------|------------|------|--------
   *  0         | 0b00101010 | 0    | 1337       | No   | 0
   *  1         | 0b00010101 | 1    | 2674       | Yes  | 2674
   *  2         | 0b00001010 | 0    | 5348       | No   | 2674
   *  3         | 0b00000101 | 1    | 10696      | Yes  | 13370
   *  4         | 0b00000010 | 0    | 21392      | No   | 13370
   *  5         | 0b00000001 | 1    | 42784      | Yes  | 56154
   *  6         | 0b00000000 | 0    | 85568      | No   | 56154
   *
   * The computed product of 56154 is indeed the correct result.
   *
   * The `BigIntForMultiplication` representation for a big integer provides memoized access to the
   * power-of-two values to reduce the workload in computing those values.
   */
  multiplyBy(num) {
    const product = BigInteger.zero();
    this.multiplyByAndAddTo(num, product);
    return product;
  }
  /**
   * See `multiplyBy()` for details. This function allows for the computed product to be added
   * directly to the provided result big integer.
   */
  multiplyByAndAddTo(num, result) {
    for (let exponent = 0; num !== 0; num = num >>> 1, exponent++) {
      if (num & 1) {
        const value = this.getMultipliedByPowerOfTwo(exponent);
        result.addToSelf(value);
      }
    }
  }
  /**
   * Computes and memoizes the big integer value for `this.number * 2^exponent`.
   */
  getMultipliedByPowerOfTwo(exponent) {
    // Compute the powers up until the requested exponent, where each value is computed from its
    // predecessor. This is simple as `this.number * 2^(exponent - 1)` only has to be doubled (i.e.
    // added to itself) to reach `this.number * 2^exponent`.
    for (let i = this.powerOfTwos.length; i <= exponent; i++) {
      const previousPower = this.powerOfTwos[i - 1];
      this.powerOfTwos[i] = previousPower.add(previousPower);
    }
    return this.powerOfTwos[exponent];
  }
}
/**
 * Represents an exponentiation operation for the provided base, of which exponents are computed and
 * memoized. The results are represented by a `BigIntForMultiplication` which is tailored for
 * multiplication operations by memoizing the power-of-twos. This effectively results in a matrix
 * representation that is lazily computed upon request.
 */
class BigIntExponentiation {
  constructor(base) {
    this.base = base;
    this.exponents = [new BigIntForMultiplication(BigInteger.one())];
  }
  /**
   * Compute the value for `this.base^exponent`, resulting in a big integer that is optimized for
   * further multiplication operations.
   */
  toThePowerOf(exponent) {
    // Compute the results up until the requested exponent, where every value is computed from its
    // predecessor. This is because `this.base^(exponent - 1)` only has to be multiplied by `base`
    // to reach `this.base^exponent`.
    for (let i = this.exponents.length; i <= exponent; i++) {
      const value = this.exponents[i - 1].multiplyBy(this.base);
      this.exponents[i] = new BigIntForMultiplication(value);
    }
    return this.exponents[exponent];
  }
}

/**
 * A lazily created TextEncoder instance for converting strings into UTF-8 bytes
 */
let textEncoder;
/**
 * Return the message id or compute it using the XLIFF1 digest.
 */
function digest$1(message) {
  return message.id || computeDigest(message);
}
/**
 * Compute the message id using the XLIFF1 digest.
 */
function computeDigest(message) {
  return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);
}
/**
 * Return the message id or compute it using the XLIFF2/XMB/$localize digest.
 */
function decimalDigest(message) {
  return message.id || computeDecimalDigest(message);
}
/**
 * Compute the message id using the XLIFF2/XMB/$localize digest.
 */
function computeDecimalDigest(message) {
  const visitor = new _SerializerIgnoreIcuExpVisitor();
  const parts = message.nodes.map(a => a.visit(visitor, null));
  return computeMsgId(parts.join(''), message.meaning);
}
/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * The visitor is also used in the i18n parser tests
 *
 * @internal
 */
class _SerializerVisitor {
  visitText(text, context) {
    return text.value;
  }
  visitContainer(container, context) {
    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;
  }
  visitIcu(icu, context) {
    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;
  }
  visitTagPlaceholder(ph, context) {
    return ph.isVoid ? `<ph tag name="${ph.startName}"/>` : `<ph tag name="${ph.startName}">${ph.children.map(child => child.visit(this)).join(', ')}</ph name="${ph.closeName}">`;
  }
  visitPlaceholder(ph, context) {
    return ph.value ? `<ph name="${ph.name}">${ph.value}</ph>` : `<ph name="${ph.name}"/>`;
  }
  visitIcuPlaceholder(ph, context) {
    return `<ph icu name="${ph.name}">${ph.value.visit(this)}</ph>`;
  }
}
const serializerVisitor$1 = new _SerializerVisitor();
function serializeNodes(nodes) {
  return nodes.map(a => a.visit(serializerVisitor$1, null));
}
/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
 *
 * @internal
 */
class _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {
  visitIcu(icu, context) {
    let strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
    // Do not take the expression into account
    return `{${icu.type}, ${strCases.join(', ')}}`;
  }
}
/**
 * Compute the SHA1 of the given string
 *
 * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 *
 * WARNING: this function has not been designed not tested with security in mind.
 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
 */
function sha1(str) {
  textEncoder ?? (textEncoder = new TextEncoder());
  const utf8 = [...textEncoder.encode(str)];
  const words32 = bytesToWords32(utf8, Endian.Big);
  const len = utf8.length * 8;
  const w = new Uint32Array(80);
  let a = 0x67452301,
    b = 0xefcdab89,
    c = 0x98badcfe,
    d = 0x10325476,
    e = 0xc3d2e1f0;
  words32[len >> 5] |= 0x80 << 24 - len % 32;
  words32[(len + 64 >> 9 << 4) + 15] = len;
  for (let i = 0; i < words32.length; i += 16) {
    const h0 = a,
      h1 = b,
      h2 = c,
      h3 = d,
      h4 = e;
    for (let j = 0; j < 80; j++) {
      if (j < 16) {
        w[j] = words32[i + j];
      } else {
        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
      }
      const fkVal = fk(j, b, c, d);
      const f = fkVal[0];
      const k = fkVal[1];
      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
      e = d;
      d = c;
      c = rol32(b, 30);
      b = a;
      a = temp;
    }
    a = add32(a, h0);
    b = add32(b, h1);
    c = add32(c, h2);
    d = add32(d, h3);
    e = add32(e, h4);
  }
  // Convert the output parts to a 160-bit hexadecimal string
  return toHexU32(a) + toHexU32(b) + toHexU32(c) + toHexU32(d) + toHexU32(e);
}
/**
 * Convert and format a number as a string representing a 32-bit unsigned hexadecimal number.
 * @param value The value to format as a string.
 * @returns A hexadecimal string representing the value.
 */
function toHexU32(value) {
  // unsigned right shift of zero ensures an unsigned 32-bit number
  return (value >>> 0).toString(16).padStart(8, '0');
}
function fk(index, b, c, d) {
  if (index < 20) {
    return [b & c | ~b & d, 0x5a827999];
  }
  if (index < 40) {
    return [b ^ c ^ d, 0x6ed9eba1];
  }
  if (index < 60) {
    return [b & c | b & d | c & d, 0x8f1bbcdc];
  }
  return [b ^ c ^ d, 0xca62c1d6];
}
/**
 * Compute the fingerprint of the given string
 *
 * The output is 64 bit number encoded as a decimal string
 *
 * based on:
 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
 */
function fingerprint(str) {
  textEncoder ?? (textEncoder = new TextEncoder());
  const utf8 = textEncoder.encode(str);
  const view = new DataView(utf8.buffer, utf8.byteOffset, utf8.byteLength);
  let hi = hash32(view, utf8.length, 0);
  let lo = hash32(view, utf8.length, 102072);
  if (hi == 0 && (lo == 0 || lo == 1)) {
    hi = hi ^ 0x130f9bef;
    lo = lo ^ -0x6b5f56d8;
  }
  return [hi, lo];
}
function computeMsgId(msg, meaning = '') {
  let msgFingerprint = fingerprint(msg);
  if (meaning) {
    const meaningFingerprint = fingerprint(meaning);
    msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);
  }
  const hi = msgFingerprint[0];
  const lo = msgFingerprint[1];
  return wordsToDecimalString(hi & 0x7fffffff, lo);
}
function hash32(view, length, c) {
  let a = 0x9e3779b9,
    b = 0x9e3779b9;
  let index = 0;
  const end = length - 12;
  for (; index <= end; index += 12) {
    a += view.getUint32(index, true);
    b += view.getUint32(index + 4, true);
    c += view.getUint32(index + 8, true);
    const res = mix(a, b, c);
    a = res[0], b = res[1], c = res[2];
  }
  const remainder = length - index;
  // the first byte of c is reserved for the length
  c += length;
  if (remainder >= 4) {
    a += view.getUint32(index, true);
    index += 4;
    if (remainder >= 8) {
      b += view.getUint32(index, true);
      index += 4;
      // Partial 32-bit word for c
      if (remainder >= 9) {
        c += view.getUint8(index++) << 8;
      }
      if (remainder >= 10) {
        c += view.getUint8(index++) << 16;
      }
      if (remainder === 11) {
        c += view.getUint8(index++) << 24;
      }
    } else {
      // Partial 32-bit word for b
      if (remainder >= 5) {
        b += view.getUint8(index++);
      }
      if (remainder >= 6) {
        b += view.getUint8(index++) << 8;
      }
      if (remainder === 7) {
        b += view.getUint8(index++) << 16;
      }
    }
  } else {
    // Partial 32-bit word for a
    if (remainder >= 1) {
      a += view.getUint8(index++);
    }
    if (remainder >= 2) {
      a += view.getUint8(index++) << 8;
    }
    if (remainder === 3) {
      a += view.getUint8(index++) << 16;
    }
  }
  return mix(a, b, c)[2];
}
// clang-format off
function mix(a, b, c) {
  a -= b;
  a -= c;
  a ^= c >>> 13;
  b -= c;
  b -= a;
  b ^= a << 8;
  c -= a;
  c -= b;
  c ^= b >>> 13;
  a -= b;
  a -= c;
  a ^= c >>> 12;
  b -= c;
  b -= a;
  b ^= a << 16;
  c -= a;
  c -= b;
  c ^= b >>> 5;
  a -= b;
  a -= c;
  a ^= c >>> 3;
  b -= c;
  b -= a;
  b ^= a << 10;
  c -= a;
  c -= b;
  c ^= b >>> 15;
  return [a, b, c];
}
// clang-format on
// Utils
var Endian;
(function (Endian) {
  Endian[Endian["Little"] = 0] = "Little";
  Endian[Endian["Big"] = 1] = "Big";
})(Endian || (Endian = {}));
function add32(a, b) {
  return add32to64(a, b)[1];
}
function add32to64(a, b) {
  const low = (a & 0xffff) + (b & 0xffff);
  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);
  return [high >>> 16, high << 16 | low & 0xffff];
}
function add64(a, b) {
  const ah = a[0],
    al = a[1];
  const bh = b[0],
    bl = b[1];
  const result = add32to64(al, bl);
  const carry = result[0];
  const l = result[1];
  const h = add32(add32(ah, bh), carry);
  return [h, l];
}
// Rotate a 32b number left `count` position
function rol32(a, count) {
  return a << count | a >>> 32 - count;
}
// Rotate a 64b number left `count` position
function rol64(num, count) {
  const hi = num[0],
    lo = num[1];
  const h = hi << count | lo >>> 32 - count;
  const l = lo << count | hi >>> 32 - count;
  return [h, l];
}
function bytesToWords32(bytes, endian) {
  const size = bytes.length + 3 >>> 2;
  const words32 = [];
  for (let i = 0; i < size; i++) {
    words32[i] = wordAt(bytes, i * 4, endian);
  }
  return words32;
}
function byteAt(bytes, index) {
  return index >= bytes.length ? 0 : bytes[index];
}
function wordAt(bytes, index, endian) {
  let word = 0;
  if (endian === Endian.Big) {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 24 - 8 * i;
    }
  } else {
    for (let i = 0; i < 4; i++) {
      word += byteAt(bytes, index + i) << 8 * i;
    }
  }
  return word;
}
/**
 * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized
 * power-of-256 results with memoized power-of-two computations for efficient multiplication.
 *
 * For our purposes, this can be safely stored as a global without memory concerns. The reason is
 * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)
 * exponent.
 */
const base256 = new BigIntExponentiation(256);
/**
 * Represents two 32-bit words as a single decimal number. This requires a big integer storage
 * model as JS numbers are not accurate enough to represent the 64-bit number.
 *
 * Based on https://www.danvk.org/hex2dec.html
 */
function wordsToDecimalString(hi, lo) {
  // Encode the four bytes in lo in the lower digits of the decimal number.
  // Note: the multiplication results in lo itself but represented by a big integer using its
  // decimal digits.
  const decimal = base256.toThePowerOf(0).multiplyBy(lo);
  // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why
  // this multiplication factor is applied.
  base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);
  return decimal.toString();
}

//// Types
var TypeModifier;
(function (TypeModifier) {
  TypeModifier[TypeModifier["None"] = 0] = "None";
  TypeModifier[TypeModifier["Const"] = 1] = "Const";
})(TypeModifier || (TypeModifier = {}));
class Type {
  constructor(modifiers = TypeModifier.None) {
    this.modifiers = modifiers;
  }
  hasModifier(modifier) {
    return (this.modifiers & modifier) !== 0;
  }
}
var BuiltinTypeName;
(function (BuiltinTypeName) {
  BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
  BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
  BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
  BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
  BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
  BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
  BuiltinTypeName[BuiltinTypeName["Inferred"] = 6] = "Inferred";
  BuiltinTypeName[BuiltinTypeName["None"] = 7] = "None";
})(BuiltinTypeName || (BuiltinTypeName = {}));
class BuiltinType extends Type {
  constructor(name, modifiers) {
    super(modifiers);
    this.name = name;
  }
  visitType(visitor, context) {
    return visitor.visitBuiltinType(this, context);
  }
}
class ExpressionType extends Type {
  constructor(value, modifiers, typeParams = null) {
    super(modifiers);
    this.value = value;
    this.typeParams = typeParams;
  }
  visitType(visitor, context) {
    return visitor.visitExpressionType(this, context);
  }
}
class ArrayType extends Type {
  constructor(of, modifiers) {
    super(modifiers);
    this.of = of;
  }
  visitType(visitor, context) {
    return visitor.visitArrayType(this, context);
  }
}
class MapType extends Type {
  constructor(valueType, modifiers) {
    super(modifiers);
    this.valueType = valueType || null;
  }
  visitType(visitor, context) {
    return visitor.visitMapType(this, context);
  }
}
const DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
const INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
const BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
const INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
const NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
const STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
const FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
const NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
///// Expressions
var UnaryOperator;
(function (UnaryOperator) {
  UnaryOperator[UnaryOperator["Minus"] = 0] = "Minus";
  UnaryOperator[UnaryOperator["Plus"] = 1] = "Plus";
})(UnaryOperator || (UnaryOperator = {}));
var BinaryOperator;
(function (BinaryOperator) {
  BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
  BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
  BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
  BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
  BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
  BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
  BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
  BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
  BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
  BinaryOperator[BinaryOperator["And"] = 9] = "And";
  BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
  BinaryOperator[BinaryOperator["BitwiseAnd"] = 11] = "BitwiseAnd";
  BinaryOperator[BinaryOperator["Lower"] = 12] = "Lower";
  BinaryOperator[BinaryOperator["LowerEquals"] = 13] = "LowerEquals";
  BinaryOperator[BinaryOperator["Bigger"] = 14] = "Bigger";
  BinaryOperator[BinaryOperator["BiggerEquals"] = 15] = "BiggerEquals";
  BinaryOperator[BinaryOperator["NullishCoalesce"] = 16] = "NullishCoalesce";
})(BinaryOperator || (BinaryOperator = {}));
function nullSafeIsEquivalent(base, other) {
  if (base == null || other == null) {
    return base == other;
  }
  return base.isEquivalent(other);
}
function areAllEquivalentPredicate(base, other, equivalentPredicate) {
  const len = base.length;
  if (len !== other.length) {
    return false;
  }
  for (let i = 0; i < len; i++) {
    if (!equivalentPredicate(base[i], other[i])) {
      return false;
    }
  }
  return true;
}
function areAllEquivalent(base, other) {
  return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));
}
class Expression {
  constructor(type, sourceSpan) {
    this.type = type || null;
    this.sourceSpan = sourceSpan || null;
  }
  prop(name, sourceSpan) {
    return new ReadPropExpr(this, name, null, sourceSpan);
  }
  key(index, type, sourceSpan) {
    return new ReadKeyExpr(this, index, type, sourceSpan);
  }
  callFn(params, sourceSpan, pure) {
    return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);
  }
  instantiate(params, type, sourceSpan) {
    return new InstantiateExpr(this, params, type, sourceSpan);
  }
  conditional(trueCase, falseCase = null, sourceSpan) {
    return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
  }
  equals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
  }
  notEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
  }
  identical(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
  }
  notIdentical(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
  }
  minus(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
  }
  plus(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
  }
  divide(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
  }
  multiply(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
  }
  modulo(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
  }
  and(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
  }
  bitwiseAnd(rhs, sourceSpan, parens = true) {
    return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
  }
  or(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
  }
  lower(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
  }
  lowerEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
  }
  bigger(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
  }
  biggerEquals(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
  }
  isBlank(sourceSpan) {
    // Note: We use equals by purpose here to compare to null and undefined in JS.
    // We use the typed null to allow strictNullChecks to narrow types.
    return this.equals(TYPED_NULL_EXPR, sourceSpan);
  }
  nullishCoalesce(rhs, sourceSpan) {
    return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);
  }
  toStmt() {
    return new ExpressionStatement(this, null);
  }
}
class ReadVarExpr extends Expression {
  constructor(name, type, sourceSpan) {
    super(type, sourceSpan);
    this.name = name;
  }
  isEquivalent(e) {
    return e instanceof ReadVarExpr && this.name === e.name;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadVarExpr(this, context);
  }
  set(value) {
    return new WriteVarExpr(this.name, value, null, this.sourceSpan);
  }
}
class TypeofExpr extends Expression {
  constructor(expr, type, sourceSpan) {
    super(type, sourceSpan);
    this.expr = expr;
  }
  visitExpression(visitor, context) {
    return visitor.visitTypeofExpr(this, context);
  }
  isEquivalent(e) {
    return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);
  }
  isConstant() {
    return this.expr.isConstant();
  }
}
class WrappedNodeExpr extends Expression {
  constructor(node, type, sourceSpan) {
    super(type, sourceSpan);
    this.node = node;
  }
  isEquivalent(e) {
    return e instanceof WrappedNodeExpr && this.node === e.node;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWrappedNodeExpr(this, context);
  }
}
class WriteVarExpr extends Expression {
  constructor(name, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.name = name;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWriteVarExpr(this, context);
  }
  toDeclStmt(type, modifiers) {
    return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
  }
  toConstDecl() {
    return this.toDeclStmt(INFERRED_TYPE, StmtModifier.Final);
  }
}
class WriteKeyExpr extends Expression {
  constructor(receiver, index, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.receiver = receiver;
    this.index = index;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWriteKeyExpr(this, context);
  }
}
class WritePropExpr extends Expression {
  constructor(receiver, name, value, type, sourceSpan) {
    super(type || value.type, sourceSpan);
    this.receiver = receiver;
    this.name = name;
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitWritePropExpr(this, context);
  }
}
class InvokeFunctionExpr extends Expression {
  constructor(fn, args, type, sourceSpan, pure = false) {
    super(type, sourceSpan);
    this.fn = fn;
    this.args = args;
    this.pure = pure;
  }
  isEquivalent(e) {
    return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitInvokeFunctionExpr(this, context);
  }
}
class TaggedTemplateExpr extends Expression {
  constructor(tag, template, type, sourceSpan) {
    super(type, sourceSpan);
    this.tag = tag;
    this.template = template;
  }
  isEquivalent(e) {
    return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) && areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.template.expressions, e.template.expressions);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitTaggedTemplateExpr(this, context);
  }
}
class InstantiateExpr extends Expression {
  constructor(classExpr, args, type, sourceSpan) {
    super(type, sourceSpan);
    this.classExpr = classExpr;
    this.args = args;
  }
  isEquivalent(e) {
    return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitInstantiateExpr(this, context);
  }
}
class LiteralExpr extends Expression {
  constructor(value, type, sourceSpan) {
    super(type, sourceSpan);
    this.value = value;
  }
  isEquivalent(e) {
    return e instanceof LiteralExpr && this.value === e.value;
  }
  isConstant() {
    return true;
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralExpr(this, context);
  }
}
class TemplateLiteral {
  constructor(elements, expressions) {
    this.elements = elements;
    this.expressions = expressions;
  }
}
class TemplateLiteralElement {
  constructor(text, sourceSpan, rawText) {
    this.text = text;
    this.sourceSpan = sourceSpan;
    // If `rawText` is not provided, try to extract the raw string from its
    // associated `sourceSpan`. If that is also not available, "fake" the raw
    // string instead by escaping the following control sequences:
    // - "\" would otherwise indicate that the next character is a control character.
    // - "`" and "${" are template string control sequences that would otherwise prematurely
    // indicate the end of the template literal element.
    this.rawText = rawText ?? sourceSpan?.toString() ?? escapeForTemplateLiteral(escapeSlashes(text));
  }
}
class LiteralPiece {
  constructor(text, sourceSpan) {
    this.text = text;
    this.sourceSpan = sourceSpan;
  }
}
class PlaceholderPiece {
  /**
   * Create a new instance of a `PlaceholderPiece`.
   *
   * @param text the name of this placeholder (e.g. `PH_1`).
   * @param sourceSpan the location of this placeholder in its localized message the source code.
   * @param associatedMessage reference to another message that this placeholder is associated with.
   * The `associatedMessage` is mainly used to provide a relationship to an ICU message that has
   * been extracted out from the message containing the placeholder.
   */
  constructor(text, sourceSpan, associatedMessage) {
    this.text = text;
    this.sourceSpan = sourceSpan;
    this.associatedMessage = associatedMessage;
  }
}
const MEANING_SEPARATOR$1 = '|';
const ID_SEPARATOR$1 = '@@';
const LEGACY_ID_INDICATOR = '␟';
class LocalizedString extends Expression {
  constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
    super(STRING_TYPE, sourceSpan);
    this.metaBlock = metaBlock;
    this.messageParts = messageParts;
    this.placeHolderNames = placeHolderNames;
    this.expressions = expressions;
  }
  isEquivalent(e) {
    // return e instanceof LocalizedString && this.message === e.message;
    return false;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitLocalizedString(this, context);
  }
  /**
   * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
   * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
   * `parseI18nMeta()`.
   *
   * @param meta The metadata to serialize
   * @param messagePart The first part of the tagged string
   */
  serializeI18nHead() {
    let metaBlock = this.metaBlock.description || '';
    if (this.metaBlock.meaning) {
      metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR$1}${metaBlock}`;
    }
    if (this.metaBlock.customId) {
      metaBlock = `${metaBlock}${ID_SEPARATOR$1}${this.metaBlock.customId}`;
    }
    if (this.metaBlock.legacyIds) {
      this.metaBlock.legacyIds.forEach(legacyId => {
        metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;
      });
    }
    return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));
  }
  getMessagePartSourceSpan(i) {
    return this.messageParts[i]?.sourceSpan ?? this.sourceSpan;
  }
  getPlaceholderSourceSpan(i) {
    return this.placeHolderNames[i]?.sourceSpan ?? this.expressions[i]?.sourceSpan ?? this.sourceSpan;
  }
  /**
   * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
   * can be used in a `$localize` tagged string.
   *
   * The format is `:<placeholder-name>[@@<associated-id>]:`.
   *
   * The `associated-id` is the message id of the (usually an ICU) message to which this placeholder
   * refers.
   *
   * @param partIndex The index of the message part to serialize.
   */
  serializeI18nTemplatePart(partIndex) {
    const placeholder = this.placeHolderNames[partIndex - 1];
    const messagePart = this.messageParts[partIndex];
    let metaBlock = placeholder.text;
    if (placeholder.associatedMessage?.legacyIds.length === 0) {
      metaBlock += `${ID_SEPARATOR$1}${computeMsgId(placeholder.associatedMessage.messageString, placeholder.associatedMessage.meaning)}`;
    }
    return createCookedRawString(metaBlock, messagePart.text, this.getMessagePartSourceSpan(partIndex));
  }
}
const escapeSlashes = str => str.replace(/\\/g, '\\\\');
const escapeStartingColon = str => str.replace(/^:/, '\\:');
const escapeColons = str => str.replace(/:/g, '\\:');
const escapeForTemplateLiteral = str => str.replace(/`/g, '\\`').replace(/\${/g, '$\\{');
/**
 * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.
 *
 * The `raw` text must have various character sequences escaped:
 * * "\" would otherwise indicate that the next character is a control character.
 * * "`" and "${" are template string control sequences that would otherwise prematurely indicate
 *   the end of a message part.
 * * ":" inside a metablock would prematurely indicate the end of the metablock.
 * * ":" at the start of a messagePart with no metablock would erroneously indicate the start of a
 *   metablock.
 *
 * @param metaBlock Any metadata that should be prepended to the string
 * @param messagePart The message part of the string
 */
function createCookedRawString(metaBlock, messagePart, range) {
  if (metaBlock === '') {
    return {
      cooked: messagePart,
      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),
      range
    };
  } else {
    return {
      cooked: `:${metaBlock}:${messagePart}`,
      raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),
      range
    };
  }
}
class ExternalExpr extends Expression {
  constructor(value, type, typeParams = null, sourceSpan) {
    super(type, sourceSpan);
    this.value = value;
    this.typeParams = typeParams;
  }
  isEquivalent(e) {
    return e instanceof ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitExternalExpr(this, context);
  }
}
class ExternalReference {
  constructor(moduleName, name, runtime) {
    this.moduleName = moduleName;
    this.name = name;
    this.runtime = runtime;
  }
}
class ConditionalExpr extends Expression {
  constructor(condition, trueCase, falseCase = null, type, sourceSpan) {
    super(type || trueCase.type, sourceSpan);
    this.condition = condition;
    this.falseCase = falseCase;
    this.trueCase = trueCase;
  }
  isEquivalent(e) {
    return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitConditionalExpr(this, context);
  }
}
class NotExpr extends Expression {
  constructor(condition, sourceSpan) {
    super(BOOL_TYPE, sourceSpan);
    this.condition = condition;
  }
  isEquivalent(e) {
    return e instanceof NotExpr && this.condition.isEquivalent(e.condition);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitNotExpr(this, context);
  }
}
class FnParam {
  constructor(name, type = null) {
    this.name = name;
    this.type = type;
  }
  isEquivalent(param) {
    return this.name === param.name;
  }
}
class FunctionExpr extends Expression {
  constructor(params, statements, type, sourceSpan, name) {
    super(type, sourceSpan);
    this.params = params;
    this.statements = statements;
    this.name = name;
  }
  isEquivalent(e) {
    return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitFunctionExpr(this, context);
  }
  toDeclStmt(name, modifiers) {
    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
  }
}
class UnaryOperatorExpr extends Expression {
  constructor(operator, expr, type, sourceSpan, parens = true) {
    super(type || NUMBER_TYPE, sourceSpan);
    this.operator = operator;
    this.expr = expr;
    this.parens = parens;
  }
  isEquivalent(e) {
    return e instanceof UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitUnaryOperatorExpr(this, context);
  }
}
class BinaryOperatorExpr extends Expression {
  constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {
    super(type || lhs.type, sourceSpan);
    this.operator = operator;
    this.rhs = rhs;
    this.parens = parens;
    this.lhs = lhs;
  }
  isEquivalent(e) {
    return e instanceof BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitBinaryOperatorExpr(this, context);
  }
}
class ReadPropExpr extends Expression {
  constructor(receiver, name, type, sourceSpan) {
    super(type, sourceSpan);
    this.receiver = receiver;
    this.name = name;
  }
  isEquivalent(e) {
    return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadPropExpr(this, context);
  }
  set(value) {
    return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
  }
}
class ReadKeyExpr extends Expression {
  constructor(receiver, index, type, sourceSpan) {
    super(type, sourceSpan);
    this.receiver = receiver;
    this.index = index;
  }
  isEquivalent(e) {
    return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitReadKeyExpr(this, context);
  }
  set(value) {
    return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
  }
}
class LiteralArrayExpr extends Expression {
  constructor(entries, type, sourceSpan) {
    super(type, sourceSpan);
    this.entries = entries;
  }
  isConstant() {
    return this.entries.every(e => e.isConstant());
  }
  isEquivalent(e) {
    return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralArrayExpr(this, context);
  }
}
class LiteralMapEntry {
  constructor(key, value, quoted) {
    this.key = key;
    this.value = value;
    this.quoted = quoted;
  }
  isEquivalent(e) {
    return this.key === e.key && this.value.isEquivalent(e.value);
  }
}
class LiteralMapExpr extends Expression {
  constructor(entries, type, sourceSpan) {
    super(type, sourceSpan);
    this.entries = entries;
    this.valueType = null;
    if (type) {
      this.valueType = type.valueType;
    }
  }
  isEquivalent(e) {
    return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
  }
  isConstant() {
    return this.entries.every(e => e.value.isConstant());
  }
  visitExpression(visitor, context) {
    return visitor.visitLiteralMapExpr(this, context);
  }
}
class CommaExpr extends Expression {
  constructor(parts, sourceSpan) {
    super(parts[parts.length - 1].type, sourceSpan);
    this.parts = parts;
  }
  isEquivalent(e) {
    return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);
  }
  isConstant() {
    return false;
  }
  visitExpression(visitor, context) {
    return visitor.visitCommaExpr(this, context);
  }
}
const NULL_EXPR = new LiteralExpr(null, null, null);
const TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
//// Statements
var StmtModifier;
(function (StmtModifier) {
  StmtModifier[StmtModifier["None"] = 0] = "None";
  StmtModifier[StmtModifier["Final"] = 1] = "Final";
  StmtModifier[StmtModifier["Private"] = 2] = "Private";
  StmtModifier[StmtModifier["Exported"] = 4] = "Exported";
  StmtModifier[StmtModifier["Static"] = 8] = "Static";
})(StmtModifier || (StmtModifier = {}));
class LeadingComment {
  constructor(text, multiline, trailingNewline) {
    this.text = text;
    this.multiline = multiline;
    this.trailingNewline = trailingNewline;
  }
  toString() {
    return this.multiline ? ` ${this.text} ` : this.text;
  }
}
class JSDocComment extends LeadingComment {
  constructor(tags) {
    super('', /* multiline */true, /* trailingNewline */true);
    this.tags = tags;
  }
  toString() {
    return serializeTags(this.tags);
  }
}
class Statement {
  constructor(modifiers = StmtModifier.None, sourceSpan = null, leadingComments) {
    this.modifiers = modifiers;
    this.sourceSpan = sourceSpan;
    this.leadingComments = leadingComments;
  }
  hasModifier(modifier) {
    return (this.modifiers & modifier) !== 0;
  }
  addLeadingComment(leadingComment) {
    this.leadingComments = this.leadingComments ?? [];
    this.leadingComments.push(leadingComment);
  }
}
class DeclareVarStmt extends Statement {
  constructor(name, value, type, modifiers, sourceSpan, leadingComments) {
    super(modifiers, sourceSpan, leadingComments);
    this.name = name;
    this.value = value;
    this.type = type || value && value.type || null;
  }
  isEquivalent(stmt) {
    return stmt instanceof DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
  }
  visitStatement(visitor, context) {
    return visitor.visitDeclareVarStmt(this, context);
  }
}
class DeclareFunctionStmt extends Statement {
  constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {
    super(modifiers, sourceSpan, leadingComments);
    this.name = name;
    this.params = params;
    this.statements = statements;
    this.type = type || null;
  }
  isEquivalent(stmt) {
    return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);
  }
  visitStatement(visitor, context) {
    return visitor.visitDeclareFunctionStmt(this, context);
  }
}
class ExpressionStatement extends Statement {
  constructor(expr, sourceSpan, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.expr = expr;
  }
  isEquivalent(stmt) {
    return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);
  }
  visitStatement(visitor, context) {
    return visitor.visitExpressionStmt(this, context);
  }
}
class ReturnStatement extends Statement {
  constructor(value, sourceSpan = null, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.value = value;
  }
  isEquivalent(stmt) {
    return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);
  }
  visitStatement(visitor, context) {
    return visitor.visitReturnStmt(this, context);
  }
}
class IfStmt extends Statement {
  constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {
    super(StmtModifier.None, sourceSpan, leadingComments);
    this.condition = condition;
    this.trueCase = trueCase;
    this.falseCase = falseCase;
  }
  isEquivalent(stmt) {
    return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);
  }
  visitStatement(visitor, context) {
    return visitor.visitIfStmt(this, context);
  }
}
class RecursiveAstVisitor$1 {
  visitType(ast, context) {
    return ast;
  }
  visitExpression(ast, context) {
    if (ast.type) {
      ast.type.visitType(this, context);
    }
    return ast;
  }
  visitBuiltinType(type, context) {
    return this.visitType(type, context);
  }
  visitExpressionType(type, context) {
    type.value.visitExpression(this, context);
    if (type.typeParams !== null) {
      type.typeParams.forEach(param => this.visitType(param, context));
    }
    return this.visitType(type, context);
  }
  visitArrayType(type, context) {
    return this.visitType(type, context);
  }
  visitMapType(type, context) {
    return this.visitType(type, context);
  }
  visitWrappedNodeExpr(ast, context) {
    return ast;
  }
  visitTypeofExpr(ast, context) {
    return this.visitExpression(ast, context);
  }
  visitReadVarExpr(ast, context) {
    return this.visitExpression(ast, context);
  }
  visitWriteVarExpr(ast, context) {
    ast.value.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitWriteKeyExpr(ast, context) {
    ast.receiver.visitExpression(this, context);
    ast.index.visitExpression(this, context);
    ast.value.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitWritePropExpr(ast, context) {
    ast.receiver.visitExpression(this, context);
    ast.value.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitInvokeFunctionExpr(ast, context) {
    ast.fn.visitExpression(this, context);
    this.visitAllExpressions(ast.args, context);
    return this.visitExpression(ast, context);
  }
  visitTaggedTemplateExpr(ast, context) {
    ast.tag.visitExpression(this, context);
    this.visitAllExpressions(ast.template.expressions, context);
    return this.visitExpression(ast, context);
  }
  visitInstantiateExpr(ast, context) {
    ast.classExpr.visitExpression(this, context);
    this.visitAllExpressions(ast.args, context);
    return this.visitExpression(ast, context);
  }
  visitLiteralExpr(ast, context) {
    return this.visitExpression(ast, context);
  }
  visitLocalizedString(ast, context) {
    return this.visitExpression(ast, context);
  }
  visitExternalExpr(ast, context) {
    if (ast.typeParams) {
      ast.typeParams.forEach(type => type.visitType(this, context));
    }
    return this.visitExpression(ast, context);
  }
  visitConditionalExpr(ast, context) {
    ast.condition.visitExpression(this, context);
    ast.trueCase.visitExpression(this, context);
    ast.falseCase.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitNotExpr(ast, context) {
    ast.condition.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitFunctionExpr(ast, context) {
    this.visitAllStatements(ast.statements, context);
    return this.visitExpression(ast, context);
  }
  visitUnaryOperatorExpr(ast, context) {
    ast.expr.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitBinaryOperatorExpr(ast, context) {
    ast.lhs.visitExpression(this, context);
    ast.rhs.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitReadPropExpr(ast, context) {
    ast.receiver.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitReadKeyExpr(ast, context) {
    ast.receiver.visitExpression(this, context);
    ast.index.visitExpression(this, context);
    return this.visitExpression(ast, context);
  }
  visitLiteralArrayExpr(ast, context) {
    this.visitAllExpressions(ast.entries, context);
    return this.visitExpression(ast, context);
  }
  visitLiteralMapExpr(ast, context) {
    ast.entries.forEach(entry => entry.value.visitExpression(this, context));
    return this.visitExpression(ast, context);
  }
  visitCommaExpr(ast, context) {
    this.visitAllExpressions(ast.parts, context);
    return this.visitExpression(ast, context);
  }
  visitAllExpressions(exprs, context) {
    exprs.forEach(expr => expr.visitExpression(this, context));
  }
  visitDeclareVarStmt(stmt, context) {
    if (stmt.value) {
      stmt.value.visitExpression(this, context);
    }
    if (stmt.type) {
      stmt.type.visitType(this, context);
    }
    return stmt;
  }
  visitDeclareFunctionStmt(stmt, context) {
    this.visitAllStatements(stmt.statements, context);
    if (stmt.type) {
      stmt.type.visitType(this, context);
    }
    return stmt;
  }
  visitExpressionStmt(stmt, context) {
    stmt.expr.visitExpression(this, context);
    return stmt;
  }
  visitReturnStmt(stmt, context) {
    stmt.value.visitExpression(this, context);
    return stmt;
  }
  visitIfStmt(stmt, context) {
    stmt.condition.visitExpression(this, context);
    this.visitAllStatements(stmt.trueCase, context);
    this.visitAllStatements(stmt.falseCase, context);
    return stmt;
  }
  visitAllStatements(stmts, context) {
    stmts.forEach(stmt => stmt.visitStatement(this, context));
  }
}
function leadingComment(text, multiline = false, trailingNewline = true) {
  return new LeadingComment(text, multiline, trailingNewline);
}
function jsDocComment(tags = []) {
  return new JSDocComment(tags);
}
function variable(name, type, sourceSpan) {
  return new ReadVarExpr(name, type, sourceSpan);
}
function importExpr(id, typeParams = null, sourceSpan) {
  return new ExternalExpr(id, null, typeParams, sourceSpan);
}
function importType(id, typeParams, typeModifiers) {
  return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
}
function expressionType(expr, typeModifiers, typeParams) {
  return new ExpressionType(expr, typeModifiers, typeParams);
}
function typeofExpr(expr) {
  return new TypeofExpr(expr);
}
function literalArr(values, type, sourceSpan) {
  return new LiteralArrayExpr(values, type, sourceSpan);
}
function literalMap(values, type = null) {
  return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);
}
function unary(operator, expr, type, sourceSpan) {
  return new UnaryOperatorExpr(operator, expr, type, sourceSpan);
}
function not(expr, sourceSpan) {
  return new NotExpr(expr, sourceSpan);
}
function fn(params, body, type, sourceSpan, name) {
  return new FunctionExpr(params, body, type, sourceSpan, name);
}
function ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {
  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);
}
function taggedTemplate(tag, template, type, sourceSpan) {
  return new TaggedTemplateExpr(tag, template, type, sourceSpan);
}
function literal(value, type, sourceSpan) {
  return new LiteralExpr(value, type, sourceSpan);
}
function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
}
function isNull(exp) {
  return exp instanceof LiteralExpr && exp.value === null;
}
/*
 * Serializes a `Tag` into a string.
 * Returns a string like " @foo {bar} baz" (note the leading whitespace before `@foo`).
 */
function tagToString(tag) {
  let out = '';
  if (tag.tagName) {
    out += ` @${tag.tagName}`;
  }
  if (tag.text) {
    if (tag.text.match(/\/\*|\*\//)) {
      throw new Error('JSDoc text cannot contain "/*" and "*/"');
    }
    out += ' ' + tag.text.replace(/@/g, '\\@');
  }
  return out;
}
function serializeTags(tags) {
  if (tags.length === 0) return '';
  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {
    // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.
    return `*${tagToString(tags[0])} `;
  }
  let out = '*\n';
  for (const tag of tags) {
    out += ' *';
    // If the tagToString is multi-line, insert " * " prefixes on lines.
    out += tagToString(tag).replace(/\n/g, '\n * ');
    out += '\n';
  }
  out += ' ';
  return out;
}
var output_ast = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get TypeModifier() {
    return TypeModifier;
  },
  Type: Type,
  get BuiltinTypeName() {
    return BuiltinTypeName;
  },
  BuiltinType: BuiltinType,
  ExpressionType: ExpressionType,
  ArrayType: ArrayType,
  MapType: MapType,
  DYNAMIC_TYPE: DYNAMIC_TYPE,
  INFERRED_TYPE: INFERRED_TYPE,
  BOOL_TYPE: BOOL_TYPE,
  INT_TYPE: INT_TYPE,
  NUMBER_TYPE: NUMBER_TYPE,
  STRING_TYPE: STRING_TYPE,
  FUNCTION_TYPE: FUNCTION_TYPE,
  NONE_TYPE: NONE_TYPE,
  get UnaryOperator() {
    return UnaryOperator;
  },
  get BinaryOperator() {
    return BinaryOperator;
  },
  nullSafeIsEquivalent: nullSafeIsEquivalent,
  areAllEquivalent: areAllEquivalent,
  Expression: Expression,
  ReadVarExpr: ReadVarExpr,
  TypeofExpr: TypeofExpr,
  WrappedNodeExpr: WrappedNodeExpr,
  WriteVarExpr: WriteVarExpr,
  WriteKeyExpr: WriteKeyExpr,
  WritePropExpr: WritePropExpr,
  InvokeFunctionExpr: InvokeFunctionExpr,
  TaggedTemplateExpr: TaggedTemplateExpr,
  InstantiateExpr: InstantiateExpr,
  LiteralExpr: LiteralExpr,
  TemplateLiteral: TemplateLiteral,
  TemplateLiteralElement: TemplateLiteralElement,
  LiteralPiece: LiteralPiece,
  PlaceholderPiece: PlaceholderPiece,
  LocalizedString: LocalizedString,
  ExternalExpr: ExternalExpr,
  ExternalReference: ExternalReference,
  ConditionalExpr: ConditionalExpr,
  NotExpr: NotExpr,
  FnParam: FnParam,
  FunctionExpr: FunctionExpr,
  UnaryOperatorExpr: UnaryOperatorExpr,
  BinaryOperatorExpr: BinaryOperatorExpr,
  ReadPropExpr: ReadPropExpr,
  ReadKeyExpr: ReadKeyExpr,
  LiteralArrayExpr: LiteralArrayExpr,
  LiteralMapEntry: LiteralMapEntry,
  LiteralMapExpr: LiteralMapExpr,
  CommaExpr: CommaExpr,
  NULL_EXPR: NULL_EXPR,
  TYPED_NULL_EXPR: TYPED_NULL_EXPR,
  get StmtModifier() {
    return StmtModifier;
  },
  LeadingComment: LeadingComment,
  JSDocComment: JSDocComment,
  Statement: Statement,
  DeclareVarStmt: DeclareVarStmt,
  DeclareFunctionStmt: DeclareFunctionStmt,
  ExpressionStatement: ExpressionStatement,
  ReturnStatement: ReturnStatement,
  IfStmt: IfStmt,
  RecursiveAstVisitor: RecursiveAstVisitor$1,
  leadingComment: leadingComment,
  jsDocComment: jsDocComment,
  variable: variable,
  importExpr: importExpr,
  importType: importType,
  expressionType: expressionType,
  typeofExpr: typeofExpr,
  literalArr: literalArr,
  literalMap: literalMap,
  unary: unary,
  not: not,
  fn: fn,
  ifStmt: ifStmt,
  taggedTemplate: taggedTemplate,
  literal: literal,
  localizedString: localizedString,
  isNull: isNull
});
const CONSTANT_PREFIX = '_c';
/**
 * `ConstantPool` tries to reuse literal factories when two or more literals are identical.
 * We determine whether literals are identical by creating a key out of their AST using the
 * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely
 * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what
 * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note
 * that we use a variable, rather than something like `null` in order to avoid collisions.
 */
const UNKNOWN_VALUE_KEY = variable('<unknown>');
/**
 * Context to use when producing a key.
 *
 * This ensures we see the constant not the reference variable when producing
 * a key.
 */
const KEY_CONTEXT = {};
/**
 * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion
 * for strings that reach a certain length threshold. This constant defines the length threshold for
 * strings.
 */
const POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;
/**
 * A node that is a place-holder that allows the node to be replaced when the actual
 * node is known.
 *
 * This allows the constant pool to change an expression from a direct reference to
 * a constant to a shared constant. It returns a fix-up node that is later allowed to
 * change the referenced expression.
 */
class FixupExpression extends Expression {
  constructor(resolved) {
    super(resolved.type);
    this.resolved = resolved;
    this.original = resolved;
  }
  visitExpression(visitor, context) {
    if (context === KEY_CONTEXT) {
      // When producing a key we want to traverse the constant not the
      // variable used to refer to it.
      return this.original.visitExpression(visitor, context);
    } else {
      return this.resolved.visitExpression(visitor, context);
    }
  }
  isEquivalent(e) {
    return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);
  }
  isConstant() {
    return true;
  }
  fixup(expression) {
    this.resolved = expression;
    this.shared = true;
  }
}
/**
 * A constant pool allows a code emitter to share constant in an output context.
 *
 * The constant pool also supports sharing access to ivy definitions references.
 */
class ConstantPool {
  constructor(isClosureCompilerEnabled = false) {
    this.isClosureCompilerEnabled = isClosureCompilerEnabled;
    this.statements = [];
    this.literals = new Map();
    this.literalFactories = new Map();
    this.nextNameIndex = 0;
  }
  getConstLiteral(literal, forceShared) {
    if (literal instanceof LiteralExpr && !isLongStringLiteral(literal) || literal instanceof FixupExpression) {
      // Do no put simple literals into the constant pool or try to produce a constant for a
      // reference to a constant.
      return literal;
    }
    const key = this.keyOf(literal);
    let fixup = this.literals.get(key);
    let newValue = false;
    if (!fixup) {
      fixup = new FixupExpression(literal);
      this.literals.set(key, fixup);
      newValue = true;
    }
    if (!newValue && !fixup.shared || newValue && forceShared) {
      // Replace the expression with a variable
      const name = this.freshName();
      let definition;
      let usage;
      if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {
        // For string literals, Closure will **always** inline the string at
        // **all** usages, duplicating it each time. For large strings, this
        // unnecessarily bloats bundle size. To work around this restriction, we
        // wrap the string in a function, and call that function for each usage.
        // This tricks Closure into using inline logic for functions instead of
        // string literals. Function calls are only inlined if the body is small
        // enough to be worth it. By doing this, very large strings will be
        // shared across multiple usages, rather than duplicating the string at
        // each usage site.
        //
        // const myStr = function() { return "very very very long string"; };
        // const usage1 = myStr();
        // const usage2 = myStr();
        definition = variable(name).set(new FunctionExpr([],
        // Params.
        [
        // Statements.
        new ReturnStatement(literal)]));
        usage = variable(name).callFn([]);
      } else {
        // Just declare and use the variable directly, without a function call
        // indirection. This saves a few bytes and avoids an unnecessary call.
        definition = variable(name).set(literal);
        usage = variable(name);
      }
      this.statements.push(definition.toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
      fixup.fixup(usage);
    }
    return fixup;
  }
  getLiteralFactory(literal) {
    // Create a pure function that builds an array of a mix of constant and variable expressions
    if (literal instanceof LiteralArrayExpr) {
      const argumentsForKey = literal.entries.map(e => e.isConstant() ? e : UNKNOWN_VALUE_KEY);
      const key = this.keyOf(literalArr(argumentsForKey));
      return this._getLiteralFactory(key, literal.entries, entries => literalArr(entries));
    } else {
      const expressionForKey = literalMap(literal.entries.map(e => ({
        key: e.key,
        value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
        quoted: e.quoted
      })));
      const key = this.keyOf(expressionForKey);
      return this._getLiteralFactory(key, literal.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({
        key: literal.entries[index].key,
        value,
        quoted: literal.entries[index].quoted
      }))));
    }
  }
  _getLiteralFactory(key, values, resultMap) {
    let literalFactory = this.literalFactories.get(key);
    const literalFactoryArguments = values.filter(e => !e.isConstant());
    if (!literalFactory) {
      const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));
      const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));
      const pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);
      const name = this.freshName();
      this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, StmtModifier.Final));
      literalFactory = variable(name);
      this.literalFactories.set(key, literalFactory);
    }
    return {
      literalFactory,
      literalFactoryArguments
    };
  }
  /**
   * Produce a unique name.
   *
   * The name might be unique among different prefixes if any of the prefixes end in
   * a digit so the prefix should be a constant string (not based on user input) and
   * must not end in a digit.
   */
  uniqueName(prefix) {
    return `${prefix}${this.nextNameIndex++}`;
  }
  freshName() {
    return this.uniqueName(CONSTANT_PREFIX);
  }
  keyOf(expression) {
    return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);
  }
}
/**
 * Visitor used to determine if 2 expressions are equivalent and can be shared in the
 * `ConstantPool`.
 *
 * When the id (string) generated by the visitor is equal, expressions are considered equivalent.
 */
class KeyVisitor {
  constructor() {
    this.visitWrappedNodeExpr = invalid$1;
    this.visitWriteVarExpr = invalid$1;
    this.visitWriteKeyExpr = invalid$1;
    this.visitWritePropExpr = invalid$1;
    this.visitInvokeFunctionExpr = invalid$1;
    this.visitTaggedTemplateExpr = invalid$1;
    this.visitInstantiateExpr = invalid$1;
    this.visitConditionalExpr = invalid$1;
    this.visitNotExpr = invalid$1;
    this.visitAssertNotNullExpr = invalid$1;
    this.visitCastExpr = invalid$1;
    this.visitFunctionExpr = invalid$1;
    this.visitUnaryOperatorExpr = invalid$1;
    this.visitBinaryOperatorExpr = invalid$1;
    this.visitReadPropExpr = invalid$1;
    this.visitReadKeyExpr = invalid$1;
    this.visitCommaExpr = invalid$1;
    this.visitLocalizedString = invalid$1;
  }
  visitLiteralExpr(ast) {
    return `${typeof ast.value === 'string' ? '"' + ast.value + '"' : ast.value}`;
  }
  visitLiteralArrayExpr(ast, context) {
    return `[${ast.entries.map(entry => entry.visitExpression(this, context)).join(',')}]`;
  }
  visitLiteralMapExpr(ast, context) {
    const mapKey = entry => {
      const quote = entry.quoted ? '"' : '';
      return `${quote}${entry.key}${quote}`;
    };
    const mapEntry = entry => `${mapKey(entry)}:${entry.value.visitExpression(this, context)}`;
    return `{${ast.entries.map(mapEntry).join(',')}`;
  }
  visitExternalExpr(ast) {
    return ast.value.moduleName ? `EX:${ast.value.moduleName}:${ast.value.name}` : `EX:${ast.value.runtime.name}`;
  }
  visitReadVarExpr(node) {
    return `VAR:${node.name}`;
  }
  visitTypeofExpr(node, context) {
    return `TYPEOF:${node.expr.visitExpression(this, context)}`;
  }
}
function invalid$1(arg) {
  throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);
}
function isVariable(e) {
  return e instanceof ReadVarExpr;
}
function isLongStringLiteral(expr) {
  return expr instanceof LiteralExpr && typeof expr.value === 'string' && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;
}
const CORE = '@angular/core';
class Identifiers {}
/* Methods */
Identifiers.NEW_METHOD = 'factory';
Identifiers.TRANSFORM_METHOD = 'transform';
Identifiers.PATCH_DEPS = 'patchedDeps';
Identifiers.core = {
  name: null,
  moduleName: CORE
};
/* Instructions */
Identifiers.namespaceHTML = {
  name: 'ɵɵnamespaceHTML',
  moduleName: CORE
};
Identifiers.namespaceMathML = {
  name: 'ɵɵnamespaceMathML',
  moduleName: CORE
};
Identifiers.namespaceSVG = {
  name: 'ɵɵnamespaceSVG',
  moduleName: CORE
};
Identifiers.element = {
  name: 'ɵɵelement',
  moduleName: CORE
};
Identifiers.elementStart = {
  name: 'ɵɵelementStart',
  moduleName: CORE
};
Identifiers.elementEnd = {
  name: 'ɵɵelementEnd',
  moduleName: CORE
};
Identifiers.advance = {
  name: 'ɵɵadvance',
  moduleName: CORE
};
Identifiers.syntheticHostProperty = {
  name: 'ɵɵsyntheticHostProperty',
  moduleName: CORE
};
Identifiers.syntheticHostListener = {
  name: 'ɵɵsyntheticHostListener',
  moduleName: CORE
};
Identifiers.attribute = {
  name: 'ɵɵattribute',
  moduleName: CORE
};
Identifiers.attributeInterpolate1 = {
  name: 'ɵɵattributeInterpolate1',
  moduleName: CORE
};
Identifiers.attributeInterpolate2 = {
  name: 'ɵɵattributeInterpolate2',
  moduleName: CORE
};
Identifiers.attributeInterpolate3 = {
  name: 'ɵɵattributeInterpolate3',
  moduleName: CORE
};
Identifiers.attributeInterpolate4 = {
  name: 'ɵɵattributeInterpolate4',
  moduleName: CORE
};
Identifiers.attributeInterpolate5 = {
  name: 'ɵɵattributeInterpolate5',
  moduleName: CORE
};
Identifiers.attributeInterpolate6 = {
  name: 'ɵɵattributeInterpolate6',
  moduleName: CORE
};
Identifiers.attributeInterpolate7 = {
  name: 'ɵɵattributeInterpolate7',
  moduleName: CORE
};
Identifiers.attributeInterpolate8 = {
  name: 'ɵɵattributeInterpolate8',
  moduleName: CORE
};
Identifiers.attributeInterpolateV = {
  name: 'ɵɵattributeInterpolateV',
  moduleName: CORE
};
Identifiers.classProp = {
  name: 'ɵɵclassProp',
  moduleName: CORE
};
Identifiers.elementContainerStart = {
  name: 'ɵɵelementContainerStart',
  moduleName: CORE
};
Identifiers.elementContainerEnd = {
  name: 'ɵɵelementContainerEnd',
  moduleName: CORE
};
Identifiers.elementContainer = {
  name: 'ɵɵelementContainer',
  moduleName: CORE
};
Identifiers.styleMap = {
  name: 'ɵɵstyleMap',
  moduleName: CORE
};
Identifiers.styleMapInterpolate1 = {
  name: 'ɵɵstyleMapInterpolate1',
  moduleName: CORE
};
Identifiers.styleMapInterpolate2 = {
  name: 'ɵɵstyleMapInterpolate2',
  moduleName: CORE
};
Identifiers.styleMapInterpolate3 = {
  name: 'ɵɵstyleMapInterpolate3',
  moduleName: CORE
};
Identifiers.styleMapInterpolate4 = {
  name: 'ɵɵstyleMapInterpolate4',
  moduleName: CORE
};
Identifiers.styleMapInterpolate5 = {
  name: 'ɵɵstyleMapInterpolate5',
  moduleName: CORE
};
Identifiers.styleMapInterpolate6 = {
  name: 'ɵɵstyleMapInterpolate6',
  moduleName: CORE
};
Identifiers.styleMapInterpolate7 = {
  name: 'ɵɵstyleMapInterpolate7',
  moduleName: CORE
};
Identifiers.styleMapInterpolate8 = {
  name: 'ɵɵstyleMapInterpolate8',
  moduleName: CORE
};
Identifiers.styleMapInterpolateV = {
  name: 'ɵɵstyleMapInterpolateV',
  moduleName: CORE
};
Identifiers.classMap = {
  name: 'ɵɵclassMap',
  moduleName: CORE
};
Identifiers.classMapInterpolate1 = {
  name: 'ɵɵclassMapInterpolate1',
  moduleName: CORE
};
Identifiers.classMapInterpolate2 = {
  name: 'ɵɵclassMapInterpolate2',
  moduleName: CORE
};
Identifiers.classMapInterpolate3 = {
  name: 'ɵɵclassMapInterpolate3',
  moduleName: CORE
};
Identifiers.classMapInterpolate4 = {
  name: 'ɵɵclassMapInterpolate4',
  moduleName: CORE
};
Identifiers.classMapInterpolate5 = {
  name: 'ɵɵclassMapInterpolate5',
  moduleName: CORE
};
Identifiers.classMapInterpolate6 = {
  name: 'ɵɵclassMapInterpolate6',
  moduleName: CORE
};
Identifiers.classMapInterpolate7 = {
  name: 'ɵɵclassMapInterpolate7',
  moduleName: CORE
};
Identifiers.classMapInterpolate8 = {
  name: 'ɵɵclassMapInterpolate8',
  moduleName: CORE
};
Identifiers.classMapInterpolateV = {
  name: 'ɵɵclassMapInterpolateV',
  moduleName: CORE
};
Identifiers.styleProp = {
  name: 'ɵɵstyleProp',
  moduleName: CORE
};
Identifiers.stylePropInterpolate1 = {
  name: 'ɵɵstylePropInterpolate1',
  moduleName: CORE
};
Identifiers.stylePropInterpolate2 = {
  name: 'ɵɵstylePropInterpolate2',
  moduleName: CORE
};
Identifiers.stylePropInterpolate3 = {
  name: 'ɵɵstylePropInterpolate3',
  moduleName: CORE
};
Identifiers.stylePropInterpolate4 = {
  name: 'ɵɵstylePropInterpolate4',
  moduleName: CORE
};
Identifiers.stylePropInterpolate5 = {
  name: 'ɵɵstylePropInterpolate5',
  moduleName: CORE
};
Identifiers.stylePropInterpolate6 = {
  name: 'ɵɵstylePropInterpolate6',
  moduleName: CORE
};
Identifiers.stylePropInterpolate7 = {
  name: 'ɵɵstylePropInterpolate7',
  moduleName: CORE
};
Identifiers.stylePropInterpolate8 = {
  name: 'ɵɵstylePropInterpolate8',
  moduleName: CORE
};
Identifiers.stylePropInterpolateV = {
  name: 'ɵɵstylePropInterpolateV',
  moduleName: CORE
};
Identifiers.nextContext = {
  name: 'ɵɵnextContext',
  moduleName: CORE
};
Identifiers.resetView = {
  name: 'ɵɵresetView',
  moduleName: CORE
};
Identifiers.templateCreate = {
  name: 'ɵɵtemplate',
  moduleName: CORE
};
Identifiers.text = {
  name: 'ɵɵtext',
  moduleName: CORE
};
Identifiers.enableBindings = {
  name: 'ɵɵenableBindings',
  moduleName: CORE
};
Identifiers.disableBindings = {
  name: 'ɵɵdisableBindings',
  moduleName: CORE
};
Identifiers.getCurrentView = {
  name: 'ɵɵgetCurrentView',
  moduleName: CORE
};
Identifiers.textInterpolate = {
  name: 'ɵɵtextInterpolate',
  moduleName: CORE
};
Identifiers.textInterpolate1 = {
  name: 'ɵɵtextInterpolate1',
  moduleName: CORE
};
Identifiers.textInterpolate2 = {
  name: 'ɵɵtextInterpolate2',
  moduleName: CORE
};
Identifiers.textInterpolate3 = {
  name: 'ɵɵtextInterpolate3',
  moduleName: CORE
};
Identifiers.textInterpolate4 = {
  name: 'ɵɵtextInterpolate4',
  moduleName: CORE
};
Identifiers.textInterpolate5 = {
  name: 'ɵɵtextInterpolate5',
  moduleName: CORE
};
Identifiers.textInterpolate6 = {
  name: 'ɵɵtextInterpolate6',
  moduleName: CORE
};
Identifiers.textInterpolate7 = {
  name: 'ɵɵtextInterpolate7',
  moduleName: CORE
};
Identifiers.textInterpolate8 = {
  name: 'ɵɵtextInterpolate8',
  moduleName: CORE
};
Identifiers.textInterpolateV = {
  name: 'ɵɵtextInterpolateV',
  moduleName: CORE
};
Identifiers.restoreView = {
  name: 'ɵɵrestoreView',
  moduleName: CORE
};
Identifiers.pureFunction0 = {
  name: 'ɵɵpureFunction0',
  moduleName: CORE
};
Identifiers.pureFunction1 = {
  name: 'ɵɵpureFunction1',
  moduleName: CORE
};
Identifiers.pureFunction2 = {
  name: 'ɵɵpureFunction2',
  moduleName: CORE
};
Identifiers.pureFunction3 = {
  name: 'ɵɵpureFunction3',
  moduleName: CORE
};
Identifiers.pureFunction4 = {
  name: 'ɵɵpureFunction4',
  moduleName: CORE
};
Identifiers.pureFunction5 = {
  name: 'ɵɵpureFunction5',
  moduleName: CORE
};
Identifiers.pureFunction6 = {
  name: 'ɵɵpureFunction6',
  moduleName: CORE
};
Identifiers.pureFunction7 = {
  name: 'ɵɵpureFunction7',
  moduleName: CORE
};
Identifiers.pureFunction8 = {
  name: 'ɵɵpureFunction8',
  moduleName: CORE
};
Identifiers.pureFunctionV = {
  name: 'ɵɵpureFunctionV',
  moduleName: CORE
};
Identifiers.pipeBind1 = {
  name: 'ɵɵpipeBind1',
  moduleName: CORE
};
Identifiers.pipeBind2 = {
  name: 'ɵɵpipeBind2',
  moduleName: CORE
};
Identifiers.pipeBind3 = {
  name: 'ɵɵpipeBind3',
  moduleName: CORE
};
Identifiers.pipeBind4 = {
  name: 'ɵɵpipeBind4',
  moduleName: CORE
};
Identifiers.pipeBindV = {
  name: 'ɵɵpipeBindV',
  moduleName: CORE
};
Identifiers.hostProperty = {
  name: 'ɵɵhostProperty',
  moduleName: CORE
};
Identifiers.property = {
  name: 'ɵɵproperty',
  moduleName: CORE
};
Identifiers.propertyInterpolate = {
  name: 'ɵɵpropertyInterpolate',
  moduleName: CORE
};
Identifiers.propertyInterpolate1 = {
  name: 'ɵɵpropertyInterpolate1',
  moduleName: CORE
};
Identifiers.propertyInterpolate2 = {
  name: 'ɵɵpropertyInterpolate2',
  moduleName: CORE
};
Identifiers.propertyInterpolate3 = {
  name: 'ɵɵpropertyInterpolate3',
  moduleName: CORE
};
Identifiers.propertyInterpolate4 = {
  name: 'ɵɵpropertyInterpolate4',
  moduleName: CORE
};
Identifiers.propertyInterpolate5 = {
  name: 'ɵɵpropertyInterpolate5',
  moduleName: CORE
};
Identifiers.propertyInterpolate6 = {
  name: 'ɵɵpropertyInterpolate6',
  moduleName: CORE
};
Identifiers.propertyInterpolate7 = {
  name: 'ɵɵpropertyInterpolate7',
  moduleName: CORE
};
Identifiers.propertyInterpolate8 = {
  name: 'ɵɵpropertyInterpolate8',
  moduleName: CORE
};
Identifiers.propertyInterpolateV = {
  name: 'ɵɵpropertyInterpolateV',
  moduleName: CORE
};
Identifiers.i18n = {
  name: 'ɵɵi18n',
  moduleName: CORE
};
Identifiers.i18nAttributes = {
  name: 'ɵɵi18nAttributes',
  moduleName: CORE
};
Identifiers.i18nExp = {
  name: 'ɵɵi18nExp',
  moduleName: CORE
};
Identifiers.i18nStart = {
  name: 'ɵɵi18nStart',
  moduleName: CORE
};
Identifiers.i18nEnd = {
  name: 'ɵɵi18nEnd',
  moduleName: CORE
};
Identifiers.i18nApply = {
  name: 'ɵɵi18nApply',
  moduleName: CORE
};
Identifiers.i18nPostprocess = {
  name: 'ɵɵi18nPostprocess',
  moduleName: CORE
};
Identifiers.pipe = {
  name: 'ɵɵpipe',
  moduleName: CORE
};
Identifiers.projection = {
  name: 'ɵɵprojection',
  moduleName: CORE
};
Identifiers.projectionDef = {
  name: 'ɵɵprojectionDef',
  moduleName: CORE
};
Identifiers.reference = {
  name: 'ɵɵreference',
  moduleName: CORE
};
Identifiers.inject = {
  name: 'ɵɵinject',
  moduleName: CORE
};
Identifiers.injectAttribute = {
  name: 'ɵɵinjectAttribute',
  moduleName: CORE
};
Identifiers.directiveInject = {
  name: 'ɵɵdirectiveInject',
  moduleName: CORE
};
Identifiers.invalidFactory = {
  name: 'ɵɵinvalidFactory',
  moduleName: CORE
};
Identifiers.invalidFactoryDep = {
  name: 'ɵɵinvalidFactoryDep',
  moduleName: CORE
};
Identifiers.templateRefExtractor = {
  name: 'ɵɵtemplateRefExtractor',
  moduleName: CORE
};
Identifiers.forwardRef = {
  name: 'forwardRef',
  moduleName: CORE
};
Identifiers.resolveForwardRef = {
  name: 'resolveForwardRef',
  moduleName: CORE
};
Identifiers.ɵɵdefineInjectable = {
  name: 'ɵɵdefineInjectable',
  moduleName: CORE
};
Identifiers.declareInjectable = {
  name: 'ɵɵngDeclareInjectable',
  moduleName: CORE
};
Identifiers.InjectableDeclaration = {
  name: 'ɵɵInjectableDeclaration',
  moduleName: CORE
};
Identifiers.resolveWindow = {
  name: 'ɵɵresolveWindow',
  moduleName: CORE
};
Identifiers.resolveDocument = {
  name: 'ɵɵresolveDocument',
  moduleName: CORE
};
Identifiers.resolveBody = {
  name: 'ɵɵresolveBody',
  moduleName: CORE
};
Identifiers.defineComponent = {
  name: 'ɵɵdefineComponent',
  moduleName: CORE
};
Identifiers.declareComponent = {
  name: 'ɵɵngDeclareComponent',
  moduleName: CORE
};
Identifiers.setComponentScope = {
  name: 'ɵɵsetComponentScope',
  moduleName: CORE
};
Identifiers.ChangeDetectionStrategy = {
  name: 'ChangeDetectionStrategy',
  moduleName: CORE
};
Identifiers.ViewEncapsulation = {
  name: 'ViewEncapsulation',
  moduleName: CORE
};
Identifiers.ComponentDeclaration = {
  name: 'ɵɵComponentDeclaration',
  moduleName: CORE
};
Identifiers.FactoryDeclaration = {
  name: 'ɵɵFactoryDeclaration',
  moduleName: CORE
};
Identifiers.declareFactory = {
  name: 'ɵɵngDeclareFactory',
  moduleName: CORE
};
Identifiers.FactoryTarget = {
  name: 'ɵɵFactoryTarget',
  moduleName: CORE
};
Identifiers.defineDirective = {
  name: 'ɵɵdefineDirective',
  moduleName: CORE
};
Identifiers.declareDirective = {
  name: 'ɵɵngDeclareDirective',
  moduleName: CORE
};
Identifiers.DirectiveDeclaration = {
  name: 'ɵɵDirectiveDeclaration',
  moduleName: CORE
};
Identifiers.InjectorDef = {
  name: 'ɵɵInjectorDef',
  moduleName: CORE
};
Identifiers.InjectorDeclaration = {
  name: 'ɵɵInjectorDeclaration',
  moduleName: CORE
};
Identifiers.defineInjector = {
  name: 'ɵɵdefineInjector',
  moduleName: CORE
};
Identifiers.declareInjector = {
  name: 'ɵɵngDeclareInjector',
  moduleName: CORE
};
Identifiers.NgModuleDeclaration = {
  name: 'ɵɵNgModuleDeclaration',
  moduleName: CORE
};
Identifiers.ModuleWithProviders = {
  name: 'ModuleWithProviders',
  moduleName: CORE
};
Identifiers.defineNgModule = {
  name: 'ɵɵdefineNgModule',
  moduleName: CORE
};
Identifiers.declareNgModule = {
  name: 'ɵɵngDeclareNgModule',
  moduleName: CORE
};
Identifiers.setNgModuleScope = {
  name: 'ɵɵsetNgModuleScope',
  moduleName: CORE
};
Identifiers.registerNgModuleType = {
  name: 'ɵɵregisterNgModuleType',
  moduleName: CORE
};
Identifiers.PipeDeclaration = {
  name: 'ɵɵPipeDeclaration',
  moduleName: CORE
};
Identifiers.definePipe = {
  name: 'ɵɵdefinePipe',
  moduleName: CORE
};
Identifiers.declarePipe = {
  name: 'ɵɵngDeclarePipe',
  moduleName: CORE
};
Identifiers.declareClassMetadata = {
  name: 'ɵɵngDeclareClassMetadata',
  moduleName: CORE
};
Identifiers.setClassMetadata = {
  name: 'ɵsetClassMetadata',
  moduleName: CORE
};
Identifiers.queryRefresh = {
  name: 'ɵɵqueryRefresh',
  moduleName: CORE
};
Identifiers.viewQuery = {
  name: 'ɵɵviewQuery',
  moduleName: CORE
};
Identifiers.loadQuery = {
  name: 'ɵɵloadQuery',
  moduleName: CORE
};
Identifiers.contentQuery = {
  name: 'ɵɵcontentQuery',
  moduleName: CORE
};
Identifiers.NgOnChangesFeature = {
  name: 'ɵɵNgOnChangesFeature',
  moduleName: CORE
};
Identifiers.InheritDefinitionFeature = {
  name: 'ɵɵInheritDefinitionFeature',
  moduleName: CORE
};
Identifiers.CopyDefinitionFeature = {
  name: 'ɵɵCopyDefinitionFeature',
  moduleName: CORE
};
Identifiers.StandaloneFeature = {
  name: 'ɵɵStandaloneFeature',
  moduleName: CORE
};
Identifiers.ProvidersFeature = {
  name: 'ɵɵProvidersFeature',
  moduleName: CORE
};
Identifiers.HostDirectivesFeature = {
  name: 'ɵɵHostDirectivesFeature',
  moduleName: CORE
};
Identifiers.listener = {
  name: 'ɵɵlistener',
  moduleName: CORE
};
Identifiers.getInheritedFactory = {
  name: 'ɵɵgetInheritedFactory',
  moduleName: CORE
};
// sanitization-related functions
Identifiers.sanitizeHtml = {
  name: 'ɵɵsanitizeHtml',
  moduleName: CORE
};
Identifiers.sanitizeStyle = {
  name: 'ɵɵsanitizeStyle',
  moduleName: CORE
};
Identifiers.sanitizeResourceUrl = {
  name: 'ɵɵsanitizeResourceUrl',
  moduleName: CORE
};
Identifiers.sanitizeScript = {
  name: 'ɵɵsanitizeScript',
  moduleName: CORE
};
Identifiers.sanitizeUrl = {
  name: 'ɵɵsanitizeUrl',
  moduleName: CORE
};
Identifiers.sanitizeUrlOrResourceUrl = {
  name: 'ɵɵsanitizeUrlOrResourceUrl',
  moduleName: CORE
};
Identifiers.trustConstantHtml = {
  name: 'ɵɵtrustConstantHtml',
  moduleName: CORE
};
Identifiers.trustConstantResourceUrl = {
  name: 'ɵɵtrustConstantResourceUrl',
  moduleName: CORE
};
Identifiers.validateIframeAttribute = {
  name: 'ɵɵvalidateIframeAttribute',
  moduleName: CORE
};
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function splitAtColon(input, defaultValues) {
  return _splitAt(input, ':', defaultValues);
}
function splitAtPeriod(input, defaultValues) {
  return _splitAt(input, '.', defaultValues);
}
function _splitAt(input, character, defaultValues) {
  const characterIndex = input.indexOf(character);
  if (characterIndex == -1) return defaultValues;
  return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
}
function noUndefined(val) {
  return val === undefined ? null : val;
}
function error(msg) {
  throw new Error(`Internal Error: ${msg}`);
}
// Escape characters that have a special meaning in Regular Expressions
function escapeRegExp(s) {
  return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}
function utf8Encode(str) {
  let encoded = [];
  for (let index = 0; index < str.length; index++) {
    let codePoint = str.charCodeAt(index);
    // decode surrogate
    // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {
      const low = str.charCodeAt(index + 1);
      if (low >= 0xdc00 && low <= 0xdfff) {
        index++;
        codePoint = (codePoint - 0xd800 << 10) + low - 0xdc00 + 0x10000;
      }
    }
    if (codePoint <= 0x7f) {
      encoded.push(codePoint);
    } else if (codePoint <= 0x7ff) {
      encoded.push(codePoint >> 6 & 0x1F | 0xc0, codePoint & 0x3f | 0x80);
    } else if (codePoint <= 0xffff) {
      encoded.push(codePoint >> 12 | 0xe0, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
    } else if (codePoint <= 0x1fffff) {
      encoded.push(codePoint >> 18 & 0x07 | 0xf0, codePoint >> 12 & 0x3f | 0x80, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
    }
  }
  return encoded;
}
function stringify(token) {
  if (typeof token === 'string') {
    return token;
  }
  if (Array.isArray(token)) {
    return '[' + token.map(stringify).join(', ') + ']';
  }
  if (token == null) {
    return '' + token;
  }
  if (token.overriddenName) {
    return `${token.overriddenName}`;
  }
  if (token.name) {
    return `${token.name}`;
  }
  if (!token.toString) {
    return 'object';
  }
  // WARNING: do not try to `JSON.stringify(token)` here
  // see https://github.com/angular/angular/issues/23440
  const res = token.toString();
  if (res == null) {
    return '' + res;
  }
  const newLineIndex = res.indexOf('\n');
  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
class Version {
  constructor(full) {
    this.full = full;
    const splits = full.split('.');
    this.major = splits[0];
    this.minor = splits[1];
    this.patch = splits.slice(2).join('.');
  }
}
// Check `global` first, because in Node tests both `global` and `window` may be defined and our
// `_global` variable should point to the NodeJS `global` in that case. Note: Typeof/Instanceof
// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:
// https://github.com/terser/terser/issues/250.
const _global = /* @__PURE__ */(() => typeof global !== 'undefined' && global || typeof window !== 'undefined' && window || typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self)();
function newArray(size, value) {
  const list = [];
  for (let i = 0; i < size; i++) {
    list.push(value);
  }
  return list;
}
/**
 * Partitions a given array into 2 arrays, based on a boolean value returned by the condition
 * function.
 *
 * @param arr Input array that should be partitioned
 * @param conditionFn Condition function that is called for each item in a given array and returns a
 * boolean value.
 */
function partitionArray(arr, conditionFn) {
  const truthy = [];
  const falsy = [];
  for (const item of arr) {
    (conditionFn(item) ? truthy : falsy).push(item);
  }
  return [truthy, falsy];
}

// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
const VERSION$1 = 3;
const JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
class SourceMapGenerator {
  constructor(file = null) {
    this.file = file;
    this.sourcesContent = new Map();
    this.lines = [];
    this.lastCol0 = 0;
    this.hasMappings = false;
  }
  // The content is `null` when the content is expected to be loaded using the URL
  addSource(url, content = null) {
    if (!this.sourcesContent.has(url)) {
      this.sourcesContent.set(url, content);
    }
    return this;
  }
  addLine() {
    this.lines.push([]);
    this.lastCol0 = 0;
    return this;
  }
  addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
    if (!this.currentLine) {
      throw new Error(`A line must be added before mappings can be added`);
    }
    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
      throw new Error(`Unknown source file "${sourceUrl}"`);
    }
    if (col0 == null) {
      throw new Error(`The column in the generated code must be provided`);
    }
    if (col0 < this.lastCol0) {
      throw new Error(`Mapping should be added in output order`);
    }
    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
      throw new Error(`The source location must be provided when a source url is provided`);
    }
    this.hasMappings = true;
    this.lastCol0 = col0;
    this.currentLine.push({
      col0,
      sourceUrl,
      sourceLine0,
      sourceCol0
    });
    return this;
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get currentLine() {
    return this.lines.slice(-1)[0];
  }
  toJSON() {
    if (!this.hasMappings) {
      return null;
    }
    const sourcesIndex = new Map();
    const sources = [];
    const sourcesContent = [];
    Array.from(this.sourcesContent.keys()).forEach((url, i) => {
      sourcesIndex.set(url, i);
      sources.push(url);
      sourcesContent.push(this.sourcesContent.get(url) || null);
    });
    let mappings = '';
    let lastCol0 = 0;
    let lastSourceIndex = 0;
    let lastSourceLine0 = 0;
    let lastSourceCol0 = 0;
    this.lines.forEach(segments => {
      lastCol0 = 0;
      mappings += segments.map(segment => {
        // zero-based starting column of the line in the generated code
        let segAsStr = toBase64VLQ(segment.col0 - lastCol0);
        lastCol0 = segment.col0;
        if (segment.sourceUrl != null) {
          // zero-based index into the “sources” list
          segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
          lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
          // the zero-based starting line in the original source
          segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
          lastSourceLine0 = segment.sourceLine0;
          // the zero-based starting column in the original source
          segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
          lastSourceCol0 = segment.sourceCol0;
        }
        return segAsStr;
      }).join(',');
      mappings += ';';
    });
    mappings = mappings.slice(0, -1);
    return {
      'file': this.file || '',
      'version': VERSION$1,
      'sourceRoot': '',
      'sources': sources,
      'sourcesContent': sourcesContent,
      'mappings': mappings
    };
  }
  toJsComment() {
    return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';
  }
}
function toBase64String(value) {
  let b64 = '';
  const encoded = utf8Encode(value);
  for (let i = 0; i < encoded.length;) {
    const i1 = encoded[i++];
    const i2 = i < encoded.length ? encoded[i++] : null;
    const i3 = i < encoded.length ? encoded[i++] : null;
    b64 += toBase64Digit(i1 >> 2);
    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));
    b64 += i2 === null ? '=' : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));
    b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);
  }
  return b64;
}
function toBase64VLQ(value) {
  value = value < 0 ? (-value << 1) + 1 : value << 1;
  let out = '';
  do {
    let digit = value & 31;
    value = value >> 5;
    if (value > 0) {
      digit = digit | 32;
    }
    out += toBase64Digit(digit);
  } while (value > 0);
  return out;
}
const B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
function toBase64Digit(value) {
  if (value < 0 || value >= 64) {
    throw new Error(`Can only encode value in the range [0, 63]`);
  }
  return B64_DIGITS[value];
}
const _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
const _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
const _INDENT_WITH = '  ';
class _EmittedLine {
  constructor(indent) {
    this.indent = indent;
    this.partsLength = 0;
    this.parts = [];
    this.srcSpans = [];
  }
}
class EmitterVisitorContext {
  static createRoot() {
    return new EmitterVisitorContext(0);
  }
  constructor(_indent) {
    this._indent = _indent;
    this._lines = [new _EmittedLine(_indent)];
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get _currentLine() {
    return this._lines[this._lines.length - 1];
  }
  println(from, lastPart = '') {
    this.print(from || null, lastPart, true);
  }
  lineIsEmpty() {
    return this._currentLine.parts.length === 0;
  }
  lineLength() {
    return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
  }
  print(from, part, newLine = false) {
    if (part.length > 0) {
      this._currentLine.parts.push(part);
      this._currentLine.partsLength += part.length;
      this._currentLine.srcSpans.push(from && from.sourceSpan || null);
    }
    if (newLine) {
      this._lines.push(new _EmittedLine(this._indent));
    }
  }
  removeEmptyLastLine() {
    if (this.lineIsEmpty()) {
      this._lines.pop();
    }
  }
  incIndent() {
    this._indent++;
    if (this.lineIsEmpty()) {
      this._currentLine.indent = this._indent;
    }
  }
  decIndent() {
    this._indent--;
    if (this.lineIsEmpty()) {
      this._currentLine.indent = this._indent;
    }
  }
  toSource() {
    return this.sourceLines.map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '').join('\n');
  }
  toSourceMapGenerator(genFilePath, startsAtLine = 0) {
    const map = new SourceMapGenerator(genFilePath);
    let firstOffsetMapped = false;
    const mapFirstOffsetIfNeeded = () => {
      if (!firstOffsetMapped) {
        // Add a single space so that tools won't try to load the file from disk.
        // Note: We are using virtual urls like `ng:///`, so we have to
        // provide a content here.
        map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);
        firstOffsetMapped = true;
      }
    };
    for (let i = 0; i < startsAtLine; i++) {
      map.addLine();
      mapFirstOffsetIfNeeded();
    }
    this.sourceLines.forEach((line, lineIdx) => {
      map.addLine();
      const spans = line.srcSpans;
      const parts = line.parts;
      let col0 = line.indent * _INDENT_WITH.length;
      let spanIdx = 0;
      // skip leading parts without source spans
      while (spanIdx < spans.length && !spans[spanIdx]) {
        col0 += parts[spanIdx].length;
        spanIdx++;
      }
      if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
        firstOffsetMapped = true;
      } else {
        mapFirstOffsetIfNeeded();
      }
      while (spanIdx < spans.length) {
        const span = spans[spanIdx];
        const source = span.start.file;
        const sourceLine = span.start.line;
        const sourceCol = span.start.col;
        map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
        col0 += parts[spanIdx].length;
        spanIdx++;
        // assign parts without span or the same span to the previous segment
        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
          col0 += parts[spanIdx].length;
          spanIdx++;
        }
      }
    });
    return map;
  }
  spanOf(line, column) {
    const emittedLine = this._lines[line];
    if (emittedLine) {
      let columnsLeft = column - _createIndent(emittedLine.indent).length;
      for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
        const part = emittedLine.parts[partIndex];
        if (part.length > columnsLeft) {
          return emittedLine.srcSpans[partIndex];
        }
        columnsLeft -= part.length;
      }
    }
    return null;
  }
  /**
   * @internal strip this from published d.ts files due to
   * https://github.com/microsoft/TypeScript/issues/36216
   */
  get sourceLines() {
    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
      return this._lines.slice(0, -1);
    }
    return this._lines;
  }
}
class AbstractEmitterVisitor {
  constructor(_escapeDollarInStrings) {
    this._escapeDollarInStrings = _escapeDollarInStrings;
  }
  printLeadingComments(stmt, ctx) {
    if (stmt.leadingComments === undefined) {
      return;
    }
    for (const comment of stmt.leadingComments) {
      if (comment instanceof JSDocComment) {
        ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);
      } else {
        if (comment.multiline) {
          ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);
        } else {
          comment.text.split('\n').forEach(line => {
            ctx.println(stmt, `// ${line}`);
          });
        }
      }
    }
  }
  visitExpressionStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    stmt.expr.visitExpression(this, ctx);
    ctx.println(stmt, ';');
    return null;
  }
  visitReturnStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    ctx.print(stmt, `return `);
    stmt.value.visitExpression(this, ctx);
    ctx.println(stmt, ';');
    return null;
  }
  visitIfStmt(stmt, ctx) {
    this.printLeadingComments(stmt, ctx);
    ctx.print(stmt, `if (`);
    stmt.condition.visitExpression(this, ctx);
    ctx.print(stmt, `) {`);
    const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
    if (stmt.trueCase.length <= 1 && !hasElseCase) {
      ctx.print(stmt, ` `);
      this.visitAllStatements(stmt.trueCase, ctx);
      ctx.removeEmptyLastLine();
      ctx.print(stmt, ` `);
    } else {
      ctx.println();
      ctx.incIndent();
      this.visitAllStatements(stmt.trueCase, ctx);
      ctx.decIndent();
      if (hasElseCase) {
        ctx.println(stmt, `} else {`);
        ctx.incIndent();
        this.visitAllStatements(stmt.falseCase, ctx);
        ctx.decIndent();
      }
    }
    ctx.println(stmt, `}`);
    return null;
  }
  visitWriteVarExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, '(');
    }
    ctx.print(expr, `${expr.name} = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ')');
    }
    return null;
  }
  visitWriteKeyExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, '(');
    }
    expr.receiver.visitExpression(this, ctx);
    ctx.print(expr, `[`);
    expr.index.visitExpression(this, ctx);
    ctx.print(expr, `] = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ')');
    }
    return null;
  }
  visitWritePropExpr(expr, ctx) {
    const lineWasEmpty = ctx.lineIsEmpty();
    if (!lineWasEmpty) {
      ctx.print(expr, '(');
    }
    expr.receiver.visitExpression(this, ctx);
    ctx.print(expr, `.${expr.name} = `);
    expr.value.visitExpression(this, ctx);
    if (!lineWasEmpty) {
      ctx.print(expr, ')');
    }
    return null;
  }
  visitInvokeFunctionExpr(expr, ctx) {
    expr.fn.visitExpression(this, ctx);
    ctx.print(expr, `(`);
    this.visitAllExpressions(expr.args, ctx, ',');
    ctx.print(expr, `)`);
    return null;
  }
  visitTaggedTemplateExpr(expr, ctx) {
    expr.tag.visitExpression(this, ctx);
    ctx.print(expr, '`' + expr.template.elements[0].rawText);
    for (let i = 1; i < expr.template.elements.length; i++) {
      ctx.print(expr, '${');
      expr.template.expressions[i - 1].visitExpression(this, ctx);
      ctx.print(expr, `}${expr.template.elements[i].rawText}`);
    }
    ctx.print(expr, '`');
    return null;
  }
  visitWrappedNodeExpr(ast, ctx) {
    throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');
  }
  visitTypeofExpr(expr, ctx) {
    ctx.print(expr, 'typeof ');
    expr.expr.visitExpression(this, ctx);
  }
  visitReadVarExpr(ast, ctx) {
    ctx.print(ast, ast.name);
    return null;
  }
  visitInstantiateExpr(ast, ctx) {
    ctx.print(ast, `new `);
    ast.classExpr.visitExpression(this, ctx);
    ctx.print(ast, `(`);
    this.visitAllExpressions(ast.args, ctx, ',');
    ctx.print(ast, `)`);
    return null;
  }
  visitLiteralExpr(ast, ctx) {
    const value = ast.value;
    if (typeof value === 'string') {
      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
    } else {
      ctx.print(ast, `${value}`);
    }
    return null;
  }
  visitLocalizedString(ast, ctx) {
    const head = ast.serializeI18nHead();
    ctx.print(ast, '$localize `' + head.raw);
    for (let i = 1; i < ast.messageParts.length; i++) {
      ctx.print(ast, '${');
      ast.expressions[i - 1].visitExpression(this, ctx);
      ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);
    }
    ctx.print(ast, '`');
    return null;
  }
  visitConditionalExpr(ast, ctx) {
    ctx.print(ast, `(`);
    ast.condition.visitExpression(this, ctx);
    ctx.print(ast, '? ');
    ast.trueCase.visitExpression(this, ctx);
    ctx.print(ast, ': ');
    ast.falseCase.visitExpression(this, ctx);
    ctx.print(ast, `)`);
    return null;
  }
  visitNotExpr(ast, ctx) {
    ctx.print(ast, '!');
    ast.condition.visitExpression(this, ctx);
    return null;
  }
  visitUnaryOperatorExpr(ast, ctx) {
    let opStr;
    switch (ast.operator) {
      case UnaryOperator.Plus:
        opStr = '+';
        break;
      case UnaryOperator.Minus:
        opStr = '-';
        break;
      default:
        throw new Error(`Unknown operator ${ast.operator}`);
    }
    if (ast.parens) ctx.print(ast, `(`);
    ctx.print(ast, opStr);
    ast.expr.visitExpression(this, ctx);
    if (ast.parens) ctx.print(ast, `)`);
    return null;
  }
  visitBinaryOperatorExpr(ast, ctx) {
    let opStr;
    switch (ast.operator) {
      case BinaryOperator.Equals:
        opStr = '==';
        break;
      case BinaryOperator.Identical:
        opStr = '===';
        break;
      case BinaryOperator.NotEquals:
        opStr = '!=';
        break;
      case BinaryOperator.NotIdentical:
        opStr = '!==';
        break;
      case BinaryOperator.And:
        opStr = '&&';
        break;
      case BinaryOperator.BitwiseAnd:
        opStr = '&';
        break;
      case BinaryOperator.Or:
        opStr = '||';
        break;
      case BinaryOperator.Plus:
        opStr = '+';
        break;
      case BinaryOperator.Minus:
        opStr = '-';
        break;
      case BinaryOperator.Divide:
        opStr = '/';
        break;
      case BinaryOperator.Multiply:
        opStr = '*';
        break;
      case BinaryOperator.Modulo:
        opStr = '%';
        break;
      case BinaryOperator.Lower:
        opStr = '<';
        break;
      case BinaryOperator.LowerEquals:
        opStr = '<=';
        break;
      case BinaryOperator.Bigger:
        opStr = '>';
        break;
      case BinaryOperator.BiggerEquals:
        opStr = '>=';
        break;
      case BinaryOperator.NullishCoalesce:
        opStr = '??';
        break;
      default:
        throw new Error(`Unknown operator ${ast.operator}`);
    }
    if (ast.parens) ctx.print(ast, `(`);
    ast.lhs.visitExpression(this, ctx);
    ctx.print(ast, ` ${opStr} `);
    ast.rhs.visitExpression(this, ctx);
    if (ast.parens) ctx.print(ast, `)`);
    return null;
  }
  visitReadPropExpr(ast, ctx) {
    ast.receiver.visitExpression(this, ctx);
    ctx.print(ast, `.`);
    ctx.print(ast, ast.name);
    return null;
  }
  visitReadKeyExpr(ast, ctx) {
    ast.receiver.visitExpression(this, ctx);
    ctx.print(ast, `[`);
    ast.index.visitExpression(this, ctx);
    ctx.print(ast, `]`);
    return null;
  }
  visitLiteralArrayExpr(ast, ctx) {
    ctx.print(ast, `[`);
    this.visitAllExpressions(ast.entries, ctx, ',');
    ctx.print(ast, `]`);
    return null;
  }
  visitLiteralMapExpr(ast, ctx) {
    ctx.print(ast, `{`);
    this.visitAllObjects(entry => {
      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);
      entry.value.visitExpression(this, ctx);
    }, ast.entries, ctx, ',');
    ctx.print(ast, `}`);
    return null;
  }
  visitCommaExpr(ast, ctx) {
    ctx.print(ast, '(');
    this.visitAllExpressions(ast.parts, ctx, ',');
    ctx.print(ast, ')');
    return null;
  }
  visitAllExpressions(expressions, ctx, separator) {
    this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);
  }
  visitAllObjects(handler, expressions, ctx, separator) {
    let incrementedIndent = false;
    for (let i = 0; i < expressions.length; i++) {
      if (i > 0) {
        if (ctx.lineLength() > 80) {
          ctx.print(null, separator, true);
          if (!incrementedIndent) {
            // continuation are marked with double indent.
            ctx.incIndent();
            ctx.incIndent();
            incrementedIndent = true;
          }
        } else {
          ctx.print(null, separator, false);
        }
      }
      handler(expressions[i]);
    }
    if (incrementedIndent) {
      // continuation are marked with double indent.
      ctx.decIndent();
      ctx.decIndent();
    }
  }
  visitAllStatements(statements, ctx) {
    statements.forEach(stmt => stmt.visitStatement(this, ctx));
  }
}
function escapeIdentifier(input, escapeDollar, alwaysQuote = true) {
  if (input == null) {
    return null;
  }
  const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {
    if (match[0] == '$') {
      return escapeDollar ? '\\$' : '$';
    } else if (match[0] == '\n') {
      return '\\n';
    } else if (match[0] == '\r') {
      return '\\r';
    } else {
      return `\\${match[0]}`;
    }
  });
  const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
  return requiresQuotes ? `'${body}'` : body;
}
function _createIndent(count) {
  let res = '';
  for (let i = 0; i < count; i++) {
    res += _INDENT_WITH;
  }
  return res;
}
function typeWithParameters(type, numParams) {
  if (numParams === 0) {
    return expressionType(type);
  }
  const params = [];
  for (let i = 0; i < numParams; i++) {
    params.push(DYNAMIC_TYPE);
  }
  return expressionType(type, undefined, params);
}
const ANIMATE_SYMBOL_PREFIX = '@';
function prepareSyntheticPropertyName(name) {
  return `${ANIMATE_SYMBOL_PREFIX}${name}`;
}
function prepareSyntheticListenerName(name, phase) {
  return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;
}
function getSafePropertyAccessString(accessor, name) {
  const escapedName = escapeIdentifier(name, false, false);
  return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;
}
function prepareSyntheticListenerFunctionName(name, phase) {
  return `animation_${name}_${phase}`;
}
function jitOnlyGuardedExpression(expr) {
  return guardedExpression('ngJitMode', expr);
}
function devOnlyGuardedExpression(expr) {
  return guardedExpression('ngDevMode', expr);
}
function guardedExpression(guard, expr) {
  const guardExpr = new ExternalExpr({
    name: guard,
    moduleName: null
  });
  const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));
  const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr, /* type */undefined, /* sourceSpan */undefined, true);
  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);
}
function wrapReference(value) {
  const wrapped = new WrappedNodeExpr(value);
  return {
    value: wrapped,
    type: wrapped
  };
}
function refsToArray(refs, shouldForwardDeclare) {
  const values = literalArr(refs.map(ref => ref.value));
  return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;
}
function createMayBeForwardRefExpression(expression, forwardRef) {
  return {
    expression,
    forwardRef
  };
}
/**
 * Convert a `MaybeForwardRefExpression` to an `Expression`, possibly wrapping its expression in a
 * `forwardRef()` call.
 *
 * If `MaybeForwardRefExpression.forwardRef` is `ForwardRefHandling.Unwrapped` then the expression
 * was originally wrapped in a `forwardRef()` call to prevent the value from being eagerly evaluated
 * in the code.
 *
 * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and
 * `packages/compiler/src/jit_compiler_facade.ts` for more information.
 */
function convertFromMaybeForwardRefExpression({
  expression,
  forwardRef
}) {
  switch (forwardRef) {
    case 0 /* ForwardRefHandling.None */:
    case 1 /* ForwardRefHandling.Wrapped */:
      return expression;
    case 2 /* ForwardRefHandling.Unwrapped */:
      return generateForwardRef(expression);
  }
}
/**
 * Generate an expression that has the given `expr` wrapped in the following form:
 *
 * ```
 * forwardRef(() => expr)
 * ```
 */
function generateForwardRef(expr) {
  return importExpr(Identifiers.forwardRef).callFn([fn([], [new ReturnStatement(expr)])]);
}
var R3FactoryDelegateType;
(function (R3FactoryDelegateType) {
  R3FactoryDelegateType[R3FactoryDelegateType["Class"] = 0] = "Class";
  R3FactoryDelegateType[R3FactoryDelegateType["Function"] = 1] = "Function";
})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
var FactoryTarget$1;
(function (FactoryTarget) {
  FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
  FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
  FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
  FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
  FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
})(FactoryTarget$1 || (FactoryTarget$1 = {}));
/**
 * Construct a factory function expression for the given `R3FactoryMetadata`.
 */
function compileFactoryFunction(meta) {
  const t = variable('t');
  let baseFactoryVar = null;
  // The type to instantiate via constructor invocation. If there is no delegated factory, meaning
  // this type is always created by constructor invocation, then this is the type-to-create
  // parameter provided by the user (t) if specified, or the current type if not. If there is a
  // delegated factory (which is used to create the current type) then this is only the type-to-
  // create parameter (t).
  const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) : t;
  let ctorExpr = null;
  if (meta.deps !== null) {
    // There is a constructor (either explicitly or implicitly defined).
    if (meta.deps !== 'invalid') {
      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));
    }
  } else {
    // There is no constructor, use the base class' factory to construct typeForCtor.
    baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);
    ctorExpr = baseFactoryVar.callFn([typeForCtor]);
  }
  const body = [];
  let retExpr = null;
  function makeConditionalFactory(nonCtorExpr) {
    const r = variable('r');
    body.push(r.set(NULL_EXPR).toDeclStmt());
    const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();
    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
    return r;
  }
  if (isDelegatedFactoryMetadata(meta)) {
    // This type is created with a delegated factory. If a type parameter is not specified, call
    // the factory instead.
    const delegateArgs = injectDependencies(meta.delegateDeps, meta.target);
    // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.
    const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);
    retExpr = makeConditionalFactory(factoryExpr);
  } else if (isExpressionFactoryMetadata(meta)) {
    // TODO(alxhub): decide whether to lower the value here or in the caller
    retExpr = makeConditionalFactory(meta.expression);
  } else {
    retExpr = ctorExpr;
  }
  if (retExpr === null) {
    // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.
    body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());
  } else if (baseFactoryVar !== null) {
    // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.
    const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.internalType]);
    // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`
    const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));
    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));
  } else {
    // This is straightforward factory, just return it.
    body.push(new ReturnStatement(retExpr));
  }
  let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);
  if (baseFactoryVar !== null) {
    // There is a base factory variable so wrap its declaration along with the factory function into
    // an IIFE.
    factoryFn = fn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn([], /* sourceSpan */undefined, /* pure */true);
  }
  return {
    expression: factoryFn,
    statements: [],
    type: createFactoryType(meta)
  };
}
function createFactoryType(meta) {
  const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;
  return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));
}
function injectDependencies(deps, target) {
  return deps.map((dep, index) => compileInjectDependency(dep, target, index));
}
function compileInjectDependency(dep, target, index) {
  // Interpret the dependency according to its resolved type.
  if (dep.token === null) {
    return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);
  } else if (dep.attributeNameType === null) {
    // Build up the injection flags according to the metadata.
    const flags = 0 /* InjectFlags.Default */ | (dep.self ? 2 /* InjectFlags.Self */ : 0) | (dep.skipSelf ? 4 /* InjectFlags.SkipSelf */ : 0) | (dep.host ? 1 /* InjectFlags.Host */ : 0) | (dep.optional ? 8 /* InjectFlags.Optional */ : 0) | (target === FactoryTarget$1.Pipe ? 16 /* InjectFlags.ForPipe */ : 0);
    // If this dependency is optional or otherwise has non-default flags, then additional
    // parameters describing how to inject the dependency must be passed to the inject function
    // that's being used.
    let flagsParam = flags !== 0 /* InjectFlags.Default */ || dep.optional ? literal(flags) : null;
    // Build up the arguments to the injectFn call.
    const injectArgs = [dep.token];
    if (flagsParam) {
      injectArgs.push(flagsParam);
    }
    const injectFn = getInjectFn(target);
    return importExpr(injectFn).callFn(injectArgs);
  } else {
    // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`
    // type dependency. For the generated JS we still want to use the `dep.token` value in case the
    // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,
    // we want to generate `ɵɵinjectAttribute(foo())`.
    //
    // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate
    // typings.
    return importExpr(Identifiers.injectAttribute).callFn([dep.token]);
  }
}
function createCtorDepsType(deps) {
  let hasTypes = false;
  const attributeTypes = deps.map(dep => {
    const type = createCtorDepType(dep);
    if (type !== null) {
      hasTypes = true;
      return type;
    } else {
      return literal(null);
    }
  });
  if (hasTypes) {
    return expressionType(literalArr(attributeTypes));
  } else {
    return NONE_TYPE;
  }
}
function createCtorDepType(dep) {
  const entries = [];
  if (dep.attributeNameType !== null) {
    entries.push({
      key: 'attribute',
      value: dep.attributeNameType,
      quoted: false
    });
  }
  if (dep.optional) {
    entries.push({
      key: 'optional',
      value: literal(true),
      quoted: false
    });
  }
  if (dep.host) {
    entries.push({
      key: 'host',
      value: literal(true),
      quoted: false
    });
  }
  if (dep.self) {
    entries.push({
      key: 'self',
      value: literal(true),
      quoted: false
    });
  }
  if (dep.skipSelf) {
    entries.push({
      key: 'skipSelf',
      value: literal(true),
      quoted: false
    });
  }
  return entries.length > 0 ? literalMap(entries) : null;
}
function isDelegatedFactoryMetadata(meta) {
  return meta.delegateType !== undefined;
}
function isExpressionFactoryMetadata(meta) {
  return meta.expression !== undefined;
}
function getInjectFn(target) {
  switch (target) {
    case FactoryTarget$1.Component:
    case FactoryTarget$1.Directive:
    case FactoryTarget$1.Pipe:
      return Identifiers.directiveInject;
    case FactoryTarget$1.NgModule:
    case FactoryTarget$1.Injectable:
    default:
      return Identifiers.inject;
  }
}

/**
 * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently
 * require the implementation of a visitor for Comments as they are only collected at
 * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`
 * is true.
 */
class Comment$1 {
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(_visitor) {
    throw new Error('visit() not implemented for Comment');
  }
}
class Text$3 {
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor) {
    return visitor.visitText(this);
  }
}
class BoundText {
  constructor(value, sourceSpan, i18n) {
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n;
  }
  visit(visitor) {
    return visitor.visitBoundText(this);
  }
}
/**
 * Represents a text attribute in the template.
 *
 * `valueSpan` may not be present in cases where there is no value `<div a></div>`.
 * `keySpan` may also not be present for synthetic attributes from ICU expansions.
 */
class TextAttribute {
  constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.i18n = i18n;
  }
  visit(visitor) {
    return visitor.visitTextAttribute(this);
  }
}
class BoundAttribute {
  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {
    this.name = name;
    this.type = type;
    this.securityContext = securityContext;
    this.value = value;
    this.unit = unit;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.i18n = i18n;
  }
  static fromBoundElementProperty(prop, i18n) {
    if (prop.keySpan === undefined) {
      throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);
    }
    return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);
  }
  visit(visitor) {
    return visitor.visitBoundAttribute(this);
  }
}
class BoundEvent {
  constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {
    this.name = name;
    this.type = type;
    this.handler = handler;
    this.target = target;
    this.phase = phase;
    this.sourceSpan = sourceSpan;
    this.handlerSpan = handlerSpan;
    this.keySpan = keySpan;
  }
  static fromParsedEvent(event) {
    const target = event.type === 0 /* ParsedEventType.Regular */ ? event.targetOrPhase : null;
    const phase = event.type === 1 /* ParsedEventType.Animation */ ? event.targetOrPhase : null;
    if (event.keySpan === undefined) {
      throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);
    }
    return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);
  }
  visit(visitor) {
    return visitor.visitBoundEvent(this);
  }
}
class Element$1 {
  constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
    this.name = name;
    this.attributes = attributes;
    this.inputs = inputs;
    this.outputs = outputs;
    this.children = children;
    this.references = references;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
    this.i18n = i18n;
  }
  visit(visitor) {
    return visitor.visitElement(this);
  }
}
class Template {
  constructor(
  // tagName is the name of the container element, if applicable.
  // `null` is a special case for when there is a structural directive on an `ng-template` so
  // the renderer can differentiate between the synthetic template and the one written in the
  // file.
  tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
    this.tagName = tagName;
    this.attributes = attributes;
    this.inputs = inputs;
    this.outputs = outputs;
    this.templateAttrs = templateAttrs;
    this.children = children;
    this.references = references;
    this.variables = variables;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
    this.i18n = i18n;
  }
  visit(visitor) {
    return visitor.visitTemplate(this);
  }
}
class Content {
  constructor(selector, attributes, sourceSpan, i18n) {
    this.selector = selector;
    this.attributes = attributes;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n;
    this.name = 'ng-content';
  }
  visit(visitor) {
    return visitor.visitContent(this);
  }
}
class Variable {
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor) {
    return visitor.visitVariable(this);
  }
}
class Reference {
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
  visit(visitor) {
    return visitor.visitReference(this);
  }
}
class Icu$1 {
  constructor(vars, placeholders, sourceSpan, i18n) {
    this.vars = vars;
    this.placeholders = placeholders;
    this.sourceSpan = sourceSpan;
    this.i18n = i18n;
  }
  visit(visitor) {
    return visitor.visitIcu(this);
  }
}
class NullVisitor {
  visitElement(element) {}
  visitTemplate(template) {}
  visitContent(content) {}
  visitVariable(variable) {}
  visitReference(reference) {}
  visitTextAttribute(attribute) {}
  visitBoundAttribute(attribute) {}
  visitBoundEvent(attribute) {}
  visitText(text) {}
  visitBoundText(text) {}
  visitIcu(icu) {}
}
class RecursiveVisitor$1 {
  visitElement(element) {
    visitAll$1(this, element.attributes);
    visitAll$1(this, element.inputs);
    visitAll$1(this, element.outputs);
    visitAll$1(this, element.children);
    visitAll$1(this, element.references);
  }
  visitTemplate(template) {
    visitAll$1(this, template.attributes);
    visitAll$1(this, template.inputs);
    visitAll$1(this, template.outputs);
    visitAll$1(this, template.children);
    visitAll$1(this, template.references);
    visitAll$1(this, template.variables);
  }
  visitContent(content) {}
  visitVariable(variable) {}
  visitReference(reference) {}
  visitTextAttribute(attribute) {}
  visitBoundAttribute(attribute) {}
  visitBoundEvent(attribute) {}
  visitText(text) {}
  visitBoundText(text) {}
  visitIcu(icu) {}
}
class TransformVisitor {
  visitElement(element) {
    const newAttributes = transformAll(this, element.attributes);
    const newInputs = transformAll(this, element.inputs);
    const newOutputs = transformAll(this, element.outputs);
    const newChildren = transformAll(this, element.children);
    const newReferences = transformAll(this, element.references);
    if (newAttributes != element.attributes || newInputs != element.inputs || newOutputs != element.outputs || newChildren != element.children || newReferences != element.references) {
      return new Element$1(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
    }
    return element;
  }
  visitTemplate(template) {
    const newAttributes = transformAll(this, template.attributes);
    const newInputs = transformAll(this, template.inputs);
    const newOutputs = transformAll(this, template.outputs);
    const newTemplateAttrs = transformAll(this, template.templateAttrs);
    const newChildren = transformAll(this, template.children);
    const newReferences = transformAll(this, template.references);
    const newVariables = transformAll(this, template.variables);
    if (newAttributes != template.attributes || newInputs != template.inputs || newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs || newChildren != template.children || newReferences != template.references || newVariables != template.variables) {
      return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);
    }
    return template;
  }
  visitContent(content) {
    return content;
  }
  visitVariable(variable) {
    return variable;
  }
  visitReference(reference) {
    return reference;
  }
  visitTextAttribute(attribute) {
    return attribute;
  }
  visitBoundAttribute(attribute) {
    return attribute;
  }
  visitBoundEvent(attribute) {
    return attribute;
  }
  visitText(text) {
    return text;
  }
  visitBoundText(text) {
    return text;
  }
  visitIcu(icu) {
    return icu;
  }
}
function visitAll$1(visitor, nodes) {
  const result = [];
  if (visitor.visit) {
    for (const node of nodes) {
      const newNode = visitor.visit(node) || node.visit(visitor);
    }
  } else {
    for (const node of nodes) {
      const newNode = node.visit(visitor);
      if (newNode) {
        result.push(newNode);
      }
    }
  }
  return result;
}
function transformAll(visitor, nodes) {
  const result = [];
  let changed = false;
  for (const node of nodes) {
    const newNode = node.visit(visitor);
    if (newNode) {
      result.push(newNode);
    }
    changed = changed || newNode != node;
  }
  return changed ? result : nodes;
}
class Message {
  /**
   * @param nodes message AST
   * @param placeholders maps placeholder names to static content and their source spans
   * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
   * @param meaning
   * @param description
   * @param customId
   */
  constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
    this.nodes = nodes;
    this.placeholders = placeholders;
    this.placeholderToMessage = placeholderToMessage;
    this.meaning = meaning;
    this.description = description;
    this.customId = customId;
    this.id = this.customId;
    /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */
    this.legacyIds = [];
    this.messageString = serializeMessage(this.nodes);
    if (nodes.length) {
      this.sources = [{
        filePath: nodes[0].sourceSpan.start.file.url,
        startLine: nodes[0].sourceSpan.start.line + 1,
        startCol: nodes[0].sourceSpan.start.col + 1,
        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
        endCol: nodes[0].sourceSpan.start.col + 1
      }];
    } else {
      this.sources = [];
    }
  }
}
class Text$2 {
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitText(this, context);
  }
}
// TODO(vicb): do we really need this node (vs an array) ?
class Container {
  constructor(children, sourceSpan) {
    this.children = children;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitContainer(this, context);
  }
}
class Icu {
  constructor(expression, type, cases, sourceSpan) {
    this.expression = expression;
    this.type = type;
    this.cases = cases;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitIcu(this, context);
  }
}
class TagPlaceholder {
  constructor(tag, attrs, startName, closeName, children, isVoid,
  // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)
  sourceSpan, startSourceSpan, endSourceSpan) {
    this.tag = tag;
    this.attrs = attrs;
    this.startName = startName;
    this.closeName = closeName;
    this.children = children;
    this.isVoid = isVoid;
    this.sourceSpan = sourceSpan;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitTagPlaceholder(this, context);
  }
}
class Placeholder {
  constructor(value, name, sourceSpan) {
    this.value = value;
    this.name = name;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitPlaceholder(this, context);
  }
}
class IcuPlaceholder {
  constructor(value, name, sourceSpan) {
    this.value = value;
    this.name = name;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitIcuPlaceholder(this, context);
  }
}
// Clone the AST
class CloneVisitor {
  visitText(text, context) {
    return new Text$2(text.value, text.sourceSpan);
  }
  visitContainer(container, context) {
    const children = container.children.map(n => n.visit(this, context));
    return new Container(children, container.sourceSpan);
  }
  visitIcu(icu, context) {
    const cases = {};
    Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));
    const msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
    msg.expressionPlaceholder = icu.expressionPlaceholder;
    return msg;
  }
  visitTagPlaceholder(ph, context) {
    const children = ph.children.map(n => n.visit(this, context));
    return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);
  }
  visitPlaceholder(ph, context) {
    return new Placeholder(ph.value, ph.name, ph.sourceSpan);
  }
  visitIcuPlaceholder(ph, context) {
    return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
  }
}
// Visit all the nodes recursively
class RecurseVisitor {
  visitText(text, context) {}
  visitContainer(container, context) {
    container.children.forEach(child => child.visit(this));
  }
  visitIcu(icu, context) {
    Object.keys(icu.cases).forEach(k => {
      icu.cases[k].visit(this);
    });
  }
  visitTagPlaceholder(ph, context) {
    ph.children.forEach(child => child.visit(this));
  }
  visitPlaceholder(ph, context) {}
  visitIcuPlaceholder(ph, context) {}
}
/**
 * Serialize the message to the Localize backtick string format that would appear in compiled code.
 */
function serializeMessage(messageNodes) {
  const visitor = new LocalizeMessageStringVisitor();
  const str = messageNodes.map(n => n.visit(visitor)).join('');
  return str;
}
class LocalizeMessageStringVisitor {
  visitText(text) {
    return text.value;
  }
  visitContainer(container) {
    return container.children.map(child => child.visit(this)).join('');
  }
  visitIcu(icu) {
    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
    return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;
  }
  visitTagPlaceholder(ph) {
    const children = ph.children.map(child => child.visit(this)).join('');
    return `{$${ph.startName}}${children}{$${ph.closeName}}`;
  }
  visitPlaceholder(ph) {
    return `{$${ph.name}}`;
  }
  visitIcuPlaceholder(ph) {
    return `{$${ph.name}}`;
  }
}
class Serializer {
  // Creates a name mapper, see `PlaceholderMapper`
  // Returning `null` means that no name mapping is used.
  createNameMapper(message) {
    return null;
  }
}
/**
 * A simple mapper that take a function to transform an internal name to a public name
 */
class SimplePlaceholderMapper extends RecurseVisitor {
  // create a mapping from the message
  constructor(message, mapName) {
    super();
    this.mapName = mapName;
    this.internalToPublic = {};
    this.publicToNextId = {};
    this.publicToInternal = {};
    message.nodes.forEach(node => node.visit(this));
  }
  toPublicName(internalName) {
    return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
  }
  toInternalName(publicName) {
    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
  }
  visitText(text, context) {
    return null;
  }
  visitTagPlaceholder(ph, context) {
    this.visitPlaceholderName(ph.startName);
    super.visitTagPlaceholder(ph, context);
    this.visitPlaceholderName(ph.closeName);
  }
  visitPlaceholder(ph, context) {
    this.visitPlaceholderName(ph.name);
  }
  visitIcuPlaceholder(ph, context) {
    this.visitPlaceholderName(ph.name);
  }
  // XMB placeholders could only contains A-Z, 0-9 and _
  visitPlaceholderName(internalName) {
    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
      return;
    }
    let publicName = this.mapName(internalName);
    if (this.publicToInternal.hasOwnProperty(publicName)) {
      // Create a new XMB when it has already been used
      const nextId = this.publicToNextId[publicName];
      this.publicToNextId[publicName] = nextId + 1;
      publicName = `${publicName}_${nextId}`;
    } else {
      this.publicToNextId[publicName] = 1;
    }
    this.internalToPublic[internalName] = publicName;
    this.publicToInternal[publicName] = internalName;
  }
}
class _Visitor$2 {
  visitTag(tag) {
    const strAttrs = this._serializeAttributes(tag.attrs);
    if (tag.children.length == 0) {
      return `<${tag.name}${strAttrs}/>`;
    }
    const strChildren = tag.children.map(node => node.visit(this));
    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;
  }
  visitText(text) {
    return text.value;
  }
  visitDeclaration(decl) {
    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
  }
  _serializeAttributes(attrs) {
    const strAttrs = Object.keys(attrs).map(name => `${name}="${attrs[name]}"`).join(' ');
    return strAttrs.length > 0 ? ' ' + strAttrs : '';
  }
  visitDoctype(doctype) {
    return `<!DOCTYPE ${doctype.rootTag} [\n${doctype.dtd}\n]>`;
  }
}
const _visitor = new _Visitor$2();
function serialize(nodes) {
  return nodes.map(node => node.visit(_visitor)).join('');
}
class Declaration {
  constructor(unescapedAttrs) {
    this.attrs = {};
    Object.keys(unescapedAttrs).forEach(k => {
      this.attrs[k] = escapeXml(unescapedAttrs[k]);
    });
  }
  visit(visitor) {
    return visitor.visitDeclaration(this);
  }
}
class Doctype {
  constructor(rootTag, dtd) {
    this.rootTag = rootTag;
    this.dtd = dtd;
  }
  visit(visitor) {
    return visitor.visitDoctype(this);
  }
}
class Tag {
  constructor(name, unescapedAttrs = {}, children = []) {
    this.name = name;
    this.children = children;
    this.attrs = {};
    Object.keys(unescapedAttrs).forEach(k => {
      this.attrs[k] = escapeXml(unescapedAttrs[k]);
    });
  }
  visit(visitor) {
    return visitor.visitTag(this);
  }
}
class Text$1 {
  constructor(unescapedValue) {
    this.value = escapeXml(unescapedValue);
  }
  visit(visitor) {
    return visitor.visitText(this);
  }
}
class CR extends Text$1 {
  constructor(ws = 0) {
    super(`\n${new Array(ws + 1).join(' ')}`);
  }
}
const _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities
function escapeXml(text) {
  return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);
}
const _MESSAGES_TAG = 'messagebundle';
const _MESSAGE_TAG = 'msg';
const _PLACEHOLDER_TAG$3 = 'ph';
const _EXAMPLE_TAG = 'ex';
const _SOURCE_TAG$2 = 'source';
const _DOCTYPE = `<!ELEMENT messagebundle (msg)*>
<!ATTLIST messagebundle class CDATA #IMPLIED>

<!ELEMENT msg (#PCDATA|ph|source)*>
<!ATTLIST msg id CDATA #IMPLIED>
<!ATTLIST msg seq CDATA #IMPLIED>
<!ATTLIST msg name CDATA #IMPLIED>
<!ATTLIST msg desc CDATA #IMPLIED>
<!ATTLIST msg meaning CDATA #IMPLIED>
<!ATTLIST msg obsolete (obsolete) #IMPLIED>
<!ATTLIST msg xml:space (default|preserve) "default">
<!ATTLIST msg is_hidden CDATA #IMPLIED>

<!ELEMENT source (#PCDATA)>

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>`;
class Xmb extends Serializer {
  write(messages, locale) {
    const exampleVisitor = new ExampleVisitor();
    const visitor = new _Visitor$1();
    let rootNode = new Tag(_MESSAGES_TAG);
    messages.forEach(message => {
      const attrs = {
        id: message.id
      };
      if (message.description) {
        attrs['desc'] = message.description;
      }
      if (message.meaning) {
        attrs['meaning'] = message.meaning;
      }
      let sourceTags = [];
      message.sources.forEach(source => {
        sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));
      });
      rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));
    });
    rootNode.children.push(new CR());
    return serialize([new Declaration({
      version: '1.0',
      encoding: 'UTF-8'
    }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);
  }
  load(content, url) {
    throw new Error('Unsupported');
  }
  digest(message) {
    return digest(message);
  }
  createNameMapper(message) {
    return new SimplePlaceholderMapper(message, toPublicName);
  }
}
class _Visitor$1 {
  visitText(text, context) {
    return [new Text$1(text.value)];
  }
  visitContainer(container, context) {
    const nodes = [];
    container.children.forEach(node => nodes.push(...node.visit(this)));
    return nodes;
  }
  visitIcu(icu, context) {
    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];
    Object.keys(icu.cases).forEach(c => {
      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));
    });
    nodes.push(new Text$1(`}`));
    return nodes;
  }
  visitTagPlaceholder(ph, context) {
    const startTagAsText = new Text$1(`<${ph.tag}>`);
    const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);
    // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
    const startTagPh = new Tag(_PLACEHOLDER_TAG$3, {
      name: ph.startName
    }, [startEx, startTagAsText]);
    if (ph.isVoid) {
      // void tags have no children nor closing tags
      return [startTagPh];
    }
    const closeTagAsText = new Text$1(`</${ph.tag}>`);
    const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);
    // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
    const closeTagPh = new Tag(_PLACEHOLDER_TAG$3, {
      name: ph.closeName
    }, [closeEx, closeTagAsText]);
    return [startTagPh, ...this.serialize(ph.children), closeTagPh];
  }
  visitPlaceholder(ph, context) {
    const interpolationAsText = new Text$1(`{{${ph.value}}}`);
    // Example tag needs to be not-empty for TC.
    const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);
    return [
    // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
    new Tag(_PLACEHOLDER_TAG$3, {
      name: ph.name
    }, [exTag, interpolationAsText])];
  }
  visitIcuPlaceholder(ph, context) {
    const icuExpression = ph.value.expression;
    const icuType = ph.value.type;
    const icuCases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');
    const icuAsText = new Text$1(`{${icuExpression}, ${icuType}, ${icuCases}}`);
    const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);
    return [
    // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
    new Tag(_PLACEHOLDER_TAG$3, {
      name: ph.name
    }, [exTag, icuAsText])];
  }
  serialize(nodes) {
    return [].concat(...nodes.map(node => node.visit(this)));
  }
}
function digest(message) {
  return decimalDigest(message);
}
// TC requires at least one non-empty example on placeholders
class ExampleVisitor {
  addDefaultExamples(node) {
    node.visit(this);
    return node;
  }
  visitTag(tag) {
    if (tag.name === _PLACEHOLDER_TAG$3) {
      if (!tag.children || tag.children.length == 0) {
        const exText = new Text$1(tag.attrs['name'] || '...');
        tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];
      }
    } else if (tag.children) {
      tag.children.forEach(node => node.visit(this));
    }
  }
  visitText(text) {}
  visitDeclaration(decl) {}
  visitDoctype(doctype) {}
}
// XMB/XTB placeholders can only contain A-Z, 0-9 and _
function toPublicName(internalName) {
  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
}

/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */
const CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';
/**
 * Prefix for non-`goog.getMsg` i18n-related vars.
 * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that
 * considers variables like `I18N_0` as constants and throws an error when their value changes.
 */
const TRANSLATION_VAR_PREFIX = 'i18n_';
/** Name of the i18n attributes **/
const I18N_ATTR = 'i18n';
const I18N_ATTR_PREFIX = 'i18n-';
/** Prefix of var expressions used in ICUs */
const I18N_ICU_VAR_PREFIX = 'VAR_';
/** Prefix of ICU expressions for post processing */
const I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';
/** Placeholder wrapper for i18n expressions **/
const I18N_PLACEHOLDER_SYMBOL = '�';
function isI18nAttribute(name) {
  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
}
function isI18nRootNode(meta) {
  return meta instanceof Message;
}
function isSingleI18nIcu(meta) {
  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu;
}
function hasI18nMeta(node) {
  return !!node.i18n;
}
function hasI18nAttrs(element) {
  return element.attrs.some(attr => isI18nAttribute(attr.name));
}
function icuFromI18nMessage(message) {
  return message.nodes[0];
}
function wrapI18nPlaceholder(content, contextId = 0) {
  const blockId = contextId > 0 ? `:${contextId}` : '';
  return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;
}
function assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {
  if (!strings.length) return '';
  let acc = '';
  const lastIdx = strings.length - 1;
  for (let i = 0; i < lastIdx; i++) {
    acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;
  }
  acc += strings[lastIdx];
  return acc;
}
function getSeqNumberGenerator(startsAt = 0) {
  let current = startsAt;
  return () => current++;
}
function placeholdersToParams(placeholders) {
  const params = {};
  placeholders.forEach((values, key) => {
    params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);
  });
  return params;
}
function updatePlaceholderMap(map, name, ...values) {
  const current = map.get(name) || [];
  current.push(...values);
  map.set(name, current);
}
function assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {
  const startIdx = bindingStartIndex;
  const placeholders = new Map();
  const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;
  if (node) {
    node.children.filter(child => child instanceof Placeholder).forEach((child, idx) => {
      const content = wrapI18nPlaceholder(startIdx + idx, contextId);
      updatePlaceholderMap(placeholders, child.name, content);
    });
  }
  return placeholders;
}
/**
 * Format the placeholder names in a map of placeholders to expressions.
 *
 * The placeholder names are converted from "internal" format (e.g. `START_TAG_DIV_1`) to "external"
 * format (e.g. `startTagDiv_1`).
 *
 * @param params A map of placeholder names to expressions.
 * @param useCamelCase whether to camelCase the placeholder name when formatting.
 * @returns A new map of formatted placeholder names to expressions.
 */
function formatI18nPlaceholderNamesInMap(params = {}, useCamelCase) {
  const _params = {};
  if (params && Object.keys(params).length) {
    Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);
  }
  return _params;
}
/**
 * Converts internal placeholder names to public-facing format
 * (for example to use in goog.getMsg call).
 * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.
 *
 * @param name The placeholder name that should be formatted
 * @returns Formatted placeholder name
 */
function formatI18nPlaceholderName(name, useCamelCase = true) {
  const publicName = toPublicName(name);
  if (!useCamelCase) {
    return publicName;
  }
  const chunks = publicName.split('_');
  if (chunks.length === 1) {
    // if no "_" found - just lowercase the value
    return name.toLowerCase();
  }
  let postfix;
  // eject last element if it's a number
  if (/^\d+$/.test(chunks[chunks.length - 1])) {
    postfix = chunks.pop();
  }
  let raw = chunks.shift().toLowerCase();
  if (chunks.length) {
    raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');
  }
  return postfix ? `${raw}_${postfix}` : raw;
}
/**
 * Generates a prefix for translation const name.
 *
 * @param extra Additional local prefix that should be injected into translation var name
 * @returns Complete translation const prefix
 */
function getTranslationConstPrefix(extra) {
  return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();
}
/**
 * Generate AST to declare a variable. E.g. `var I18N_1;`.
 * @param variable the name of the variable to declare.
 */
function declareI18nVariable(variable) {
  return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);
}

/**
 * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in
 * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may
 * bot work in some cases when object keys are mangled by minifier.
 *
 * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with
 * inputs that contain potentially unsafe chars.
 */
const UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
/** Name of the temporary to use during data binding */
const TEMPORARY_NAME = '_t';
/** Name of the context parameter passed into a template function */
const CONTEXT_NAME = 'ctx';
/** Name of the RenderFlag passed into a template function */
const RENDER_FLAGS = 'rf';
/** The prefix reference variables */
const REFERENCE_PREFIX = '_r';
/** The name of the implicit context reference */
const IMPLICIT_REFERENCE = '$implicit';
/** Non bindable attribute name **/
const NON_BINDABLE_ATTR = 'ngNonBindable';
/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */
const RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';
/**
 * Maximum length of a single instruction chain. Because our output AST uses recursion, we're
 * limited in how many expressions we can nest before we reach the call stack limit. This
 * length is set very conservatively in order to reduce the chance of problems.
 */
const MAX_CHAIN_LENGTH = 500;
/** Instructions that support chaining. */
const CHAINABLE_INSTRUCTIONS = new Set([Identifiers.element, Identifiers.elementStart, Identifiers.elementEnd, Identifiers.elementContainer, Identifiers.elementContainerStart, Identifiers.elementContainerEnd, Identifiers.i18nExp, Identifiers.listener, Identifiers.classProp, Identifiers.syntheticHostListener, Identifiers.hostProperty, Identifiers.syntheticHostProperty, Identifiers.property, Identifiers.propertyInterpolate1, Identifiers.propertyInterpolate2, Identifiers.propertyInterpolate3, Identifiers.propertyInterpolate4, Identifiers.propertyInterpolate5, Identifiers.propertyInterpolate6, Identifiers.propertyInterpolate7, Identifiers.propertyInterpolate8, Identifiers.propertyInterpolateV, Identifiers.attribute, Identifiers.attributeInterpolate1, Identifiers.attributeInterpolate2, Identifiers.attributeInterpolate3, Identifiers.attributeInterpolate4, Identifiers.attributeInterpolate5, Identifiers.attributeInterpolate6, Identifiers.attributeInterpolate7, Identifiers.attributeInterpolate8, Identifiers.attributeInterpolateV, Identifiers.styleProp, Identifiers.stylePropInterpolate1, Identifiers.stylePropInterpolate2, Identifiers.stylePropInterpolate3, Identifiers.stylePropInterpolate4, Identifiers.stylePropInterpolate5, Identifiers.stylePropInterpolate6, Identifiers.stylePropInterpolate7, Identifiers.stylePropInterpolate8, Identifiers.stylePropInterpolateV, Identifiers.textInterpolate, Identifiers.textInterpolate1, Identifiers.textInterpolate2, Identifiers.textInterpolate3, Identifiers.textInterpolate4, Identifiers.textInterpolate5, Identifiers.textInterpolate6, Identifiers.textInterpolate7, Identifiers.textInterpolate8, Identifiers.textInterpolateV]);
/** Generates a call to a single instruction. */
function invokeInstruction(span, reference, params) {
  return importExpr(reference, null, span).callFn(params, span);
}
/**
 * Creates an allocator for a temporary variable.
 *
 * A variable declaration is added to the statements the first time the allocator is invoked.
 */
function temporaryAllocator(statements, name) {
  let temp = null;
  return () => {
    if (!temp) {
      statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));
      temp = variable(name);
    }
    return temp;
  };
}
function invalid(arg) {
  throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);
}
function asLiteral(value) {
  if (Array.isArray(value)) {
    return literalArr(value.map(asLiteral));
  }
  return literal(value, INFERRED_TYPE);
}
function conditionallyCreateMapObjectLiteral(keys, keepDeclared) {
  if (Object.getOwnPropertyNames(keys).length > 0) {
    return mapToExpression(keys, keepDeclared);
  }
  return null;
}
function mapToExpression(map, keepDeclared) {
  return literalMap(Object.getOwnPropertyNames(map).map(key => {
    // canonical syntax: `dirProp: publicProp`
    const value = map[key];
    let declaredName;
    let publicName;
    let minifiedName;
    let needsDeclaredName;
    if (Array.isArray(value)) {
      [publicName, declaredName] = value;
      minifiedName = key;
      needsDeclaredName = publicName !== declaredName;
    } else {
      minifiedName = declaredName = key;
      publicName = value;
      needsDeclaredName = false;
    }
    return {
      key: minifiedName,
      // put quotes around keys that contain potentially unsafe characters
      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
      value: keepDeclared && needsDeclaredName ? literalArr([asLiteral(publicName), asLiteral(declaredName)]) : asLiteral(publicName)
    };
  }));
}
/**
 *  Remove trailing null nodes as they are implied.
 */
function trimTrailingNulls(parameters) {
  while (isNull(parameters[parameters.length - 1])) {
    parameters.pop();
  }
  return parameters;
}
function getQueryPredicate(query, constantPool) {
  if (Array.isArray(query.predicate)) {
    let predicate = [];
    query.predicate.forEach(selector => {
      // Each item in predicates array may contain strings with comma-separated refs
      // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them
      // as separate array entities
      const selectors = selector.split(',').map(token => literal(token.trim()));
      predicate.push(...selectors);
    });
    return constantPool.getConstLiteral(literalArr(predicate), true);
  } else {
    // The original predicate may have been wrapped in a `forwardRef()` call.
    switch (query.predicate.forwardRef) {
      case 0 /* ForwardRefHandling.None */:
      case 2 /* ForwardRefHandling.Unwrapped */:
        return query.predicate.expression;
      case 1 /* ForwardRefHandling.Wrapped */:
        return importExpr(Identifiers.resolveForwardRef).callFn([query.predicate.expression]);
    }
  }
}
/**
 * A representation for an object literal used during codegen of definition objects. The generic
 * type `T` allows to reference a documented type of the generated structure, such that the
 * property names that are set can be resolved to their documented declaration.
 */
class DefinitionMap {
  constructor() {
    this.values = [];
  }
  set(key, value) {
    if (value) {
      this.values.push({
        key: key,
        value,
        quoted: false
      });
    }
  }
  toLiteralMap() {
    return literalMap(this.values);
  }
}
/**
 * Extract a map of properties to values for a given element or template node, which can be used
 * by the directive matching machinery.
 *
 * @param elOrTpl the element or template in question
 * @return an object set up for directive matching. For attributes on the element/template, this
 * object maps a property name to its (static) value. For any bindings, this map simply maps the
 * property name to an empty string.
 */
function getAttrsForDirectiveMatching(elOrTpl) {
  const attributesMap = {};
  if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {
    elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');
  } else {
    elOrTpl.attributes.forEach(a => {
      if (!isI18nAttribute(a.name)) {
        attributesMap[a.name] = a.value;
      }
    });
    elOrTpl.inputs.forEach(i => {
      attributesMap[i.name] = '';
    });
    elOrTpl.outputs.forEach(o => {
      attributesMap[o.name] = '';
    });
  }
  return attributesMap;
}
/**
 * Gets the number of arguments expected to be passed to a generated instruction in the case of
 * interpolation instructions.
 * @param interpolation An interpolation ast
 */
function getInterpolationArgsLength(interpolation) {
  const {
    expressions,
    strings
  } = interpolation;
  if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {
    // If the interpolation has one interpolated value, but the prefix and suffix are both empty
    // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or
    // `textInterpolate`.
    return 1;
  } else {
    return expressions.length + strings.length;
  }
}
/**
 * Generates the final instruction call statements based on the passed in configuration.
 * Will try to chain instructions as much as possible, if chaining is supported.
 */
function getInstructionStatements(instructions) {
  const statements = [];
  let pendingExpression = null;
  let pendingExpressionType = null;
  let chainLength = 0;
  for (const current of instructions) {
    const resolvedParams = (typeof current.paramsOrFn === 'function' ? current.paramsOrFn() : current.paramsOrFn) ?? [];
    const params = Array.isArray(resolvedParams) ? resolvedParams : [resolvedParams];
    // If the current instruction is the same as the previous one
    // and it can be chained, add another call to the chain.
    if (chainLength < MAX_CHAIN_LENGTH && pendingExpressionType === current.reference && CHAINABLE_INSTRUCTIONS.has(pendingExpressionType)) {
      // We'll always have a pending expression when there's a pending expression type.
      pendingExpression = pendingExpression.callFn(params, pendingExpression.sourceSpan);
      chainLength++;
    } else {
      if (pendingExpression !== null) {
        statements.push(pendingExpression.toStmt());
      }
      pendingExpression = invokeInstruction(current.span, current.reference, params);
      pendingExpressionType = current.reference;
      chainLength = 0;
    }
  }
  // Since the current instruction adds the previous one to the statements,
  // we may be left with the final one at the end that is still pending.
  if (pendingExpression !== null) {
    statements.push(pendingExpression.toStmt());
  }
  return statements;
}
function compileInjectable(meta, resolveForwardRefs) {
  let result = null;
  const factoryMeta = {
    name: meta.name,
    type: meta.type,
    internalType: meta.internalType,
    typeArgumentCount: meta.typeArgumentCount,
    deps: [],
    target: FactoryTarget$1.Injectable
  };
  if (meta.useClass !== undefined) {
    // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is
    // used to instantiate the class with dependencies injected, or deps are not specified and
    // the factory of the class is used to instantiate it.
    //
    // A special case exists for useClass: Type where Type is the injectable type itself and no
    // deps are specified, in which case 'useClass' is effectively ignored.
    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.internalType);
    let deps = undefined;
    if (meta.deps !== undefined) {
      deps = meta.deps;
    }
    if (deps !== undefined) {
      // factory: () => new meta.useClass(...deps)
      result = compileFactoryFunction({
        ...factoryMeta,
        delegate: meta.useClass.expression,
        delegateDeps: deps,
        delegateType: R3FactoryDelegateType.Class
      });
    } else if (useClassOnSelf) {
      result = compileFactoryFunction(factoryMeta);
    } else {
      result = {
        statements: [],
        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)
      };
    }
  } else if (meta.useFactory !== undefined) {
    if (meta.deps !== undefined) {
      result = compileFactoryFunction({
        ...factoryMeta,
        delegate: meta.useFactory,
        delegateDeps: meta.deps || [],
        delegateType: R3FactoryDelegateType.Function
      });
    } else {
      result = {
        statements: [],
        expression: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])
      };
    }
  } else if (meta.useValue !== undefined) {
    // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for
    // client code because meta.useValue is an Expression which will be defined even if the actual
    // value is undefined.
    result = compileFactoryFunction({
      ...factoryMeta,
      expression: meta.useValue.expression
    });
  } else if (meta.useExisting !== undefined) {
    // useExisting is an `inject` call on the existing token.
    result = compileFactoryFunction({
      ...factoryMeta,
      expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])
    });
  } else {
    result = {
      statements: [],
      expression: delegateToFactory(meta.type.value, meta.internalType, resolveForwardRefs)
    };
  }
  const token = meta.internalType;
  const injectableProps = new DefinitionMap();
  injectableProps.set('token', token);
  injectableProps.set('factory', result.expression);
  // Only generate providedIn property if it has a non-null value
  if (meta.providedIn.expression.value !== null) {
    injectableProps.set('providedIn', convertFromMaybeForwardRefExpression(meta.providedIn));
  }
  const expression = importExpr(Identifiers.ɵɵdefineInjectable).callFn([injectableProps.toLiteralMap()], undefined, true);
  return {
    expression,
    type: createInjectableType(meta),
    statements: result.statements
  };
}
function createInjectableType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));
}
function delegateToFactory(type, internalType, unwrapForwardRefs) {
  if (type.node === internalType.node) {
    // The types are the same, so we can simply delegate directly to the type's factory.
    // ```
    // factory: type.ɵfac
    // ```
    return internalType.prop('ɵfac');
  }
  if (!unwrapForwardRefs) {
    // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that
    // accepts a sub-type as an argument.
    // ```
    // factory: function(t) { return internalType.ɵfac(t); }
    // ```
    return createFactoryFunction(internalType);
  }
  // The internalType is actually wrapped in a `forwardRef()` so we need to resolve that before
  // calling its factory.
  // ```
  // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }
  // ```
  const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([internalType]);
  return createFactoryFunction(unwrappedType);
}
function createFactoryFunction(type) {
  return fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(type.prop('ɵfac').callFn([variable('t')]))]);
}
const UNUSABLE_INTERPOLATION_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\// // comment
];

function assertInterpolationSymbols(identifier, value) {
  if (value != null && !(Array.isArray(value) && value.length == 2)) {
    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);
  } else if (value != null) {
    const start = value[0];
    const end = value[1];
    // Check for unusable interpolation symbols
    UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {
      if (regexp.test(start) || regexp.test(end)) {
        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);
      }
    });
  }
}
class InterpolationConfig {
  static fromArray(markers) {
    if (!markers) {
      return DEFAULT_INTERPOLATION_CONFIG;
    }
    assertInterpolationSymbols('interpolation', markers);
    return new InterpolationConfig(markers[0], markers[1]);
  }
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
}
const DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
const $EOF = 0;
const $BSPACE = 8;
const $TAB = 9;
const $LF = 10;
const $VTAB = 11;
const $FF = 12;
const $CR = 13;
const $SPACE = 32;
const $BANG = 33;
const $DQ = 34;
const $HASH = 35;
const $$ = 36;
const $PERCENT = 37;
const $AMPERSAND = 38;
const $SQ = 39;
const $LPAREN = 40;
const $RPAREN = 41;
const $STAR = 42;
const $PLUS = 43;
const $COMMA = 44;
const $MINUS = 45;
const $PERIOD = 46;
const $SLASH = 47;
const $COLON = 58;
const $SEMICOLON = 59;
const $LT = 60;
const $EQ = 61;
const $GT = 62;
const $QUESTION = 63;
const $0 = 48;
const $7 = 55;
const $9 = 57;
const $A = 65;
const $E = 69;
const $F = 70;
const $X = 88;
const $Z = 90;
const $LBRACKET = 91;
const $BACKSLASH = 92;
const $RBRACKET = 93;
const $CARET = 94;
const $_ = 95;
const $a = 97;
const $b = 98;
const $e = 101;
const $f = 102;
const $n = 110;
const $r = 114;
const $t = 116;
const $u = 117;
const $v = 118;
const $x = 120;
const $z = 122;
const $LBRACE = 123;
const $BAR = 124;
const $RBRACE = 125;
const $NBSP = 160;
const $PIPE = 124;
const $TILDA = 126;
const $AT = 64;
const $BT = 96;
function isWhitespace(code) {
  return code >= $TAB && code <= $SPACE || code == $NBSP;
}
function isDigit(code) {
  return $0 <= code && code <= $9;
}
function isAsciiLetter(code) {
  return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}
function isNewLine(code) {
  return code === $LF || code === $CR;
}
function isOctalDigit(code) {
  return $0 <= code && code <= $7;
}
function isQuote(code) {
  return code === $SQ || code === $DQ || code === $BT;
}
class ParseLocation {
  constructor(file, offset, line, col) {
    this.file = file;
    this.offset = offset;
    this.line = line;
    this.col = col;
  }
  toString() {
    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
  }
  moveBy(delta) {
    const source = this.file.content;
    const len = source.length;
    let offset = this.offset;
    let line = this.line;
    let col = this.col;
    while (offset > 0 && delta < 0) {
      offset--;
      delta++;
      const ch = source.charCodeAt(offset);
      if (ch == $LF) {
        line--;
        const priorLine = source.substring(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
        col = priorLine > 0 ? offset - priorLine : offset;
      } else {
        col--;
      }
    }
    while (offset < len && delta > 0) {
      const ch = source.charCodeAt(offset);
      offset++;
      delta--;
      if (ch == $LF) {
        line++;
        col = 0;
      } else {
        col++;
      }
    }
    return new ParseLocation(this.file, offset, line, col);
  }
  // Return the source around the location
  // Up to `maxChars` or `maxLines` on each side of the location
  getContext(maxChars, maxLines) {
    const content = this.file.content;
    let startOffset = this.offset;
    if (startOffset != null) {
      if (startOffset > content.length - 1) {
        startOffset = content.length - 1;
      }
      let endOffset = startOffset;
      let ctxChars = 0;
      let ctxLines = 0;
      while (ctxChars < maxChars && startOffset > 0) {
        startOffset--;
        ctxChars++;
        if (content[startOffset] == '\n') {
          if (++ctxLines == maxLines) {
            break;
          }
        }
      }
      ctxChars = 0;
      ctxLines = 0;
      while (ctxChars < maxChars && endOffset < content.length - 1) {
        endOffset++;
        ctxChars++;
        if (content[endOffset] == '\n') {
          if (++ctxLines == maxLines) {
            break;
          }
        }
      }
      return {
        before: content.substring(startOffset, this.offset),
        after: content.substring(this.offset, endOffset + 1)
      };
    }
    return null;
  }
}
class ParseSourceFile {
  constructor(content, url) {
    this.content = content;
    this.url = url;
  }
}
class ParseSourceSpan {
  /**
   * Create an object that holds information about spans of tokens/nodes captured during
   * lexing/parsing of text.
   *
   * @param start
   * The location of the start of the span (having skipped leading trivia).
   * Skipping leading trivia makes source-spans more "user friendly", since things like HTML
   * elements will appear to begin at the start of the opening tag, rather than at the start of any
   * leading trivia, which could include newlines.
   *
   * @param end
   * The location of the end of the span.
   *
   * @param fullStart
   * The start of the token without skipping the leading trivia.
   * This is used by tooling that splits tokens further, such as extracting Angular interpolations
   * from text tokens. Such tooling creates new source-spans relative to the original token's
   * source-span. If leading trivia characters have been skipped then the new source-spans may be
   * incorrectly offset.
   *
   * @param details
   * Additional information (such as identifier names) that should be associated with the span.
   */
  constructor(start, end, fullStart = start, details = null) {
    this.start = start;
    this.end = end;
    this.fullStart = fullStart;
    this.details = details;
  }
  toString() {
    return this.start.file.content.substring(this.start.offset, this.end.offset);
  }
}
var ParseErrorLevel;
(function (ParseErrorLevel) {
  ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
  ParseErrorLevel[ParseErrorLevel["ERROR"] = 1] = "ERROR";
})(ParseErrorLevel || (ParseErrorLevel = {}));
class ParseError {
  constructor(span, msg, level = ParseErrorLevel.ERROR) {
    this.span = span;
    this.msg = msg;
    this.level = level;
  }
  contextualMessage() {
    const ctx = this.span.start.getContext(100, 3);
    return ctx ? `${this.msg} ("${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}")` : this.msg;
  }
  toString() {
    const details = this.span.details ? `, ${this.span.details}` : '';
    return `${this.contextualMessage()}: ${this.span.start}${details}`;
  }
}
/**
 * Generates Source Span object for a given R3 Type for JIT mode.
 *
 * @param kind Component or Directive.
 * @param typeName name of the Component or Directive.
 * @param sourceUrl reference to Component or Directive source.
 * @returns instance of ParseSourceSpan that represent a given Component or Directive.
 */
function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
  const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;
  const sourceFile = new ParseSourceFile('', sourceFileName);
  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
}
let _anonymousTypeIndex = 0;
function identifierName(compileIdentifier) {
  if (!compileIdentifier || !compileIdentifier.reference) {
    return null;
  }
  const ref = compileIdentifier.reference;
  if (ref['__anonymousType']) {
    return ref['__anonymousType'];
  }
  if (ref['__forward_ref__']) {
    // We do not want to try to stringify a `forwardRef()` function because that would cause the
    // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.
    return '__forward_ref__';
  }
  let identifier = stringify(ref);
  if (identifier.indexOf('(') >= 0) {
    // case: anonymous functions!
    identifier = `anonymous_${_anonymousTypeIndex++}`;
    ref['__anonymousType'] = identifier;
  } else {
    identifier = sanitizeIdentifier(identifier);
  }
  return identifier;
}
function sanitizeIdentifier(name) {
  return name.replace(/\W/g, '_');
}

/**
 * In TypeScript, tagged template functions expect a "template object", which is an array of
 * "cooked" strings plus a `raw` property that contains an array of "raw" strings. This is
 * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not
 * be available in all environments.
 *
 * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise
 * creates an inline helper with the same functionality.
 *
 * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`
 * array.
 */
const makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})';
class AbstractJsEmitterVisitor extends AbstractEmitterVisitor {
  constructor() {
    super(false);
  }
  visitWrappedNodeExpr(ast, ctx) {
    throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');
  }
  visitDeclareVarStmt(stmt, ctx) {
    ctx.print(stmt, `var ${stmt.name}`);
    if (stmt.value) {
      ctx.print(stmt, ' = ');
      stmt.value.visitExpression(this, ctx);
    }
    ctx.println(stmt, `;`);
    return null;
  }
  visitTaggedTemplateExpr(ast, ctx) {
    // The following convoluted piece of code is effectively the downlevelled equivalent of
    // ```
    // tag`...`
    // ```
    // which is effectively like:
    // ```
    // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
    // ```
    const elements = ast.template.elements;
    ast.tag.visitExpression(this, ctx);
    ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);
    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.text, false)).join(', ')}], `);
    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.rawText, false)).join(', ')}])`);
    ast.template.expressions.forEach(expression => {
      ctx.print(ast, ', ');
      expression.visitExpression(this, ctx);
    });
    ctx.print(ast, ')');
    return null;
  }
  visitFunctionExpr(ast, ctx) {
    ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);
    this._visitParams(ast.params, ctx);
    ctx.println(ast, `) {`);
    ctx.incIndent();
    this.visitAllStatements(ast.statements, ctx);
    ctx.decIndent();
    ctx.print(ast, `}`);
    return null;
  }
  visitDeclareFunctionStmt(stmt, ctx) {
    ctx.print(stmt, `function ${stmt.name}(`);
    this._visitParams(stmt.params, ctx);
    ctx.println(stmt, `) {`);
    ctx.incIndent();
    this.visitAllStatements(stmt.statements, ctx);
    ctx.decIndent();
    ctx.println(stmt, `}`);
    return null;
  }
  visitLocalizedString(ast, ctx) {
    // The following convoluted piece of code is effectively the downlevelled equivalent of
    // ```
    // $localize `...`
    // ```
    // which is effectively like:
    // ```
    // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
    // ```
    ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);
    const parts = [ast.serializeI18nHead()];
    for (let i = 1; i < ast.messageParts.length; i++) {
      parts.push(ast.serializeI18nTemplatePart(i));
    }
    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.cooked, false)).join(', ')}], `);
    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.raw, false)).join(', ')}])`);
    ast.expressions.forEach(expression => {
      ctx.print(ast, ', ');
      expression.visitExpression(this, ctx);
    });
    ctx.print(ast, ')');
    return null;
  }
  _visitParams(params, ctx) {
    this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');
  }
}

/**
 * @fileoverview
 * A module to facilitate use of a Trusted Types policy within the JIT
 * compiler. It lazily constructs the Trusted Types policy, providing helper
 * utilities for promoting strings to Trusted Types. When Trusted Types are not
 * available, strings are used as a fallback.
 * @security All use of this module is security-sensitive and should go through
 * security review.
 */
/**
 * The Trusted Types policy, or null if Trusted Types are not
 * enabled/supported, or undefined if the policy has not been created yet.
 */
let policy;
/**
 * Returns the Trusted Types policy, or null if Trusted Types are not
 * enabled/supported. The first call to this function will create the policy.
 */
function getPolicy() {
  if (policy === undefined) {
    policy = null;
    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy('angular#unsafe-jit', {
          createScript: s => s
        });
      } catch {
        // trustedTypes.createPolicy throws if called with a name that is
        // already registered, even in report-only mode. Until the API changes,
        // catch the error not to break the applications functionally. In such
        // cases, the code will fall back to using strings.
      }
    }
  }
  return policy;
}
/**
 * Unsafely promote a string to a TrustedScript, falling back to strings when
 * Trusted Types are not available.
 * @security In particular, it must be assured that the provided string will
 * never cause an XSS vulnerability if used in a context that will be
 * interpreted and executed as a script by a browser, e.g. when calling eval.
 */
function trustedScriptFromString(script) {
  return getPolicy()?.createScript(script) || script;
}
/**
 * Unsafely call the Function constructor with the given string arguments.
 * @security This is a security-sensitive function; any use of this function
 * must go through security review. In particular, it must be assured that it
 * is only called from the JIT compiler, as use in other code can lead to XSS
 * vulnerabilities.
 */
function newTrustedFunctionForJIT(...args) {
  if (!_global.trustedTypes) {
    // In environments that don't support Trusted Types, fall back to the most
    // straightforward implementation:
    return new Function(...args);
  }
  // Chrome currently does not support passing TrustedScript to the Function
  // constructor. The following implements the workaround proposed on the page
  // below, where the Chromium bug is also referenced:
  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor
  const fnArgs = args.slice(0, -1).join(',');
  const fnBody = args[args.length - 1];
  const body = `(function anonymous(${fnArgs}
) { ${fnBody}
})`;
  // Using eval directly confuses the compiler and prevents this module from
  // being stripped out of JS binaries even if not used. The global['eval']
  // indirection fixes that.
  const fn = _global['eval'](trustedScriptFromString(body));
  if (fn.bind === undefined) {
    // Workaround for a browser bug that only exists in Chrome 83, where passing
    // a TrustedScript to eval just returns the TrustedScript back without
    // evaluating it. In that case, fall back to the most straightforward
    // implementation:
    return new Function(...args);
  }
  // To completely mimic the behavior of calling "new Function", two more
  // things need to happen:
  // 1. Stringifying the resulting function should return its source code
  fn.toString = () => body;
  // 2. When calling the resulting function, `this` should refer to `global`
  return fn.bind(_global);
  // When Trusted Types support in Function constructors is widely available,
  // the implementation of this function can be simplified to:
  // return new Function(...args.map(a => trustedScriptFromString(a)));
}

/**
 * A helper class to manage the evaluation of JIT generated code.
 */
class JitEvaluator {
  /**
   *
   * @param sourceUrl The URL of the generated code.
   * @param statements An array of Angular statement AST nodes to be evaluated.
   * @param refResolver Resolves `o.ExternalReference`s into values.
   * @param createSourceMaps If true then create a source-map for the generated code and include it
   * inline as a source-map comment.
   * @returns A map of all the variables in the generated code.
   */
  evaluateStatements(sourceUrl, statements, refResolver, createSourceMaps) {
    const converter = new JitEmitterVisitor(refResolver);
    const ctx = EmitterVisitorContext.createRoot();
    // Ensure generated code is in strict mode
    if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
      statements = [literal('use strict').toStmt(), ...statements];
    }
    converter.visitAllStatements(statements, ctx);
    converter.createReturnStmt(ctx);
    return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
  }
  /**
   * Evaluate a piece of JIT generated code.
   * @param sourceUrl The URL of this generated code.
   * @param ctx A context object that contains an AST of the code to be evaluated.
   * @param vars A map containing the names and values of variables that the evaluated code might
   * reference.
   * @param createSourceMap If true then create a source-map for the generated code and include it
   * inline as a source-map comment.
   * @returns The result of evaluating the code.
   */
  evaluateCode(sourceUrl, ctx, vars, createSourceMap) {
    let fnBody = `"use strict";${ctx.toSource()}\n//# sourceURL=${sourceUrl}`;
    const fnArgNames = [];
    const fnArgValues = [];
    for (const argName in vars) {
      fnArgValues.push(vars[argName]);
      fnArgNames.push(argName);
    }
    if (createSourceMap) {
      // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
      // E.g. ```
      // function anonymous(a,b,c
      // /**/) { ... }```
      // We don't want to hard code this fact, so we auto detect it via an empty function first.
      const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();
      const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
      fnBody += `\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;
    }
    const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));
    return this.executeFunction(fn, fnArgValues);
  }
  /**
   * Execute a JIT generated function by calling it.
   *
   * This method can be overridden in tests to capture the functions that are generated
   * by this `JitEvaluator` class.
   *
   * @param fn A function to execute.
   * @param args The arguments to pass to the function being executed.
   * @returns The return value of the executed function.
   */
  executeFunction(fn, args) {
    return fn(...args);
  }
}
/**
 * An Angular AST visitor that converts AST nodes into executable JavaScript code.
 */
class JitEmitterVisitor extends AbstractJsEmitterVisitor {
  constructor(refResolver) {
    super();
    this.refResolver = refResolver;
    this._evalArgNames = [];
    this._evalArgValues = [];
    this._evalExportedVars = [];
  }
  createReturnStmt(ctx) {
    const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));
    stmt.visitStatement(this, ctx);
  }
  getArgs() {
    const result = {};
    for (let i = 0; i < this._evalArgNames.length; i++) {
      result[this._evalArgNames[i]] = this._evalArgValues[i];
    }
    return result;
  }
  visitExternalExpr(ast, ctx) {
    this._emitReferenceToExternal(ast, this.refResolver.resolveExternalReference(ast.value), ctx);
    return null;
  }
  visitWrappedNodeExpr(ast, ctx) {
    this._emitReferenceToExternal(ast, ast.node, ctx);
    return null;
  }
  visitDeclareVarStmt(stmt, ctx) {
    if (stmt.hasModifier(StmtModifier.Exported)) {
      this._evalExportedVars.push(stmt.name);
    }
    return super.visitDeclareVarStmt(stmt, ctx);
  }
  visitDeclareFunctionStmt(stmt, ctx) {
    if (stmt.hasModifier(StmtModifier.Exported)) {
      this._evalExportedVars.push(stmt.name);
    }
    return super.visitDeclareFunctionStmt(stmt, ctx);
  }
  _emitReferenceToExternal(ast, value, ctx) {
    let id = this._evalArgValues.indexOf(value);
    if (id === -1) {
      id = this._evalArgValues.length;
      this._evalArgValues.push(value);
      const name = identifierName({
        reference: value
      }) || 'val';
      this._evalArgNames.push(`jit_${name}_${id}`);
    }
    ctx.print(ast, this._evalArgNames[id]);
  }
}
function isUseStrictStatement(statement) {
  return statement.isEquivalent(literal('use strict').toStmt());
}
function compileInjector(meta) {
  const definitionMap = new DefinitionMap();
  if (meta.providers !== null) {
    definitionMap.set('providers', meta.providers);
  }
  if (meta.imports.length > 0) {
    definitionMap.set('imports', literalArr(meta.imports));
  }
  const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);
  const type = createInjectorType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
function createInjectorType(meta) {
  return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));
}

/**
 * Implementation of `CompileReflector` which resolves references to @angular/core
 * symbols at runtime, according to a consumer-provided mapping.
 *
 * Only supports `resolveExternalReference`, all other methods throw.
 */
class R3JitReflector {
  constructor(context) {
    this.context = context;
  }
  resolveExternalReference(ref) {
    // This reflector only handles @angular/core imports.
    if (ref.moduleName !== '@angular/core') {
      throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);
    }
    if (!this.context.hasOwnProperty(ref.name)) {
      throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);
    }
    return this.context[ref.name];
  }
}

/**
 * How the selector scope of an NgModule (its declarations, imports, and exports) should be emitted
 * as a part of the NgModule definition.
 */
var R3SelectorScopeMode;
(function (R3SelectorScopeMode) {
  /**
   * Emit the declarations inline into the module definition.
   *
   * This option is useful in certain contexts where it's known that JIT support is required. The
   * tradeoff here is that this emit style prevents directives and pipes from being tree-shaken if
   * they are unused, but the NgModule is used.
   */
  R3SelectorScopeMode[R3SelectorScopeMode["Inline"] = 0] = "Inline";
  /**
   * Emit the declarations using a side effectful function call, `ɵɵsetNgModuleScope`, that is
   * guarded with the `ngJitMode` flag.
   *
   * This form of emit supports JIT and can be optimized away if the `ngJitMode` flag is set to
   * false, which allows unused directives and pipes to be tree-shaken.
   */
  R3SelectorScopeMode[R3SelectorScopeMode["SideEffect"] = 1] = "SideEffect";
  /**
   * Don't generate selector scopes at all.
   *
   * This is useful for contexts where JIT support is known to be unnecessary.
   */
  R3SelectorScopeMode[R3SelectorScopeMode["Omit"] = 2] = "Omit";
})(R3SelectorScopeMode || (R3SelectorScopeMode = {}));
/**
 * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
 */
function compileNgModule(meta) {
  const {
    adjacentType,
    internalType,
    bootstrap,
    declarations,
    imports,
    exports,
    schemas,
    containsForwardDecls,
    selectorScopeMode,
    id
  } = meta;
  const statements = [];
  const definitionMap = new DefinitionMap();
  definitionMap.set('type', internalType);
  if (bootstrap.length > 0) {
    definitionMap.set('bootstrap', refsToArray(bootstrap, containsForwardDecls));
  }
  if (selectorScopeMode === R3SelectorScopeMode.Inline) {
    // If requested to emit scope information inline, pass the `declarations`, `imports` and
    // `exports` to the `ɵɵdefineNgModule()` call directly.
    if (declarations.length > 0) {
      definitionMap.set('declarations', refsToArray(declarations, containsForwardDecls));
    }
    if (imports.length > 0) {
      definitionMap.set('imports', refsToArray(imports, containsForwardDecls));
    }
    if (exports.length > 0) {
      definitionMap.set('exports', refsToArray(exports, containsForwardDecls));
    }
  } else if (selectorScopeMode === R3SelectorScopeMode.SideEffect) {
    // In this mode, scope information is not passed into `ɵɵdefineNgModule` as it
    // would prevent tree-shaking of the declarations, imports and exports references. Instead, it's
    // patched onto the NgModule definition with a `ɵɵsetNgModuleScope` call that's guarded by the
    // `ngJitMode` flag.
    const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
    if (setNgModuleScopeCall !== null) {
      statements.push(setNgModuleScopeCall);
    }
  } else {
    // Selector scope emit was not requested, so skip it.
  }
  if (schemas !== null && schemas.length > 0) {
    definitionMap.set('schemas', literalArr(schemas.map(ref => ref.value)));
  }
  if (id !== null) {
    definitionMap.set('id', id);
    // Generate a side-effectful call to register this NgModule by its id, as per the semantics of
    // NgModule ids.
    statements.push(importExpr(Identifiers.registerNgModuleType).callFn([adjacentType, id]).toStmt());
  }
  const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);
  const type = createNgModuleType(meta);
  return {
    expression,
    type,
    statements
  };
}
/**
 * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to
 * `ɵɵngDeclareNgModule()`.
 */
function compileNgModuleDeclarationExpression(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('type', new WrappedNodeExpr(meta.type));
  if (meta.bootstrap !== undefined) {
    definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));
  }
  if (meta.declarations !== undefined) {
    definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));
  }
  if (meta.imports !== undefined) {
    definitionMap.set('imports', new WrappedNodeExpr(meta.imports));
  }
  if (meta.exports !== undefined) {
    definitionMap.set('exports', new WrappedNodeExpr(meta.exports));
  }
  if (meta.schemas !== undefined) {
    definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));
  }
  if (meta.id !== undefined) {
    definitionMap.set('id', new WrappedNodeExpr(meta.id));
  }
  return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);
}
function createNgModuleType({
  type: moduleType,
  declarations,
  exports,
  imports,
  includeImportTypes,
  publicDeclarationTypes
}) {
  return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [new ExpressionType(moduleType.type), publicDeclarationTypes === null ? tupleTypeOf(declarations) : tupleOfTypes(publicDeclarationTypes), includeImportTypes ? tupleTypeOf(imports) : NONE_TYPE, tupleTypeOf(exports)]));
}
/**
 * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the
 * transitive module scope can be computed during runtime in JIT mode. This call is marked pure
 * such that the references to declarations, imports and exports may be elided causing these
 * symbols to become tree-shakeable.
 */
function generateSetNgModuleScopeCall(meta) {
  const {
    adjacentType: moduleType,
    declarations,
    imports,
    exports,
    containsForwardDecls
  } = meta;
  const scopeMap = new DefinitionMap();
  if (declarations.length > 0) {
    scopeMap.set('declarations', refsToArray(declarations, containsForwardDecls));
  }
  if (imports.length > 0) {
    scopeMap.set('imports', refsToArray(imports, containsForwardDecls));
  }
  if (exports.length > 0) {
    scopeMap.set('exports', refsToArray(exports, containsForwardDecls));
  }
  if (Object.keys(scopeMap.values).length === 0) {
    return null;
  }
  // setNgModuleScope(...)
  const fnCall = new InvokeFunctionExpr( /* fn */importExpr(Identifiers.setNgModuleScope), /* args */[moduleType, scopeMap.toLiteralMap()]);
  // (ngJitMode guard) && setNgModuleScope(...)
  const guardedCall = jitOnlyGuardedExpression(fnCall);
  // function() { (ngJitMode guard) && setNgModuleScope(...); }
  const iife = new FunctionExpr( /* params */[], /* statements */[guardedCall.toStmt()]);
  // (function() { (ngJitMode guard) && setNgModuleScope(...); })()
  const iifeCall = new InvokeFunctionExpr( /* fn */iife, /* args */[]);
  return iifeCall.toStmt();
}
function tupleTypeOf(exp) {
  const types = exp.map(ref => typeofExpr(ref.type));
  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
}
function tupleOfTypes(types) {
  const typeofTypes = types.map(type => typeofExpr(type));
  return types.length > 0 ? expressionType(literalArr(typeofTypes)) : NONE_TYPE;
}
function compilePipeFromMetadata(metadata) {
  const definitionMapValues = [];
  // e.g. `name: 'myPipe'`
  definitionMapValues.push({
    key: 'name',
    value: literal(metadata.pipeName),
    quoted: false
  });
  // e.g. `type: MyPipe`
  definitionMapValues.push({
    key: 'type',
    value: metadata.type.value,
    quoted: false
  });
  // e.g. `pure: true`
  definitionMapValues.push({
    key: 'pure',
    value: literal(metadata.pure),
    quoted: false
  });
  if (metadata.isStandalone) {
    definitionMapValues.push({
      key: 'standalone',
      value: literal(true),
      quoted: false
    });
  }
  const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);
  const type = createPipeType(metadata);
  return {
    expression,
    type,
    statements: []
  };
}
function createPipeType(metadata) {
  return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName)), new ExpressionType(new LiteralExpr(metadata.isStandalone))]));
}
var R3TemplateDependencyKind;
(function (R3TemplateDependencyKind) {
  R3TemplateDependencyKind[R3TemplateDependencyKind["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind[R3TemplateDependencyKind["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind[R3TemplateDependencyKind["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
class ParserError {
  constructor(message, input, errLocation, ctxLocation) {
    this.input = input;
    this.errLocation = errLocation;
    this.ctxLocation = ctxLocation;
    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;
  }
}
class ParseSpan {
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
  toAbsolute(absoluteOffset) {
    return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
  }
}
class AST {
  constructor(span,
  /**
   * Absolute location of the expression AST in a source code file.
   */
  sourceSpan) {
    this.span = span;
    this.sourceSpan = sourceSpan;
  }
  toString() {
    return 'AST';
  }
}
class ASTWithName extends AST {
  constructor(span, sourceSpan, nameSpan) {
    super(span, sourceSpan);
    this.nameSpan = nameSpan;
  }
}
class EmptyExpr extends AST {
  visit(visitor, context = null) {
    // do nothing
  }
}
class ImplicitReceiver extends AST {
  visit(visitor, context = null) {
    return visitor.visitImplicitReceiver(this, context);
  }
}
/**
 * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class
 * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the
 * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]="this.title"`
 * is the same as `[attr.title]="title"`.). Inheriting allows for the `this` accesses to be treated
 * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.
 * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.
 */
class ThisReceiver extends ImplicitReceiver {
  visit(visitor, context = null) {
    return visitor.visitThisReceiver?.(this, context);
  }
}
/**
 * Multiple expressions separated by a semicolon.
 */
class Chain extends AST {
  constructor(span, sourceSpan, expressions) {
    super(span, sourceSpan);
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitChain(this, context);
  }
}
class Conditional extends AST {
  constructor(span, sourceSpan, condition, trueExp, falseExp) {
    super(span, sourceSpan);
    this.condition = condition;
    this.trueExp = trueExp;
    this.falseExp = falseExp;
  }
  visit(visitor, context = null) {
    return visitor.visitConditional(this, context);
  }
}
class PropertyRead extends ASTWithName {
  constructor(span, sourceSpan, nameSpan, receiver, name) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
  }
  visit(visitor, context = null) {
    return visitor.visitPropertyRead(this, context);
  }
}
class PropertyWrite extends ASTWithName {
  constructor(span, sourceSpan, nameSpan, receiver, name, value) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitPropertyWrite(this, context);
  }
}
class SafePropertyRead extends ASTWithName {
  constructor(span, sourceSpan, nameSpan, receiver, name) {
    super(span, sourceSpan, nameSpan);
    this.receiver = receiver;
    this.name = name;
  }
  visit(visitor, context = null) {
    return visitor.visitSafePropertyRead(this, context);
  }
}
class KeyedRead extends AST {
  constructor(span, sourceSpan, receiver, key) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
  }
  visit(visitor, context = null) {
    return visitor.visitKeyedRead(this, context);
  }
}
class SafeKeyedRead extends AST {
  constructor(span, sourceSpan, receiver, key) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
  }
  visit(visitor, context = null) {
    return visitor.visitSafeKeyedRead(this, context);
  }
}
class KeyedWrite extends AST {
  constructor(span, sourceSpan, receiver, key, value) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.key = key;
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitKeyedWrite(this, context);
  }
}
class BindingPipe extends ASTWithName {
  constructor(span, sourceSpan, exp, name, args, nameSpan) {
    super(span, sourceSpan, nameSpan);
    this.exp = exp;
    this.name = name;
    this.args = args;
  }
  visit(visitor, context = null) {
    return visitor.visitPipe(this, context);
  }
}
class LiteralPrimitive extends AST {
  constructor(span, sourceSpan, value) {
    super(span, sourceSpan);
    this.value = value;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralPrimitive(this, context);
  }
}
class LiteralArray extends AST {
  constructor(span, sourceSpan, expressions) {
    super(span, sourceSpan);
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralArray(this, context);
  }
}
class LiteralMap extends AST {
  constructor(span, sourceSpan, keys, values) {
    super(span, sourceSpan);
    this.keys = keys;
    this.values = values;
  }
  visit(visitor, context = null) {
    return visitor.visitLiteralMap(this, context);
  }
}
class Interpolation extends AST {
  constructor(span, sourceSpan, strings, expressions) {
    super(span, sourceSpan);
    this.strings = strings;
    this.expressions = expressions;
  }
  visit(visitor, context = null) {
    return visitor.visitInterpolation(this, context);
  }
}
class Binary extends AST {
  constructor(span, sourceSpan, operation, left, right) {
    super(span, sourceSpan);
    this.operation = operation;
    this.left = left;
    this.right = right;
  }
  visit(visitor, context = null) {
    return visitor.visitBinary(this, context);
  }
}
/**
 * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST
 * node that was originally used. This inheritance relation can be deleted in some future major,
 * after consumers have been given a chance to fully support Unary.
 */
class Unary extends Binary {
  /**
   * Creates a unary minus expression "-x", represented as `Binary` using "0 - x".
   */
  static createMinus(span, sourceSpan, expr) {
    return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);
  }
  /**
   * Creates a unary plus expression "+x", represented as `Binary` using "x - 0".
   */
  static createPlus(span, sourceSpan, expr) {
    return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));
  }
  /**
   * During the deprecation period this constructor is private, to avoid consumers from creating
   * a `Unary` with the fallback properties for `Binary`.
   */
  constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {
    super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);
    this.operator = operator;
    this.expr = expr;
    // Redeclare the properties that are inherited from `Binary` as `never`, as consumers should not
    // depend on these fields when operating on `Unary`.
    this.left = null;
    this.right = null;
    this.operation = null;
  }
  visit(visitor, context = null) {
    if (visitor.visitUnary !== undefined) {
      return visitor.visitUnary(this, context);
    }
    return visitor.visitBinary(this, context);
  }
}
class PrefixNot extends AST {
  constructor(span, sourceSpan, expression) {
    super(span, sourceSpan);
    this.expression = expression;
  }
  visit(visitor, context = null) {
    return visitor.visitPrefixNot(this, context);
  }
}
class NonNullAssert extends AST {
  constructor(span, sourceSpan, expression) {
    super(span, sourceSpan);
    this.expression = expression;
  }
  visit(visitor, context = null) {
    return visitor.visitNonNullAssert(this, context);
  }
}
class Call extends AST {
  constructor(span, sourceSpan, receiver, args, argumentSpan) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.args = args;
    this.argumentSpan = argumentSpan;
  }
  visit(visitor, context = null) {
    return visitor.visitCall(this, context);
  }
}
class SafeCall extends AST {
  constructor(span, sourceSpan, receiver, args, argumentSpan) {
    super(span, sourceSpan);
    this.receiver = receiver;
    this.args = args;
    this.argumentSpan = argumentSpan;
  }
  visit(visitor, context = null) {
    return visitor.visitSafeCall(this, context);
  }
}
/**
 * Records the absolute position of a text span in a source file, where `start` and `end` are the
 * starting and ending byte offsets, respectively, of the text span in a source file.
 */
class AbsoluteSourceSpan {
  constructor(start, end) {
    this.start = start;
    this.end = end;
  }
}
class ASTWithSource extends AST {
  constructor(ast, source, location, absoluteOffset, errors) {
    super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));
    this.ast = ast;
    this.source = source;
    this.location = location;
    this.errors = errors;
  }
  visit(visitor, context = null) {
    if (visitor.visitASTWithSource) {
      return visitor.visitASTWithSource(this, context);
    }
    return this.ast.visit(visitor, context);
  }
  toString() {
    return `${this.source} in ${this.location}`;
  }
}
class VariableBinding {
  /**
   * @param sourceSpan entire span of the binding.
   * @param key name of the LHS along with its span.
   * @param value optional value for the RHS along with its span.
   */
  constructor(sourceSpan, key, value) {
    this.sourceSpan = sourceSpan;
    this.key = key;
    this.value = value;
  }
}
class ExpressionBinding {
  /**
   * @param sourceSpan entire span of the binding.
   * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
   * span. Note that the length of the span may not be the same as
   * `key.source.length`. For example,
   * 1. key.source = ngFor, key.span is for "ngFor"
   * 2. key.source = ngForOf, key.span is for "of"
   * 3. key.source = ngForTrackBy, key.span is for "trackBy"
   * @param value optional expression for the RHS.
   */
  constructor(sourceSpan, key, value) {
    this.sourceSpan = sourceSpan;
    this.key = key;
    this.value = value;
  }
}
class RecursiveAstVisitor {
  visit(ast, context) {
    // The default implementation just visits every node.
    // Classes that extend RecursiveAstVisitor should override this function
    // to selectively visit the specified node.
    ast.visit(this, context);
  }
  visitUnary(ast, context) {
    this.visit(ast.expr, context);
  }
  visitBinary(ast, context) {
    this.visit(ast.left, context);
    this.visit(ast.right, context);
  }
  visitChain(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitConditional(ast, context) {
    this.visit(ast.condition, context);
    this.visit(ast.trueExp, context);
    this.visit(ast.falseExp, context);
  }
  visitPipe(ast, context) {
    this.visit(ast.exp, context);
    this.visitAll(ast.args, context);
  }
  visitImplicitReceiver(ast, context) {}
  visitThisReceiver(ast, context) {}
  visitInterpolation(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitKeyedRead(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
  }
  visitKeyedWrite(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
    this.visit(ast.value, context);
  }
  visitLiteralArray(ast, context) {
    this.visitAll(ast.expressions, context);
  }
  visitLiteralMap(ast, context) {
    this.visitAll(ast.values, context);
  }
  visitLiteralPrimitive(ast, context) {}
  visitPrefixNot(ast, context) {
    this.visit(ast.expression, context);
  }
  visitNonNullAssert(ast, context) {
    this.visit(ast.expression, context);
  }
  visitPropertyRead(ast, context) {
    this.visit(ast.receiver, context);
  }
  visitPropertyWrite(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.value, context);
  }
  visitSafePropertyRead(ast, context) {
    this.visit(ast.receiver, context);
  }
  visitSafeKeyedRead(ast, context) {
    this.visit(ast.receiver, context);
    this.visit(ast.key, context);
  }
  visitCall(ast, context) {
    this.visit(ast.receiver, context);
    this.visitAll(ast.args, context);
  }
  visitSafeCall(ast, context) {
    this.visit(ast.receiver, context);
    this.visitAll(ast.args, context);
  }
  // This is not part of the AstVisitor interface, just a helper method
  visitAll(asts, context) {
    for (const ast of asts) {
      this.visit(ast, context);
    }
  }
}
class AstTransformer {
  visitImplicitReceiver(ast, context) {
    return ast;
  }
  visitThisReceiver(ast, context) {
    return ast;
  }
  visitInterpolation(ast, context) {
    return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));
  }
  visitLiteralPrimitive(ast, context) {
    return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);
  }
  visitPropertyRead(ast, context) {
    return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
  }
  visitPropertyWrite(ast, context) {
    return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));
  }
  visitSafePropertyRead(ast, context) {
    return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);
  }
  visitLiteralArray(ast, context) {
    return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
  }
  visitLiteralMap(ast, context) {
    return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));
  }
  visitUnary(ast, context) {
    switch (ast.operator) {
      case '+':
        return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));
      case '-':
        return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));
      default:
        throw new Error(`Unknown unary operator ${ast.operator}`);
    }
  }
  visitBinary(ast, context) {
    return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));
  }
  visitPrefixNot(ast, context) {
    return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));
  }
  visitNonNullAssert(ast, context) {
    return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));
  }
  visitConditional(ast, context) {
    return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
  }
  visitPipe(ast, context) {
    return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);
  }
  visitKeyedRead(ast, context) {
    return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));
  }
  visitKeyedWrite(ast, context) {
    return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));
  }
  visitCall(ast, context) {
    return new Call(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);
  }
  visitSafeCall(ast, context) {
    return new SafeCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), this.visitAll(ast.args), ast.argumentSpan);
  }
  visitAll(asts) {
    const res = [];
    for (let i = 0; i < asts.length; ++i) {
      res[i] = asts[i].visit(this);
    }
    return res;
  }
  visitChain(ast, context) {
    return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
  }
  visitSafeKeyedRead(ast, context) {
    return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));
  }
}
// A transformer that only creates new nodes if the transformer makes a change or
// a change is made a child node.
class AstMemoryEfficientTransformer {
  visitImplicitReceiver(ast, context) {
    return ast;
  }
  visitThisReceiver(ast, context) {
    return ast;
  }
  visitInterpolation(ast, context) {
    const expressions = this.visitAll(ast.expressions);
    if (expressions !== ast.expressions) return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);
    return ast;
  }
  visitLiteralPrimitive(ast, context) {
    return ast;
  }
  visitPropertyRead(ast, context) {
    const receiver = ast.receiver.visit(this);
    if (receiver !== ast.receiver) {
      return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
    }
    return ast;
  }
  visitPropertyWrite(ast, context) {
    const receiver = ast.receiver.visit(this);
    const value = ast.value.visit(this);
    if (receiver !== ast.receiver || value !== ast.value) {
      return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);
    }
    return ast;
  }
  visitSafePropertyRead(ast, context) {
    const receiver = ast.receiver.visit(this);
    if (receiver !== ast.receiver) {
      return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);
    }
    return ast;
  }
  visitLiteralArray(ast, context) {
    const expressions = this.visitAll(ast.expressions);
    if (expressions !== ast.expressions) {
      return new LiteralArray(ast.span, ast.sourceSpan, expressions);
    }
    return ast;
  }
  visitLiteralMap(ast, context) {
    const values = this.visitAll(ast.values);
    if (values !== ast.values) {
      return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);
    }
    return ast;
  }
  visitUnary(ast, context) {
    const expr = ast.expr.visit(this);
    if (expr !== ast.expr) {
      switch (ast.operator) {
        case '+':
          return Unary.createPlus(ast.span, ast.sourceSpan, expr);
        case '-':
          return Unary.createMinus(ast.span, ast.sourceSpan, expr);
        default:
          throw new Error(`Unknown unary operator ${ast.operator}`);
      }
    }
    return ast;
  }
  visitBinary(ast, context) {
    const left = ast.left.visit(this);
    const right = ast.right.visit(this);
    if (left !== ast.left || right !== ast.right) {
      return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);
    }
    return ast;
  }
  visitPrefixNot(ast, context) {
    const expression = ast.expression.visit(this);
    if (expression !== ast.expression) {
      return new PrefixNot(ast.span, ast.sourceSpan, expression);
    }
    return ast;
  }
  visitNonNullAssert(ast, context) {
    const expression = ast.expression.visit(this);
    if (expression !== ast.expression) {
      return new NonNullAssert(ast.span, ast.sourceSpan, expression);
    }
    return ast;
  }
  visitConditional(ast, context) {
    const condition = ast.condition.visit(this);
    const trueExp = ast.trueExp.visit(this);
    const falseExp = ast.falseExp.visit(this);
    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {
      return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);
    }
    return ast;
  }
  visitPipe(ast, context) {
    const exp = ast.exp.visit(this);
    const args = this.visitAll(ast.args);
    if (exp !== ast.exp || args !== ast.args) {
      return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);
    }
    return ast;
  }
  visitKeyedRead(ast, context) {
    const obj = ast.receiver.visit(this);
    const key = ast.key.visit(this);
    if (obj !== ast.receiver || key !== ast.key) {
      return new KeyedRead(ast.span, ast.sourceSpan, obj, key);
    }
    return ast;
  }
  visitKeyedWrite(ast, context) {
    const obj = ast.receiver.visit(this);
    const key = ast.key.visit(this);
    const value = ast.value.visit(this);
    if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {
      return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);
    }
    return ast;
  }
  visitAll(asts) {
    const res = [];
    let modified = false;
    for (let i = 0; i < asts.length; ++i) {
      const original = asts[i];
      const value = original.visit(this);
      res[i] = value;
      modified = modified || value !== original;
    }
    return modified ? res : asts;
  }
  visitChain(ast, context) {
    const expressions = this.visitAll(ast.expressions);
    if (expressions !== ast.expressions) {
      return new Chain(ast.span, ast.sourceSpan, expressions);
    }
    return ast;
  }
  visitCall(ast, context) {
    const receiver = ast.receiver.visit(this);
    const args = this.visitAll(ast.args);
    if (receiver !== ast.receiver || args !== ast.args) {
      return new Call(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);
    }
    return ast;
  }
  visitSafeCall(ast, context) {
    const receiver = ast.receiver.visit(this);
    const args = this.visitAll(ast.args);
    if (receiver !== ast.receiver || args !== ast.args) {
      return new SafeCall(ast.span, ast.sourceSpan, receiver, args, ast.argumentSpan);
    }
    return ast;
  }
  visitSafeKeyedRead(ast, context) {
    const obj = ast.receiver.visit(this);
    const key = ast.key.visit(this);
    if (obj !== ast.receiver || key !== ast.key) {
      return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);
    }
    return ast;
  }
}
// Bindings
class ParsedProperty {
  constructor(name, expression, type, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.expression = expression;
    this.type = type;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
  }
}
var ParsedPropertyType;
(function (ParsedPropertyType) {
  ParsedPropertyType[ParsedPropertyType["DEFAULT"] = 0] = "DEFAULT";
  ParsedPropertyType[ParsedPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
  ParsedPropertyType[ParsedPropertyType["ANIMATION"] = 2] = "ANIMATION";
})(ParsedPropertyType || (ParsedPropertyType = {}));
class ParsedEvent {
  // Regular events have a target
  // Animation events have a phase
  constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan, keySpan) {
    this.name = name;
    this.targetOrPhase = targetOrPhase;
    this.type = type;
    this.handler = handler;
    this.sourceSpan = sourceSpan;
    this.handlerSpan = handlerSpan;
    this.keySpan = keySpan;
  }
}
/**
 * ParsedVariable represents a variable declaration in a microsyntax expression.
 */
class ParsedVariable {
  constructor(name, value, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
}
class BoundElementProperty {
  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {
    this.name = name;
    this.type = type;
    this.securityContext = securityContext;
    this.value = value;
    this.unit = unit;
    this.sourceSpan = sourceSpan;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
  }
}
class EventHandlerVars {}
EventHandlerVars.event = variable('$event');
/**
 * Converts the given expression AST into an executable output AST, assuming the expression is
 * used in an action binding (e.g. an event handler).
 */
function convertActionBinding(localResolver, implicitReceiver, action, bindingId, baseSourceSpan, implicitReceiverAccesses, globals) {
  if (!localResolver) {
    localResolver = new DefaultLocalResolver(globals);
  }
  const actionWithoutBuiltins = convertPropertyBindingBuiltins({
    createLiteralArrayConverter: argCount => {
      // Note: no caching for literal arrays in actions.
      return args => literalArr(args);
    },
    createLiteralMapConverter: keys => {
      // Note: no caching for literal maps in actions.
      return values => {
        const entries = keys.map((k, i) => ({
          key: k.key,
          value: values[i],
          quoted: k.quoted
        }));
        return literalMap(entries);
      };
    },
    createPipeConverter: name => {
      throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);
    }
  }, action);
  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */false, baseSourceSpan, implicitReceiverAccesses);
  const actionStmts = [];
  flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
  prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
  if (visitor.usesImplicitReceiver) {
    localResolver.notifyImplicitReceiverUse();
  }
  const lastIndex = actionStmts.length - 1;
  if (lastIndex >= 0) {
    const lastStatement = actionStmts[lastIndex];
    // Ensure that the value of the last expression statement is returned
    if (lastStatement instanceof ExpressionStatement) {
      actionStmts[lastIndex] = new ReturnStatement(lastStatement.expr);
    }
  }
  return actionStmts;
}
function convertPropertyBindingBuiltins(converterFactory, ast) {
  return convertBuiltins(converterFactory, ast);
}
class ConvertPropertyBindingResult {
  constructor(stmts, currValExpr) {
    this.stmts = stmts;
    this.currValExpr = currValExpr;
  }
}
/**
 * Converts the given expression AST into an executable output AST, assuming the expression
 * is used in property binding. The expression has to be preprocessed via
 * `convertPropertyBindingBuiltins`.
 */
function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
  if (!localResolver) {
    localResolver = new DefaultLocalResolver();
  }
  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, /* supportsInterpolation */false);
  const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
  const stmts = getStatementsFromVisitor(visitor, bindingId);
  if (visitor.usesImplicitReceiver) {
    localResolver.notifyImplicitReceiverUse();
  }
  return new ConvertPropertyBindingResult(stmts, outputExpr);
}
/**
 * Given some expression, such as a binding or interpolation expression, and a context expression to
 * look values up on, visit each facet of the given expression resolving values from the context
 * expression such that a list of arguments can be derived from the found values that can be used as
 * arguments to an external update instruction.
 *
 * @param localResolver The resolver to use to look up expressions by name appropriately
 * @param contextVariableExpression The expression representing the context variable used to create
 * the final argument expressions
 * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to
 * be resolved and what arguments list to build.
 * @param bindingId A name prefix used to create temporary variable names if they're needed for the
 * arguments generated
 * @returns An array of expressions that can be passed as arguments to instruction expressions like
 * `o.importExpr(R3.propertyInterpolate).callFn(result)`
 */
function convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {
  const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, /* supportsInterpolation */true);
  const outputExpr = visitor.visitInterpolation(expressionWithArgumentsToExtract, _Mode.Expression);
  if (visitor.usesImplicitReceiver) {
    localResolver.notifyImplicitReceiverUse();
  }
  const stmts = getStatementsFromVisitor(visitor, bindingId);
  const args = outputExpr.args;
  return {
    stmts,
    args
  };
}
function getStatementsFromVisitor(visitor, bindingId) {
  const stmts = [];
  for (let i = 0; i < visitor.temporaryCount; i++) {
    stmts.push(temporaryDeclaration(bindingId, i));
  }
  return stmts;
}
function convertBuiltins(converterFactory, ast) {
  const visitor = new _BuiltinAstConverter(converterFactory);
  return ast.visit(visitor);
}
function temporaryName(bindingId, temporaryNumber) {
  return `tmp_${bindingId}_${temporaryNumber}`;
}
function temporaryDeclaration(bindingId, temporaryNumber) {
  return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));
}
function prependTemporaryDecls(temporaryCount, bindingId, statements) {
  for (let i = temporaryCount - 1; i >= 0; i--) {
    statements.unshift(temporaryDeclaration(bindingId, i));
  }
}
var _Mode;
(function (_Mode) {
  _Mode[_Mode["Statement"] = 0] = "Statement";
  _Mode[_Mode["Expression"] = 1] = "Expression";
})(_Mode || (_Mode = {}));
function ensureStatementMode(mode, ast) {
  if (mode !== _Mode.Statement) {
    throw new Error(`Expected a statement, but saw ${ast}`);
  }
}
function ensureExpressionMode(mode, ast) {
  if (mode !== _Mode.Expression) {
    throw new Error(`Expected an expression, but saw ${ast}`);
  }
}
function convertToStatementIfNeeded(mode, expr) {
  if (mode === _Mode.Statement) {
    return expr.toStmt();
  } else {
    return expr;
  }
}
class _BuiltinAstConverter extends AstTransformer {
  constructor(_converterFactory) {
    super();
    this._converterFactory = _converterFactory;
  }
  visitPipe(ast, context) {
    const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));
    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));
  }
  visitLiteralArray(ast, context) {
    const args = ast.expressions.map(ast => ast.visit(this, context));
    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
  }
  visitLiteralMap(ast, context) {
    const args = ast.values.map(ast => ast.visit(this, context));
    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));
  }
}
class _AstToIrVisitor {
  constructor(_localResolver, _implicitReceiver, bindingId, supportsInterpolation, baseSourceSpan, implicitReceiverAccesses) {
    this._localResolver = _localResolver;
    this._implicitReceiver = _implicitReceiver;
    this.bindingId = bindingId;
    this.supportsInterpolation = supportsInterpolation;
    this.baseSourceSpan = baseSourceSpan;
    this.implicitReceiverAccesses = implicitReceiverAccesses;
    this._nodeMap = new Map();
    this._resultMap = new Map();
    this._currentTemporary = 0;
    this.temporaryCount = 0;
    this.usesImplicitReceiver = false;
  }
  visitUnary(ast, mode) {
    let op;
    switch (ast.operator) {
      case '+':
        op = UnaryOperator.Plus;
        break;
      case '-':
        op = UnaryOperator.Minus;
        break;
      default:
        throw new Error(`Unsupported operator ${ast.operator}`);
    }
    return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));
  }
  visitBinary(ast, mode) {
    let op;
    switch (ast.operation) {
      case '+':
        op = BinaryOperator.Plus;
        break;
      case '-':
        op = BinaryOperator.Minus;
        break;
      case '*':
        op = BinaryOperator.Multiply;
        break;
      case '/':
        op = BinaryOperator.Divide;
        break;
      case '%':
        op = BinaryOperator.Modulo;
        break;
      case '&&':
        op = BinaryOperator.And;
        break;
      case '||':
        op = BinaryOperator.Or;
        break;
      case '==':
        op = BinaryOperator.Equals;
        break;
      case '!=':
        op = BinaryOperator.NotEquals;
        break;
      case '===':
        op = BinaryOperator.Identical;
        break;
      case '!==':
        op = BinaryOperator.NotIdentical;
        break;
      case '<':
        op = BinaryOperator.Lower;
        break;
      case '>':
        op = BinaryOperator.Bigger;
        break;
      case '<=':
        op = BinaryOperator.LowerEquals;
        break;
      case '>=':
        op = BinaryOperator.BiggerEquals;
        break;
      case '??':
        return this.convertNullishCoalesce(ast, mode);
      default:
        throw new Error(`Unsupported operation ${ast.operation}`);
    }
    return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));
  }
  visitChain(ast, mode) {
    ensureStatementMode(mode, ast);
    return this.visitAll(ast.expressions, mode);
  }
  visitConditional(ast, mode) {
    const value = this._visit(ast.condition, _Mode.Expression);
    return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));
  }
  visitPipe(ast, mode) {
    throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);
  }
  visitImplicitReceiver(ast, mode) {
    ensureExpressionMode(mode, ast);
    this.usesImplicitReceiver = true;
    return this._implicitReceiver;
  }
  visitThisReceiver(ast, mode) {
    return this.visitImplicitReceiver(ast, mode);
  }
  visitInterpolation(ast, mode) {
    if (!this.supportsInterpolation) {
      throw new Error('Unexpected interpolation');
    }
    ensureExpressionMode(mode, ast);
    let args = [];
    for (let i = 0; i < ast.strings.length - 1; i++) {
      args.push(literal(ast.strings[i]));
      args.push(this._visit(ast.expressions[i], _Mode.Expression));
    }
    args.push(literal(ast.strings[ast.strings.length - 1]));
    // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the
    // args returned to just the value, because we're going to pass it to a special instruction.
    const strings = ast.strings;
    if (strings.length === 2 && strings[0] === '' && strings[1] === '') {
      // Single argument interpolate instructions.
      args = [args[1]];
    } else if (ast.expressions.length >= 9) {
      // 9 or more arguments must be passed to the `interpolateV`-style instructions, which accept
      // an array of arguments
      args = [literalArr(args)];
    }
    return new InterpolationExpression(args);
  }
  visitKeyedRead(ast, mode) {
    const leftMostSafe = this.leftMostSafeNode(ast);
    if (leftMostSafe) {
      return this.convertSafeAccess(ast, leftMostSafe, mode);
    } else {
      return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));
    }
  }
  visitKeyedWrite(ast, mode) {
    const obj = this._visit(ast.receiver, _Mode.Expression);
    const key = this._visit(ast.key, _Mode.Expression);
    const value = this._visit(ast.value, _Mode.Expression);
    if (obj === this._implicitReceiver) {
      this._localResolver.maybeRestoreView();
    }
    return convertToStatementIfNeeded(mode, obj.key(key).set(value));
  }
  visitLiteralArray(ast, mode) {
    throw new Error(`Illegal State: literal arrays should have been converted into functions`);
  }
  visitLiteralMap(ast, mode) {
    throw new Error(`Illegal State: literal maps should have been converted into functions`);
  }
  visitLiteralPrimitive(ast, mode) {
    // For literal values of null, undefined, true, or false allow type interference
    // to infer the type.
    const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ? INFERRED_TYPE : undefined;
    return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));
  }
  _getLocal(name, receiver) {
    if (this._localResolver.globals?.has(name) && receiver instanceof ThisReceiver) {
      return null;
    }
    return this._localResolver.getLocal(name);
  }
  visitPrefixNot(ast, mode) {
    return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));
  }
  visitNonNullAssert(ast, mode) {
    return convertToStatementIfNeeded(mode, this._visit(ast.expression, _Mode.Expression));
  }
  visitPropertyRead(ast, mode) {
    const leftMostSafe = this.leftMostSafeNode(ast);
    if (leftMostSafe) {
      return this.convertSafeAccess(ast, leftMostSafe, mode);
    } else {
      let result = null;
      const prevUsesImplicitReceiver = this.usesImplicitReceiver;
      const receiver = this._visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        result = this._getLocal(ast.name, ast.receiver);
        if (result) {
          // Restore the previous "usesImplicitReceiver" state since the implicit
          // receiver has been replaced with a resolved local expression.
          this.usesImplicitReceiver = prevUsesImplicitReceiver;
          this.addImplicitReceiverAccess(ast.name);
        }
      }
      if (result == null) {
        result = receiver.prop(ast.name, this.convertSourceSpan(ast.span));
      }
      return convertToStatementIfNeeded(mode, result);
    }
  }
  visitPropertyWrite(ast, mode) {
    const receiver = this._visit(ast.receiver, _Mode.Expression);
    const prevUsesImplicitReceiver = this.usesImplicitReceiver;
    let varExpr = null;
    if (receiver === this._implicitReceiver) {
      const localExpr = this._getLocal(ast.name, ast.receiver);
      if (localExpr) {
        if (localExpr instanceof ReadPropExpr) {
          // If the local variable is a property read expression, it's a reference
          // to a 'context.property' value and will be used as the target of the
          // write expression.
          varExpr = localExpr;
          // Restore the previous "usesImplicitReceiver" state since the implicit
          // receiver has been replaced with a resolved local expression.
          this.usesImplicitReceiver = prevUsesImplicitReceiver;
          this.addImplicitReceiverAccess(ast.name);
        } else {
          // Otherwise it's an error.
          const receiver = ast.name;
          const value = ast.value instanceof PropertyRead ? ast.value.name : undefined;
          throw new Error(`Cannot assign value "${value}" to template variable "${receiver}". Template variables are read-only.`);
        }
      }
    }
    // If no local expression could be produced, use the original receiver's
    // property as the target.
    if (varExpr === null) {
      varExpr = receiver.prop(ast.name, this.convertSourceSpan(ast.span));
    }
    return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));
  }
  visitSafePropertyRead(ast, mode) {
    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
  }
  visitSafeKeyedRead(ast, mode) {
    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
  }
  visitAll(asts, mode) {
    return asts.map(ast => this._visit(ast, mode));
  }
  visitCall(ast, mode) {
    const leftMostSafe = this.leftMostSafeNode(ast);
    if (leftMostSafe) {
      return this.convertSafeAccess(ast, leftMostSafe, mode);
    }
    const convertedArgs = this.visitAll(ast.args, _Mode.Expression);
    if (ast instanceof BuiltinFunctionCall) {
      return convertToStatementIfNeeded(mode, ast.converter(convertedArgs));
    }
    const receiver = ast.receiver;
    if (receiver instanceof PropertyRead && receiver.receiver instanceof ImplicitReceiver && !(receiver.receiver instanceof ThisReceiver) && receiver.name === '$any') {
      if (convertedArgs.length !== 1) {
        throw new Error(`Invalid call to $any, expected 1 argument but received ${convertedArgs.length || 'none'}`);
      }
      return convertToStatementIfNeeded(mode, convertedArgs[0]);
    }
    const call = this._visit(receiver, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));
    return convertToStatementIfNeeded(mode, call);
  }
  visitSafeCall(ast, mode) {
    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
  }
  _visit(ast, mode) {
    const result = this._resultMap.get(ast);
    if (result) return result;
    return (this._nodeMap.get(ast) || ast).visit(this, mode);
  }
  convertSafeAccess(ast, leftMostSafe, mode) {
    // If the expression contains a safe access node on the left it needs to be converted to
    // an expression that guards the access to the member by checking the receiver for blank. As
    // execution proceeds from left to right, the left most part of the expression must be guarded
    // first but, because member access is left associative, the right side of the expression is at
    // the top of the AST. The desired result requires lifting a copy of the left part of the
    // expression up to test it for blank before generating the unguarded version.
    // Consider, for example the following expression: a?.b.c?.d.e
    // This results in the ast:
    //         .
    //        / \
    //       ?.   e
    //      /  \
    //     .    d
    //    / \
    //   ?.  c
    //  /  \
    // a    b
    // The following tree should be generated:
    //
    //        /---- ? ----\
    //       /      |      \
    //     a   /--- ? ---\  null
    //        /     |     \
    //       .      .     null
    //      / \    / \
    //     .  c   .   e
    //    / \    / \
    //   a   b  .   d
    //         / \
    //        .   c
    //       / \
    //      a   b
    //
    // Notice that the first guard condition is the left hand of the left most safe access node
    // which comes in as leftMostSafe to this routine.
    let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);
    let temporary = undefined;
    if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {
      // If the expression has method calls or pipes then we need to save the result into a
      // temporary variable to avoid calling stateful or impure code more than once.
      temporary = this.allocateTemporary();
      // Preserve the result in the temporary variable
      guardedExpression = temporary.set(guardedExpression);
      // Ensure all further references to the guarded expression refer to the temporary instead.
      this._resultMap.set(leftMostSafe.receiver, temporary);
    }
    const condition = guardedExpression.isBlank();
    // Convert the ast to an unguarded access to the receiver's member. The map will substitute
    // leftMostNode with its unguarded version in the call to `this.visit()`.
    if (leftMostSafe instanceof SafeCall) {
      this._nodeMap.set(leftMostSafe, new Call(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.args, leftMostSafe.argumentSpan));
    } else if (leftMostSafe instanceof SafeKeyedRead) {
      this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));
    } else {
      this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));
    }
    // Recursively convert the node now without the guarded member access.
    const access = this._visit(ast, _Mode.Expression);
    // Remove the mapping. This is not strictly required as the converter only traverses each node
    // once but is safer if the conversion is changed to traverse the nodes more than once.
    this._nodeMap.delete(leftMostSafe);
    // If we allocated a temporary, release it.
    if (temporary) {
      this.releaseTemporary(temporary);
    }
    // Produce the conditional
    return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));
  }
  convertNullishCoalesce(ast, mode) {
    const left = this._visit(ast.left, _Mode.Expression);
    const right = this._visit(ast.right, _Mode.Expression);
    const temporary = this.allocateTemporary();
    this.releaseTemporary(temporary);
    // Generate the following expression. It is identical to how TS
    // transpiles binary expressions with a nullish coalescing operator.
    // let temp;
    // (temp = a) !== null && temp !== undefined ? temp : b;
    return convertToStatementIfNeeded(mode, temporary.set(left).notIdentical(NULL_EXPR).and(temporary.notIdentical(literal(undefined))).conditional(temporary, right));
  }
  // Given an expression of the form a?.b.c?.d.e then the left most safe node is
  // the (a?.b). The . and ?. are left associative thus can be rewritten as:
  // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
  // safe method call as this needs to be transformed initially to:
  //   a == null ? null : a.c.b.c?.d.e
  // then to:
  //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
  leftMostSafeNode(ast) {
    const visit = (visitor, ast) => {
      return (this._nodeMap.get(ast) || ast).visit(visitor);
    };
    return ast.visit({
      visitUnary(ast) {
        return null;
      },
      visitBinary(ast) {
        return null;
      },
      visitChain(ast) {
        return null;
      },
      visitConditional(ast) {
        return null;
      },
      visitCall(ast) {
        return visit(this, ast.receiver);
      },
      visitSafeCall(ast) {
        return visit(this, ast.receiver) || ast;
      },
      visitImplicitReceiver(ast) {
        return null;
      },
      visitThisReceiver(ast) {
        return null;
      },
      visitInterpolation(ast) {
        return null;
      },
      visitKeyedRead(ast) {
        return visit(this, ast.receiver);
      },
      visitKeyedWrite(ast) {
        return null;
      },
      visitLiteralArray(ast) {
        return null;
      },
      visitLiteralMap(ast) {
        return null;
      },
      visitLiteralPrimitive(ast) {
        return null;
      },
      visitPipe(ast) {
        return null;
      },
      visitPrefixNot(ast) {
        return null;
      },
      visitNonNullAssert(ast) {
        return visit(this, ast.expression);
      },
      visitPropertyRead(ast) {
        return visit(this, ast.receiver);
      },
      visitPropertyWrite(ast) {
        return null;
      },
      visitSafePropertyRead(ast) {
        return visit(this, ast.receiver) || ast;
      },
      visitSafeKeyedRead(ast) {
        return visit(this, ast.receiver) || ast;
      }
    });
  }
  // Returns true of the AST includes a method or a pipe indicating that, if the
  // expression is used as the target of a safe property or method access then
  // the expression should be stored into a temporary variable.
  needsTemporaryInSafeAccess(ast) {
    const visit = (visitor, ast) => {
      return ast && (this._nodeMap.get(ast) || ast).visit(visitor);
    };
    const visitSome = (visitor, ast) => {
      return ast.some(ast => visit(visitor, ast));
    };
    return ast.visit({
      visitUnary(ast) {
        return visit(this, ast.expr);
      },
      visitBinary(ast) {
        return visit(this, ast.left) || visit(this, ast.right);
      },
      visitChain(ast) {
        return false;
      },
      visitConditional(ast) {
        return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
      },
      visitCall(ast) {
        return true;
      },
      visitSafeCall(ast) {
        return true;
      },
      visitImplicitReceiver(ast) {
        return false;
      },
      visitThisReceiver(ast) {
        return false;
      },
      visitInterpolation(ast) {
        return visitSome(this, ast.expressions);
      },
      visitKeyedRead(ast) {
        return false;
      },
      visitKeyedWrite(ast) {
        return false;
      },
      visitLiteralArray(ast) {
        return true;
      },
      visitLiteralMap(ast) {
        return true;
      },
      visitLiteralPrimitive(ast) {
        return false;
      },
      visitPipe(ast) {
        return true;
      },
      visitPrefixNot(ast) {
        return visit(this, ast.expression);
      },
      visitNonNullAssert(ast) {
        return visit(this, ast.expression);
      },
      visitPropertyRead(ast) {
        return false;
      },
      visitPropertyWrite(ast) {
        return false;
      },
      visitSafePropertyRead(ast) {
        return false;
      },
      visitSafeKeyedRead(ast) {
        return false;
      }
    });
  }
  allocateTemporary() {
    const tempNumber = this._currentTemporary++;
    this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
    return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
  }
  releaseTemporary(temporary) {
    this._currentTemporary--;
    if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
      throw new Error(`Temporary ${temporary.name} released out of order`);
    }
  }
  /**
   * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.
   *
   * `ParseSpan` objects are relative to the start of the expression.
   * This method converts these to full `ParseSourceSpan` objects that
   * show where the span is within the overall source file.
   *
   * @param span the relative span to convert.
   * @returns a `ParseSourceSpan` for the given span or null if no
   * `baseSourceSpan` was provided to this class.
   */
  convertSourceSpan(span) {
    if (this.baseSourceSpan) {
      const start = this.baseSourceSpan.start.moveBy(span.start);
      const end = this.baseSourceSpan.start.moveBy(span.end);
      const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);
      return new ParseSourceSpan(start, end, fullStart);
    } else {
      return null;
    }
  }
  /** Adds the name of an AST to the list of implicit receiver accesses. */
  addImplicitReceiverAccess(name) {
    if (this.implicitReceiverAccesses) {
      this.implicitReceiverAccesses.add(name);
    }
  }
}
function flattenStatements(arg, output) {
  if (Array.isArray(arg)) {
    arg.forEach(entry => flattenStatements(entry, output));
  } else {
    output.push(arg);
  }
}
function unsupported() {
  throw new Error('Unsupported operation');
}
class InterpolationExpression extends Expression {
  constructor(args) {
    super(null, null);
    this.args = args;
    this.isConstant = unsupported;
    this.isEquivalent = unsupported;
    this.visitExpression = unsupported;
  }
}
class DefaultLocalResolver {
  constructor(globals) {
    this.globals = globals;
  }
  notifyImplicitReceiverUse() {}
  maybeRestoreView() {}
  getLocal(name) {
    if (name === EventHandlerVars.event.name) {
      return EventHandlerVars.event;
    }
    return null;
  }
}
class BuiltinFunctionCall extends Call {
  constructor(span, sourceSpan, args, converter) {
    super(span, sourceSpan, new EmptyExpr(span, sourceSpan), args, null);
    this.converter = converter;
  }
}

// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
//                               Reach out to mprobst for details.
//
// =================================================================================================
/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */
let _SECURITY_SCHEMA;
function SECURITY_SCHEMA() {
  if (!_SECURITY_SCHEMA) {
    _SECURITY_SCHEMA = {};
    // Case is insignificant below, all element and attribute names are lower-cased for lookup.
    registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
    registerContext(SecurityContext.STYLE, ['*|style']);
    // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
    registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'track|src', 'video|poster', 'video|src']);
    registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
  }
  return _SECURITY_SCHEMA;
}
function registerContext(ctx, specs) {
  for (const spec of specs) _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
}
/**
 * The set of security-sensitive attributes of an `<iframe>` that *must* be
 * applied as a static attribute only. This ensures that all security-sensitive
 * attributes are taken into account while creating an instance of an `<iframe>`
 * at runtime.
 *
 * Note: avoid using this set directly, use the `isIframeSecuritySensitiveAttr` function
 * in the code instead.
 */
const IFRAME_SECURITY_SENSITIVE_ATTRS = new Set(['sandbox', 'allow', 'allowfullscreen', 'referrerpolicy', 'csp', 'fetchpriority']);
/**
 * Checks whether a given attribute name might represent a security-sensitive
 * attribute of an <iframe>.
 */
function isIframeSecuritySensitiveAttr(attrName) {
  // The `setAttribute` DOM API is case-insensitive, so we lowercase the value
  // before checking it against a known security-sensitive attributes.
  return IFRAME_SECURITY_SENSITIVE_ATTRS.has(attrName.toLowerCase());
}

/**
 * The following set contains all keywords that can be used in the animation css shorthand
 * property and is used during the scoping of keyframes to make sure such keywords
 * are not modified.
 */
const animationKeywords = new Set([
// global values
'inherit', 'initial', 'revert', 'unset',
// animation-direction
'alternate', 'alternate-reverse', 'normal', 'reverse',
// animation-fill-mode
'backwards', 'both', 'forwards', 'none',
// animation-play-state
'paused', 'running',
// animation-timing-function
'ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-start', 'step-end',
// `steps()` function
'end', 'jump-both', 'jump-end', 'jump-none', 'jump-start', 'start']);
/**
 * The following class has its origin from a port of shadowCSS from webcomponents.js to TypeScript.
 * It has since diverge in many ways to tailor Angular's needs.
 *
 * Source:
 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
 *
 * The original file level comment is reproduced below
 */
/*
  This is a limited shim for ShadowDOM css styling.
  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

  The intention here is to support only the styling features which can be
  relatively simply implemented. The goal is to allow users to avoid the
  most obvious pitfalls and do so without compromising performance significantly.
  For ShadowDOM styling that's not covered here, a set of best practices
  can be provided that should allow users to accomplish more complex styling.

  The following is a list of specific ShadowDOM styling features and a brief
  discussion of the approach used to shim.

  Shimmed features:

  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
  element using the :host rule. To shim this feature, the :host styles are
  reformatted and prefixed with a given scope name and promoted to a
  document level stylesheet.
  For example, given a scope name of .foo, a rule like this:

    :host {
        background: red;
      }
    }

  becomes:

    .foo {
      background: red;
    }

  * encapsulation: Styles defined within ShadowDOM, apply only to
  dom inside the ShadowDOM.
  The selectors are scoped by adding an attribute selector suffix to each
  simple selector that contains the host element tag name. Each element
  in the element's ShadowDOM template is also given the scope attribute.
  Thus, these rules match only elements that have the scope attribute.
  For example, given a scope name of x-foo, a rule like this:

    div {
      font-weight: bold;
    }

  becomes:

    div[x-foo] {
      font-weight: bold;
    }

  Note that elements that are dynamically added to a scope must have the scope
  selector added to them manually.

  * upper/lower bound encapsulation: Styles which are defined outside a
  shadowRoot should not cross the ShadowDOM boundary and should not apply
  inside a shadowRoot.

  This styling behavior is not emulated. Some possible ways to do this that
  were rejected due to complexity and/or performance concerns include: (1) reset
  every possible property for every possible selector for a given scope name;
  (2) re-implement css in javascript.

  As an alternative, users should make sure to use selectors
  specific to the scope in which they are working.

  * ::distributed: This behavior is not emulated. It's often not necessary
  to style the contents of a specific insertion point and instead, descendants
  of the host element can be styled selectively. Users can also create an
  extra node around an insertion point and style that node's contents
  via descendent selectors. For example, with a shadowRoot like this:

    <style>
      ::content(div) {
        background: red;
      }
    </style>
    <content></content>

  could become:

    <style>
      / *@polyfill .content-container div * /
      ::content(div) {
        background: red;
      }
    </style>
    <div class="content-container">
      <content></content>
    </div>

  Note the use of @polyfill in the comment above a ShadowDOM specific style
  declaration. This is a directive to the styling shim to use the selector
  in comments in lieu of the next selector when running under polyfill.
*/
class ShadowCss {
  constructor() {
    /**
     * Regular expression used to extrapolate the possible keyframes from an
     * animation declaration (with possibly multiple animation definitions)
     *
     * The regular expression can be divided in three parts
     *  - (^|\s+)
     *    simply captures how many (if any) leading whitespaces are present
     *  - (?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))
     *    captures two different possible keyframes, ones which are quoted or ones which are valid css
     * idents (custom properties excluded)
     *  - (?=[,\s;]|$)
     *    simply matches the end of the possible keyframe, valid endings are: a comma, a space, a
     * semicolon or the end of the string
     */
    this._animationDeclarationKeyframesRe = /(^|\s+)(?:(?:(['"])((?:\\\\|\\\2|(?!\2).)+)\2)|(-?[A-Za-z][\w\-]*))(?=[,\s]|$)/g;
  }
  /*
   * Shim some cssText with the given selector. Returns cssText that can be included in the document
   *
   * The selector is the attribute added to all elements inside the host,
   * The hostSelector is the attribute added to the host itself.
   */
  shimCssText(cssText, selector, hostSelector = '') {
    const commentsWithHash = extractCommentsWithHash(cssText);
    cssText = stripComments(cssText);
    cssText = this._insertDirectives(cssText);
    const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
    return [scopedCssText, ...commentsWithHash].join('\n');
  }
  _insertDirectives(cssText) {
    cssText = this._insertPolyfillDirectivesInCssText(cssText);
    return this._insertPolyfillRulesInCssText(cssText);
  }
  /**
   * Process styles to add scope to keyframes.
   *
   * Modify both the names of the keyframes defined in the component styles and also the css
   * animation rules using them.
   *
   * Animation rules using keyframes defined elsewhere are not modified to allow for globally
   * defined keyframes.
   *
   * For example, we convert this css:
   *
   * ```
   * .box {
   *   animation: box-animation 1s forwards;
   * }
   *
   * @keyframes box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * to this:
   *
   * ```
   * .box {
   *   animation: scopeName_box-animation 1s forwards;
   * }
   *
   * @keyframes scopeName_box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * @param cssText the component's css text that needs to be scoped.
   * @param scopeSelector the component's scope selector.
   *
   * @returns the scoped css text.
   */
  _scopeKeyframesRelatedCss(cssText, scopeSelector) {
    const unscopedKeyframesSet = new Set();
    const scopedKeyframesCssText = processRules(cssText, rule => this._scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet));
    return processRules(scopedKeyframesCssText, rule => this._scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet));
  }
  /**
   * Scopes local keyframes names, returning the updated css rule and it also
   * adds the original keyframe name to a provided set to collect all keyframes names
   * so that it can later be used to scope the animation rules.
   *
   * For example, it takes a rule such as:
   *
   * ```
   * @keyframes box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   *
   * and returns:
   *
   * ```
   * @keyframes scopeName_box-animation {
   *   to {
   *     background-color: green;
   *   }
   * }
   * ```
   * and as a side effect it adds "box-animation" to the `unscopedKeyframesSet` set
   *
   * @param cssRule the css rule to process.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names (which can be
   * modified as a side effect)
   *
   * @returns the css rule modified with the scoped keyframes name.
   */
  _scopeLocalKeyframeDeclarations(rule, scopeSelector, unscopedKeyframesSet) {
    return {
      ...rule,
      selector: rule.selector.replace(/(^@(?:-webkit-)?keyframes(?:\s+))(['"]?)(.+)\2(\s*)$/, (_, start, quote, keyframeName, endSpaces) => {
        unscopedKeyframesSet.add(unescapeQuotes(keyframeName, quote));
        return `${start}${quote}${scopeSelector}_${keyframeName}${quote}${endSpaces}`;
      })
    };
  }
  /**
   * Function used to scope a keyframes name (obtained from an animation declaration)
   * using an existing set of unscopedKeyframes names to discern if the scoping needs to be
   * performed (keyframes names of keyframes not defined in the component's css need not to be
   * scoped).
   *
   * @param keyframe the keyframes name to check.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names.
   *
   * @returns the scoped name of the keyframe, or the original name is the name need not to be
   * scoped.
   */
  _scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet) {
    return keyframe.replace(/^(\s*)(['"]?)(.+?)\2(\s*)$/, (_, spaces1, quote, name, spaces2) => {
      name = `${unscopedKeyframesSet.has(unescapeQuotes(name, quote)) ? scopeSelector + '_' : ''}${name}`;
      return `${spaces1}${quote}${name}${quote}${spaces2}`;
    });
  }
  /**
   * Scope an animation rule so that the keyframes mentioned in such rule
   * are scoped if defined in the component's css and left untouched otherwise.
   *
   * It can scope values of both the 'animation' and 'animation-name' properties.
   *
   * @param rule css rule to scope.
   * @param scopeSelector the component's scope selector.
   * @param unscopedKeyframesSet the set of unscoped keyframes names.
   *
   * @returns the updated css rule.
   **/
  _scopeAnimationRule(rule, scopeSelector, unscopedKeyframesSet) {
    let content = rule.content.replace(/((?:^|\s+|;)(?:-webkit-)?animation(?:\s*):(?:\s*))([^;]+)/g, (_, start, animationDeclarations) => start + animationDeclarations.replace(this._animationDeclarationKeyframesRe, (original, leadingSpaces, quote = '', quotedName, nonQuotedName) => {
      if (quotedName) {
        return `${leadingSpaces}${this._scopeAnimationKeyframe(`${quote}${quotedName}${quote}`, scopeSelector, unscopedKeyframesSet)}`;
      } else {
        return animationKeywords.has(nonQuotedName) ? original : `${leadingSpaces}${this._scopeAnimationKeyframe(nonQuotedName, scopeSelector, unscopedKeyframesSet)}`;
      }
    }));
    content = content.replace(/((?:^|\s+|;)(?:-webkit-)?animation-name(?:\s*):(?:\s*))([^;]+)/g, (_match, start, commaSeparatedKeyframes) => `${start}${commaSeparatedKeyframes.split(',').map(keyframe => this._scopeAnimationKeyframe(keyframe, scopeSelector, unscopedKeyframesSet)).join(',')}`);
    return {
      ...rule,
      content
    };
  }
  /*
   * Process styles to convert native ShadowDOM rules that will trip
   * up the css parser; we rely on decorating the stylesheet with inert rules.
   *
   * For example, we convert this rule:
   *
   * polyfill-next-selector { content: ':host menu-item'; }
   * ::content menu-item {
   *
   * to this:
   *
   * scopeName menu-item {
   *
   **/
  _insertPolyfillDirectivesInCssText(cssText) {
    return cssText.replace(_cssContentNextSelectorRe, function (...m) {
      return m[2] + '{';
    });
  }
  /*
   * Process styles to add rules which will only apply under the polyfill
   *
   * For example, we convert this rule:
   *
   * polyfill-rule {
   *   content: ':host menu-item';
   * ...
   * }
   *
   * to this:
   *
   * scopeName menu-item {...}
   *
   **/
  _insertPolyfillRulesInCssText(cssText) {
    return cssText.replace(_cssContentRuleRe, (...m) => {
      const rule = m[0].replace(m[1], '').replace(m[2], '');
      return m[4] + rule;
    });
  }
  /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
   *
   *  .foo {... }
   *
   *  and converts this to
   *
   *  scopeName .foo { ... }
   */
  _scopeCssText(cssText, scopeSelector, hostSelector) {
    const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
    // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
    cssText = this._insertPolyfillHostInCssText(cssText);
    cssText = this._convertColonHost(cssText);
    cssText = this._convertColonHostContext(cssText);
    cssText = this._convertShadowDOMSelectors(cssText);
    if (scopeSelector) {
      cssText = this._scopeKeyframesRelatedCss(cssText, scopeSelector);
      cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
    }
    cssText = cssText + '\n' + unscopedRules;
    return cssText.trim();
  }
  /*
   * Process styles to add rules which will only apply under the polyfill
   * and do not process via CSSOM. (CSSOM is destructive to rules on rare
   * occasions, e.g. -webkit-calc on Safari.)
   * For example, we convert this rule:
   *
   * @polyfill-unscoped-rule {
   *   content: 'menu-item';
   * ... }
   *
   * to this:
   *
   * menu-item {...}
   *
   **/
  _extractUnscopedRulesFromCssText(cssText) {
    let r = '';
    let m;
    _cssContentUnscopedRuleRe.lastIndex = 0;
    while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
      const rule = m[0].replace(m[2], '').replace(m[1], m[4]);
      r += rule + '\n\n';
    }
    return r;
  }
  /*
   * convert a rule like :host(.foo) > .bar { }
   *
   * to
   *
   * .foo<scopeName> > .bar
   */
  _convertColonHost(cssText) {
    return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {
      if (hostSelectors) {
        const convertedSelectors = [];
        const hostSelectorArray = hostSelectors.split(',').map(p => p.trim());
        for (const hostSelector of hostSelectorArray) {
          if (!hostSelector) break;
          const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;
          convertedSelectors.push(convertedSelector);
        }
        return convertedSelectors.join(',');
      } else {
        return _polyfillHostNoCombinator + otherSelectors;
      }
    });
  }
  /*
   * convert a rule like :host-context(.foo) > .bar { }
   *
   * to
   *
   * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }
   *
   * and
   *
   * :host-context(.foo:host) .bar { ... }
   *
   * to
   *
   * .foo<scopeName> .bar { ... }
   */
  _convertColonHostContext(cssText) {
    return cssText.replace(_cssColonHostContextReGlobal, selectorText => {
      // We have captured a selector that contains a `:host-context` rule.
      // For backward compatibility `:host-context` may contain a comma separated list of selectors.
      // Each context selector group will contain a list of host-context selectors that must match
      // an ancestor of the host.
      // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)
      const contextSelectorGroups = [[]];
      // There may be more than `:host-context` in this selector so `selectorText` could look like:
      // `:host-context(.one):host-context(.two)`.
      // Execute `_cssColonHostContextRe` over and over until we have extracted all the
      // `:host-context` selectors from this selector.
      let match;
      while (match = _cssColonHostContextRe.exec(selectorText)) {
        // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]
        // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.
        const newContextSelectors = (match[1] ?? '').trim().split(',').map(m => m.trim()).filter(m => m !== '');
        // We must duplicate the current selector group for each of these new selectors.
        // For example if the current groups are:
        // ```
        // [
        //   ['a', 'b', 'c'],
        //   ['x', 'y', 'z'],
        // ]
        // ```
        // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new
        // groups are:
        // ```
        // [
        //   ['a', 'b', 'c', 'm'],
        //   ['x', 'y', 'z', 'm'],
        //   ['a', 'b', 'c', 'n'],
        //   ['x', 'y', 'z', 'n'],
        // ]
        // ```
        const contextSelectorGroupsLength = contextSelectorGroups.length;
        repeatGroups(contextSelectorGroups, newContextSelectors.length);
        for (let i = 0; i < newContextSelectors.length; i++) {
          for (let j = 0; j < contextSelectorGroupsLength; j++) {
            contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);
          }
        }
        // Update the `selectorText` and see repeat to see if there are more `:host-context`s.
        selectorText = match[2];
      }
      // The context selectors now must be combined with each other to capture all the possible
      // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more
      // info about how this is done.
      return contextSelectorGroups.map(contextSelectors => combineHostContextSelectors(contextSelectors, selectorText)).join(', ');
    });
  }
  /*
   * Convert combinators like ::shadow and pseudo-elements like ::content
   * by replacing with space.
   */
  _convertShadowDOMSelectors(cssText) {
    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);
  }
  // change a selector like 'div' to 'name div'
  _scopeSelectors(cssText, scopeSelector, hostSelector) {
    return processRules(cssText, rule => {
      let selector = rule.selector;
      let content = rule.content;
      if (rule.selector[0] !== '@') {
        selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector);
      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@document') || rule.selector.startsWith('@layer') || rule.selector.startsWith('@container')) {
        content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);
      } else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {
        content = this._stripScopingSelectors(rule.content);
      }
      return new CssRule(selector, content);
    });
  }
  /**
   * Handle a css text that is within a rule that should not contain scope selectors by simply
   * removing them! An example of such a rule is `@font-face`.
   *
   * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.
   * Normally this would be a syntax error by the author of the styles. But in some rare cases, such
   * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we
   * can end up with broken css if the imported styles happen to contain @font-face rules.
   *
   * For example:
   *
   * ```
   * :host ::ng-deep {
   *   import 'some/lib/containing/font-face';
   * }
   *
   * Similar logic applies to `@page` rules which can contain a particular set of properties,
   * as well as some specific at-rules. Since they can't be encapsulated, we have to strip
   * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3
   * ```
   */
  _stripScopingSelectors(cssText) {
    return processRules(cssText, rule => {
      const selector = rule.selector.replace(_shadowDeepSelectors, ' ').replace(_polyfillHostNoCombinatorRe, ' ');
      return new CssRule(selector, rule.content);
    });
  }
  _scopeSelector(selector, scopeSelector, hostSelector) {
    return selector.split(',').map(part => part.trim().split(_shadowDeepSelectors)).map(deepParts => {
      const [shallowPart, ...otherParts] = deepParts;
      const applyScope = shallowPart => {
        if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
          return this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
        } else {
          return shallowPart;
        }
      };
      return [applyScope(shallowPart), ...otherParts].join(' ');
    }).join(', ');
  }
  _selectorNeedsScoping(selector, scopeSelector) {
    const re = this._makeScopeMatcher(scopeSelector);
    return !re.test(selector);
  }
  _makeScopeMatcher(scopeSelector) {
    const lre = /\[/g;
    const rre = /\]/g;
    scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
  }
  // scope via name and [is=name]
  _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
    _polyfillHostRe.lastIndex = 0;
    if (_polyfillHostRe.test(selector)) {
      const replaceBy = `[${hostSelector}]`;
      return selector.replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {
        return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {
          return before + replaceBy + colon + after;
        });
      }).replace(_polyfillHostRe, replaceBy + ' ');
    }
    return scopeSelector + ' ' + selector;
  }
  // return a selector with [name] suffix on each simple selector
  // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
  _applySelectorScope(selector, scopeSelector, hostSelector) {
    const isRe = /\[is=([^\]]*)\]/g;
    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);
    const attrName = '[' + scopeSelector + ']';
    const _scopeSelectorPart = p => {
      let scopedP = p.trim();
      if (!scopedP) {
        return '';
      }
      if (p.indexOf(_polyfillHostNoCombinator) > -1) {
        scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
      } else {
        // remove :host since it should be unnecessary
        const t = p.replace(_polyfillHostRe, '');
        if (t.length > 0) {
          const matches = t.match(/([^:]*)(:*)(.*)/);
          if (matches) {
            scopedP = matches[1] + attrName + matches[2] + matches[3];
          }
        }
      }
      return scopedP;
    };
    const safeContent = new SafeSelector(selector);
    selector = safeContent.content();
    let scopedSelector = '';
    let startIndex = 0;
    let res;
    const sep = /( |>|\+|~(?!=))\s*/g;
    // If a selector appears before :host it should not be shimmed as it
    // matches on ancestor elements and not on elements in the host's shadow
    // `:host-context(div)` is transformed to
    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`
    // the `div` is not part of the component in the 2nd selectors and should not be scoped.
    // Historically `component-tag:host` was matching the component so we also want to preserve
    // this behavior to avoid breaking legacy apps (it should not match).
    // The behavior should be:
    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)
    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a
    //   `:host-context(tag)`)
    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present
    let shouldScope = !hasHost;
    while ((res = sep.exec(selector)) !== null) {
      const separator = res[1];
      const part = selector.slice(startIndex, res.index).trim();
      // A space following an escaped hex value and followed by another hex character
      // (ie: ".\fc ber" for ".über") is not a separator between 2 selectors
      // also keep in mind that backslashes are replaced by a placeholder by SafeSelector
      // These escaped selectors happen for example when esbuild runs with optimization.minify.
      if (part.match(_placeholderRe) && selector[res.index + 1]?.match(/[a-fA-F\d]/)) {
        continue;
      }
      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
      const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;
      scopedSelector += `${scopedPart} ${separator} `;
      startIndex = sep.lastIndex;
    }
    const part = selector.substring(startIndex);
    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
    // replace the placeholders with their original values
    return safeContent.restore(scopedSelector);
  }
  _insertPolyfillHostInCssText(selector) {
    return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
  }
}
class SafeSelector {
  constructor(selector) {
    this.placeholders = [];
    this.index = 0;
    // Replaces attribute selectors with placeholders.
    // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
    selector = this._escapeRegexMatches(selector, /(\[[^\]]*\])/g);
    // CSS allows for certain special characters to be used in selectors if they're escaped.
    // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a
    // pseudo-class, but writing `.foo\:blue` will match, because the colon was escaped.
    // Replace all escape sequences (`\` followed by a character) with a placeholder so
    // that our handling of pseudo-selectors doesn't mess with them.
    selector = this._escapeRegexMatches(selector, /(\\.)/g);
    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
    // WS and "+" would otherwise be interpreted as selector separators.
    this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, (_, pseudo, exp) => {
      const replaceBy = `__ph-${this.index}__`;
      this.placeholders.push(exp);
      this.index++;
      return pseudo + replaceBy;
    });
  }
  restore(content) {
    return content.replace(_placeholderRe, (_ph, index) => this.placeholders[+index]);
  }
  content() {
    return this._content;
  }
  /**
   * Replaces all of the substrings that match a regex within a
   * special string (e.g. `__ph-0__`, `__ph-1__`, etc).
   */
  _escapeRegexMatches(content, pattern) {
    return content.replace(pattern, (_, keep) => {
      const replaceBy = `__ph-${this.index}__`;
      this.placeholders.push(keep);
      this.index++;
      return replaceBy;
    });
  }
}
const _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
const _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
const _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
const _polyfillHost = '-shadowcsshost';
// note: :host-context pre-processed to -shadowcsshostcontext.
const _polyfillHostContext = '-shadowcsscontext';
const _parenSuffix = '(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
const _cssColonHostRe = new RegExp(_polyfillHost + _parenSuffix, 'gim');
const _cssColonHostContextReGlobal = new RegExp(_polyfillHostContext + _parenSuffix, 'gim');
const _cssColonHostContextRe = new RegExp(_polyfillHostContext + _parenSuffix, 'im');
const _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
const _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
const _shadowDOMSelectorsRe = [/::shadow/g, /::content/g,
// Deprecated selectors
/\/shadow-deep\//g, /\/shadow\//g];
// The deep combinator is deprecated in the CSS spec
// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.
// see https://github.com/angular/angular/pull/17677
const _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
const _selectorReSuffix = '([>\\s~+[.,{:][\\s\\S]*)?$';
const _polyfillHostRe = /-shadowcsshost/gim;
const _colonHostRe = /:host/gim;
const _colonHostContextRe = /:host-context/gim;
const _commentRe = /\/\*[\s\S]*?\*\//g;
const _placeholderRe = /__ph-(\d+)__/g;
function stripComments(input) {
  return input.replace(_commentRe, '');
}
const _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g;
function extractCommentsWithHash(input) {
  return input.match(_commentWithHashRe) || [];
}
const BLOCK_PLACEHOLDER = '%BLOCK%';
const _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
const CONTENT_PAIRS = new Map([['{', '}']]);
const COMMA_IN_PLACEHOLDER = '%COMMA_IN_PLACEHOLDER%';
const SEMI_IN_PLACEHOLDER = '%SEMI_IN_PLACEHOLDER%';
const COLON_IN_PLACEHOLDER = '%COLON_IN_PLACEHOLDER%';
const _cssCommaInPlaceholderReGlobal = new RegExp(COMMA_IN_PLACEHOLDER, 'g');
const _cssSemiInPlaceholderReGlobal = new RegExp(SEMI_IN_PLACEHOLDER, 'g');
const _cssColonInPlaceholderReGlobal = new RegExp(COLON_IN_PLACEHOLDER, 'g');
class CssRule {
  constructor(selector, content) {
    this.selector = selector;
    this.content = content;
  }
}
function processRules(input, ruleCallback) {
  const escaped = escapeInStrings(input);
  const inputWithEscapedBlocks = escapeBlocks(escaped, CONTENT_PAIRS, BLOCK_PLACEHOLDER);
  let nextBlockIndex = 0;
  const escapedResult = inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {
    const selector = m[2];
    let content = '';
    let suffix = m[4];
    let contentPrefix = '';
    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
      contentPrefix = '{';
    }
    const rule = ruleCallback(new CssRule(selector, content));
    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;
  });
  return unescapeInStrings(escapedResult);
}
class StringWithEscapedBlocks {
  constructor(escapedString, blocks) {
    this.escapedString = escapedString;
    this.blocks = blocks;
  }
}
function escapeBlocks(input, charPairs, placeholder) {
  const resultParts = [];
  const escapedBlocks = [];
  let openCharCount = 0;
  let nonBlockStartIndex = 0;
  let blockStartIndex = -1;
  let openChar;
  let closeChar;
  for (let i = 0; i < input.length; i++) {
    const char = input[i];
    if (char === '\\') {
      i++;
    } else if (char === closeChar) {
      openCharCount--;
      if (openCharCount === 0) {
        escapedBlocks.push(input.substring(blockStartIndex, i));
        resultParts.push(placeholder);
        nonBlockStartIndex = i;
        blockStartIndex = -1;
        openChar = closeChar = undefined;
      }
    } else if (char === openChar) {
      openCharCount++;
    } else if (openCharCount === 0 && charPairs.has(char)) {
      openChar = char;
      closeChar = charPairs.get(char);
      openCharCount = 1;
      blockStartIndex = i + 1;
      resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));
    }
  }
  if (blockStartIndex !== -1) {
    escapedBlocks.push(input.substring(blockStartIndex));
    resultParts.push(placeholder);
  } else {
    resultParts.push(input.substring(nonBlockStartIndex));
  }
  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
}
/**
 * Object containing as keys characters that should be substituted by placeholders
 * when found in strings during the css text parsing, and as values the respective
 * placeholders
 */
const ESCAPE_IN_STRING_MAP = {
  ';': SEMI_IN_PLACEHOLDER,
  ',': COMMA_IN_PLACEHOLDER,
  ':': COLON_IN_PLACEHOLDER
};
/**
 * Parse the provided css text and inside strings (meaning, inside pairs of unescaped single or
 * double quotes) replace specific characters with their respective placeholders as indicated
 * by the `ESCAPE_IN_STRING_MAP` map.
 *
 * For example convert the text
 *  `animation: "my-anim:at\"ion" 1s;`
 * to
 *  `animation: "my-anim%COLON_IN_PLACEHOLDER%at\"ion" 1s;`
 *
 * This is necessary in order to remove the meaning of some characters when found inside strings
 * (for example `;` indicates the end of a css declaration, `,` the sequence of values and `:` the
 * division between property and value during a declaration, none of these meanings apply when such
 * characters are within strings and so in order to prevent parsing issues they need to be replaced
 * with placeholder text for the duration of the css manipulation process).
 *
 * @param input the original css text.
 *
 * @returns the css text with specific characters in strings replaced by placeholders.
 **/
function escapeInStrings(input) {
  let result = input;
  let currentQuoteChar = null;
  for (let i = 0; i < result.length; i++) {
    const char = result[i];
    if (char === '\\') {
      i++;
    } else {
      if (currentQuoteChar !== null) {
        // index i is inside a quoted sub-string
        if (char === currentQuoteChar) {
          currentQuoteChar = null;
        } else {
          const placeholder = ESCAPE_IN_STRING_MAP[char];
          if (placeholder) {
            result = `${result.substr(0, i)}${placeholder}${result.substr(i + 1)}`;
            i += placeholder.length - 1;
          }
        }
      } else if (char === '\'' || char === '"') {
        currentQuoteChar = char;
      }
    }
  }
  return result;
}
/**
 * Replace in a string all occurrences of keys in the `ESCAPE_IN_STRING_MAP` map with their
 * original representation, this is simply used to revert the changes applied by the
 * escapeInStrings function.
 *
 * For example it reverts the text:
 *  `animation: "my-anim%COLON_IN_PLACEHOLDER%at\"ion" 1s;`
 * to it's original form of:
 *  `animation: "my-anim:at\"ion" 1s;`
 *
 * Note: For the sake of simplicity this function does not check that the placeholders are
 * actually inside strings as it would anyway be extremely unlikely to find them outside of strings.
 *
 * @param input the css text containing the placeholders.
 *
 * @returns the css text without the placeholders.
 */
function unescapeInStrings(input) {
  let result = input.replace(_cssCommaInPlaceholderReGlobal, ',');
  result = result.replace(_cssSemiInPlaceholderReGlobal, ';');
  result = result.replace(_cssColonInPlaceholderReGlobal, ':');
  return result;
}
/**
 * Unescape all quotes present in a string, but only if the string was actually already
 * quoted.
 *
 * This generates a "canonical" representation of strings which can be used to match strings
 * which would otherwise only differ because of differently escaped quotes.
 *
 * For example it converts the string (assumed to be quoted):
 *  `this \\"is\\" a \\'\\\\'test`
 * to:
 *  `this "is" a '\\\\'test`
 * (note that the latter backslashes are not removed as they are not actually escaping the single
 * quote)
 *
 *
 * @param input the string possibly containing escaped quotes.
 * @param isQuoted boolean indicating whether the string was quoted inside a bigger string (if not
 * then it means that it doesn't represent an inner string and thus no unescaping is required)
 *
 * @returns the string in the "canonical" representation without escaped quotes.
 */
function unescapeQuotes(str, isQuoted) {
  return !isQuoted ? str : str.replace(/((?:^|[^\\])(?:\\\\)*)\\(?=['"])/g, '$1');
}
/**
 * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`
 * to create a selector that matches the same as `:host-context()`.
 *
 * Given a single context selector `A` we need to output selectors that match on the host and as an
 * ancestor of the host:
 *
 * ```
 * A <hostMarker>, A<hostMarker> {}
 * ```
 *
 * When there is more than one context selector we also have to create combinations of those
 * selectors with each other. For example if there are `A` and `B` selectors the output is:
 *
 * ```
 * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,
 * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}
 * ```
 *
 * And so on...
 *
 * @param hostMarker the string that selects the host element.
 * @param contextSelectors an array of context selectors that will be combined.
 * @param otherSelectors the rest of the selectors that are not context selectors.
 */
function combineHostContextSelectors(contextSelectors, otherSelectors) {
  const hostMarker = _polyfillHostNoCombinator;
  _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test
  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors);
  // If there are no context selectors then just output a host marker
  if (contextSelectors.length === 0) {
    return hostMarker + otherSelectors;
  }
  const combined = [contextSelectors.pop() || ''];
  while (contextSelectors.length > 0) {
    const length = combined.length;
    const contextSelector = contextSelectors.pop();
    for (let i = 0; i < length; i++) {
      const previousSelectors = combined[i];
      // Add the new selector as a descendant of the previous selectors
      combined[length * 2 + i] = previousSelectors + ' ' + contextSelector;
      // Add the new selector as an ancestor of the previous selectors
      combined[length + i] = contextSelector + ' ' + previousSelectors;
      // Add the new selector to act on the same element as the previous selectors
      combined[i] = contextSelector + previousSelectors;
    }
  }
  // Finally connect the selector to the `hostMarker`s: either acting directly on the host
  // (A<hostMarker>) or as an ancestor (A <hostMarker>).
  return combined.map(s => otherSelectorsHasHost ? `${s}${otherSelectors}` : `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`).join(',');
}
/**
 * Mutate the given `groups` array so that there are `multiples` clones of the original array
 * stored.
 *
 * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the
 * newly added groups will be clones of the original.
 *
 * @param groups An array of groups of strings that will be repeated. This array is mutated
 *     in-place.
 * @param multiples The number of times the current groups should appear.
 */
function repeatGroups(groups, multiples) {
  const length = groups.length;
  for (let i = 1; i < multiples; i++) {
    for (let j = 0; j < length; j++) {
      groups[j + i * length] = groups[j].slice(0);
    }
  }
}

/**
 * Parses string representation of a style and converts it into object literal.
 *
 * @param value string representation of style as used in the `style` attribute in HTML.
 *   Example: `color: red; height: auto`.
 * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',
 * 'auto']`
 */
function parse(value) {
  // we use a string array here instead of a string map
  // because a string-map is not guaranteed to retain the
  // order of the entries whereas a string array can be
  // constructed in a [key, value, key, value] format.
  const styles = [];
  let i = 0;
  let parenDepth = 0;
  let quote = 0 /* Char.QuoteNone */;
  let valueStart = 0;
  let propStart = 0;
  let currentProp = null;
  while (i < value.length) {
    const token = value.charCodeAt(i++);
    switch (token) {
      case 40 /* Char.OpenParen */:
        parenDepth++;
        break;
      case 41 /* Char.CloseParen */:
        parenDepth--;
        break;
      case 39 /* Char.QuoteSingle */:
        // valueStart needs to be there since prop values don't
        // have quotes in CSS
        if (quote === 0 /* Char.QuoteNone */) {
          quote = 39 /* Char.QuoteSingle */;
        } else if (quote === 39 /* Char.QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {
          quote = 0 /* Char.QuoteNone */;
        }

        break;
      case 34 /* Char.QuoteDouble */:
        // same logic as above
        if (quote === 0 /* Char.QuoteNone */) {
          quote = 34 /* Char.QuoteDouble */;
        } else if (quote === 34 /* Char.QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */) {
          quote = 0 /* Char.QuoteNone */;
        }

        break;
      case 58 /* Char.Colon */:
        if (!currentProp && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {
          currentProp = hyphenate(value.substring(propStart, i - 1).trim());
          valueStart = i;
        }
        break;
      case 59 /* Char.Semicolon */:
        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* Char.QuoteNone */) {
          const styleVal = value.substring(valueStart, i - 1).trim();
          styles.push(currentProp, styleVal);
          propStart = i;
          valueStart = 0;
          currentProp = null;
        }
        break;
    }
  }
  if (currentProp && valueStart) {
    const styleVal = value.slice(valueStart).trim();
    styles.push(currentProp, styleVal);
  }
  return styles;
}
function hyphenate(value) {
  return value.replace(/[a-z][A-Z]/g, v => {
    return v.charAt(0) + '-' + v.charAt(1);
  }).toLowerCase();
}
const IMPORTANT_FLAG = '!important';
/**
 * Minimum amount of binding slots required in the runtime for style/class bindings.
 *
 * Styling in Angular uses up two slots in the runtime LView/TData data structures to
 * record binding data, property information and metadata.
 *
 * When a binding is registered it will place the following information in the `LView`:
 *
 * slot 1) binding value
 * slot 2) cached value (all other values collected before it in string form)
 *
 * When a binding is registered it will place the following information in the `TData`:
 *
 * slot 1) prop name
 * slot 2) binding index that points to the previous style/class binding (and some extra config
 * values)
 *
 * Let's imagine we have a binding that looks like so:
 *
 * ```
 * <div [style.width]="x" [style.height]="y">
 * ```
 *
 * Our `LView` and `TData` data-structures look like so:
 *
 * ```typescript
 * LView = [
 *   // ...
 *   x, // value of x
 *   "width: x",
 *
 *   y, // value of y
 *   "width: x; height: y",
 *   // ...
 * ];
 *
 * TData = [
 *   // ...
 *   "width", // binding slot 20
 *   0,
 *
 *   "height",
 *   20,
 *   // ...
 * ];
 * ```
 *
 * */
const MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
/**
 * Produces creation/update instructions for all styling bindings (class and style)
 *
 * It also produces the creation instruction to register all initial styling values
 * (which are all the static class="..." and style="..." attribute values that exist
 * on an element within a template).
 *
 * The builder class below handles producing instructions for the following cases:
 *
 * - Static style/class attributes (style="..." and class="...")
 * - Dynamic style/class map bindings ([style]="map" and [class]="map|string")
 * - Dynamic style/class property bindings ([style.prop]="exp" and [class.name]="exp")
 *
 * Due to the complex relationship of all of these cases, the instructions generated
 * for these attributes/properties/bindings must be done so in the correct order. The
 * order which these must be generated is as follows:
 *
 * if (createMode) {
 *   styling(...)
 * }
 * if (updateMode) {
 *   styleMap(...)
 *   classMap(...)
 *   styleProp(...)
 *   classProp(...)
 * }
 *
 * The creation/update methods within the builder class produce these instructions.
 */
class StylingBuilder {
  constructor(_directiveExpr) {
    this._directiveExpr = _directiveExpr;
    /** Whether or not there are any static styling values present */
    this._hasInitialValues = false;
    /**
     *  Whether or not there are any styling bindings present
     *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)
     */
    this.hasBindings = false;
    this.hasBindingsWithPipes = false;
    /** the input for [class] (if it exists) */
    this._classMapInput = null;
    /** the input for [style] (if it exists) */
    this._styleMapInput = null;
    /** an array of each [style.prop] input */
    this._singleStyleInputs = null;
    /** an array of each [class.name] input */
    this._singleClassInputs = null;
    this._lastStylingInput = null;
    this._firstStylingInput = null;
    // maps are used instead of hash maps because a Map will
    // retain the ordering of the keys
    /**
     * Represents the location of each style binding in the template
     * (e.g. `<div [style.width]="w" [style.height]="h">` implies
     * that `width=0` and `height=1`)
     */
    this._stylesIndex = new Map();
    /**
     * Represents the location of each class binding in the template
     * (e.g. `<div [class.big]="b" [class.hidden]="h">` implies
     * that `big=0` and `hidden=1`)
     */
    this._classesIndex = new Map();
    this._initialStyleValues = [];
    this._initialClassValues = [];
  }
  /**
   * Registers a given input to the styling builder to be later used when producing AOT code.
   *
   * The code below will only accept the input if it is somehow tied to styling (whether it be
   * style/class bindings or static style/class attributes).
   */
  registerBoundInput(input) {
    // [attr.style] or [attr.class] are skipped in the code below,
    // they should not be treated as styling-based bindings since
    // they are intended to be written directly to the attr and
    // will therefore skip all style/class resolution that is present
    // with style="", [style]="" and [style.prop]="", class="",
    // [class.prop]="". [class]="" assignments
    let binding = null;
    let name = input.name;
    switch (input.type) {
      case 0 /* BindingType.Property */:
        binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);
        break;
      case 3 /* BindingType.Style */:
        binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);
        break;
      case 2 /* BindingType.Class */:
        binding = this.registerClassInput(name, false, input.value, input.sourceSpan);
        break;
    }
    return binding ? true : false;
  }
  registerInputBasedOnName(name, expression, sourceSpan) {
    let binding = null;
    const prefix = name.substring(0, 6);
    const isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';
    const isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');
    if (isStyle || isClass) {
      const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no
      const property = name.slice(isMapBased ? 5 : 6); // the dot explains why there's a +1
      if (isStyle) {
        binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);
      } else {
        binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);
      }
    }
    return binding;
  }
  registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {
    if (isEmptyExpression(value)) {
      return null;
    }
    // CSS custom properties are case-sensitive so we shouldn't normalize them.
    // See: https://www.w3.org/TR/css-variables-1/#defining-variables
    if (!isCssCustomProperty(name)) {
      name = hyphenate(name);
    }
    const {
      property,
      hasOverrideFlag,
      suffix: bindingSuffix
    } = parseProperty(name);
    suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;
    const entry = {
      name: property,
      suffix: suffix,
      value,
      sourceSpan,
      hasOverrideFlag
    };
    if (isMapBased) {
      this._styleMapInput = entry;
    } else {
      (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);
      registerIntoMap(this._stylesIndex, property);
    }
    this._lastStylingInput = entry;
    this._firstStylingInput = this._firstStylingInput || entry;
    this._checkForPipes(value);
    this.hasBindings = true;
    return entry;
  }
  registerClassInput(name, isMapBased, value, sourceSpan) {
    if (isEmptyExpression(value)) {
      return null;
    }
    const {
      property,
      hasOverrideFlag
    } = parseProperty(name);
    const entry = {
      name: property,
      value,
      sourceSpan,
      hasOverrideFlag,
      suffix: null
    };
    if (isMapBased) {
      this._classMapInput = entry;
    } else {
      (this._singleClassInputs = this._singleClassInputs || []).push(entry);
      registerIntoMap(this._classesIndex, property);
    }
    this._lastStylingInput = entry;
    this._firstStylingInput = this._firstStylingInput || entry;
    this._checkForPipes(value);
    this.hasBindings = true;
    return entry;
  }
  _checkForPipes(value) {
    if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {
      this.hasBindingsWithPipes = true;
    }
  }
  /**
   * Registers the element's static style string value to the builder.
   *
   * @param value the style string (e.g. `width:100px; height:200px;`)
   */
  registerStyleAttr(value) {
    this._initialStyleValues = parse(value);
    this._hasInitialValues = true;
  }
  /**
   * Registers the element's static class string value to the builder.
   *
   * @param value the className string (e.g. `disabled gold zoom`)
   */
  registerClassAttr(value) {
    this._initialClassValues = value.trim().split(/\s+/g);
    this._hasInitialValues = true;
  }
  /**
   * Appends all styling-related expressions to the provided attrs array.
   *
   * @param attrs an existing array where each of the styling expressions
   * will be inserted into.
   */
  populateInitialStylingAttrs(attrs) {
    // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]
    if (this._initialClassValues.length) {
      attrs.push(literal(1 /* AttributeMarker.Classes */));
      for (let i = 0; i < this._initialClassValues.length; i++) {
        attrs.push(literal(this._initialClassValues[i]));
      }
    }
    // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]
    if (this._initialStyleValues.length) {
      attrs.push(literal(2 /* AttributeMarker.Styles */));
      for (let i = 0; i < this._initialStyleValues.length; i += 2) {
        attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));
      }
    }
  }
  /**
   * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.
   *
   * The instruction generation code below is used for producing the AOT statement code which is
   * responsible for registering initial styles (within a directive hostBindings' creation block),
   * as well as any of the provided attribute values, to the directive host element.
   */
  assignHostAttrs(attrs, definitionMap) {
    if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {
      this.populateInitialStylingAttrs(attrs);
      definitionMap.set('hostAttrs', literalArr(attrs));
    }
  }
  /**
   * Builds an instruction with all the expressions and parameters for `classMap`.
   *
   * The instruction data will contain all expressions for `classMap` to function
   * which includes the `[class]` expression params.
   */
  buildClassMapInstruction(valueConverter) {
    if (this._classMapInput) {
      return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);
    }
    return null;
  }
  /**
   * Builds an instruction with all the expressions and parameters for `styleMap`.
   *
   * The instruction data will contain all expressions for `styleMap` to function
   * which includes the `[style]` expression params.
   */
  buildStyleMapInstruction(valueConverter) {
    if (this._styleMapInput) {
      return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);
    }
    return null;
  }
  _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {
    // each styling binding value is stored in the LView
    // map-based bindings allocate two slots: one for the
    // previous binding value and another for the previous
    // className or style attribute value.
    let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
    // these values must be outside of the update block so that they can
    // be evaluated (the AST visit call) during creation time so that any
    // pipes can be picked up in time before the template is built
    const mapValue = stylingInput.value.visit(valueConverter);
    let reference;
    if (mapValue instanceof Interpolation) {
      totalBindingSlotsRequired += mapValue.expressions.length;
      reference = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);
    } else {
      reference = isClassBased ? Identifiers.classMap : Identifiers.styleMap;
    }
    return {
      reference,
      calls: [{
        supportsInterpolation: true,
        sourceSpan: stylingInput.sourceSpan,
        allocateBindingSlots: totalBindingSlotsRequired,
        params: convertFn => {
          const convertResult = convertFn(mapValue);
          const params = Array.isArray(convertResult) ? convertResult : [convertResult];
          return params;
        }
      }]
    };
  }
  _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {
    const instructions = [];
    inputs.forEach(input => {
      const previousInstruction = instructions[instructions.length - 1];
      const value = input.value.visit(valueConverter);
      let referenceForCall = reference;
      // each styling binding value is stored in the LView
      // but there are two values stored for each binding:
      //   1) the value itself
      //   2) an intermediate value (concatenation of style up to this point).
      //      We need to store the intermediate value so that we don't allocate
      //      the strings on each CD.
      let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
      if (value instanceof Interpolation) {
        totalBindingSlotsRequired += value.expressions.length;
        if (getInterpolationExpressionFn) {
          referenceForCall = getInterpolationExpressionFn(value);
        }
      }
      const call = {
        sourceSpan: input.sourceSpan,
        allocateBindingSlots: totalBindingSlotsRequired,
        supportsInterpolation: !!getInterpolationExpressionFn,
        params: convertFn => {
          // params => stylingProp(propName, value, suffix)
          const params = [];
          params.push(literal(input.name));
          const convertResult = convertFn(value);
          if (Array.isArray(convertResult)) {
            params.push(...convertResult);
          } else {
            params.push(convertResult);
          }
          // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,
          // if that is detected then we need to pass that in as an optional param.
          if (!isClassBased && input.suffix !== null) {
            params.push(literal(input.suffix));
          }
          return params;
        }
      };
      // If we ended up generating a call to the same instruction as the previous styling property
      // we can chain the calls together safely to save some bytes, otherwise we have to generate
      // a separate instruction call. This is primarily a concern with interpolation instructions
      // where we may start off with one `reference`, but end up using another based on the
      // number of interpolations.
      if (previousInstruction && previousInstruction.reference === referenceForCall) {
        previousInstruction.calls.push(call);
      } else {
        instructions.push({
          reference: referenceForCall,
          calls: [call]
        });
      }
    });
    return instructions;
  }
  _buildClassInputs(valueConverter) {
    if (this._singleClassInputs) {
      return this._buildSingleInputs(Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);
    }
    return [];
  }
  _buildStyleInputs(valueConverter) {
    if (this._singleStyleInputs) {
      return this._buildSingleInputs(Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);
    }
    return [];
  }
  /**
   * Constructs all instructions which contain the expressions that will be placed
   * into the update block of a template function or a directive hostBindings function.
   */
  buildUpdateLevelInstructions(valueConverter) {
    const instructions = [];
    if (this.hasBindings) {
      const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);
      if (styleMapInstruction) {
        instructions.push(styleMapInstruction);
      }
      const classMapInstruction = this.buildClassMapInstruction(valueConverter);
      if (classMapInstruction) {
        instructions.push(classMapInstruction);
      }
      instructions.push(...this._buildStyleInputs(valueConverter));
      instructions.push(...this._buildClassInputs(valueConverter));
    }
    return instructions;
  }
}
function registerIntoMap(map, key) {
  if (!map.has(key)) {
    map.set(key, map.size);
  }
}
function parseProperty(name) {
  let hasOverrideFlag = false;
  const overrideIndex = name.indexOf(IMPORTANT_FLAG);
  if (overrideIndex !== -1) {
    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';
    hasOverrideFlag = true;
  }
  let suffix = null;
  let property = name;
  const unitIndex = name.lastIndexOf('.');
  if (unitIndex > 0) {
    suffix = name.slice(unitIndex + 1);
    property = name.substring(0, unitIndex);
  }
  return {
    property,
    suffix,
    hasOverrideFlag
  };
}
/**
 * Gets the instruction to generate for an interpolated class map.
 * @param interpolation An Interpolation AST
 */
function getClassMapInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 1:
      return Identifiers.classMap;
    case 3:
      return Identifiers.classMapInterpolate1;
    case 5:
      return Identifiers.classMapInterpolate2;
    case 7:
      return Identifiers.classMapInterpolate3;
    case 9:
      return Identifiers.classMapInterpolate4;
    case 11:
      return Identifiers.classMapInterpolate5;
    case 13:
      return Identifiers.classMapInterpolate6;
    case 15:
      return Identifiers.classMapInterpolate7;
    case 17:
      return Identifiers.classMapInterpolate8;
    default:
      return Identifiers.classMapInterpolateV;
  }
}
/**
 * Gets the instruction to generate for an interpolated style map.
 * @param interpolation An Interpolation AST
 */
function getStyleMapInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 1:
      return Identifiers.styleMap;
    case 3:
      return Identifiers.styleMapInterpolate1;
    case 5:
      return Identifiers.styleMapInterpolate2;
    case 7:
      return Identifiers.styleMapInterpolate3;
    case 9:
      return Identifiers.styleMapInterpolate4;
    case 11:
      return Identifiers.styleMapInterpolate5;
    case 13:
      return Identifiers.styleMapInterpolate6;
    case 15:
      return Identifiers.styleMapInterpolate7;
    case 17:
      return Identifiers.styleMapInterpolate8;
    default:
      return Identifiers.styleMapInterpolateV;
  }
}
/**
 * Gets the instruction to generate for an interpolated style prop.
 * @param interpolation An Interpolation AST
 */
function getStylePropInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 1:
      return Identifiers.styleProp;
    case 3:
      return Identifiers.stylePropInterpolate1;
    case 5:
      return Identifiers.stylePropInterpolate2;
    case 7:
      return Identifiers.stylePropInterpolate3;
    case 9:
      return Identifiers.stylePropInterpolate4;
    case 11:
      return Identifiers.stylePropInterpolate5;
    case 13:
      return Identifiers.stylePropInterpolate6;
    case 15:
      return Identifiers.stylePropInterpolate7;
    case 17:
      return Identifiers.stylePropInterpolate8;
    default:
      return Identifiers.stylePropInterpolateV;
  }
}
/**
 * Checks whether property name is a custom CSS property.
 * See: https://www.w3.org/TR/css-variables-1
 */
function isCssCustomProperty(name) {
  return name.startsWith('--');
}
function isEmptyExpression(ast) {
  if (ast instanceof ASTWithSource) {
    ast = ast.ast;
  }
  return ast instanceof EmptyExpr;
}
var TokenType;
(function (TokenType) {
  TokenType[TokenType["Character"] = 0] = "Character";
  TokenType[TokenType["Identifier"] = 1] = "Identifier";
  TokenType[TokenType["PrivateIdentifier"] = 2] = "PrivateIdentifier";
  TokenType[TokenType["Keyword"] = 3] = "Keyword";
  TokenType[TokenType["String"] = 4] = "String";
  TokenType[TokenType["Operator"] = 5] = "Operator";
  TokenType[TokenType["Number"] = 6] = "Number";
  TokenType[TokenType["Error"] = 7] = "Error";
})(TokenType || (TokenType = {}));
const KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
class Lexer {
  tokenize(text) {
    const scanner = new _Scanner(text);
    const tokens = [];
    let token = scanner.scanToken();
    while (token != null) {
      tokens.push(token);
      token = scanner.scanToken();
    }
    return tokens;
  }
}
class Token {
  constructor(index, end, type, numValue, strValue) {
    this.index = index;
    this.end = end;
    this.type = type;
    this.numValue = numValue;
    this.strValue = strValue;
  }
  isCharacter(code) {
    return this.type == TokenType.Character && this.numValue == code;
  }
  isNumber() {
    return this.type == TokenType.Number;
  }
  isString() {
    return this.type == TokenType.String;
  }
  isOperator(operator) {
    return this.type == TokenType.Operator && this.strValue == operator;
  }
  isIdentifier() {
    return this.type == TokenType.Identifier;
  }
  isPrivateIdentifier() {
    return this.type == TokenType.PrivateIdentifier;
  }
  isKeyword() {
    return this.type == TokenType.Keyword;
  }
  isKeywordLet() {
    return this.type == TokenType.Keyword && this.strValue == 'let';
  }
  isKeywordAs() {
    return this.type == TokenType.Keyword && this.strValue == 'as';
  }
  isKeywordNull() {
    return this.type == TokenType.Keyword && this.strValue == 'null';
  }
  isKeywordUndefined() {
    return this.type == TokenType.Keyword && this.strValue == 'undefined';
  }
  isKeywordTrue() {
    return this.type == TokenType.Keyword && this.strValue == 'true';
  }
  isKeywordFalse() {
    return this.type == TokenType.Keyword && this.strValue == 'false';
  }
  isKeywordThis() {
    return this.type == TokenType.Keyword && this.strValue == 'this';
  }
  isError() {
    return this.type == TokenType.Error;
  }
  toNumber() {
    return this.type == TokenType.Number ? this.numValue : -1;
  }
  toString() {
    switch (this.type) {
      case TokenType.Character:
      case TokenType.Identifier:
      case TokenType.Keyword:
      case TokenType.Operator:
      case TokenType.PrivateIdentifier:
      case TokenType.String:
      case TokenType.Error:
        return this.strValue;
      case TokenType.Number:
        return this.numValue.toString();
      default:
        return null;
    }
  }
}
function newCharacterToken(index, end, code) {
  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));
}
function newIdentifierToken(index, end, text) {
  return new Token(index, end, TokenType.Identifier, 0, text);
}
function newPrivateIdentifierToken(index, end, text) {
  return new Token(index, end, TokenType.PrivateIdentifier, 0, text);
}
function newKeywordToken(index, end, text) {
  return new Token(index, end, TokenType.Keyword, 0, text);
}
function newOperatorToken(index, end, text) {
  return new Token(index, end, TokenType.Operator, 0, text);
}
function newStringToken(index, end, text) {
  return new Token(index, end, TokenType.String, 0, text);
}
function newNumberToken(index, end, n) {
  return new Token(index, end, TokenType.Number, n, '');
}
function newErrorToken(index, end, message) {
  return new Token(index, end, TokenType.Error, 0, message);
}
const EOF = new Token(-1, -1, TokenType.Character, 0, '');
class _Scanner {
  constructor(input) {
    this.input = input;
    this.peek = 0;
    this.index = -1;
    this.length = input.length;
    this.advance();
  }
  advance() {
    this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
  }
  scanToken() {
    const input = this.input,
      length = this.length;
    let peek = this.peek,
      index = this.index;
    // Skip whitespace.
    while (peek <= $SPACE) {
      if (++index >= length) {
        peek = $EOF;
        break;
      } else {
        peek = input.charCodeAt(index);
      }
    }
    this.peek = peek;
    this.index = index;
    if (index >= length) {
      return null;
    }
    // Handle identifiers and numbers.
    if (isIdentifierStart(peek)) return this.scanIdentifier();
    if (isDigit(peek)) return this.scanNumber(index);
    const start = index;
    switch (peek) {
      case $PERIOD:
        this.advance();
        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);
      case $LPAREN:
      case $RPAREN:
      case $LBRACE:
      case $RBRACE:
      case $LBRACKET:
      case $RBRACKET:
      case $COMMA:
      case $COLON:
      case $SEMICOLON:
        return this.scanCharacter(start, peek);
      case $SQ:
      case $DQ:
        return this.scanString();
      case $HASH:
        return this.scanPrivateIdentifier();
      case $PLUS:
      case $MINUS:
      case $STAR:
      case $SLASH:
      case $PERCENT:
      case $CARET:
        return this.scanOperator(start, String.fromCharCode(peek));
      case $QUESTION:
        return this.scanQuestion(start);
      case $LT:
      case $GT:
        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
      case $BANG:
      case $EQ:
        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
      case $AMPERSAND:
        return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
      case $BAR:
        return this.scanComplexOperator(start, '|', $BAR, '|');
      case $NBSP:
        while (isWhitespace(this.peek)) this.advance();
        return this.scanToken();
    }
    this.advance();
    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);
  }
  scanCharacter(start, code) {
    this.advance();
    return newCharacterToken(start, this.index, code);
  }
  scanOperator(start, str) {
    this.advance();
    return newOperatorToken(start, this.index, str);
  }
  /**
   * Tokenize a 2/3 char long operator
   *
   * @param start start index in the expression
   * @param one first symbol (always part of the operator)
   * @param twoCode code point for the second symbol
   * @param two second symbol (part of the operator when the second code point matches)
   * @param threeCode code point for the third symbol
   * @param three third symbol (part of the operator when provided and matches source expression)
   */
  scanComplexOperator(start, one, twoCode, two, threeCode, three) {
    this.advance();
    let str = one;
    if (this.peek == twoCode) {
      this.advance();
      str += two;
    }
    if (threeCode != null && this.peek == threeCode) {
      this.advance();
      str += three;
    }
    return newOperatorToken(start, this.index, str);
  }
  scanIdentifier() {
    const start = this.index;
    this.advance();
    while (isIdentifierPart(this.peek)) this.advance();
    const str = this.input.substring(start, this.index);
    return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);
  }
  /** Scans an ECMAScript private identifier. */
  scanPrivateIdentifier() {
    const start = this.index;
    this.advance();
    if (!isIdentifierStart(this.peek)) {
      return this.error('Invalid character [#]', -1);
    }
    while (isIdentifierPart(this.peek)) this.advance();
    const identifierName = this.input.substring(start, this.index);
    return newPrivateIdentifierToken(start, this.index, identifierName);
  }
  scanNumber(start) {
    let simple = this.index === start;
    let hasSeparators = false;
    this.advance(); // Skip initial digit.
    while (true) {
      if (isDigit(this.peek)) {
        // Do nothing.
      } else if (this.peek === $_) {
        // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is
        // valid while `_101` and `101_` are not. The separator can't be next to the decimal
        // point or another separator either. Note that it's unlikely that we'll hit a case where
        // the underscore is at the start, because that's a valid identifier and it will be picked
        // up earlier in the parsing. We validate for it anyway just in case.
        if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {
          return this.error('Invalid numeric separator', 0);
        }
        hasSeparators = true;
      } else if (this.peek === $PERIOD) {
        simple = false;
      } else if (isExponentStart(this.peek)) {
        this.advance();
        if (isExponentSign(this.peek)) this.advance();
        if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);
        simple = false;
      } else {
        break;
      }
      this.advance();
    }
    let str = this.input.substring(start, this.index);
    if (hasSeparators) {
      str = str.replace(/_/g, '');
    }
    const value = simple ? parseIntAutoRadix(str) : parseFloat(str);
    return newNumberToken(start, this.index, value);
  }
  scanString() {
    const start = this.index;
    const quote = this.peek;
    this.advance(); // Skip initial quote.
    let buffer = '';
    let marker = this.index;
    const input = this.input;
    while (this.peek != quote) {
      if (this.peek == $BACKSLASH) {
        buffer += input.substring(marker, this.index);
        let unescapedCode;
        this.advance(); // mutates this.peek
        // @ts-expect-error see microsoft/TypeScript#9998
        if (this.peek == $u) {
          // 4 character hex code for unicode character.
          const hex = input.substring(this.index + 1, this.index + 5);
          if (/^[0-9a-f]+$/i.test(hex)) {
            unescapedCode = parseInt(hex, 16);
          } else {
            return this.error(`Invalid unicode escape [\\u${hex}]`, 0);
          }
          for (let i = 0; i < 5; i++) {
            this.advance();
          }
        } else {
          unescapedCode = unescape(this.peek);
          this.advance();
        }
        buffer += String.fromCharCode(unescapedCode);
        marker = this.index;
      } else if (this.peek == $EOF) {
        return this.error('Unterminated quote', 0);
      } else {
        this.advance();
      }
    }
    const last = input.substring(marker, this.index);
    this.advance(); // Skip terminating quote.
    return newStringToken(start, this.index, buffer + last);
  }
  scanQuestion(start) {
    this.advance();
    let str = '?';
    // Either `a ?? b` or 'a?.b'.
    if (this.peek === $QUESTION || this.peek === $PERIOD) {
      str += this.peek === $PERIOD ? '.' : '?';
      this.advance();
    }
    return newOperatorToken(start, this.index, str);
  }
  error(message, offset) {
    const position = this.index + offset;
    return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
  }
}
function isIdentifierStart(code) {
  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
function isIdentifier(input) {
  if (input.length == 0) return false;
  const scanner = new _Scanner(input);
  if (!isIdentifierStart(scanner.peek)) return false;
  scanner.advance();
  while (scanner.peek !== $EOF) {
    if (!isIdentifierPart(scanner.peek)) return false;
    scanner.advance();
  }
  return true;
}
function isIdentifierPart(code) {
  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
function isExponentStart(code) {
  return code == $e || code == $E;
}
function isExponentSign(code) {
  return code == $MINUS || code == $PLUS;
}
function unescape(code) {
  switch (code) {
    case $n:
      return $LF;
    case $f:
      return $FF;
    case $r:
      return $CR;
    case $t:
      return $TAB;
    case $v:
      return $VTAB;
    default:
      return code;
  }
}
function parseIntAutoRadix(text) {
  const result = parseInt(text);
  if (isNaN(result)) {
    throw new Error('Invalid integer literal when parsing ' + text);
  }
  return result;
}
class SplitInterpolation {
  constructor(strings, expressions, offsets) {
    this.strings = strings;
    this.expressions = expressions;
    this.offsets = offsets;
  }
}
class TemplateBindingParseResult {
  constructor(templateBindings, warnings, errors) {
    this.templateBindings = templateBindings;
    this.warnings = warnings;
    this.errors = errors;
  }
}
class Parser$1 {
  constructor(_lexer) {
    this._lexer = _lexer;
    this.errors = [];
  }
  parseAction(input, isAssignmentEvent, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    this._checkNoInterpolation(input, location, interpolationConfig);
    const sourceToLex = this._stripComments(input);
    const tokens = this._lexer.tokenize(sourceToLex);
    let flags = 1 /* ParseFlags.Action */;
    if (isAssignmentEvent) {
      flags |= 2 /* ParseFlags.AssignmentEvent */;
    }

    const ast = new _ParseAST(input, location, absoluteOffset, tokens, flags, this.errors, 0).parseChain();
    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
  }
  parseBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);
    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
  }
  checkSimpleExpression(ast) {
    const checker = new SimpleExpressionChecker();
    ast.visit(checker);
    return checker.errors;
  }
  parseSimpleBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);
    const errors = this.checkSimpleExpression(ast);
    if (errors.length > 0) {
      this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);
    }
    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
  }
  _reportError(message, input, errLocation, ctxLocation) {
    this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
  }
  _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {
    this._checkNoInterpolation(input, location, interpolationConfig);
    const sourceToLex = this._stripComments(input);
    const tokens = this._lexer.tokenize(sourceToLex);
    return new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0).parseChain();
  }
  /**
   * Parse microsyntax template expression and return a list of bindings or
   * parsing errors in case the given expression is invalid.
   *
   * For example,
   * ```
   *   <div *ngFor="let item of items">
   *         ^      ^ absoluteValueOffset for `templateValue`
   *         absoluteKeyOffset for `templateKey`
   * ```
   * contains three bindings:
   * 1. ngFor -> null
   * 2. item -> NgForOfContext.$implicit
   * 3. ngForOf -> items
   *
   * This is apparent from the de-sugared template:
   * ```
   *   <ng-template ngFor let-item [ngForOf]="items">
   * ```
   *
   * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
   * @param templateValue RHS of the microsyntax attribute
   * @param templateUrl template filename if it's external, component filename if it's inline
   * @param absoluteKeyOffset start of the `templateKey`
   * @param absoluteValueOffset start of the `templateValue`
   */
  parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {
    const tokens = this._lexer.tokenize(templateValue);
    const parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0 /* relative offset */);
    return parser.parseTemplateBindings({
      source: templateKey,
      span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)
    });
  }
  parseInterpolation(input, location, absoluteOffset, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const {
      strings,
      expressions,
      offsets
    } = this.splitInterpolation(input, location, interpolatedTokens, interpolationConfig);
    if (expressions.length === 0) return null;
    const expressionNodes = [];
    for (let i = 0; i < expressions.length; ++i) {
      const expressionText = expressions[i].text;
      const sourceToLex = this._stripComments(expressionText);
      const tokens = this._lexer.tokenize(sourceToLex);
      const ast = new _ParseAST(input, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, offsets[i]).parseChain();
      expressionNodes.push(ast);
    }
    return this.createInterpolationAst(strings.map(s => s.text), expressionNodes, input, location, absoluteOffset);
  }
  /**
   * Similar to `parseInterpolation`, but treats the provided string as a single expression
   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
   * This is used for parsing the switch expression in ICUs.
   */
  parseInterpolationExpression(expression, location, absoluteOffset) {
    const sourceToLex = this._stripComments(expression);
    const tokens = this._lexer.tokenize(sourceToLex);
    const ast = new _ParseAST(expression, location, absoluteOffset, tokens, 0 /* ParseFlags.None */, this.errors, 0).parseChain();
    const strings = ['', '']; // The prefix and suffix strings are both empty
    return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);
  }
  createInterpolationAst(strings, expressions, input, location, absoluteOffset) {
    const span = new ParseSpan(0, input.length);
    const interpolation = new Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);
    return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);
  }
  /**
   * Splits a string of text into "raw" text segments and expressions present in interpolations in
   * the string.
   * Returns `null` if there are no interpolations, otherwise a
   * `SplitInterpolation` with splits that look like
   *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>
   */
  splitInterpolation(input, location, interpolatedTokens, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
    const strings = [];
    const expressions = [];
    const offsets = [];
    const inputToTemplateIndexMap = interpolatedTokens ? getIndexMapForOriginalTemplate(interpolatedTokens) : null;
    let i = 0;
    let atInterpolation = false;
    let extendLastString = false;
    let {
      start: interpStart,
      end: interpEnd
    } = interpolationConfig;
    while (i < input.length) {
      if (!atInterpolation) {
        // parse until starting {{
        const start = i;
        i = input.indexOf(interpStart, i);
        if (i === -1) {
          i = input.length;
        }
        const text = input.substring(start, i);
        strings.push({
          text,
          start,
          end: i
        });
        atInterpolation = true;
      } else {
        // parse from starting {{ to ending }} while ignoring content inside quotes.
        const fullStart = i;
        const exprStart = fullStart + interpStart.length;
        const exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);
        if (exprEnd === -1) {
          // Could not find the end of the interpolation; do not parse an expression.
          // Instead we should extend the content on the last raw string.
          atInterpolation = false;
          extendLastString = true;
          break;
        }
        const fullEnd = exprEnd + interpEnd.length;
        const text = input.substring(exprStart, exprEnd);
        if (text.trim().length === 0) {
          this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${i} in`, location);
        }
        expressions.push({
          text,
          start: fullStart,
          end: fullEnd
        });
        const startInOriginalTemplate = inputToTemplateIndexMap?.get(fullStart) ?? fullStart;
        const offset = startInOriginalTemplate + interpStart.length;
        offsets.push(offset);
        i = fullEnd;
        atInterpolation = false;
      }
    }
    if (!atInterpolation) {
      // If we are now at a text section, add the remaining content as a raw string.
      if (extendLastString) {
        const piece = strings[strings.length - 1];
        piece.text += input.substring(i);
        piece.end = input.length;
      } else {
        strings.push({
          text: input.substring(i),
          start: i,
          end: input.length
        });
      }
    }
    return new SplitInterpolation(strings, expressions, offsets);
  }
  wrapLiteralPrimitive(input, location, absoluteOffset) {
    const span = new ParseSpan(0, input == null ? 0 : input.length);
    return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);
  }
  _stripComments(input) {
    const i = this._commentStart(input);
    return i != null ? input.substring(0, i) : input;
  }
  _commentStart(input) {
    let outerQuote = null;
    for (let i = 0; i < input.length - 1; i++) {
      const char = input.charCodeAt(i);
      const nextChar = input.charCodeAt(i + 1);
      if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;
      if (outerQuote === char) {
        outerQuote = null;
      } else if (outerQuote == null && isQuote(char)) {
        outerQuote = char;
      }
    }
    return null;
  }
  _checkNoInterpolation(input, location, {
    start,
    end
  }) {
    let startIndex = -1;
    let endIndex = -1;
    for (const charIndex of this._forEachUnquotedChar(input, 0)) {
      if (startIndex === -1) {
        if (input.startsWith(start)) {
          startIndex = charIndex;
        }
      } else {
        endIndex = this._getInterpolationEndIndex(input, end, charIndex);
        if (endIndex > -1) {
          break;
        }
      }
    }
    if (startIndex > -1 && endIndex > -1) {
      this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input, `at column ${startIndex} in`, location);
    }
  }
  /**
   * Finds the index of the end of an interpolation expression
   * while ignoring comments and quoted content.
   */
  _getInterpolationEndIndex(input, expressionEnd, start) {
    for (const charIndex of this._forEachUnquotedChar(input, start)) {
      if (input.startsWith(expressionEnd, charIndex)) {
        return charIndex;
      }
      // Nothing else in the expression matters after we've
      // hit a comment so look directly for the end token.
      if (input.startsWith('//', charIndex)) {
        return input.indexOf(expressionEnd, charIndex);
      }
    }
    return -1;
  }
  /**
   * Generator used to iterate over the character indexes of a string that are outside of quotes.
   * @param input String to loop through.
   * @param start Index within the string at which to start.
   */
  *_forEachUnquotedChar(input, start) {
    let currentQuote = null;
    let escapeCount = 0;
    for (let i = start; i < input.length; i++) {
      const char = input[i];
      // Skip the characters inside quotes. Note that we only care about the outer-most
      // quotes matching up and we need to account for escape characters.
      if (isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {
        currentQuote = currentQuote === null ? char : null;
      } else if (currentQuote === null) {
        yield i;
      }
      escapeCount = char === '\\' ? escapeCount + 1 : 0;
    }
  }
}
/** Describes a stateful context an expression parser is in. */
var ParseContextFlags;
(function (ParseContextFlags) {
  ParseContextFlags[ParseContextFlags["None"] = 0] = "None";
  /**
   * A Writable context is one in which a value may be written to an lvalue.
   * For example, after we see a property access, we may expect a write to the
   * property via the "=" operator.
   *   prop
   *        ^ possible "=" after
   */
  ParseContextFlags[ParseContextFlags["Writable"] = 1] = "Writable";
})(ParseContextFlags || (ParseContextFlags = {}));
class _ParseAST {
  constructor(input, location, absoluteOffset, tokens, parseFlags, errors, offset) {
    this.input = input;
    this.location = location;
    this.absoluteOffset = absoluteOffset;
    this.tokens = tokens;
    this.parseFlags = parseFlags;
    this.errors = errors;
    this.offset = offset;
    this.rparensExpected = 0;
    this.rbracketsExpected = 0;
    this.rbracesExpected = 0;
    this.context = ParseContextFlags.None;
    // Cache of expression start and input indeces to the absolute source span they map to, used to
    // prevent creating superfluous source spans in `sourceSpan`.
    // A serial of the expression start and input index is used for mapping because both are stateful
    // and may change for subsequent expressions visited by the parser.
    this.sourceSpanCache = new Map();
    this.index = 0;
  }
  peek(offset) {
    const i = this.index + offset;
    return i < this.tokens.length ? this.tokens[i] : EOF;
  }
  get next() {
    return this.peek(0);
  }
  /** Whether all the parser input has been processed. */
  get atEOF() {
    return this.index >= this.tokens.length;
  }
  /**
   * Index of the next token to be processed, or the end of the last token if all have been
   * processed.
   */
  get inputIndex() {
    return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;
  }
  /**
   * End index of the last processed token, or the start of the first token if none have been
   * processed.
   */
  get currentEndIndex() {
    if (this.index > 0) {
      const curToken = this.peek(-1);
      return curToken.end + this.offset;
    }
    // No tokens have been processed yet; return the next token's start or the length of the input
    // if there is no token.
    if (this.tokens.length === 0) {
      return this.input.length + this.offset;
    }
    return this.next.index + this.offset;
  }
  /**
   * Returns the absolute offset of the start of the current token.
   */
  get currentAbsoluteOffset() {
    return this.absoluteOffset + this.inputIndex;
  }
  /**
   * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if
   * provided).
   *
   * @param start Position from which the `ParseSpan` will start.
   * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the
   *     natural ending index)
   */
  span(start, artificialEndIndex) {
    let endIndex = this.currentEndIndex;
    if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {
      endIndex = artificialEndIndex;
    }
    // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is
    // being created), the current token may already be advanced beyond the `currentEndIndex`. This
    // appears to be a deep-seated parser bug.
    //
    // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.
    // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.
    if (start > endIndex) {
      const tmp = endIndex;
      endIndex = start;
      start = tmp;
    }
    return new ParseSpan(start, endIndex);
  }
  sourceSpan(start, artificialEndIndex) {
    const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;
    if (!this.sourceSpanCache.has(serial)) {
      this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));
    }
    return this.sourceSpanCache.get(serial);
  }
  advance() {
    this.index++;
  }
  /**
   * Executes a callback in the provided context.
   */
  withContext(context, cb) {
    this.context |= context;
    const ret = cb();
    this.context ^= context;
    return ret;
  }
  consumeOptionalCharacter(code) {
    if (this.next.isCharacter(code)) {
      this.advance();
      return true;
    } else {
      return false;
    }
  }
  peekKeywordLet() {
    return this.next.isKeywordLet();
  }
  peekKeywordAs() {
    return this.next.isKeywordAs();
  }
  /**
   * Consumes an expected character, otherwise emits an error about the missing expected character
   * and skips over the token stream until reaching a recoverable point.
   *
   * See `this.error` and `this.skip` for more details.
   */
  expectCharacter(code) {
    if (this.consumeOptionalCharacter(code)) return;
    this.error(`Missing expected ${String.fromCharCode(code)}`);
  }
  consumeOptionalOperator(op) {
    if (this.next.isOperator(op)) {
      this.advance();
      return true;
    } else {
      return false;
    }
  }
  expectOperator(operator) {
    if (this.consumeOptionalOperator(operator)) return;
    this.error(`Missing expected operator ${operator}`);
  }
  prettyPrintToken(tok) {
    return tok === EOF ? 'end of input' : `token ${tok}`;
  }
  expectIdentifierOrKeyword() {
    const n = this.next;
    if (!n.isIdentifier() && !n.isKeyword()) {
      if (n.isPrivateIdentifier()) {
        this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');
      } else {
        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);
      }
      return null;
    }
    this.advance();
    return n.toString();
  }
  expectIdentifierOrKeywordOrString() {
    const n = this.next;
    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
      if (n.isPrivateIdentifier()) {
        this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');
      } else {
        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);
      }
      return '';
    }
    this.advance();
    return n.toString();
  }
  parseChain() {
    const exprs = [];
    const start = this.inputIndex;
    while (this.index < this.tokens.length) {
      const expr = this.parsePipe();
      exprs.push(expr);
      if (this.consumeOptionalCharacter($SEMICOLON)) {
        if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {
          this.error('Binding expression cannot contain chained expression');
        }
        while (this.consumeOptionalCharacter($SEMICOLON)) {} // read all semicolons
      } else if (this.index < this.tokens.length) {
        const errorIndex = this.index;
        this.error(`Unexpected token '${this.next}'`);
        // The `error` call above will skip ahead to the next recovery point in an attempt to
        // recover part of the expression, but that might be the token we started from which will
        // lead to an infinite loop. If that's the case, break the loop assuming that we can't
        // parse further.
        if (this.index === errorIndex) {
          break;
        }
      }
    }
    if (exprs.length === 0) {
      // We have no expressions so create an empty expression that spans the entire input length
      const artificialStart = this.offset;
      const artificialEnd = this.offset + this.input.length;
      return new EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));
    }
    if (exprs.length == 1) return exprs[0];
    return new Chain(this.span(start), this.sourceSpan(start), exprs);
  }
  parsePipe() {
    const start = this.inputIndex;
    let result = this.parseExpression();
    if (this.consumeOptionalOperator('|')) {
      if (this.parseFlags & 1 /* ParseFlags.Action */) {
        this.error('Cannot have a pipe in an action expression');
      }
      do {
        const nameStart = this.inputIndex;
        let nameId = this.expectIdentifierOrKeyword();
        let nameSpan;
        let fullSpanEnd = undefined;
        if (nameId !== null) {
          nameSpan = this.sourceSpan(nameStart);
        } else {
          // No valid identifier was found, so we'll assume an empty pipe name ('').
          nameId = '';
          // However, there may have been whitespace present between the pipe character and the next
          // token in the sequence (or the end of input). We want to track this whitespace so that
          // the `BindingPipe` we produce covers not just the pipe character, but any trailing
          // whitespace beyond it. Another way of thinking about this is that the zero-length name
          // is assumed to be at the end of any whitespace beyond the pipe character.
          //
          // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the
          // beginning of the next token, or until the end of input if the next token is EOF.
          fullSpanEnd = this.next.index !== -1 ? this.next.index : this.input.length + this.offset;
          // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace
          // beyond the pipe character.
          nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);
        }
        const args = [];
        while (this.consumeOptionalCharacter($COLON)) {
          args.push(this.parseExpression());
          // If there are additional expressions beyond the name, then the artificial end for the
          // name is no longer relevant.
        }

        result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);
      } while (this.consumeOptionalOperator('|'));
    }
    return result;
  }
  parseExpression() {
    return this.parseConditional();
  }
  parseConditional() {
    const start = this.inputIndex;
    const result = this.parseLogicalOr();
    if (this.consumeOptionalOperator('?')) {
      const yes = this.parsePipe();
      let no;
      if (!this.consumeOptionalCharacter($COLON)) {
        const end = this.inputIndex;
        const expression = this.input.substring(start, end);
        this.error(`Conditional expression ${expression} requires all 3 expressions`);
        no = new EmptyExpr(this.span(start), this.sourceSpan(start));
      } else {
        no = this.parsePipe();
      }
      return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
    } else {
      return result;
    }
  }
  parseLogicalOr() {
    // '||'
    const start = this.inputIndex;
    let result = this.parseLogicalAnd();
    while (this.consumeOptionalOperator('||')) {
      const right = this.parseLogicalAnd();
      result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);
    }
    return result;
  }
  parseLogicalAnd() {
    // '&&'
    const start = this.inputIndex;
    let result = this.parseNullishCoalescing();
    while (this.consumeOptionalOperator('&&')) {
      const right = this.parseNullishCoalescing();
      result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);
    }
    return result;
  }
  parseNullishCoalescing() {
    // '??'
    const start = this.inputIndex;
    let result = this.parseEquality();
    while (this.consumeOptionalOperator('??')) {
      const right = this.parseEquality();
      result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);
    }
    return result;
  }
  parseEquality() {
    // '==','!=','===','!=='
    const start = this.inputIndex;
    let result = this.parseRelational();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case '==':
        case '===':
        case '!=':
        case '!==':
          this.advance();
          const right = this.parseRelational();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseRelational() {
    // '<', '>', '<=', '>='
    const start = this.inputIndex;
    let result = this.parseAdditive();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case '<':
        case '>':
        case '<=':
        case '>=':
          this.advance();
          const right = this.parseAdditive();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseAdditive() {
    // '+', '-'
    const start = this.inputIndex;
    let result = this.parseMultiplicative();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case '+':
        case '-':
          this.advance();
          let right = this.parseMultiplicative();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parseMultiplicative() {
    // '*', '%', '/'
    const start = this.inputIndex;
    let result = this.parsePrefix();
    while (this.next.type == TokenType.Operator) {
      const operator = this.next.strValue;
      switch (operator) {
        case '*':
        case '%':
        case '/':
          this.advance();
          let right = this.parsePrefix();
          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
          continue;
      }
      break;
    }
    return result;
  }
  parsePrefix() {
    if (this.next.type == TokenType.Operator) {
      const start = this.inputIndex;
      const operator = this.next.strValue;
      let result;
      switch (operator) {
        case '+':
          this.advance();
          result = this.parsePrefix();
          return Unary.createPlus(this.span(start), this.sourceSpan(start), result);
        case '-':
          this.advance();
          result = this.parsePrefix();
          return Unary.createMinus(this.span(start), this.sourceSpan(start), result);
        case '!':
          this.advance();
          result = this.parsePrefix();
          return new PrefixNot(this.span(start), this.sourceSpan(start), result);
      }
    }
    return this.parseCallChain();
  }
  parseCallChain() {
    const start = this.inputIndex;
    let result = this.parsePrimary();
    while (true) {
      if (this.consumeOptionalCharacter($PERIOD)) {
        result = this.parseAccessMember(result, start, false);
      } else if (this.consumeOptionalOperator('?.')) {
        if (this.consumeOptionalCharacter($LPAREN)) {
          result = this.parseCall(result, start, true);
        } else {
          result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMember(result, start, true);
        }
      } else if (this.consumeOptionalCharacter($LBRACKET)) {
        result = this.parseKeyedReadOrWrite(result, start, false);
      } else if (this.consumeOptionalCharacter($LPAREN)) {
        result = this.parseCall(result, start, false);
      } else if (this.consumeOptionalOperator('!')) {
        result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);
      } else {
        return result;
      }
    }
  }
  parsePrimary() {
    const start = this.inputIndex;
    if (this.consumeOptionalCharacter($LPAREN)) {
      this.rparensExpected++;
      const result = this.parsePipe();
      this.rparensExpected--;
      this.expectCharacter($RPAREN);
      return result;
    } else if (this.next.isKeywordNull()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
    } else if (this.next.isKeywordUndefined()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
    } else if (this.next.isKeywordTrue()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
    } else if (this.next.isKeywordFalse()) {
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
    } else if (this.next.isKeywordThis()) {
      this.advance();
      return new ThisReceiver(this.span(start), this.sourceSpan(start));
    } else if (this.consumeOptionalCharacter($LBRACKET)) {
      this.rbracketsExpected++;
      const elements = this.parseExpressionList($RBRACKET);
      this.rbracketsExpected--;
      this.expectCharacter($RBRACKET);
      return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
    } else if (this.next.isCharacter($LBRACE)) {
      return this.parseLiteralMap();
    } else if (this.next.isIdentifier()) {
      return this.parseAccessMember(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);
    } else if (this.next.isNumber()) {
      const value = this.next.toNumber();
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
    } else if (this.next.isString()) {
      const literalValue = this.next.toString();
      this.advance();
      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
    } else if (this.next.isPrivateIdentifier()) {
      this._reportErrorForPrivateIdentifier(this.next, null);
      return new EmptyExpr(this.span(start), this.sourceSpan(start));
    } else if (this.index >= this.tokens.length) {
      this.error(`Unexpected end of expression: ${this.input}`);
      return new EmptyExpr(this.span(start), this.sourceSpan(start));
    } else {
      this.error(`Unexpected token ${this.next}`);
      return new EmptyExpr(this.span(start), this.sourceSpan(start));
    }
  }
  parseExpressionList(terminator) {
    const result = [];
    do {
      if (!this.next.isCharacter(terminator)) {
        result.push(this.parsePipe());
      } else {
        break;
      }
    } while (this.consumeOptionalCharacter($COMMA));
    return result;
  }
  parseLiteralMap() {
    const keys = [];
    const values = [];
    const start = this.inputIndex;
    this.expectCharacter($LBRACE);
    if (!this.consumeOptionalCharacter($RBRACE)) {
      this.rbracesExpected++;
      do {
        const keyStart = this.inputIndex;
        const quoted = this.next.isString();
        const key = this.expectIdentifierOrKeywordOrString();
        keys.push({
          key,
          quoted
        });
        // Properties with quoted keys can't use the shorthand syntax.
        if (quoted) {
          this.expectCharacter($COLON);
          values.push(this.parsePipe());
        } else if (this.consumeOptionalCharacter($COLON)) {
          values.push(this.parsePipe());
        } else {
          const span = this.span(keyStart);
          const sourceSpan = this.sourceSpan(keyStart);
          values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));
        }
      } while (this.consumeOptionalCharacter($COMMA) && !this.next.isCharacter($RBRACE));
      this.rbracesExpected--;
      this.expectCharacter($RBRACE);
    }
    return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
  }
  parseAccessMember(readReceiver, start, isSafe) {
    const nameStart = this.inputIndex;
    const id = this.withContext(ParseContextFlags.Writable, () => {
      const id = this.expectIdentifierOrKeyword() ?? '';
      if (id.length === 0) {
        this.error(`Expected identifier for property access`, readReceiver.span.end);
      }
      return id;
    });
    const nameSpan = this.sourceSpan(nameStart);
    let receiver;
    if (isSafe) {
      if (this.consumeOptionalAssignment()) {
        this.error('The \'?.\' operator cannot be used in the assignment');
        receiver = new EmptyExpr(this.span(start), this.sourceSpan(start));
      } else {
        receiver = new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
      }
    } else {
      if (this.consumeOptionalAssignment()) {
        if (!(this.parseFlags & 1 /* ParseFlags.Action */)) {
          this.error('Bindings cannot contain assignments');
          return new EmptyExpr(this.span(start), this.sourceSpan(start));
        }
        const value = this.parseConditional();
        receiver = new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id, value);
      } else {
        receiver = new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, readReceiver, id);
      }
    }
    return receiver;
  }
  parseCall(receiver, start, isSafe) {
    const argumentStart = this.inputIndex;
    this.rparensExpected++;
    const args = this.parseCallArguments();
    const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);
    this.expectCharacter($RPAREN);
    this.rparensExpected--;
    const span = this.span(start);
    const sourceSpan = this.sourceSpan(start);
    return isSafe ? new SafeCall(span, sourceSpan, receiver, args, argumentSpan) : new Call(span, sourceSpan, receiver, args, argumentSpan);
  }
  consumeOptionalAssignment() {
    // When parsing assignment events (originating from two-way-binding aka banana-in-a-box syntax),
    // it is valid for the primary expression to be terminated by the non-null operator. This
    // primary expression is substituted as LHS of the assignment operator to achieve
    // two-way-binding, such that the LHS could be the non-null operator. The grammar doesn't
    // naturally allow for this syntax, so assignment events are parsed specially.
    if (this.parseFlags & 2 /* ParseFlags.AssignmentEvent */ && this.next.isOperator('!') && this.peek(1).isOperator('=')) {
      // First skip over the ! operator.
      this.advance();
      // Then skip over the = operator, to fully consume the optional assignment operator.
      this.advance();
      return true;
    }
    return this.consumeOptionalOperator('=');
  }
  parseCallArguments() {
    if (this.next.isCharacter($RPAREN)) return [];
    const positionals = [];
    do {
      positionals.push(this.parsePipe());
    } while (this.consumeOptionalCharacter($COMMA));
    return positionals;
  }
  /**
   * Parses an identifier, a keyword, a string with an optional `-` in between,
   * and returns the string along with its absolute source span.
   */
  expectTemplateBindingKey() {
    let result = '';
    let operatorFound = false;
    const start = this.currentAbsoluteOffset;
    do {
      result += this.expectIdentifierOrKeywordOrString();
      operatorFound = this.consumeOptionalOperator('-');
      if (operatorFound) {
        result += '-';
      }
    } while (operatorFound);
    return {
      source: result,
      span: new AbsoluteSourceSpan(start, start + result.length)
    };
  }
  /**
   * Parse microsyntax template expression and return a list of bindings or
   * parsing errors in case the given expression is invalid.
   *
   * For example,
   * ```
   *   <div *ngFor="let item of items; index as i; trackBy: func">
   * ```
   * contains five bindings:
   * 1. ngFor -> null
   * 2. item -> NgForOfContext.$implicit
   * 3. ngForOf -> items
   * 4. i -> NgForOfContext.index
   * 5. ngForTrackBy -> func
   *
   * For a full description of the microsyntax grammar, see
   * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
   *
   * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
   * without the *, along with its absolute span.
   */
  parseTemplateBindings(templateKey) {
    const bindings = [];
    // The first binding is for the template key itself
    // In *ngFor="let item of items", key = "ngFor", value = null
    // In *ngIf="cond | pipe", key = "ngIf", value = "cond | pipe"
    bindings.push(...this.parseDirectiveKeywordBindings(templateKey));
    while (this.index < this.tokens.length) {
      // If it starts with 'let', then this must be variable declaration
      const letBinding = this.parseLetBinding();
      if (letBinding) {
        bindings.push(letBinding);
      } else {
        // Two possible cases here, either `value "as" key` or
        // "directive-keyword expression". We don't know which case, but both
        // "value" and "directive-keyword" are template binding key, so consume
        // the key first.
        const key = this.expectTemplateBindingKey();
        // Peek at the next token, if it is "as" then this must be variable
        // declaration.
        const binding = this.parseAsBinding(key);
        if (binding) {
          bindings.push(binding);
        } else {
          // Otherwise the key must be a directive keyword, like "of". Transform
          // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy
          key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);
          bindings.push(...this.parseDirectiveKeywordBindings(key));
        }
      }
      this.consumeStatementTerminator();
    }
    return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);
  }
  parseKeyedReadOrWrite(receiver, start, isSafe) {
    return this.withContext(ParseContextFlags.Writable, () => {
      this.rbracketsExpected++;
      const key = this.parsePipe();
      if (key instanceof EmptyExpr) {
        this.error(`Key access cannot be empty`);
      }
      this.rbracketsExpected--;
      this.expectCharacter($RBRACKET);
      if (this.consumeOptionalOperator('=')) {
        if (isSafe) {
          this.error('The \'?.\' operator cannot be used in the assignment');
        } else {
          const value = this.parseConditional();
          return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);
        }
      } else {
        return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);
      }
      return new EmptyExpr(this.span(start), this.sourceSpan(start));
    });
  }
  /**
   * Parse a directive keyword, followed by a mandatory expression.
   * For example, "of items", "trackBy: func".
   * The bindings are: ngForOf -> items, ngForTrackBy -> func
   * There could be an optional "as" binding that follows the expression.
   * For example,
   * ```
   *   *ngFor="let item of items | slice:0:1 as collection".
   *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
   *               keyword    bound target   optional 'as' binding
   * ```
   *
   * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
   * absolute span.
   */
  parseDirectiveKeywordBindings(key) {
    const bindings = [];
    this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction
    const value = this.getDirectiveBoundTarget();
    let spanEnd = this.currentAbsoluteOffset;
    // The binding could optionally be followed by "as". For example,
    // *ngIf="cond | pipe as x". In this case, the key in the "as" binding
    // is "x" and the value is the template key itself ("ngIf"). Note that the
    // 'key' in the current context now becomes the "value" in the next binding.
    const asBinding = this.parseAsBinding(key);
    if (!asBinding) {
      this.consumeStatementTerminator();
      spanEnd = this.currentAbsoluteOffset;
    }
    const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
    bindings.push(new ExpressionBinding(sourceSpan, key, value));
    if (asBinding) {
      bindings.push(asBinding);
    }
    return bindings;
  }
  /**
   * Return the expression AST for the bound target of a directive keyword
   * binding. For example,
   * ```
   *   *ngIf="condition | pipe"
   *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
   *   *ngFor="let item of items"
   *                       ^^^^^ bound target for "ngForOf"
   * ```
   */
  getDirectiveBoundTarget() {
    if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
      return null;
    }
    const ast = this.parsePipe(); // example: "condition | async"
    const {
      start,
      end
    } = ast.span;
    const value = this.input.substring(start, end);
    return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);
  }
  /**
   * Return the binding for a variable declared using `as`. Note that the order
   * of the key-value pair in this declaration is reversed. For example,
   * ```
   *   *ngFor="let item of items; index as i"
   *                              ^^^^^    ^
   *                              value    key
   * ```
   *
   * @param value name of the value in the declaration, "ngIf" in the example
   * above, along with its absolute span.
   */
  parseAsBinding(value) {
    if (!this.peekKeywordAs()) {
      return null;
    }
    this.advance(); // consume the 'as' keyword
    const key = this.expectTemplateBindingKey();
    this.consumeStatementTerminator();
    const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
    return new VariableBinding(sourceSpan, key, value);
  }
  /**
   * Return the binding for a variable declared using `let`. For example,
   * ```
   *   *ngFor="let item of items; let i=index;"
   *           ^^^^^^^^           ^^^^^^^^^^^
   * ```
   * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
   * In the second binding, `i` is bound to `NgForOfContext.index`.
   */
  parseLetBinding() {
    if (!this.peekKeywordLet()) {
      return null;
    }
    const spanStart = this.currentAbsoluteOffset;
    this.advance(); // consume the 'let' keyword
    const key = this.expectTemplateBindingKey();
    let value = null;
    if (this.consumeOptionalOperator('=')) {
      value = this.expectTemplateBindingKey();
    }
    this.consumeStatementTerminator();
    const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
    return new VariableBinding(sourceSpan, key, value);
  }
  /**
   * Consume the optional statement terminator: semicolon or comma.
   */
  consumeStatementTerminator() {
    this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
  }
  /**
   * Records an error and skips over the token stream until reaching a recoverable point. See
   * `this.skip` for more details on token skipping.
   */
  error(message, index = null) {
    this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
    this.skip();
  }
  locationText(index = null) {
    if (index == null) index = this.index;
    return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;
  }
  /**
   * Records an error for an unexpected private identifier being discovered.
   * @param token Token representing a private identifier.
   * @param extraMessage Optional additional message being appended to the error.
   */
  _reportErrorForPrivateIdentifier(token, extraMessage) {
    let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;
    if (extraMessage !== null) {
      errorMessage += `, ${extraMessage}`;
    }
    this.error(errorMessage);
  }
  /**
   * Error recovery should skip tokens until it encounters a recovery point.
   *
   * The following are treated as unconditional recovery points:
   *   - end of input
   *   - ';' (parseChain() is always the root production, and it expects a ';')
   *   - '|' (since pipes may be chained and each pipe expression may be treated independently)
   *
   * The following are conditional recovery points:
   *   - ')', '}', ']' if one of calling productions is expecting one of these symbols
   *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to
   *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins
   *       an '(' <expr> ')' production).
   *       The recovery points of grouping symbols must be conditional as they must be skipped if
   *       none of the calling productions are not expecting the closing token else we will never
   *       make progress in the case of an extraneous group closing symbol (such as a stray ')').
   *       That is, we skip a closing symbol if we are not in a grouping production.
   *   - '=' in a `Writable` context
   *     - In this context, we are able to recover after seeing the `=` operator, which
   *       signals the presence of an independent rvalue expression following the `=` operator.
   *
   * If a production expects one of these token it increments the corresponding nesting count,
   * and then decrements it just prior to checking if the token is in the input.
   */
  skip() {
    let n = this.next;
    while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {
      if (this.next.isError()) {
        this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
      }
      this.advance();
      n = this.next;
    }
  }
}
class SimpleExpressionChecker extends RecursiveAstVisitor {
  constructor() {
    super(...arguments);
    this.errors = [];
  }
  visitPipe() {
    this.errors.push('pipes');
  }
}
/**
 * Computes the real offset in the original template for indexes in an interpolation.
 *
 * Because templates can have encoded HTML entities and the input passed to the parser at this stage
 * of the compiler is the _decoded_ value, we need to compute the real offset using the original
 * encoded values in the interpolated tokens. Note that this is only a special case handling for
 * `MlParserTokenType.ENCODED_ENTITY` token types. All other interpolated tokens are expected to
 * have parts which exactly match the input string for parsing the interpolation.
 *
 * @param interpolatedTokens The tokens for the interpolated value.
 *
 * @returns A map of index locations in the decoded template to indexes in the original template
 */
function getIndexMapForOriginalTemplate(interpolatedTokens) {
  let offsetMap = new Map();
  let consumedInOriginalTemplate = 0;
  let consumedInInput = 0;
  let tokenIndex = 0;
  while (tokenIndex < interpolatedTokens.length) {
    const currentToken = interpolatedTokens[tokenIndex];
    if (currentToken.type === 9 /* MlParserTokenType.ENCODED_ENTITY */) {
      const [decoded, encoded] = currentToken.parts;
      consumedInOriginalTemplate += encoded.length;
      consumedInInput += decoded.length;
    } else {
      const lengthOfParts = currentToken.parts.reduce((sum, current) => sum + current.length, 0);
      consumedInInput += lengthOfParts;
      consumedInOriginalTemplate += lengthOfParts;
    }
    offsetMap.set(consumedInInput, consumedInOriginalTemplate);
    tokenIndex++;
  }
  return offsetMap;
}
class NodeWithI18n {
  constructor(sourceSpan, i18n) {
    this.sourceSpan = sourceSpan;
    this.i18n = i18n;
  }
}
class Text extends NodeWithI18n {
  constructor(value, sourceSpan, tokens, i18n) {
    super(sourceSpan, i18n);
    this.value = value;
    this.tokens = tokens;
  }
  visit(visitor, context) {
    return visitor.visitText(this, context);
  }
}
class Expansion extends NodeWithI18n {
  constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {
    super(sourceSpan, i18n);
    this.switchValue = switchValue;
    this.type = type;
    this.cases = cases;
    this.switchValueSourceSpan = switchValueSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitExpansion(this, context);
  }
}
class ExpansionCase {
  constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
    this.value = value;
    this.expression = expression;
    this.sourceSpan = sourceSpan;
    this.valueSourceSpan = valueSourceSpan;
    this.expSourceSpan = expSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitExpansionCase(this, context);
  }
}
class Attribute extends NodeWithI18n {
  constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {
    super(sourceSpan, i18n);
    this.name = name;
    this.value = value;
    this.keySpan = keySpan;
    this.valueSpan = valueSpan;
    this.valueTokens = valueTokens;
  }
  visit(visitor, context) {
    return visitor.visitAttribute(this, context);
  }
}
class Element extends NodeWithI18n {
  constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n) {
    super(sourceSpan, i18n);
    this.name = name;
    this.attrs = attrs;
    this.children = children;
    this.startSourceSpan = startSourceSpan;
    this.endSourceSpan = endSourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitElement(this, context);
  }
}
class Comment {
  constructor(value, sourceSpan) {
    this.value = value;
    this.sourceSpan = sourceSpan;
  }
  visit(visitor, context) {
    return visitor.visitComment(this, context);
  }
}
function visitAll(visitor, nodes, context = null) {
  const result = [];
  const visit = visitor.visit ? ast => visitor.visit(ast, context) || ast.visit(visitor, context) : ast => ast.visit(visitor, context);
  nodes.forEach(ast => {
    const astResult = visit(ast);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
class RecursiveVisitor {
  constructor() {}
  visitElement(ast, context) {
    this.visitChildren(context, visit => {
      visit(ast.attrs);
      visit(ast.children);
    });
  }
  visitAttribute(ast, context) {}
  visitText(ast, context) {}
  visitComment(ast, context) {}
  visitExpansion(ast, context) {
    return this.visitChildren(context, visit => {
      visit(ast.cases);
    });
  }
  visitExpansionCase(ast, context) {}
  visitChildren(context, cb) {
    let results = [];
    let t = this;
    function visit(children) {
      if (children) results.push(visitAll(t, children, context));
    }
    cb(visit);
    return Array.prototype.concat.apply([], results);
  }
}
var TagContentType;
(function (TagContentType) {
  TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
  TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
  TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(TagContentType || (TagContentType = {}));
function splitNsName(elementName) {
  if (elementName[0] != ':') {
    return [null, elementName];
  }
  const colonIndex = elementName.indexOf(':', 1);
  if (colonIndex === -1) {
    throw new Error(`Unsupported format "${elementName}" expecting ":namespace:name"`);
  }
  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
}
// `<ng-container>` tags work the same regardless the namespace
function isNgContainer(tagName) {
  return splitNsName(tagName)[1] === 'ng-container';
}
// `<ng-content>` tags work the same regardless the namespace
function isNgContent(tagName) {
  return splitNsName(tagName)[1] === 'ng-content';
}
// `<ng-template>` tags work the same regardless the namespace
function isNgTemplate(tagName) {
  return splitNsName(tagName)[1] === 'ng-template';
}
function getNsPrefix(fullName) {
  return fullName === null ? null : splitNsName(fullName)[0];
}
function mergeNsAndName(prefix, localName) {
  return prefix ? `:${prefix}:${localName}` : localName;
}
class ElementSchemaRegistry {}
const BOOLEAN = 'boolean';
const NUMBER = 'number';
const STRING = 'string';
const OBJECT = 'object';
/**
 * This array represents the DOM schema. It encodes inheritance, properties, and events.
 *
 * ## Overview
 *
 * Each line represents one kind of element. The `element_inheritance` and properties are joined
 * using `element_inheritance|properties` syntax.
 *
 * ## Element Inheritance
 *
 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
 * Here the individual elements are separated by `,` (commas). Every element in the list
 * has identical properties.
 *
 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
 * specified then `""` (blank) element is assumed.
 *
 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
 * elements.
 *
 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
 *
 * ## Properties
 *
 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
 * by a special character designating its type:
 *
 * - (no prefix): property is a string.
 * - `*`: property represents an event.
 * - `!`: property is a boolean.
 * - `#`: property is a number.
 * - `%`: property is an object.
 *
 * ## Query
 *
 * The class creates an internal squas representation which allows to easily answer the query of
 * if a given property exist on a given element.
 *
 * NOTE: We don't yet support querying for types or events.
 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
 *       see dom_element_schema_registry_spec.ts
 */
// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
//
// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
//
// =================================================================================================
const SCHEMA = ['[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot' + /* added manually to avoid breaking changes */
',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored', '[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy', 'abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy', 'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume', ':svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'data^[HTMLElement]|value', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,media,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type', 'select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'slot^[HTMLElement]|name', 'source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'time^[HTMLElement]|dateTime', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|decoding', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime', ':svg:cursor^:svg:|'];
const _ATTR_TO_PROP = new Map(Object.entries({
  'class': 'className',
  'for': 'htmlFor',
  'formaction': 'formAction',
  'innerHtml': 'innerHTML',
  'readonly': 'readOnly',
  'tabindex': 'tabIndex'
}));
// Invert _ATTR_TO_PROP.
const _PROP_TO_ATTR = Array.from(_ATTR_TO_PROP).reduce((inverted, [propertyName, attributeName]) => {
  inverted.set(propertyName, attributeName);
  return inverted;
}, new Map());
class DomElementSchemaRegistry extends ElementSchemaRegistry {
  constructor() {
    super();
    this._schema = new Map();
    // We don't allow binding to events for security reasons. Allowing event bindings would almost
    // certainly introduce bad XSS vulnerabilities. Instead, we store events in a separate schema.
    this._eventSchema = new Map();
    SCHEMA.forEach(encodedType => {
      const type = new Map();
      const events = new Set();
      const [strType, strProperties] = encodedType.split('|');
      const properties = strProperties.split(',');
      const [typeNames, superName] = strType.split('^');
      typeNames.split(',').forEach(tag => {
        this._schema.set(tag.toLowerCase(), type);
        this._eventSchema.set(tag.toLowerCase(), events);
      });
      const superType = superName && this._schema.get(superName.toLowerCase());
      if (superType) {
        for (const [prop, value] of superType) {
          type.set(prop, value);
        }
        for (const superEvent of this._eventSchema.get(superName.toLowerCase())) {
          events.add(superEvent);
        }
      }
      properties.forEach(property => {
        if (property.length > 0) {
          switch (property[0]) {
            case '*':
              events.add(property.substring(1));
              break;
            case '!':
              type.set(property.substring(1), BOOLEAN);
              break;
            case '#':
              type.set(property.substring(1), NUMBER);
              break;
            case '%':
              type.set(property.substring(1), OBJECT);
              break;
            default:
              type.set(property, STRING);
          }
        }
      });
    });
  }
  hasProperty(tagName, propName, schemaMetas) {
    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {
      return true;
    }
    if (tagName.indexOf('-') > -1) {
      if (isNgContainer(tagName) || isNgContent(tagName)) {
        return false;
      }
      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
        // Can't tell now as we don't know which properties a custom element will get
        // once it is instantiated
        return true;
      }
    }
    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');
    return elementProperties.has(propName);
  }
  hasElement(tagName, schemaMetas) {
    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {
      return true;
    }
    if (tagName.indexOf('-') > -1) {
      if (isNgContainer(tagName) || isNgContent(tagName)) {
        return true;
      }
      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {
        // Allow any custom elements
        return true;
      }
    }
    return this._schema.has(tagName.toLowerCase());
  }
  /**
   * securityContext returns the security context for the given property on the given DOM tag.
   *
   * Tag and property name are statically known and cannot change at runtime, i.e. it is not
   * possible to bind a value into a changing attribute or tag name.
   *
   * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
   * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
   * string values. Only specific well known attack vectors are assigned their appropriate context.
   */
  securityContext(tagName, propName, isAttribute) {
    if (isAttribute) {
      // NB: For security purposes, use the mapped property name, not the attribute name.
      propName = this.getMappedPropName(propName);
    }
    // Make sure comparisons are case insensitive, so that case differences between attribute and
    // property names do not have a security impact.
    tagName = tagName.toLowerCase();
    propName = propName.toLowerCase();
    let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];
    if (ctx) {
      return ctx;
    }
    ctx = SECURITY_SCHEMA()['*|' + propName];
    return ctx ? ctx : SecurityContext.NONE;
  }
  getMappedPropName(propName) {
    return _ATTR_TO_PROP.get(propName) ?? propName;
  }
  getDefaultComponentElementName() {
    return 'ng-component';
  }
  validateProperty(name) {
    if (name.toLowerCase().startsWith('on')) {
      const msg = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;
      return {
        error: true,
        msg: msg
      };
    } else {
      return {
        error: false
      };
    }
  }
  validateAttribute(name) {
    if (name.toLowerCase().startsWith('on')) {
      const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;
      return {
        error: true,
        msg: msg
      };
    } else {
      return {
        error: false
      };
    }
  }
  allKnownElementNames() {
    return Array.from(this._schema.keys());
  }
  allKnownAttributesOfElement(tagName) {
    const elementProperties = this._schema.get(tagName.toLowerCase()) || this._schema.get('unknown');
    // Convert properties to attributes.
    return Array.from(elementProperties.keys()).map(prop => _PROP_TO_ATTR.get(prop) ?? prop);
  }
  allKnownEventsOfElement(tagName) {
    return Array.from(this._eventSchema.get(tagName.toLowerCase()) ?? []);
  }
  normalizeAnimationStyleProperty(propName) {
    return dashCaseToCamelCase(propName);
  }
  normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
    let unit = '';
    const strVal = val.toString().trim();
    let errorMsg = null;
    if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
      if (typeof val === 'number') {
        unit = 'px';
      } else {
        const valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;
        }
      }
    }
    return {
      error: errorMsg,
      value: strVal + unit
    };
  }
}
function _isPixelDimensionStyle(prop) {
  switch (prop) {
    case 'width':
    case 'height':
    case 'minWidth':
    case 'minHeight':
    case 'maxWidth':
    case 'maxHeight':
    case 'left':
    case 'top':
    case 'bottom':
    case 'right':
    case 'fontSize':
    case 'outlineWidth':
    case 'outlineOffset':
    case 'paddingTop':
    case 'paddingLeft':
    case 'paddingBottom':
    case 'paddingRight':
    case 'marginTop':
    case 'marginLeft':
    case 'marginBottom':
    case 'marginRight':
    case 'borderRadius':
    case 'borderWidth':
    case 'borderTopWidth':
    case 'borderLeftWidth':
    case 'borderRightWidth':
    case 'borderBottomWidth':
    case 'textIndent':
      return true;
    default:
      return false;
  }
}
class HtmlTagDefinition {
  constructor({
    closedByChildren,
    implicitNamespacePrefix,
    contentType = TagContentType.PARSABLE_DATA,
    closedByParent = false,
    isVoid = false,
    ignoreFirstLf = false,
    preventNamespaceInheritance = false,
    canSelfClose = false
  } = {}) {
    this.closedByChildren = {};
    this.closedByParent = false;
    if (closedByChildren && closedByChildren.length > 0) {
      closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);
    }
    this.isVoid = isVoid;
    this.closedByParent = closedByParent || isVoid;
    this.implicitNamespacePrefix = implicitNamespacePrefix || null;
    this.contentType = contentType;
    this.ignoreFirstLf = ignoreFirstLf;
    this.preventNamespaceInheritance = preventNamespaceInheritance;
    this.canSelfClose = canSelfClose ?? isVoid;
  }
  isClosedByChild(name) {
    return this.isVoid || name.toLowerCase() in this.closedByChildren;
  }
  getContentType(prefix) {
    if (typeof this.contentType === 'object') {
      const overrideType = prefix === undefined ? undefined : this.contentType[prefix];
      return overrideType ?? this.contentType.default;
    }
    return this.contentType;
  }
}
let DEFAULT_TAG_DEFINITION;
// see https://www.w3.org/TR/html51/syntax.html#optional-tags
// This implementation does not fully conform to the HTML5 spec.
let TAG_DEFINITIONS;
function getHtmlTagDefinition(tagName) {
  if (!TAG_DEFINITIONS) {
    DEFAULT_TAG_DEFINITION = new HtmlTagDefinition({
      canSelfClose: true
    });
    TAG_DEFINITIONS = {
      'base': new HtmlTagDefinition({
        isVoid: true
      }),
      'meta': new HtmlTagDefinition({
        isVoid: true
      }),
      'area': new HtmlTagDefinition({
        isVoid: true
      }),
      'embed': new HtmlTagDefinition({
        isVoid: true
      }),
      'link': new HtmlTagDefinition({
        isVoid: true
      }),
      'img': new HtmlTagDefinition({
        isVoid: true
      }),
      'input': new HtmlTagDefinition({
        isVoid: true
      }),
      'param': new HtmlTagDefinition({
        isVoid: true
      }),
      'hr': new HtmlTagDefinition({
        isVoid: true
      }),
      'br': new HtmlTagDefinition({
        isVoid: true
      }),
      'source': new HtmlTagDefinition({
        isVoid: true
      }),
      'track': new HtmlTagDefinition({
        isVoid: true
      }),
      'wbr': new HtmlTagDefinition({
        isVoid: true
      }),
      'p': new HtmlTagDefinition({
        closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
        closedByParent: true
      }),
      'thead': new HtmlTagDefinition({
        closedByChildren: ['tbody', 'tfoot']
      }),
      'tbody': new HtmlTagDefinition({
        closedByChildren: ['tbody', 'tfoot'],
        closedByParent: true
      }),
      'tfoot': new HtmlTagDefinition({
        closedByChildren: ['tbody'],
        closedByParent: true
      }),
      'tr': new HtmlTagDefinition({
        closedByChildren: ['tr'],
        closedByParent: true
      }),
      'td': new HtmlTagDefinition({
        closedByChildren: ['td', 'th'],
        closedByParent: true
      }),
      'th': new HtmlTagDefinition({
        closedByChildren: ['td', 'th'],
        closedByParent: true
      }),
      'col': new HtmlTagDefinition({
        isVoid: true
      }),
      'svg': new HtmlTagDefinition({
        implicitNamespacePrefix: 'svg'
      }),
      'foreignObject': new HtmlTagDefinition({
        // Usually the implicit namespace here would be redundant since it will be inherited from
        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser
        // works is that the parent node of an end tag is its own start tag which means that
        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the
        // implicit namespace which is `html`, unless specified otherwise.
        implicitNamespacePrefix: 'svg',
        // We want to prevent children of foreignObject from inheriting its namespace, because
        // the point of the element is to allow nodes from other namespaces to be inserted.
        preventNamespaceInheritance: true
      }),
      'math': new HtmlTagDefinition({
        implicitNamespacePrefix: 'math'
      }),
      'li': new HtmlTagDefinition({
        closedByChildren: ['li'],
        closedByParent: true
      }),
      'dt': new HtmlTagDefinition({
        closedByChildren: ['dt', 'dd']
      }),
      'dd': new HtmlTagDefinition({
        closedByChildren: ['dt', 'dd'],
        closedByParent: true
      }),
      'rb': new HtmlTagDefinition({
        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
        closedByParent: true
      }),
      'rt': new HtmlTagDefinition({
        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
        closedByParent: true
      }),
      'rtc': new HtmlTagDefinition({
        closedByChildren: ['rb', 'rtc', 'rp'],
        closedByParent: true
      }),
      'rp': new HtmlTagDefinition({
        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
        closedByParent: true
      }),
      'optgroup': new HtmlTagDefinition({
        closedByChildren: ['optgroup'],
        closedByParent: true
      }),
      'option': new HtmlTagDefinition({
        closedByChildren: ['option', 'optgroup'],
        closedByParent: true
      }),
      'pre': new HtmlTagDefinition({
        ignoreFirstLf: true
      }),
      'listing': new HtmlTagDefinition({
        ignoreFirstLf: true
      }),
      'style': new HtmlTagDefinition({
        contentType: TagContentType.RAW_TEXT
      }),
      'script': new HtmlTagDefinition({
        contentType: TagContentType.RAW_TEXT
      }),
      'title': new HtmlTagDefinition({
        // The browser supports two separate `title` tags which have to use
        // a different content type: `HTMLTitleElement` and `SVGTitleElement`
        contentType: {
          default: TagContentType.ESCAPABLE_RAW_TEXT,
          svg: TagContentType.PARSABLE_DATA
        }
      }),
      'textarea': new HtmlTagDefinition({
        contentType: TagContentType.ESCAPABLE_RAW_TEXT,
        ignoreFirstLf: true
      })
    };
    new DomElementSchemaRegistry().allKnownElementNames().forEach(knownTagName => {
      if (!TAG_DEFINITIONS.hasOwnProperty(knownTagName) && getNsPrefix(knownTagName) === null) {
        TAG_DEFINITIONS[knownTagName] = new HtmlTagDefinition({
          canSelfClose: false
        });
      }
    });
  }
  // We have to make both a case-sensitive and a case-insensitive lookup, because
  // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.
  return TAG_DEFINITIONS[tagName] ?? TAG_DEFINITIONS[tagName.toLowerCase()] ?? DEFAULT_TAG_DEFINITION;
}

// Mapping between all HTML entity names and their unicode representation.
// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping
// the `&` and `;` from the keys and removing the duplicates.
// see https://www.w3.org/TR/html51/syntax.html#named-character-references
const NAMED_ENTITIES = {
  'AElig': '\u00C6',
  'AMP': '\u0026',
  'amp': '\u0026',
  'Aacute': '\u00C1',
  'Abreve': '\u0102',
  'Acirc': '\u00C2',
  'Acy': '\u0410',
  'Afr': '\uD835\uDD04',
  'Agrave': '\u00C0',
  'Alpha': '\u0391',
  'Amacr': '\u0100',
  'And': '\u2A53',
  'Aogon': '\u0104',
  'Aopf': '\uD835\uDD38',
  'ApplyFunction': '\u2061',
  'af': '\u2061',
  'Aring': '\u00C5',
  'angst': '\u00C5',
  'Ascr': '\uD835\uDC9C',
  'Assign': '\u2254',
  'colone': '\u2254',
  'coloneq': '\u2254',
  'Atilde': '\u00C3',
  'Auml': '\u00C4',
  'Backslash': '\u2216',
  'setminus': '\u2216',
  'setmn': '\u2216',
  'smallsetminus': '\u2216',
  'ssetmn': '\u2216',
  'Barv': '\u2AE7',
  'Barwed': '\u2306',
  'doublebarwedge': '\u2306',
  'Bcy': '\u0411',
  'Because': '\u2235',
  'becaus': '\u2235',
  'because': '\u2235',
  'Bernoullis': '\u212C',
  'Bscr': '\u212C',
  'bernou': '\u212C',
  'Beta': '\u0392',
  'Bfr': '\uD835\uDD05',
  'Bopf': '\uD835\uDD39',
  'Breve': '\u02D8',
  'breve': '\u02D8',
  'Bumpeq': '\u224E',
  'HumpDownHump': '\u224E',
  'bump': '\u224E',
  'CHcy': '\u0427',
  'COPY': '\u00A9',
  'copy': '\u00A9',
  'Cacute': '\u0106',
  'Cap': '\u22D2',
  'CapitalDifferentialD': '\u2145',
  'DD': '\u2145',
  'Cayleys': '\u212D',
  'Cfr': '\u212D',
  'Ccaron': '\u010C',
  'Ccedil': '\u00C7',
  'Ccirc': '\u0108',
  'Cconint': '\u2230',
  'Cdot': '\u010A',
  'Cedilla': '\u00B8',
  'cedil': '\u00B8',
  'CenterDot': '\u00B7',
  'centerdot': '\u00B7',
  'middot': '\u00B7',
  'Chi': '\u03A7',
  'CircleDot': '\u2299',
  'odot': '\u2299',
  'CircleMinus': '\u2296',
  'ominus': '\u2296',
  'CirclePlus': '\u2295',
  'oplus': '\u2295',
  'CircleTimes': '\u2297',
  'otimes': '\u2297',
  'ClockwiseContourIntegral': '\u2232',
  'cwconint': '\u2232',
  'CloseCurlyDoubleQuote': '\u201D',
  'rdquo': '\u201D',
  'rdquor': '\u201D',
  'CloseCurlyQuote': '\u2019',
  'rsquo': '\u2019',
  'rsquor': '\u2019',
  'Colon': '\u2237',
  'Proportion': '\u2237',
  'Colone': '\u2A74',
  'Congruent': '\u2261',
  'equiv': '\u2261',
  'Conint': '\u222F',
  'DoubleContourIntegral': '\u222F',
  'ContourIntegral': '\u222E',
  'conint': '\u222E',
  'oint': '\u222E',
  'Copf': '\u2102',
  'complexes': '\u2102',
  'Coproduct': '\u2210',
  'coprod': '\u2210',
  'CounterClockwiseContourIntegral': '\u2233',
  'awconint': '\u2233',
  'Cross': '\u2A2F',
  'Cscr': '\uD835\uDC9E',
  'Cup': '\u22D3',
  'CupCap': '\u224D',
  'asympeq': '\u224D',
  'DDotrahd': '\u2911',
  'DJcy': '\u0402',
  'DScy': '\u0405',
  'DZcy': '\u040F',
  'Dagger': '\u2021',
  'ddagger': '\u2021',
  'Darr': '\u21A1',
  'Dashv': '\u2AE4',
  'DoubleLeftTee': '\u2AE4',
  'Dcaron': '\u010E',
  'Dcy': '\u0414',
  'Del': '\u2207',
  'nabla': '\u2207',
  'Delta': '\u0394',
  'Dfr': '\uD835\uDD07',
  'DiacriticalAcute': '\u00B4',
  'acute': '\u00B4',
  'DiacriticalDot': '\u02D9',
  'dot': '\u02D9',
  'DiacriticalDoubleAcute': '\u02DD',
  'dblac': '\u02DD',
  'DiacriticalGrave': '\u0060',
  'grave': '\u0060',
  'DiacriticalTilde': '\u02DC',
  'tilde': '\u02DC',
  'Diamond': '\u22C4',
  'diam': '\u22C4',
  'diamond': '\u22C4',
  'DifferentialD': '\u2146',
  'dd': '\u2146',
  'Dopf': '\uD835\uDD3B',
  'Dot': '\u00A8',
  'DoubleDot': '\u00A8',
  'die': '\u00A8',
  'uml': '\u00A8',
  'DotDot': '\u20DC',
  'DotEqual': '\u2250',
  'doteq': '\u2250',
  'esdot': '\u2250',
  'DoubleDownArrow': '\u21D3',
  'Downarrow': '\u21D3',
  'dArr': '\u21D3',
  'DoubleLeftArrow': '\u21D0',
  'Leftarrow': '\u21D0',
  'lArr': '\u21D0',
  'DoubleLeftRightArrow': '\u21D4',
  'Leftrightarrow': '\u21D4',
  'hArr': '\u21D4',
  'iff': '\u21D4',
  'DoubleLongLeftArrow': '\u27F8',
  'Longleftarrow': '\u27F8',
  'xlArr': '\u27F8',
  'DoubleLongLeftRightArrow': '\u27FA',
  'Longleftrightarrow': '\u27FA',
  'xhArr': '\u27FA',
  'DoubleLongRightArrow': '\u27F9',
  'Longrightarrow': '\u27F9',
  'xrArr': '\u27F9',
  'DoubleRightArrow': '\u21D2',
  'Implies': '\u21D2',
  'Rightarrow': '\u21D2',
  'rArr': '\u21D2',
  'DoubleRightTee': '\u22A8',
  'vDash': '\u22A8',
  'DoubleUpArrow': '\u21D1',
  'Uparrow': '\u21D1',
  'uArr': '\u21D1',
  'DoubleUpDownArrow': '\u21D5',
  'Updownarrow': '\u21D5',
  'vArr': '\u21D5',
  'DoubleVerticalBar': '\u2225',
  'par': '\u2225',
  'parallel': '\u2225',
  'shortparallel': '\u2225',
  'spar': '\u2225',
  'DownArrow': '\u2193',
  'ShortDownArrow': '\u2193',
  'darr': '\u2193',
  'downarrow': '\u2193',
  'DownArrowBar': '\u2913',
  'DownArrowUpArrow': '\u21F5',
  'duarr': '\u21F5',
  'DownBreve': '\u0311',
  'DownLeftRightVector': '\u2950',
  'DownLeftTeeVector': '\u295E',
  'DownLeftVector': '\u21BD',
  'leftharpoondown': '\u21BD',
  'lhard': '\u21BD',
  'DownLeftVectorBar': '\u2956',
  'DownRightTeeVector': '\u295F',
  'DownRightVector': '\u21C1',
  'rhard': '\u21C1',
  'rightharpoondown': '\u21C1',
  'DownRightVectorBar': '\u2957',
  'DownTee': '\u22A4',
  'top': '\u22A4',
  'DownTeeArrow': '\u21A7',
  'mapstodown': '\u21A7',
  'Dscr': '\uD835\uDC9F',
  'Dstrok': '\u0110',
  'ENG': '\u014A',
  'ETH': '\u00D0',
  'Eacute': '\u00C9',
  'Ecaron': '\u011A',
  'Ecirc': '\u00CA',
  'Ecy': '\u042D',
  'Edot': '\u0116',
  'Efr': '\uD835\uDD08',
  'Egrave': '\u00C8',
  'Element': '\u2208',
  'in': '\u2208',
  'isin': '\u2208',
  'isinv': '\u2208',
  'Emacr': '\u0112',
  'EmptySmallSquare': '\u25FB',
  'EmptyVerySmallSquare': '\u25AB',
  'Eogon': '\u0118',
  'Eopf': '\uD835\uDD3C',
  'Epsilon': '\u0395',
  'Equal': '\u2A75',
  'EqualTilde': '\u2242',
  'eqsim': '\u2242',
  'esim': '\u2242',
  'Equilibrium': '\u21CC',
  'rightleftharpoons': '\u21CC',
  'rlhar': '\u21CC',
  'Escr': '\u2130',
  'expectation': '\u2130',
  'Esim': '\u2A73',
  'Eta': '\u0397',
  'Euml': '\u00CB',
  'Exists': '\u2203',
  'exist': '\u2203',
  'ExponentialE': '\u2147',
  'ee': '\u2147',
  'exponentiale': '\u2147',
  'Fcy': '\u0424',
  'Ffr': '\uD835\uDD09',
  'FilledSmallSquare': '\u25FC',
  'FilledVerySmallSquare': '\u25AA',
  'blacksquare': '\u25AA',
  'squarf': '\u25AA',
  'squf': '\u25AA',
  'Fopf': '\uD835\uDD3D',
  'ForAll': '\u2200',
  'forall': '\u2200',
  'Fouriertrf': '\u2131',
  'Fscr': '\u2131',
  'GJcy': '\u0403',
  'GT': '\u003E',
  'gt': '\u003E',
  'Gamma': '\u0393',
  'Gammad': '\u03DC',
  'Gbreve': '\u011E',
  'Gcedil': '\u0122',
  'Gcirc': '\u011C',
  'Gcy': '\u0413',
  'Gdot': '\u0120',
  'Gfr': '\uD835\uDD0A',
  'Gg': '\u22D9',
  'ggg': '\u22D9',
  'Gopf': '\uD835\uDD3E',
  'GreaterEqual': '\u2265',
  'ge': '\u2265',
  'geq': '\u2265',
  'GreaterEqualLess': '\u22DB',
  'gel': '\u22DB',
  'gtreqless': '\u22DB',
  'GreaterFullEqual': '\u2267',
  'gE': '\u2267',
  'geqq': '\u2267',
  'GreaterGreater': '\u2AA2',
  'GreaterLess': '\u2277',
  'gl': '\u2277',
  'gtrless': '\u2277',
  'GreaterSlantEqual': '\u2A7E',
  'geqslant': '\u2A7E',
  'ges': '\u2A7E',
  'GreaterTilde': '\u2273',
  'gsim': '\u2273',
  'gtrsim': '\u2273',
  'Gscr': '\uD835\uDCA2',
  'Gt': '\u226B',
  'NestedGreaterGreater': '\u226B',
  'gg': '\u226B',
  'HARDcy': '\u042A',
  'Hacek': '\u02C7',
  'caron': '\u02C7',
  'Hat': '\u005E',
  'Hcirc': '\u0124',
  'Hfr': '\u210C',
  'Poincareplane': '\u210C',
  'HilbertSpace': '\u210B',
  'Hscr': '\u210B',
  'hamilt': '\u210B',
  'Hopf': '\u210D',
  'quaternions': '\u210D',
  'HorizontalLine': '\u2500',
  'boxh': '\u2500',
  'Hstrok': '\u0126',
  'HumpEqual': '\u224F',
  'bumpe': '\u224F',
  'bumpeq': '\u224F',
  'IEcy': '\u0415',
  'IJlig': '\u0132',
  'IOcy': '\u0401',
  'Iacute': '\u00CD',
  'Icirc': '\u00CE',
  'Icy': '\u0418',
  'Idot': '\u0130',
  'Ifr': '\u2111',
  'Im': '\u2111',
  'image': '\u2111',
  'imagpart': '\u2111',
  'Igrave': '\u00CC',
  'Imacr': '\u012A',
  'ImaginaryI': '\u2148',
  'ii': '\u2148',
  'Int': '\u222C',
  'Integral': '\u222B',
  'int': '\u222B',
  'Intersection': '\u22C2',
  'bigcap': '\u22C2',
  'xcap': '\u22C2',
  'InvisibleComma': '\u2063',
  'ic': '\u2063',
  'InvisibleTimes': '\u2062',
  'it': '\u2062',
  'Iogon': '\u012E',
  'Iopf': '\uD835\uDD40',
  'Iota': '\u0399',
  'Iscr': '\u2110',
  'imagline': '\u2110',
  'Itilde': '\u0128',
  'Iukcy': '\u0406',
  'Iuml': '\u00CF',
  'Jcirc': '\u0134',
  'Jcy': '\u0419',
  'Jfr': '\uD835\uDD0D',
  'Jopf': '\uD835\uDD41',
  'Jscr': '\uD835\uDCA5',
  'Jsercy': '\u0408',
  'Jukcy': '\u0404',
  'KHcy': '\u0425',
  'KJcy': '\u040C',
  'Kappa': '\u039A',
  'Kcedil': '\u0136',
  'Kcy': '\u041A',
  'Kfr': '\uD835\uDD0E',
  'Kopf': '\uD835\uDD42',
  'Kscr': '\uD835\uDCA6',
  'LJcy': '\u0409',
  'LT': '\u003C',
  'lt': '\u003C',
  'Lacute': '\u0139',
  'Lambda': '\u039B',
  'Lang': '\u27EA',
  'Laplacetrf': '\u2112',
  'Lscr': '\u2112',
  'lagran': '\u2112',
  'Larr': '\u219E',
  'twoheadleftarrow': '\u219E',
  'Lcaron': '\u013D',
  'Lcedil': '\u013B',
  'Lcy': '\u041B',
  'LeftAngleBracket': '\u27E8',
  'lang': '\u27E8',
  'langle': '\u27E8',
  'LeftArrow': '\u2190',
  'ShortLeftArrow': '\u2190',
  'larr': '\u2190',
  'leftarrow': '\u2190',
  'slarr': '\u2190',
  'LeftArrowBar': '\u21E4',
  'larrb': '\u21E4',
  'LeftArrowRightArrow': '\u21C6',
  'leftrightarrows': '\u21C6',
  'lrarr': '\u21C6',
  'LeftCeiling': '\u2308',
  'lceil': '\u2308',
  'LeftDoubleBracket': '\u27E6',
  'lobrk': '\u27E6',
  'LeftDownTeeVector': '\u2961',
  'LeftDownVector': '\u21C3',
  'dharl': '\u21C3',
  'downharpoonleft': '\u21C3',
  'LeftDownVectorBar': '\u2959',
  'LeftFloor': '\u230A',
  'lfloor': '\u230A',
  'LeftRightArrow': '\u2194',
  'harr': '\u2194',
  'leftrightarrow': '\u2194',
  'LeftRightVector': '\u294E',
  'LeftTee': '\u22A3',
  'dashv': '\u22A3',
  'LeftTeeArrow': '\u21A4',
  'mapstoleft': '\u21A4',
  'LeftTeeVector': '\u295A',
  'LeftTriangle': '\u22B2',
  'vartriangleleft': '\u22B2',
  'vltri': '\u22B2',
  'LeftTriangleBar': '\u29CF',
  'LeftTriangleEqual': '\u22B4',
  'ltrie': '\u22B4',
  'trianglelefteq': '\u22B4',
  'LeftUpDownVector': '\u2951',
  'LeftUpTeeVector': '\u2960',
  'LeftUpVector': '\u21BF',
  'uharl': '\u21BF',
  'upharpoonleft': '\u21BF',
  'LeftUpVectorBar': '\u2958',
  'LeftVector': '\u21BC',
  'leftharpoonup': '\u21BC',
  'lharu': '\u21BC',
  'LeftVectorBar': '\u2952',
  'LessEqualGreater': '\u22DA',
  'leg': '\u22DA',
  'lesseqgtr': '\u22DA',
  'LessFullEqual': '\u2266',
  'lE': '\u2266',
  'leqq': '\u2266',
  'LessGreater': '\u2276',
  'lessgtr': '\u2276',
  'lg': '\u2276',
  'LessLess': '\u2AA1',
  'LessSlantEqual': '\u2A7D',
  'leqslant': '\u2A7D',
  'les': '\u2A7D',
  'LessTilde': '\u2272',
  'lesssim': '\u2272',
  'lsim': '\u2272',
  'Lfr': '\uD835\uDD0F',
  'Ll': '\u22D8',
  'Lleftarrow': '\u21DA',
  'lAarr': '\u21DA',
  'Lmidot': '\u013F',
  'LongLeftArrow': '\u27F5',
  'longleftarrow': '\u27F5',
  'xlarr': '\u27F5',
  'LongLeftRightArrow': '\u27F7',
  'longleftrightarrow': '\u27F7',
  'xharr': '\u27F7',
  'LongRightArrow': '\u27F6',
  'longrightarrow': '\u27F6',
  'xrarr': '\u27F6',
  'Lopf': '\uD835\uDD43',
  'LowerLeftArrow': '\u2199',
  'swarr': '\u2199',
  'swarrow': '\u2199',
  'LowerRightArrow': '\u2198',
  'searr': '\u2198',
  'searrow': '\u2198',
  'Lsh': '\u21B0',
  'lsh': '\u21B0',
  'Lstrok': '\u0141',
  'Lt': '\u226A',
  'NestedLessLess': '\u226A',
  'll': '\u226A',
  'Map': '\u2905',
  'Mcy': '\u041C',
  'MediumSpace': '\u205F',
  'Mellintrf': '\u2133',
  'Mscr': '\u2133',
  'phmmat': '\u2133',
  'Mfr': '\uD835\uDD10',
  'MinusPlus': '\u2213',
  'mnplus': '\u2213',
  'mp': '\u2213',
  'Mopf': '\uD835\uDD44',
  'Mu': '\u039C',
  'NJcy': '\u040A',
  'Nacute': '\u0143',
  'Ncaron': '\u0147',
  'Ncedil': '\u0145',
  'Ncy': '\u041D',
  'NegativeMediumSpace': '\u200B',
  'NegativeThickSpace': '\u200B',
  'NegativeThinSpace': '\u200B',
  'NegativeVeryThinSpace': '\u200B',
  'ZeroWidthSpace': '\u200B',
  'NewLine': '\u000A',
  'Nfr': '\uD835\uDD11',
  'NoBreak': '\u2060',
  'NonBreakingSpace': '\u00A0',
  'nbsp': '\u00A0',
  'Nopf': '\u2115',
  'naturals': '\u2115',
  'Not': '\u2AEC',
  'NotCongruent': '\u2262',
  'nequiv': '\u2262',
  'NotCupCap': '\u226D',
  'NotDoubleVerticalBar': '\u2226',
  'npar': '\u2226',
  'nparallel': '\u2226',
  'nshortparallel': '\u2226',
  'nspar': '\u2226',
  'NotElement': '\u2209',
  'notin': '\u2209',
  'notinva': '\u2209',
  'NotEqual': '\u2260',
  'ne': '\u2260',
  'NotEqualTilde': '\u2242\u0338',
  'nesim': '\u2242\u0338',
  'NotExists': '\u2204',
  'nexist': '\u2204',
  'nexists': '\u2204',
  'NotGreater': '\u226F',
  'ngt': '\u226F',
  'ngtr': '\u226F',
  'NotGreaterEqual': '\u2271',
  'nge': '\u2271',
  'ngeq': '\u2271',
  'NotGreaterFullEqual': '\u2267\u0338',
  'ngE': '\u2267\u0338',
  'ngeqq': '\u2267\u0338',
  'NotGreaterGreater': '\u226B\u0338',
  'nGtv': '\u226B\u0338',
  'NotGreaterLess': '\u2279',
  'ntgl': '\u2279',
  'NotGreaterSlantEqual': '\u2A7E\u0338',
  'ngeqslant': '\u2A7E\u0338',
  'nges': '\u2A7E\u0338',
  'NotGreaterTilde': '\u2275',
  'ngsim': '\u2275',
  'NotHumpDownHump': '\u224E\u0338',
  'nbump': '\u224E\u0338',
  'NotHumpEqual': '\u224F\u0338',
  'nbumpe': '\u224F\u0338',
  'NotLeftTriangle': '\u22EA',
  'nltri': '\u22EA',
  'ntriangleleft': '\u22EA',
  'NotLeftTriangleBar': '\u29CF\u0338',
  'NotLeftTriangleEqual': '\u22EC',
  'nltrie': '\u22EC',
  'ntrianglelefteq': '\u22EC',
  'NotLess': '\u226E',
  'nless': '\u226E',
  'nlt': '\u226E',
  'NotLessEqual': '\u2270',
  'nle': '\u2270',
  'nleq': '\u2270',
  'NotLessGreater': '\u2278',
  'ntlg': '\u2278',
  'NotLessLess': '\u226A\u0338',
  'nLtv': '\u226A\u0338',
  'NotLessSlantEqual': '\u2A7D\u0338',
  'nleqslant': '\u2A7D\u0338',
  'nles': '\u2A7D\u0338',
  'NotLessTilde': '\u2274',
  'nlsim': '\u2274',
  'NotNestedGreaterGreater': '\u2AA2\u0338',
  'NotNestedLessLess': '\u2AA1\u0338',
  'NotPrecedes': '\u2280',
  'npr': '\u2280',
  'nprec': '\u2280',
  'NotPrecedesEqual': '\u2AAF\u0338',
  'npre': '\u2AAF\u0338',
  'npreceq': '\u2AAF\u0338',
  'NotPrecedesSlantEqual': '\u22E0',
  'nprcue': '\u22E0',
  'NotReverseElement': '\u220C',
  'notni': '\u220C',
  'notniva': '\u220C',
  'NotRightTriangle': '\u22EB',
  'nrtri': '\u22EB',
  'ntriangleright': '\u22EB',
  'NotRightTriangleBar': '\u29D0\u0338',
  'NotRightTriangleEqual': '\u22ED',
  'nrtrie': '\u22ED',
  'ntrianglerighteq': '\u22ED',
  'NotSquareSubset': '\u228F\u0338',
  'NotSquareSubsetEqual': '\u22E2',
  'nsqsube': '\u22E2',
  'NotSquareSuperset': '\u2290\u0338',
  'NotSquareSupersetEqual': '\u22E3',
  'nsqsupe': '\u22E3',
  'NotSubset': '\u2282\u20D2',
  'nsubset': '\u2282\u20D2',
  'vnsub': '\u2282\u20D2',
  'NotSubsetEqual': '\u2288',
  'nsube': '\u2288',
  'nsubseteq': '\u2288',
  'NotSucceeds': '\u2281',
  'nsc': '\u2281',
  'nsucc': '\u2281',
  'NotSucceedsEqual': '\u2AB0\u0338',
  'nsce': '\u2AB0\u0338',
  'nsucceq': '\u2AB0\u0338',
  'NotSucceedsSlantEqual': '\u22E1',
  'nsccue': '\u22E1',
  'NotSucceedsTilde': '\u227F\u0338',
  'NotSuperset': '\u2283\u20D2',
  'nsupset': '\u2283\u20D2',
  'vnsup': '\u2283\u20D2',
  'NotSupersetEqual': '\u2289',
  'nsupe': '\u2289',
  'nsupseteq': '\u2289',
  'NotTilde': '\u2241',
  'nsim': '\u2241',
  'NotTildeEqual': '\u2244',
  'nsime': '\u2244',
  'nsimeq': '\u2244',
  'NotTildeFullEqual': '\u2247',
  'ncong': '\u2247',
  'NotTildeTilde': '\u2249',
  'nap': '\u2249',
  'napprox': '\u2249',
  'NotVerticalBar': '\u2224',
  'nmid': '\u2224',
  'nshortmid': '\u2224',
  'nsmid': '\u2224',
  'Nscr': '\uD835\uDCA9',
  'Ntilde': '\u00D1',
  'Nu': '\u039D',
  'OElig': '\u0152',
  'Oacute': '\u00D3',
  'Ocirc': '\u00D4',
  'Ocy': '\u041E',
  'Odblac': '\u0150',
  'Ofr': '\uD835\uDD12',
  'Ograve': '\u00D2',
  'Omacr': '\u014C',
  'Omega': '\u03A9',
  'ohm': '\u03A9',
  'Omicron': '\u039F',
  'Oopf': '\uD835\uDD46',
  'OpenCurlyDoubleQuote': '\u201C',
  'ldquo': '\u201C',
  'OpenCurlyQuote': '\u2018',
  'lsquo': '\u2018',
  'Or': '\u2A54',
  'Oscr': '\uD835\uDCAA',
  'Oslash': '\u00D8',
  'Otilde': '\u00D5',
  'Otimes': '\u2A37',
  'Ouml': '\u00D6',
  'OverBar': '\u203E',
  'oline': '\u203E',
  'OverBrace': '\u23DE',
  'OverBracket': '\u23B4',
  'tbrk': '\u23B4',
  'OverParenthesis': '\u23DC',
  'PartialD': '\u2202',
  'part': '\u2202',
  'Pcy': '\u041F',
  'Pfr': '\uD835\uDD13',
  'Phi': '\u03A6',
  'Pi': '\u03A0',
  'PlusMinus': '\u00B1',
  'plusmn': '\u00B1',
  'pm': '\u00B1',
  'Popf': '\u2119',
  'primes': '\u2119',
  'Pr': '\u2ABB',
  'Precedes': '\u227A',
  'pr': '\u227A',
  'prec': '\u227A',
  'PrecedesEqual': '\u2AAF',
  'pre': '\u2AAF',
  'preceq': '\u2AAF',
  'PrecedesSlantEqual': '\u227C',
  'prcue': '\u227C',
  'preccurlyeq': '\u227C',
  'PrecedesTilde': '\u227E',
  'precsim': '\u227E',
  'prsim': '\u227E',
  'Prime': '\u2033',
  'Product': '\u220F',
  'prod': '\u220F',
  'Proportional': '\u221D',
  'prop': '\u221D',
  'propto': '\u221D',
  'varpropto': '\u221D',
  'vprop': '\u221D',
  'Pscr': '\uD835\uDCAB',
  'Psi': '\u03A8',
  'QUOT': '\u0022',
  'quot': '\u0022',
  'Qfr': '\uD835\uDD14',
  'Qopf': '\u211A',
  'rationals': '\u211A',
  'Qscr': '\uD835\uDCAC',
  'RBarr': '\u2910',
  'drbkarow': '\u2910',
  'REG': '\u00AE',
  'circledR': '\u00AE',
  'reg': '\u00AE',
  'Racute': '\u0154',
  'Rang': '\u27EB',
  'Rarr': '\u21A0',
  'twoheadrightarrow': '\u21A0',
  'Rarrtl': '\u2916',
  'Rcaron': '\u0158',
  'Rcedil': '\u0156',
  'Rcy': '\u0420',
  'Re': '\u211C',
  'Rfr': '\u211C',
  'real': '\u211C',
  'realpart': '\u211C',
  'ReverseElement': '\u220B',
  'SuchThat': '\u220B',
  'ni': '\u220B',
  'niv': '\u220B',
  'ReverseEquilibrium': '\u21CB',
  'leftrightharpoons': '\u21CB',
  'lrhar': '\u21CB',
  'ReverseUpEquilibrium': '\u296F',
  'duhar': '\u296F',
  'Rho': '\u03A1',
  'RightAngleBracket': '\u27E9',
  'rang': '\u27E9',
  'rangle': '\u27E9',
  'RightArrow': '\u2192',
  'ShortRightArrow': '\u2192',
  'rarr': '\u2192',
  'rightarrow': '\u2192',
  'srarr': '\u2192',
  'RightArrowBar': '\u21E5',
  'rarrb': '\u21E5',
  'RightArrowLeftArrow': '\u21C4',
  'rightleftarrows': '\u21C4',
  'rlarr': '\u21C4',
  'RightCeiling': '\u2309',
  'rceil': '\u2309',
  'RightDoubleBracket': '\u27E7',
  'robrk': '\u27E7',
  'RightDownTeeVector': '\u295D',
  'RightDownVector': '\u21C2',
  'dharr': '\u21C2',
  'downharpoonright': '\u21C2',
  'RightDownVectorBar': '\u2955',
  'RightFloor': '\u230B',
  'rfloor': '\u230B',
  'RightTee': '\u22A2',
  'vdash': '\u22A2',
  'RightTeeArrow': '\u21A6',
  'map': '\u21A6',
  'mapsto': '\u21A6',
  'RightTeeVector': '\u295B',
  'RightTriangle': '\u22B3',
  'vartriangleright': '\u22B3',
  'vrtri': '\u22B3',
  'RightTriangleBar': '\u29D0',
  'RightTriangleEqual': '\u22B5',
  'rtrie': '\u22B5',
  'trianglerighteq': '\u22B5',
  'RightUpDownVector': '\u294F',
  'RightUpTeeVector': '\u295C',
  'RightUpVector': '\u21BE',
  'uharr': '\u21BE',
  'upharpoonright': '\u21BE',
  'RightUpVectorBar': '\u2954',
  'RightVector': '\u21C0',
  'rharu': '\u21C0',
  'rightharpoonup': '\u21C0',
  'RightVectorBar': '\u2953',
  'Ropf': '\u211D',
  'reals': '\u211D',
  'RoundImplies': '\u2970',
  'Rrightarrow': '\u21DB',
  'rAarr': '\u21DB',
  'Rscr': '\u211B',
  'realine': '\u211B',
  'Rsh': '\u21B1',
  'rsh': '\u21B1',
  'RuleDelayed': '\u29F4',
  'SHCHcy': '\u0429',
  'SHcy': '\u0428',
  'SOFTcy': '\u042C',
  'Sacute': '\u015A',
  'Sc': '\u2ABC',
  'Scaron': '\u0160',
  'Scedil': '\u015E',
  'Scirc': '\u015C',
  'Scy': '\u0421',
  'Sfr': '\uD835\uDD16',
  'ShortUpArrow': '\u2191',
  'UpArrow': '\u2191',
  'uarr': '\u2191',
  'uparrow': '\u2191',
  'Sigma': '\u03A3',
  'SmallCircle': '\u2218',
  'compfn': '\u2218',
  'Sopf': '\uD835\uDD4A',
  'Sqrt': '\u221A',
  'radic': '\u221A',
  'Square': '\u25A1',
  'squ': '\u25A1',
  'square': '\u25A1',
  'SquareIntersection': '\u2293',
  'sqcap': '\u2293',
  'SquareSubset': '\u228F',
  'sqsub': '\u228F',
  'sqsubset': '\u228F',
  'SquareSubsetEqual': '\u2291',
  'sqsube': '\u2291',
  'sqsubseteq': '\u2291',
  'SquareSuperset': '\u2290',
  'sqsup': '\u2290',
  'sqsupset': '\u2290',
  'SquareSupersetEqual': '\u2292',
  'sqsupe': '\u2292',
  'sqsupseteq': '\u2292',
  'SquareUnion': '\u2294',
  'sqcup': '\u2294',
  'Sscr': '\uD835\uDCAE',
  'Star': '\u22C6',
  'sstarf': '\u22C6',
  'Sub': '\u22D0',
  'Subset': '\u22D0',
  'SubsetEqual': '\u2286',
  'sube': '\u2286',
  'subseteq': '\u2286',
  'Succeeds': '\u227B',
  'sc': '\u227B',
  'succ': '\u227B',
  'SucceedsEqual': '\u2AB0',
  'sce': '\u2AB0',
  'succeq': '\u2AB0',
  'SucceedsSlantEqual': '\u227D',
  'sccue': '\u227D',
  'succcurlyeq': '\u227D',
  'SucceedsTilde': '\u227F',
  'scsim': '\u227F',
  'succsim': '\u227F',
  'Sum': '\u2211',
  'sum': '\u2211',
  'Sup': '\u22D1',
  'Supset': '\u22D1',
  'Superset': '\u2283',
  'sup': '\u2283',
  'supset': '\u2283',
  'SupersetEqual': '\u2287',
  'supe': '\u2287',
  'supseteq': '\u2287',
  'THORN': '\u00DE',
  'TRADE': '\u2122',
  'trade': '\u2122',
  'TSHcy': '\u040B',
  'TScy': '\u0426',
  'Tab': '\u0009',
  'Tau': '\u03A4',
  'Tcaron': '\u0164',
  'Tcedil': '\u0162',
  'Tcy': '\u0422',
  'Tfr': '\uD835\uDD17',
  'Therefore': '\u2234',
  'there4': '\u2234',
  'therefore': '\u2234',
  'Theta': '\u0398',
  'ThickSpace': '\u205F\u200A',
  'ThinSpace': '\u2009',
  'thinsp': '\u2009',
  'Tilde': '\u223C',
  'sim': '\u223C',
  'thicksim': '\u223C',
  'thksim': '\u223C',
  'TildeEqual': '\u2243',
  'sime': '\u2243',
  'simeq': '\u2243',
  'TildeFullEqual': '\u2245',
  'cong': '\u2245',
  'TildeTilde': '\u2248',
  'ap': '\u2248',
  'approx': '\u2248',
  'asymp': '\u2248',
  'thickapprox': '\u2248',
  'thkap': '\u2248',
  'Topf': '\uD835\uDD4B',
  'TripleDot': '\u20DB',
  'tdot': '\u20DB',
  'Tscr': '\uD835\uDCAF',
  'Tstrok': '\u0166',
  'Uacute': '\u00DA',
  'Uarr': '\u219F',
  'Uarrocir': '\u2949',
  'Ubrcy': '\u040E',
  'Ubreve': '\u016C',
  'Ucirc': '\u00DB',
  'Ucy': '\u0423',
  'Udblac': '\u0170',
  'Ufr': '\uD835\uDD18',
  'Ugrave': '\u00D9',
  'Umacr': '\u016A',
  'UnderBar': '\u005F',
  'lowbar': '\u005F',
  'UnderBrace': '\u23DF',
  'UnderBracket': '\u23B5',
  'bbrk': '\u23B5',
  'UnderParenthesis': '\u23DD',
  'Union': '\u22C3',
  'bigcup': '\u22C3',
  'xcup': '\u22C3',
  'UnionPlus': '\u228E',
  'uplus': '\u228E',
  'Uogon': '\u0172',
  'Uopf': '\uD835\uDD4C',
  'UpArrowBar': '\u2912',
  'UpArrowDownArrow': '\u21C5',
  'udarr': '\u21C5',
  'UpDownArrow': '\u2195',
  'updownarrow': '\u2195',
  'varr': '\u2195',
  'UpEquilibrium': '\u296E',
  'udhar': '\u296E',
  'UpTee': '\u22A5',
  'bot': '\u22A5',
  'bottom': '\u22A5',
  'perp': '\u22A5',
  'UpTeeArrow': '\u21A5',
  'mapstoup': '\u21A5',
  'UpperLeftArrow': '\u2196',
  'nwarr': '\u2196',
  'nwarrow': '\u2196',
  'UpperRightArrow': '\u2197',
  'nearr': '\u2197',
  'nearrow': '\u2197',
  'Upsi': '\u03D2',
  'upsih': '\u03D2',
  'Upsilon': '\u03A5',
  'Uring': '\u016E',
  'Uscr': '\uD835\uDCB0',
  'Utilde': '\u0168',
  'Uuml': '\u00DC',
  'VDash': '\u22AB',
  'Vbar': '\u2AEB',
  'Vcy': '\u0412',
  'Vdash': '\u22A9',
  'Vdashl': '\u2AE6',
  'Vee': '\u22C1',
  'bigvee': '\u22C1',
  'xvee': '\u22C1',
  'Verbar': '\u2016',
  'Vert': '\u2016',
  'VerticalBar': '\u2223',
  'mid': '\u2223',
  'shortmid': '\u2223',
  'smid': '\u2223',
  'VerticalLine': '\u007C',
  'verbar': '\u007C',
  'vert': '\u007C',
  'VerticalSeparator': '\u2758',
  'VerticalTilde': '\u2240',
  'wr': '\u2240',
  'wreath': '\u2240',
  'VeryThinSpace': '\u200A',
  'hairsp': '\u200A',
  'Vfr': '\uD835\uDD19',
  'Vopf': '\uD835\uDD4D',
  'Vscr': '\uD835\uDCB1',
  'Vvdash': '\u22AA',
  'Wcirc': '\u0174',
  'Wedge': '\u22C0',
  'bigwedge': '\u22C0',
  'xwedge': '\u22C0',
  'Wfr': '\uD835\uDD1A',
  'Wopf': '\uD835\uDD4E',
  'Wscr': '\uD835\uDCB2',
  'Xfr': '\uD835\uDD1B',
  'Xi': '\u039E',
  'Xopf': '\uD835\uDD4F',
  'Xscr': '\uD835\uDCB3',
  'YAcy': '\u042F',
  'YIcy': '\u0407',
  'YUcy': '\u042E',
  'Yacute': '\u00DD',
  'Ycirc': '\u0176',
  'Ycy': '\u042B',
  'Yfr': '\uD835\uDD1C',
  'Yopf': '\uD835\uDD50',
  'Yscr': '\uD835\uDCB4',
  'Yuml': '\u0178',
  'ZHcy': '\u0416',
  'Zacute': '\u0179',
  'Zcaron': '\u017D',
  'Zcy': '\u0417',
  'Zdot': '\u017B',
  'Zeta': '\u0396',
  'Zfr': '\u2128',
  'zeetrf': '\u2128',
  'Zopf': '\u2124',
  'integers': '\u2124',
  'Zscr': '\uD835\uDCB5',
  'aacute': '\u00E1',
  'abreve': '\u0103',
  'ac': '\u223E',
  'mstpos': '\u223E',
  'acE': '\u223E\u0333',
  'acd': '\u223F',
  'acirc': '\u00E2',
  'acy': '\u0430',
  'aelig': '\u00E6',
  'afr': '\uD835\uDD1E',
  'agrave': '\u00E0',
  'alefsym': '\u2135',
  'aleph': '\u2135',
  'alpha': '\u03B1',
  'amacr': '\u0101',
  'amalg': '\u2A3F',
  'and': '\u2227',
  'wedge': '\u2227',
  'andand': '\u2A55',
  'andd': '\u2A5C',
  'andslope': '\u2A58',
  'andv': '\u2A5A',
  'ang': '\u2220',
  'angle': '\u2220',
  'ange': '\u29A4',
  'angmsd': '\u2221',
  'measuredangle': '\u2221',
  'angmsdaa': '\u29A8',
  'angmsdab': '\u29A9',
  'angmsdac': '\u29AA',
  'angmsdad': '\u29AB',
  'angmsdae': '\u29AC',
  'angmsdaf': '\u29AD',
  'angmsdag': '\u29AE',
  'angmsdah': '\u29AF',
  'angrt': '\u221F',
  'angrtvb': '\u22BE',
  'angrtvbd': '\u299D',
  'angsph': '\u2222',
  'angzarr': '\u237C',
  'aogon': '\u0105',
  'aopf': '\uD835\uDD52',
  'apE': '\u2A70',
  'apacir': '\u2A6F',
  'ape': '\u224A',
  'approxeq': '\u224A',
  'apid': '\u224B',
  'apos': '\u0027',
  'aring': '\u00E5',
  'ascr': '\uD835\uDCB6',
  'ast': '\u002A',
  'midast': '\u002A',
  'atilde': '\u00E3',
  'auml': '\u00E4',
  'awint': '\u2A11',
  'bNot': '\u2AED',
  'backcong': '\u224C',
  'bcong': '\u224C',
  'backepsilon': '\u03F6',
  'bepsi': '\u03F6',
  'backprime': '\u2035',
  'bprime': '\u2035',
  'backsim': '\u223D',
  'bsim': '\u223D',
  'backsimeq': '\u22CD',
  'bsime': '\u22CD',
  'barvee': '\u22BD',
  'barwed': '\u2305',
  'barwedge': '\u2305',
  'bbrktbrk': '\u23B6',
  'bcy': '\u0431',
  'bdquo': '\u201E',
  'ldquor': '\u201E',
  'bemptyv': '\u29B0',
  'beta': '\u03B2',
  'beth': '\u2136',
  'between': '\u226C',
  'twixt': '\u226C',
  'bfr': '\uD835\uDD1F',
  'bigcirc': '\u25EF',
  'xcirc': '\u25EF',
  'bigodot': '\u2A00',
  'xodot': '\u2A00',
  'bigoplus': '\u2A01',
  'xoplus': '\u2A01',
  'bigotimes': '\u2A02',
  'xotime': '\u2A02',
  'bigsqcup': '\u2A06',
  'xsqcup': '\u2A06',
  'bigstar': '\u2605',
  'starf': '\u2605',
  'bigtriangledown': '\u25BD',
  'xdtri': '\u25BD',
  'bigtriangleup': '\u25B3',
  'xutri': '\u25B3',
  'biguplus': '\u2A04',
  'xuplus': '\u2A04',
  'bkarow': '\u290D',
  'rbarr': '\u290D',
  'blacklozenge': '\u29EB',
  'lozf': '\u29EB',
  'blacktriangle': '\u25B4',
  'utrif': '\u25B4',
  'blacktriangledown': '\u25BE',
  'dtrif': '\u25BE',
  'blacktriangleleft': '\u25C2',
  'ltrif': '\u25C2',
  'blacktriangleright': '\u25B8',
  'rtrif': '\u25B8',
  'blank': '\u2423',
  'blk12': '\u2592',
  'blk14': '\u2591',
  'blk34': '\u2593',
  'block': '\u2588',
  'bne': '\u003D\u20E5',
  'bnequiv': '\u2261\u20E5',
  'bnot': '\u2310',
  'bopf': '\uD835\uDD53',
  'bowtie': '\u22C8',
  'boxDL': '\u2557',
  'boxDR': '\u2554',
  'boxDl': '\u2556',
  'boxDr': '\u2553',
  'boxH': '\u2550',
  'boxHD': '\u2566',
  'boxHU': '\u2569',
  'boxHd': '\u2564',
  'boxHu': '\u2567',
  'boxUL': '\u255D',
  'boxUR': '\u255A',
  'boxUl': '\u255C',
  'boxUr': '\u2559',
  'boxV': '\u2551',
  'boxVH': '\u256C',
  'boxVL': '\u2563',
  'boxVR': '\u2560',
  'boxVh': '\u256B',
  'boxVl': '\u2562',
  'boxVr': '\u255F',
  'boxbox': '\u29C9',
  'boxdL': '\u2555',
  'boxdR': '\u2552',
  'boxdl': '\u2510',
  'boxdr': '\u250C',
  'boxhD': '\u2565',
  'boxhU': '\u2568',
  'boxhd': '\u252C',
  'boxhu': '\u2534',
  'boxminus': '\u229F',
  'minusb': '\u229F',
  'boxplus': '\u229E',
  'plusb': '\u229E',
  'boxtimes': '\u22A0',
  'timesb': '\u22A0',
  'boxuL': '\u255B',
  'boxuR': '\u2558',
  'boxul': '\u2518',
  'boxur': '\u2514',
  'boxv': '\u2502',
  'boxvH': '\u256A',
  'boxvL': '\u2561',
  'boxvR': '\u255E',
  'boxvh': '\u253C',
  'boxvl': '\u2524',
  'boxvr': '\u251C',
  'brvbar': '\u00A6',
  'bscr': '\uD835\uDCB7',
  'bsemi': '\u204F',
  'bsol': '\u005C',
  'bsolb': '\u29C5',
  'bsolhsub': '\u27C8',
  'bull': '\u2022',
  'bullet': '\u2022',
  'bumpE': '\u2AAE',
  'cacute': '\u0107',
  'cap': '\u2229',
  'capand': '\u2A44',
  'capbrcup': '\u2A49',
  'capcap': '\u2A4B',
  'capcup': '\u2A47',
  'capdot': '\u2A40',
  'caps': '\u2229\uFE00',
  'caret': '\u2041',
  'ccaps': '\u2A4D',
  'ccaron': '\u010D',
  'ccedil': '\u00E7',
  'ccirc': '\u0109',
  'ccups': '\u2A4C',
  'ccupssm': '\u2A50',
  'cdot': '\u010B',
  'cemptyv': '\u29B2',
  'cent': '\u00A2',
  'cfr': '\uD835\uDD20',
  'chcy': '\u0447',
  'check': '\u2713',
  'checkmark': '\u2713',
  'chi': '\u03C7',
  'cir': '\u25CB',
  'cirE': '\u29C3',
  'circ': '\u02C6',
  'circeq': '\u2257',
  'cire': '\u2257',
  'circlearrowleft': '\u21BA',
  'olarr': '\u21BA',
  'circlearrowright': '\u21BB',
  'orarr': '\u21BB',
  'circledS': '\u24C8',
  'oS': '\u24C8',
  'circledast': '\u229B',
  'oast': '\u229B',
  'circledcirc': '\u229A',
  'ocir': '\u229A',
  'circleddash': '\u229D',
  'odash': '\u229D',
  'cirfnint': '\u2A10',
  'cirmid': '\u2AEF',
  'cirscir': '\u29C2',
  'clubs': '\u2663',
  'clubsuit': '\u2663',
  'colon': '\u003A',
  'comma': '\u002C',
  'commat': '\u0040',
  'comp': '\u2201',
  'complement': '\u2201',
  'congdot': '\u2A6D',
  'copf': '\uD835\uDD54',
  'copysr': '\u2117',
  'crarr': '\u21B5',
  'cross': '\u2717',
  'cscr': '\uD835\uDCB8',
  'csub': '\u2ACF',
  'csube': '\u2AD1',
  'csup': '\u2AD0',
  'csupe': '\u2AD2',
  'ctdot': '\u22EF',
  'cudarrl': '\u2938',
  'cudarrr': '\u2935',
  'cuepr': '\u22DE',
  'curlyeqprec': '\u22DE',
  'cuesc': '\u22DF',
  'curlyeqsucc': '\u22DF',
  'cularr': '\u21B6',
  'curvearrowleft': '\u21B6',
  'cularrp': '\u293D',
  'cup': '\u222A',
  'cupbrcap': '\u2A48',
  'cupcap': '\u2A46',
  'cupcup': '\u2A4A',
  'cupdot': '\u228D',
  'cupor': '\u2A45',
  'cups': '\u222A\uFE00',
  'curarr': '\u21B7',
  'curvearrowright': '\u21B7',
  'curarrm': '\u293C',
  'curlyvee': '\u22CE',
  'cuvee': '\u22CE',
  'curlywedge': '\u22CF',
  'cuwed': '\u22CF',
  'curren': '\u00A4',
  'cwint': '\u2231',
  'cylcty': '\u232D',
  'dHar': '\u2965',
  'dagger': '\u2020',
  'daleth': '\u2138',
  'dash': '\u2010',
  'hyphen': '\u2010',
  'dbkarow': '\u290F',
  'rBarr': '\u290F',
  'dcaron': '\u010F',
  'dcy': '\u0434',
  'ddarr': '\u21CA',
  'downdownarrows': '\u21CA',
  'ddotseq': '\u2A77',
  'eDDot': '\u2A77',
  'deg': '\u00B0',
  'delta': '\u03B4',
  'demptyv': '\u29B1',
  'dfisht': '\u297F',
  'dfr': '\uD835\uDD21',
  'diamondsuit': '\u2666',
  'diams': '\u2666',
  'digamma': '\u03DD',
  'gammad': '\u03DD',
  'disin': '\u22F2',
  'div': '\u00F7',
  'divide': '\u00F7',
  'divideontimes': '\u22C7',
  'divonx': '\u22C7',
  'djcy': '\u0452',
  'dlcorn': '\u231E',
  'llcorner': '\u231E',
  'dlcrop': '\u230D',
  'dollar': '\u0024',
  'dopf': '\uD835\uDD55',
  'doteqdot': '\u2251',
  'eDot': '\u2251',
  'dotminus': '\u2238',
  'minusd': '\u2238',
  'dotplus': '\u2214',
  'plusdo': '\u2214',
  'dotsquare': '\u22A1',
  'sdotb': '\u22A1',
  'drcorn': '\u231F',
  'lrcorner': '\u231F',
  'drcrop': '\u230C',
  'dscr': '\uD835\uDCB9',
  'dscy': '\u0455',
  'dsol': '\u29F6',
  'dstrok': '\u0111',
  'dtdot': '\u22F1',
  'dtri': '\u25BF',
  'triangledown': '\u25BF',
  'dwangle': '\u29A6',
  'dzcy': '\u045F',
  'dzigrarr': '\u27FF',
  'eacute': '\u00E9',
  'easter': '\u2A6E',
  'ecaron': '\u011B',
  'ecir': '\u2256',
  'eqcirc': '\u2256',
  'ecirc': '\u00EA',
  'ecolon': '\u2255',
  'eqcolon': '\u2255',
  'ecy': '\u044D',
  'edot': '\u0117',
  'efDot': '\u2252',
  'fallingdotseq': '\u2252',
  'efr': '\uD835\uDD22',
  'eg': '\u2A9A',
  'egrave': '\u00E8',
  'egs': '\u2A96',
  'eqslantgtr': '\u2A96',
  'egsdot': '\u2A98',
  'el': '\u2A99',
  'elinters': '\u23E7',
  'ell': '\u2113',
  'els': '\u2A95',
  'eqslantless': '\u2A95',
  'elsdot': '\u2A97',
  'emacr': '\u0113',
  'empty': '\u2205',
  'emptyset': '\u2205',
  'emptyv': '\u2205',
  'varnothing': '\u2205',
  'emsp13': '\u2004',
  'emsp14': '\u2005',
  'emsp': '\u2003',
  'eng': '\u014B',
  'ensp': '\u2002',
  'eogon': '\u0119',
  'eopf': '\uD835\uDD56',
  'epar': '\u22D5',
  'eparsl': '\u29E3',
  'eplus': '\u2A71',
  'epsi': '\u03B5',
  'epsilon': '\u03B5',
  'epsiv': '\u03F5',
  'straightepsilon': '\u03F5',
  'varepsilon': '\u03F5',
  'equals': '\u003D',
  'equest': '\u225F',
  'questeq': '\u225F',
  'equivDD': '\u2A78',
  'eqvparsl': '\u29E5',
  'erDot': '\u2253',
  'risingdotseq': '\u2253',
  'erarr': '\u2971',
  'escr': '\u212F',
  'eta': '\u03B7',
  'eth': '\u00F0',
  'euml': '\u00EB',
  'euro': '\u20AC',
  'excl': '\u0021',
  'fcy': '\u0444',
  'female': '\u2640',
  'ffilig': '\uFB03',
  'fflig': '\uFB00',
  'ffllig': '\uFB04',
  'ffr': '\uD835\uDD23',
  'filig': '\uFB01',
  'fjlig': '\u0066\u006A',
  'flat': '\u266D',
  'fllig': '\uFB02',
  'fltns': '\u25B1',
  'fnof': '\u0192',
  'fopf': '\uD835\uDD57',
  'fork': '\u22D4',
  'pitchfork': '\u22D4',
  'forkv': '\u2AD9',
  'fpartint': '\u2A0D',
  'frac12': '\u00BD',
  'half': '\u00BD',
  'frac13': '\u2153',
  'frac14': '\u00BC',
  'frac15': '\u2155',
  'frac16': '\u2159',
  'frac18': '\u215B',
  'frac23': '\u2154',
  'frac25': '\u2156',
  'frac34': '\u00BE',
  'frac35': '\u2157',
  'frac38': '\u215C',
  'frac45': '\u2158',
  'frac56': '\u215A',
  'frac58': '\u215D',
  'frac78': '\u215E',
  'frasl': '\u2044',
  'frown': '\u2322',
  'sfrown': '\u2322',
  'fscr': '\uD835\uDCBB',
  'gEl': '\u2A8C',
  'gtreqqless': '\u2A8C',
  'gacute': '\u01F5',
  'gamma': '\u03B3',
  'gap': '\u2A86',
  'gtrapprox': '\u2A86',
  'gbreve': '\u011F',
  'gcirc': '\u011D',
  'gcy': '\u0433',
  'gdot': '\u0121',
  'gescc': '\u2AA9',
  'gesdot': '\u2A80',
  'gesdoto': '\u2A82',
  'gesdotol': '\u2A84',
  'gesl': '\u22DB\uFE00',
  'gesles': '\u2A94',
  'gfr': '\uD835\uDD24',
  'gimel': '\u2137',
  'gjcy': '\u0453',
  'glE': '\u2A92',
  'gla': '\u2AA5',
  'glj': '\u2AA4',
  'gnE': '\u2269',
  'gneqq': '\u2269',
  'gnap': '\u2A8A',
  'gnapprox': '\u2A8A',
  'gne': '\u2A88',
  'gneq': '\u2A88',
  'gnsim': '\u22E7',
  'gopf': '\uD835\uDD58',
  'gscr': '\u210A',
  'gsime': '\u2A8E',
  'gsiml': '\u2A90',
  'gtcc': '\u2AA7',
  'gtcir': '\u2A7A',
  'gtdot': '\u22D7',
  'gtrdot': '\u22D7',
  'gtlPar': '\u2995',
  'gtquest': '\u2A7C',
  'gtrarr': '\u2978',
  'gvertneqq': '\u2269\uFE00',
  'gvnE': '\u2269\uFE00',
  'hardcy': '\u044A',
  'harrcir': '\u2948',
  'harrw': '\u21AD',
  'leftrightsquigarrow': '\u21AD',
  'hbar': '\u210F',
  'hslash': '\u210F',
  'planck': '\u210F',
  'plankv': '\u210F',
  'hcirc': '\u0125',
  'hearts': '\u2665',
  'heartsuit': '\u2665',
  'hellip': '\u2026',
  'mldr': '\u2026',
  'hercon': '\u22B9',
  'hfr': '\uD835\uDD25',
  'hksearow': '\u2925',
  'searhk': '\u2925',
  'hkswarow': '\u2926',
  'swarhk': '\u2926',
  'hoarr': '\u21FF',
  'homtht': '\u223B',
  'hookleftarrow': '\u21A9',
  'larrhk': '\u21A9',
  'hookrightarrow': '\u21AA',
  'rarrhk': '\u21AA',
  'hopf': '\uD835\uDD59',
  'horbar': '\u2015',
  'hscr': '\uD835\uDCBD',
  'hstrok': '\u0127',
  'hybull': '\u2043',
  'iacute': '\u00ED',
  'icirc': '\u00EE',
  'icy': '\u0438',
  'iecy': '\u0435',
  'iexcl': '\u00A1',
  'ifr': '\uD835\uDD26',
  'igrave': '\u00EC',
  'iiiint': '\u2A0C',
  'qint': '\u2A0C',
  'iiint': '\u222D',
  'tint': '\u222D',
  'iinfin': '\u29DC',
  'iiota': '\u2129',
  'ijlig': '\u0133',
  'imacr': '\u012B',
  'imath': '\u0131',
  'inodot': '\u0131',
  'imof': '\u22B7',
  'imped': '\u01B5',
  'incare': '\u2105',
  'infin': '\u221E',
  'infintie': '\u29DD',
  'intcal': '\u22BA',
  'intercal': '\u22BA',
  'intlarhk': '\u2A17',
  'intprod': '\u2A3C',
  'iprod': '\u2A3C',
  'iocy': '\u0451',
  'iogon': '\u012F',
  'iopf': '\uD835\uDD5A',
  'iota': '\u03B9',
  'iquest': '\u00BF',
  'iscr': '\uD835\uDCBE',
  'isinE': '\u22F9',
  'isindot': '\u22F5',
  'isins': '\u22F4',
  'isinsv': '\u22F3',
  'itilde': '\u0129',
  'iukcy': '\u0456',
  'iuml': '\u00EF',
  'jcirc': '\u0135',
  'jcy': '\u0439',
  'jfr': '\uD835\uDD27',
  'jmath': '\u0237',
  'jopf': '\uD835\uDD5B',
  'jscr': '\uD835\uDCBF',
  'jsercy': '\u0458',
  'jukcy': '\u0454',
  'kappa': '\u03BA',
  'kappav': '\u03F0',
  'varkappa': '\u03F0',
  'kcedil': '\u0137',
  'kcy': '\u043A',
  'kfr': '\uD835\uDD28',
  'kgreen': '\u0138',
  'khcy': '\u0445',
  'kjcy': '\u045C',
  'kopf': '\uD835\uDD5C',
  'kscr': '\uD835\uDCC0',
  'lAtail': '\u291B',
  'lBarr': '\u290E',
  'lEg': '\u2A8B',
  'lesseqqgtr': '\u2A8B',
  'lHar': '\u2962',
  'lacute': '\u013A',
  'laemptyv': '\u29B4',
  'lambda': '\u03BB',
  'langd': '\u2991',
  'lap': '\u2A85',
  'lessapprox': '\u2A85',
  'laquo': '\u00AB',
  'larrbfs': '\u291F',
  'larrfs': '\u291D',
  'larrlp': '\u21AB',
  'looparrowleft': '\u21AB',
  'larrpl': '\u2939',
  'larrsim': '\u2973',
  'larrtl': '\u21A2',
  'leftarrowtail': '\u21A2',
  'lat': '\u2AAB',
  'latail': '\u2919',
  'late': '\u2AAD',
  'lates': '\u2AAD\uFE00',
  'lbarr': '\u290C',
  'lbbrk': '\u2772',
  'lbrace': '\u007B',
  'lcub': '\u007B',
  'lbrack': '\u005B',
  'lsqb': '\u005B',
  'lbrke': '\u298B',
  'lbrksld': '\u298F',
  'lbrkslu': '\u298D',
  'lcaron': '\u013E',
  'lcedil': '\u013C',
  'lcy': '\u043B',
  'ldca': '\u2936',
  'ldrdhar': '\u2967',
  'ldrushar': '\u294B',
  'ldsh': '\u21B2',
  'le': '\u2264',
  'leq': '\u2264',
  'leftleftarrows': '\u21C7',
  'llarr': '\u21C7',
  'leftthreetimes': '\u22CB',
  'lthree': '\u22CB',
  'lescc': '\u2AA8',
  'lesdot': '\u2A7F',
  'lesdoto': '\u2A81',
  'lesdotor': '\u2A83',
  'lesg': '\u22DA\uFE00',
  'lesges': '\u2A93',
  'lessdot': '\u22D6',
  'ltdot': '\u22D6',
  'lfisht': '\u297C',
  'lfr': '\uD835\uDD29',
  'lgE': '\u2A91',
  'lharul': '\u296A',
  'lhblk': '\u2584',
  'ljcy': '\u0459',
  'llhard': '\u296B',
  'lltri': '\u25FA',
  'lmidot': '\u0140',
  'lmoust': '\u23B0',
  'lmoustache': '\u23B0',
  'lnE': '\u2268',
  'lneqq': '\u2268',
  'lnap': '\u2A89',
  'lnapprox': '\u2A89',
  'lne': '\u2A87',
  'lneq': '\u2A87',
  'lnsim': '\u22E6',
  'loang': '\u27EC',
  'loarr': '\u21FD',
  'longmapsto': '\u27FC',
  'xmap': '\u27FC',
  'looparrowright': '\u21AC',
  'rarrlp': '\u21AC',
  'lopar': '\u2985',
  'lopf': '\uD835\uDD5D',
  'loplus': '\u2A2D',
  'lotimes': '\u2A34',
  'lowast': '\u2217',
  'loz': '\u25CA',
  'lozenge': '\u25CA',
  'lpar': '\u0028',
  'lparlt': '\u2993',
  'lrhard': '\u296D',
  'lrm': '\u200E',
  'lrtri': '\u22BF',
  'lsaquo': '\u2039',
  'lscr': '\uD835\uDCC1',
  'lsime': '\u2A8D',
  'lsimg': '\u2A8F',
  'lsquor': '\u201A',
  'sbquo': '\u201A',
  'lstrok': '\u0142',
  'ltcc': '\u2AA6',
  'ltcir': '\u2A79',
  'ltimes': '\u22C9',
  'ltlarr': '\u2976',
  'ltquest': '\u2A7B',
  'ltrPar': '\u2996',
  'ltri': '\u25C3',
  'triangleleft': '\u25C3',
  'lurdshar': '\u294A',
  'luruhar': '\u2966',
  'lvertneqq': '\u2268\uFE00',
  'lvnE': '\u2268\uFE00',
  'mDDot': '\u223A',
  'macr': '\u00AF',
  'strns': '\u00AF',
  'male': '\u2642',
  'malt': '\u2720',
  'maltese': '\u2720',
  'marker': '\u25AE',
  'mcomma': '\u2A29',
  'mcy': '\u043C',
  'mdash': '\u2014',
  'mfr': '\uD835\uDD2A',
  'mho': '\u2127',
  'micro': '\u00B5',
  'midcir': '\u2AF0',
  'minus': '\u2212',
  'minusdu': '\u2A2A',
  'mlcp': '\u2ADB',
  'models': '\u22A7',
  'mopf': '\uD835\uDD5E',
  'mscr': '\uD835\uDCC2',
  'mu': '\u03BC',
  'multimap': '\u22B8',
  'mumap': '\u22B8',
  'nGg': '\u22D9\u0338',
  'nGt': '\u226B\u20D2',
  'nLeftarrow': '\u21CD',
  'nlArr': '\u21CD',
  'nLeftrightarrow': '\u21CE',
  'nhArr': '\u21CE',
  'nLl': '\u22D8\u0338',
  'nLt': '\u226A\u20D2',
  'nRightarrow': '\u21CF',
  'nrArr': '\u21CF',
  'nVDash': '\u22AF',
  'nVdash': '\u22AE',
  'nacute': '\u0144',
  'nang': '\u2220\u20D2',
  'napE': '\u2A70\u0338',
  'napid': '\u224B\u0338',
  'napos': '\u0149',
  'natur': '\u266E',
  'natural': '\u266E',
  'ncap': '\u2A43',
  'ncaron': '\u0148',
  'ncedil': '\u0146',
  'ncongdot': '\u2A6D\u0338',
  'ncup': '\u2A42',
  'ncy': '\u043D',
  'ndash': '\u2013',
  'neArr': '\u21D7',
  'nearhk': '\u2924',
  'nedot': '\u2250\u0338',
  'nesear': '\u2928',
  'toea': '\u2928',
  'nfr': '\uD835\uDD2B',
  'nharr': '\u21AE',
  'nleftrightarrow': '\u21AE',
  'nhpar': '\u2AF2',
  'nis': '\u22FC',
  'nisd': '\u22FA',
  'njcy': '\u045A',
  'nlE': '\u2266\u0338',
  'nleqq': '\u2266\u0338',
  'nlarr': '\u219A',
  'nleftarrow': '\u219A',
  'nldr': '\u2025',
  'nopf': '\uD835\uDD5F',
  'not': '\u00AC',
  'notinE': '\u22F9\u0338',
  'notindot': '\u22F5\u0338',
  'notinvb': '\u22F7',
  'notinvc': '\u22F6',
  'notnivb': '\u22FE',
  'notnivc': '\u22FD',
  'nparsl': '\u2AFD\u20E5',
  'npart': '\u2202\u0338',
  'npolint': '\u2A14',
  'nrarr': '\u219B',
  'nrightarrow': '\u219B',
  'nrarrc': '\u2933\u0338',
  'nrarrw': '\u219D\u0338',
  'nscr': '\uD835\uDCC3',
  'nsub': '\u2284',
  'nsubE': '\u2AC5\u0338',
  'nsubseteqq': '\u2AC5\u0338',
  'nsup': '\u2285',
  'nsupE': '\u2AC6\u0338',
  'nsupseteqq': '\u2AC6\u0338',
  'ntilde': '\u00F1',
  'nu': '\u03BD',
  'num': '\u0023',
  'numero': '\u2116',
  'numsp': '\u2007',
  'nvDash': '\u22AD',
  'nvHarr': '\u2904',
  'nvap': '\u224D\u20D2',
  'nvdash': '\u22AC',
  'nvge': '\u2265\u20D2',
  'nvgt': '\u003E\u20D2',
  'nvinfin': '\u29DE',
  'nvlArr': '\u2902',
  'nvle': '\u2264\u20D2',
  'nvlt': '\u003C\u20D2',
  'nvltrie': '\u22B4\u20D2',
  'nvrArr': '\u2903',
  'nvrtrie': '\u22B5\u20D2',
  'nvsim': '\u223C\u20D2',
  'nwArr': '\u21D6',
  'nwarhk': '\u2923',
  'nwnear': '\u2927',
  'oacute': '\u00F3',
  'ocirc': '\u00F4',
  'ocy': '\u043E',
  'odblac': '\u0151',
  'odiv': '\u2A38',
  'odsold': '\u29BC',
  'oelig': '\u0153',
  'ofcir': '\u29BF',
  'ofr': '\uD835\uDD2C',
  'ogon': '\u02DB',
  'ograve': '\u00F2',
  'ogt': '\u29C1',
  'ohbar': '\u29B5',
  'olcir': '\u29BE',
  'olcross': '\u29BB',
  'olt': '\u29C0',
  'omacr': '\u014D',
  'omega': '\u03C9',
  'omicron': '\u03BF',
  'omid': '\u29B6',
  'oopf': '\uD835\uDD60',
  'opar': '\u29B7',
  'operp': '\u29B9',
  'or': '\u2228',
  'vee': '\u2228',
  'ord': '\u2A5D',
  'order': '\u2134',
  'orderof': '\u2134',
  'oscr': '\u2134',
  'ordf': '\u00AA',
  'ordm': '\u00BA',
  'origof': '\u22B6',
  'oror': '\u2A56',
  'orslope': '\u2A57',
  'orv': '\u2A5B',
  'oslash': '\u00F8',
  'osol': '\u2298',
  'otilde': '\u00F5',
  'otimesas': '\u2A36',
  'ouml': '\u00F6',
  'ovbar': '\u233D',
  'para': '\u00B6',
  'parsim': '\u2AF3',
  'parsl': '\u2AFD',
  'pcy': '\u043F',
  'percnt': '\u0025',
  'period': '\u002E',
  'permil': '\u2030',
  'pertenk': '\u2031',
  'pfr': '\uD835\uDD2D',
  'phi': '\u03C6',
  'phiv': '\u03D5',
  'straightphi': '\u03D5',
  'varphi': '\u03D5',
  'phone': '\u260E',
  'pi': '\u03C0',
  'piv': '\u03D6',
  'varpi': '\u03D6',
  'planckh': '\u210E',
  'plus': '\u002B',
  'plusacir': '\u2A23',
  'pluscir': '\u2A22',
  'plusdu': '\u2A25',
  'pluse': '\u2A72',
  'plussim': '\u2A26',
  'plustwo': '\u2A27',
  'pointint': '\u2A15',
  'popf': '\uD835\uDD61',
  'pound': '\u00A3',
  'prE': '\u2AB3',
  'prap': '\u2AB7',
  'precapprox': '\u2AB7',
  'precnapprox': '\u2AB9',
  'prnap': '\u2AB9',
  'precneqq': '\u2AB5',
  'prnE': '\u2AB5',
  'precnsim': '\u22E8',
  'prnsim': '\u22E8',
  'prime': '\u2032',
  'profalar': '\u232E',
  'profline': '\u2312',
  'profsurf': '\u2313',
  'prurel': '\u22B0',
  'pscr': '\uD835\uDCC5',
  'psi': '\u03C8',
  'puncsp': '\u2008',
  'qfr': '\uD835\uDD2E',
  'qopf': '\uD835\uDD62',
  'qprime': '\u2057',
  'qscr': '\uD835\uDCC6',
  'quatint': '\u2A16',
  'quest': '\u003F',
  'rAtail': '\u291C',
  'rHar': '\u2964',
  'race': '\u223D\u0331',
  'racute': '\u0155',
  'raemptyv': '\u29B3',
  'rangd': '\u2992',
  'range': '\u29A5',
  'raquo': '\u00BB',
  'rarrap': '\u2975',
  'rarrbfs': '\u2920',
  'rarrc': '\u2933',
  'rarrfs': '\u291E',
  'rarrpl': '\u2945',
  'rarrsim': '\u2974',
  'rarrtl': '\u21A3',
  'rightarrowtail': '\u21A3',
  'rarrw': '\u219D',
  'rightsquigarrow': '\u219D',
  'ratail': '\u291A',
  'ratio': '\u2236',
  'rbbrk': '\u2773',
  'rbrace': '\u007D',
  'rcub': '\u007D',
  'rbrack': '\u005D',
  'rsqb': '\u005D',
  'rbrke': '\u298C',
  'rbrksld': '\u298E',
  'rbrkslu': '\u2990',
  'rcaron': '\u0159',
  'rcedil': '\u0157',
  'rcy': '\u0440',
  'rdca': '\u2937',
  'rdldhar': '\u2969',
  'rdsh': '\u21B3',
  'rect': '\u25AD',
  'rfisht': '\u297D',
  'rfr': '\uD835\uDD2F',
  'rharul': '\u296C',
  'rho': '\u03C1',
  'rhov': '\u03F1',
  'varrho': '\u03F1',
  'rightrightarrows': '\u21C9',
  'rrarr': '\u21C9',
  'rightthreetimes': '\u22CC',
  'rthree': '\u22CC',
  'ring': '\u02DA',
  'rlm': '\u200F',
  'rmoust': '\u23B1',
  'rmoustache': '\u23B1',
  'rnmid': '\u2AEE',
  'roang': '\u27ED',
  'roarr': '\u21FE',
  'ropar': '\u2986',
  'ropf': '\uD835\uDD63',
  'roplus': '\u2A2E',
  'rotimes': '\u2A35',
  'rpar': '\u0029',
  'rpargt': '\u2994',
  'rppolint': '\u2A12',
  'rsaquo': '\u203A',
  'rscr': '\uD835\uDCC7',
  'rtimes': '\u22CA',
  'rtri': '\u25B9',
  'triangleright': '\u25B9',
  'rtriltri': '\u29CE',
  'ruluhar': '\u2968',
  'rx': '\u211E',
  'sacute': '\u015B',
  'scE': '\u2AB4',
  'scap': '\u2AB8',
  'succapprox': '\u2AB8',
  'scaron': '\u0161',
  'scedil': '\u015F',
  'scirc': '\u015D',
  'scnE': '\u2AB6',
  'succneqq': '\u2AB6',
  'scnap': '\u2ABA',
  'succnapprox': '\u2ABA',
  'scnsim': '\u22E9',
  'succnsim': '\u22E9',
  'scpolint': '\u2A13',
  'scy': '\u0441',
  'sdot': '\u22C5',
  'sdote': '\u2A66',
  'seArr': '\u21D8',
  'sect': '\u00A7',
  'semi': '\u003B',
  'seswar': '\u2929',
  'tosa': '\u2929',
  'sext': '\u2736',
  'sfr': '\uD835\uDD30',
  'sharp': '\u266F',
  'shchcy': '\u0449',
  'shcy': '\u0448',
  'shy': '\u00AD',
  'sigma': '\u03C3',
  'sigmaf': '\u03C2',
  'sigmav': '\u03C2',
  'varsigma': '\u03C2',
  'simdot': '\u2A6A',
  'simg': '\u2A9E',
  'simgE': '\u2AA0',
  'siml': '\u2A9D',
  'simlE': '\u2A9F',
  'simne': '\u2246',
  'simplus': '\u2A24',
  'simrarr': '\u2972',
  'smashp': '\u2A33',
  'smeparsl': '\u29E4',
  'smile': '\u2323',
  'ssmile': '\u2323',
  'smt': '\u2AAA',
  'smte': '\u2AAC',
  'smtes': '\u2AAC\uFE00',
  'softcy': '\u044C',
  'sol': '\u002F',
  'solb': '\u29C4',
  'solbar': '\u233F',
  'sopf': '\uD835\uDD64',
  'spades': '\u2660',
  'spadesuit': '\u2660',
  'sqcaps': '\u2293\uFE00',
  'sqcups': '\u2294\uFE00',
  'sscr': '\uD835\uDCC8',
  'star': '\u2606',
  'sub': '\u2282',
  'subset': '\u2282',
  'subE': '\u2AC5',
  'subseteqq': '\u2AC5',
  'subdot': '\u2ABD',
  'subedot': '\u2AC3',
  'submult': '\u2AC1',
  'subnE': '\u2ACB',
  'subsetneqq': '\u2ACB',
  'subne': '\u228A',
  'subsetneq': '\u228A',
  'subplus': '\u2ABF',
  'subrarr': '\u2979',
  'subsim': '\u2AC7',
  'subsub': '\u2AD5',
  'subsup': '\u2AD3',
  'sung': '\u266A',
  'sup1': '\u00B9',
  'sup2': '\u00B2',
  'sup3': '\u00B3',
  'supE': '\u2AC6',
  'supseteqq': '\u2AC6',
  'supdot': '\u2ABE',
  'supdsub': '\u2AD8',
  'supedot': '\u2AC4',
  'suphsol': '\u27C9',
  'suphsub': '\u2AD7',
  'suplarr': '\u297B',
  'supmult': '\u2AC2',
  'supnE': '\u2ACC',
  'supsetneqq': '\u2ACC',
  'supne': '\u228B',
  'supsetneq': '\u228B',
  'supplus': '\u2AC0',
  'supsim': '\u2AC8',
  'supsub': '\u2AD4',
  'supsup': '\u2AD6',
  'swArr': '\u21D9',
  'swnwar': '\u292A',
  'szlig': '\u00DF',
  'target': '\u2316',
  'tau': '\u03C4',
  'tcaron': '\u0165',
  'tcedil': '\u0163',
  'tcy': '\u0442',
  'telrec': '\u2315',
  'tfr': '\uD835\uDD31',
  'theta': '\u03B8',
  'thetasym': '\u03D1',
  'thetav': '\u03D1',
  'vartheta': '\u03D1',
  'thorn': '\u00FE',
  'times': '\u00D7',
  'timesbar': '\u2A31',
  'timesd': '\u2A30',
  'topbot': '\u2336',
  'topcir': '\u2AF1',
  'topf': '\uD835\uDD65',
  'topfork': '\u2ADA',
  'tprime': '\u2034',
  'triangle': '\u25B5',
  'utri': '\u25B5',
  'triangleq': '\u225C',
  'trie': '\u225C',
  'tridot': '\u25EC',
  'triminus': '\u2A3A',
  'triplus': '\u2A39',
  'trisb': '\u29CD',
  'tritime': '\u2A3B',
  'trpezium': '\u23E2',
  'tscr': '\uD835\uDCC9',
  'tscy': '\u0446',
  'tshcy': '\u045B',
  'tstrok': '\u0167',
  'uHar': '\u2963',
  'uacute': '\u00FA',
  'ubrcy': '\u045E',
  'ubreve': '\u016D',
  'ucirc': '\u00FB',
  'ucy': '\u0443',
  'udblac': '\u0171',
  'ufisht': '\u297E',
  'ufr': '\uD835\uDD32',
  'ugrave': '\u00F9',
  'uhblk': '\u2580',
  'ulcorn': '\u231C',
  'ulcorner': '\u231C',
  'ulcrop': '\u230F',
  'ultri': '\u25F8',
  'umacr': '\u016B',
  'uogon': '\u0173',
  'uopf': '\uD835\uDD66',
  'upsi': '\u03C5',
  'upsilon': '\u03C5',
  'upuparrows': '\u21C8',
  'uuarr': '\u21C8',
  'urcorn': '\u231D',
  'urcorner': '\u231D',
  'urcrop': '\u230E',
  'uring': '\u016F',
  'urtri': '\u25F9',
  'uscr': '\uD835\uDCCA',
  'utdot': '\u22F0',
  'utilde': '\u0169',
  'uuml': '\u00FC',
  'uwangle': '\u29A7',
  'vBar': '\u2AE8',
  'vBarv': '\u2AE9',
  'vangrt': '\u299C',
  'varsubsetneq': '\u228A\uFE00',
  'vsubne': '\u228A\uFE00',
  'varsubsetneqq': '\u2ACB\uFE00',
  'vsubnE': '\u2ACB\uFE00',
  'varsupsetneq': '\u228B\uFE00',
  'vsupne': '\u228B\uFE00',
  'varsupsetneqq': '\u2ACC\uFE00',
  'vsupnE': '\u2ACC\uFE00',
  'vcy': '\u0432',
  'veebar': '\u22BB',
  'veeeq': '\u225A',
  'vellip': '\u22EE',
  'vfr': '\uD835\uDD33',
  'vopf': '\uD835\uDD67',
  'vscr': '\uD835\uDCCB',
  'vzigzag': '\u299A',
  'wcirc': '\u0175',
  'wedbar': '\u2A5F',
  'wedgeq': '\u2259',
  'weierp': '\u2118',
  'wp': '\u2118',
  'wfr': '\uD835\uDD34',
  'wopf': '\uD835\uDD68',
  'wscr': '\uD835\uDCCC',
  'xfr': '\uD835\uDD35',
  'xi': '\u03BE',
  'xnis': '\u22FB',
  'xopf': '\uD835\uDD69',
  'xscr': '\uD835\uDCCD',
  'yacute': '\u00FD',
  'yacy': '\u044F',
  'ycirc': '\u0177',
  'ycy': '\u044B',
  'yen': '\u00A5',
  'yfr': '\uD835\uDD36',
  'yicy': '\u0457',
  'yopf': '\uD835\uDD6A',
  'yscr': '\uD835\uDCCE',
  'yucy': '\u044E',
  'yuml': '\u00FF',
  'zacute': '\u017A',
  'zcaron': '\u017E',
  'zcy': '\u0437',
  'zdot': '\u017C',
  'zeta': '\u03B6',
  'zfr': '\uD835\uDD37',
  'zhcy': '\u0436',
  'zigrarr': '\u21DD',
  'zopf': '\uD835\uDD6B',
  'zscr': '\uD835\uDCCF',
  'zwj': '\u200D',
  'zwnj': '\u200C'
};
// The &ngsp; pseudo-entity is denoting a space. see:
// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart
const NGSP_UNICODE = '\uE500';
NAMED_ENTITIES['ngsp'] = NGSP_UNICODE;
class TokenError extends ParseError {
  constructor(errorMsg, tokenType, span) {
    super(span, errorMsg);
    this.tokenType = tokenType;
  }
}
class TokenizeResult {
  constructor(tokens, errors, nonNormalizedIcuExpressions) {
    this.tokens = tokens;
    this.errors = errors;
    this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;
  }
}
function tokenize(source, url, getTagDefinition, options = {}) {
  const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);
  tokenizer.tokenize();
  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);
}
const _CR_OR_CRLF_REGEXP = /\r\n?/g;
function _unexpectedCharacterErrorMsg(charCode) {
  const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
  return `Unexpected character "${char}"`;
}
function _unknownEntityErrorMsg(entitySrc) {
  return `Unknown entity "${entitySrc}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
}
function _unparsableEntityErrorMsg(type, entityStr) {
  return `Unable to parse entity "${entityStr}" - ${type} character reference entities must end with ";"`;
}
var CharacterReferenceType;
(function (CharacterReferenceType) {
  CharacterReferenceType["HEX"] = "hexadecimal";
  CharacterReferenceType["DEC"] = "decimal";
})(CharacterReferenceType || (CharacterReferenceType = {}));
class _ControlFlowError {
  constructor(error) {
    this.error = error;
  }
}
// See https://www.w3.org/TR/html51/syntax.html#writing-html-documents
class _Tokenizer {
  /**
   * @param _file The html source file being tokenized.
   * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
   * @param options Configuration of the tokenization.
   */
  constructor(_file, _getTagDefinition, options) {
    this._getTagDefinition = _getTagDefinition;
    this._currentTokenStart = null;
    this._currentTokenType = null;
    this._expansionCaseStack = [];
    this._inInterpolation = false;
    this.tokens = [];
    this.errors = [];
    this.nonNormalizedIcuExpressions = [];
    this._tokenizeIcu = options.tokenizeExpansionForms || false;
    this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
    this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);
    const range = options.range || {
      endPos: _file.content.length,
      startPos: 0,
      startLine: 0,
      startCol: 0
    };
    this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);
    this._preserveLineEndings = options.preserveLineEndings || false;
    this._escapedString = options.escapedString || false;
    this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;
    try {
      this._cursor.init();
    } catch (e) {
      this.handleError(e);
    }
  }
  _processCarriageReturns(content) {
    if (this._preserveLineEndings) {
      return content;
    }
    // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream
    // In order to keep the original position in the source, we can not
    // pre-process it.
    // Instead CRs are processed right before instantiating the tokens.
    return content.replace(_CR_OR_CRLF_REGEXP, '\n');
  }
  tokenize() {
    while (this._cursor.peek() !== $EOF) {
      const start = this._cursor.clone();
      try {
        if (this._attemptCharCode($LT)) {
          if (this._attemptCharCode($BANG)) {
            if (this._attemptCharCode($LBRACKET)) {
              this._consumeCdata(start);
            } else if (this._attemptCharCode($MINUS)) {
              this._consumeComment(start);
            } else {
              this._consumeDocType(start);
            }
          } else if (this._attemptCharCode($SLASH)) {
            this._consumeTagClose(start);
          } else {
            this._consumeTagOpen(start);
          }
        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
          // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while
          // the premature end of an interpolation is given by the start of a new HTML element.
          this._consumeWithInterpolation(5 /* TokenType.TEXT */, 8 /* TokenType.INTERPOLATION */, () => this._isTextEnd(), () => this._isTagStart());
        }
      } catch (e) {
        this.handleError(e);
      }
    }
    this._beginToken(24 /* TokenType.EOF */);
    this._endToken([]);
  }
  /**
   * @returns whether an ICU token has been created
   * @internal
   */
  _tokenizeExpansionForm() {
    if (this.isExpansionFormStart()) {
      this._consumeExpansionFormStart();
      return true;
    }
    if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
      this._consumeExpansionCaseStart();
      return true;
    }
    if (this._cursor.peek() === $RBRACE) {
      if (this._isInExpansionCase()) {
        this._consumeExpansionCaseEnd();
        return true;
      }
      if (this._isInExpansionForm()) {
        this._consumeExpansionFormEnd();
        return true;
      }
    }
    return false;
  }
  _beginToken(type, start = this._cursor.clone()) {
    this._currentTokenStart = start;
    this._currentTokenType = type;
  }
  _endToken(parts, end) {
    if (this._currentTokenStart === null) {
      throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));
    }
    if (this._currentTokenType === null) {
      throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));
    }
    const token = {
      type: this._currentTokenType,
      parts,
      sourceSpan: (end ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)
    };
    this.tokens.push(token);
    this._currentTokenStart = null;
    this._currentTokenType = null;
    return token;
  }
  _createError(msg, span) {
    if (this._isInExpansionForm()) {
      msg += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`;
    }
    const error = new TokenError(msg, this._currentTokenType, span);
    this._currentTokenStart = null;
    this._currentTokenType = null;
    return new _ControlFlowError(error);
  }
  handleError(e) {
    if (e instanceof CursorError) {
      e = this._createError(e.msg, this._cursor.getSpan(e.cursor));
    }
    if (e instanceof _ControlFlowError) {
      this.errors.push(e.error);
    } else {
      throw e;
    }
  }
  _attemptCharCode(charCode) {
    if (this._cursor.peek() === charCode) {
      this._cursor.advance();
      return true;
    }
    return false;
  }
  _attemptCharCodeCaseInsensitive(charCode) {
    if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
      this._cursor.advance();
      return true;
    }
    return false;
  }
  _requireCharCode(charCode) {
    const location = this._cursor.clone();
    if (!this._attemptCharCode(charCode)) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
    }
  }
  _attemptStr(chars) {
    const len = chars.length;
    if (this._cursor.charsLeft() < len) {
      return false;
    }
    const initialPosition = this._cursor.clone();
    for (let i = 0; i < len; i++) {
      if (!this._attemptCharCode(chars.charCodeAt(i))) {
        // If attempting to parse the string fails, we want to reset the parser
        // to where it was before the attempt
        this._cursor = initialPosition;
        return false;
      }
    }
    return true;
  }
  _attemptStrCaseInsensitive(chars) {
    for (let i = 0; i < chars.length; i++) {
      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
        return false;
      }
    }
    return true;
  }
  _requireStr(chars) {
    const location = this._cursor.clone();
    if (!this._attemptStr(chars)) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
    }
  }
  _attemptCharCodeUntilFn(predicate) {
    while (!predicate(this._cursor.peek())) {
      this._cursor.advance();
    }
  }
  _requireCharCodeUntilFn(predicate, len) {
    const start = this._cursor.clone();
    this._attemptCharCodeUntilFn(predicate);
    if (this._cursor.diff(start) < len) {
      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
    }
  }
  _attemptUntilChar(char) {
    while (this._cursor.peek() !== char) {
      this._cursor.advance();
    }
  }
  _readChar() {
    // Don't rely upon reading directly from `_input` as the actual char value
    // may have been generated from an escape sequence.
    const char = String.fromCodePoint(this._cursor.peek());
    this._cursor.advance();
    return char;
  }
  _consumeEntity(textTokenType) {
    this._beginToken(9 /* TokenType.ENCODED_ENTITY */);
    const start = this._cursor.clone();
    this._cursor.advance();
    if (this._attemptCharCode($HASH)) {
      const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
      const codeStart = this._cursor.clone();
      this._attemptCharCodeUntilFn(isDigitEntityEnd);
      if (this._cursor.peek() != $SEMICOLON) {
        // Advance cursor to include the peeked character in the string provided to the error
        // message.
        this._cursor.advance();
        const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;
        throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());
      }
      const strNum = this._cursor.getChars(codeStart);
      this._cursor.advance();
      try {
        const charCode = parseInt(strNum, isHex ? 16 : 10);
        this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);
      } catch {
        throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
      }
    } else {
      const nameStart = this._cursor.clone();
      this._attemptCharCodeUntilFn(isNamedEntityEnd);
      if (this._cursor.peek() != $SEMICOLON) {
        // No semicolon was found so abort the encoded entity token that was in progress, and treat
        // this as a text token
        this._beginToken(textTokenType, start);
        this._cursor = nameStart;
        this._endToken(['&']);
      } else {
        const name = this._cursor.getChars(nameStart);
        this._cursor.advance();
        const char = NAMED_ENTITIES[name];
        if (!char) {
          throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));
        }
        this._endToken([char, `&${name};`]);
      }
    }
  }
  _consumeRawText(consumeEntities, endMarkerPredicate) {
    this._beginToken(consumeEntities ? 6 /* TokenType.ESCAPABLE_RAW_TEXT */ : 7 /* TokenType.RAW_TEXT */);
    const parts = [];
    while (true) {
      const tagCloseStart = this._cursor.clone();
      const foundEndMarker = endMarkerPredicate();
      this._cursor = tagCloseStart;
      if (foundEndMarker) {
        break;
      }
      if (consumeEntities && this._cursor.peek() === $AMPERSAND) {
        this._endToken([this._processCarriageReturns(parts.join(''))]);
        parts.length = 0;
        this._consumeEntity(6 /* TokenType.ESCAPABLE_RAW_TEXT */);
        this._beginToken(6 /* TokenType.ESCAPABLE_RAW_TEXT */);
      } else {
        parts.push(this._readChar());
      }
    }
    this._endToken([this._processCarriageReturns(parts.join(''))]);
  }
  _consumeComment(start) {
    this._beginToken(10 /* TokenType.COMMENT_START */, start);
    this._requireCharCode($MINUS);
    this._endToken([]);
    this._consumeRawText(false, () => this._attemptStr('-->'));
    this._beginToken(11 /* TokenType.COMMENT_END */);
    this._requireStr('-->');
    this._endToken([]);
  }
  _consumeCdata(start) {
    this._beginToken(12 /* TokenType.CDATA_START */, start);
    this._requireStr('CDATA[');
    this._endToken([]);
    this._consumeRawText(false, () => this._attemptStr(']]>'));
    this._beginToken(13 /* TokenType.CDATA_END */);
    this._requireStr(']]>');
    this._endToken([]);
  }
  _consumeDocType(start) {
    this._beginToken(18 /* TokenType.DOC_TYPE */, start);
    const contentStart = this._cursor.clone();
    this._attemptUntilChar($GT);
    const content = this._cursor.getChars(contentStart);
    this._cursor.advance();
    this._endToken([content]);
  }
  _consumePrefixAndName() {
    const nameOrPrefixStart = this._cursor.clone();
    let prefix = '';
    while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
      this._cursor.advance();
    }
    let nameStart;
    if (this._cursor.peek() === $COLON) {
      prefix = this._cursor.getChars(nameOrPrefixStart);
      this._cursor.advance();
      nameStart = this._cursor.clone();
    } else {
      nameStart = nameOrPrefixStart;
    }
    this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);
    const name = this._cursor.getChars(nameStart);
    return [prefix, name];
  }
  _consumeTagOpen(start) {
    let tagName;
    let prefix;
    let openTagToken;
    try {
      if (!isAsciiLetter(this._cursor.peek())) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
      }
      openTagToken = this._consumeTagOpenStart(start);
      prefix = openTagToken.parts[0];
      tagName = openTagToken.parts[1];
      this._attemptCharCodeUntilFn(isNotWhitespace);
      while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {
        this._consumeAttributeName();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        if (this._attemptCharCode($EQ)) {
          this._attemptCharCodeUntilFn(isNotWhitespace);
          this._consumeAttributeValue();
        }
        this._attemptCharCodeUntilFn(isNotWhitespace);
      }
      this._consumeTagOpenEnd();
    } catch (e) {
      if (e instanceof _ControlFlowError) {
        if (openTagToken) {
          // We errored before we could close the opening tag, so it is incomplete.
          openTagToken.type = 4 /* TokenType.INCOMPLETE_TAG_OPEN */;
        } else {
          // When the start tag is invalid, assume we want a "<" as text.
          // Back to back text tokens are merged at the end.
          this._beginToken(5 /* TokenType.TEXT */, start);
          this._endToken(['<']);
        }
        return;
      }
      throw e;
    }
    const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);
    if (contentTokenType === TagContentType.RAW_TEXT) {
      this._consumeRawTextWithTagClose(prefix, tagName, false);
    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
      this._consumeRawTextWithTagClose(prefix, tagName, true);
    }
  }
  _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {
    this._consumeRawText(consumeEntities, () => {
      if (!this._attemptCharCode($LT)) return false;
      if (!this._attemptCharCode($SLASH)) return false;
      this._attemptCharCodeUntilFn(isNotWhitespace);
      if (!this._attemptStrCaseInsensitive(tagName)) return false;
      this._attemptCharCodeUntilFn(isNotWhitespace);
      return this._attemptCharCode($GT);
    });
    this._beginToken(3 /* TokenType.TAG_CLOSE */);
    this._requireCharCodeUntilFn(code => code === $GT, 3);
    this._cursor.advance(); // Consume the `>`
    this._endToken([prefix, tagName]);
  }
  _consumeTagOpenStart(start) {
    this._beginToken(0 /* TokenType.TAG_OPEN_START */, start);
    const parts = this._consumePrefixAndName();
    return this._endToken(parts);
  }
  _consumeAttributeName() {
    const attrNameStart = this._cursor.peek();
    if (attrNameStart === $SQ || attrNameStart === $DQ) {
      throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
    }
    this._beginToken(14 /* TokenType.ATTR_NAME */);
    const prefixAndName = this._consumePrefixAndName();
    this._endToken(prefixAndName);
  }
  _consumeAttributeValue() {
    let value;
    if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
      const quoteChar = this._cursor.peek();
      this._consumeQuote(quoteChar);
      // In an attribute then end of the attribute value and the premature end to an interpolation
      // are both triggered by the `quoteChar`.
      const endPredicate = () => this._cursor.peek() === quoteChar;
      this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);
      this._consumeQuote(quoteChar);
    } else {
      const endPredicate = () => isNameEnd(this._cursor.peek());
      this._consumeWithInterpolation(16 /* TokenType.ATTR_VALUE_TEXT */, 17 /* TokenType.ATTR_VALUE_INTERPOLATION */, endPredicate, endPredicate);
    }
  }
  _consumeQuote(quoteChar) {
    this._beginToken(15 /* TokenType.ATTR_QUOTE */);
    this._requireCharCode(quoteChar);
    this._endToken([String.fromCodePoint(quoteChar)]);
  }
  _consumeTagOpenEnd() {
    const tokenType = this._attemptCharCode($SLASH) ? 2 /* TokenType.TAG_OPEN_END_VOID */ : 1 /* TokenType.TAG_OPEN_END */;
    this._beginToken(tokenType);
    this._requireCharCode($GT);
    this._endToken([]);
  }
  _consumeTagClose(start) {
    this._beginToken(3 /* TokenType.TAG_CLOSE */, start);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    const prefixAndName = this._consumePrefixAndName();
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._requireCharCode($GT);
    this._endToken(prefixAndName);
  }
  _consumeExpansionFormStart() {
    this._beginToken(19 /* TokenType.EXPANSION_FORM_START */);
    this._requireCharCode($LBRACE);
    this._endToken([]);
    this._expansionCaseStack.push(19 /* TokenType.EXPANSION_FORM_START */);
    this._beginToken(7 /* TokenType.RAW_TEXT */);
    const condition = this._readUntil($COMMA);
    const normalizedCondition = this._processCarriageReturns(condition);
    if (this._i18nNormalizeLineEndingsInICUs) {
      // We explicitly want to normalize line endings for this text.
      this._endToken([normalizedCondition]);
    } else {
      // We are not normalizing line endings.
      const conditionToken = this._endToken([condition]);
      if (normalizedCondition !== condition) {
        this.nonNormalizedIcuExpressions.push(conditionToken);
      }
    }
    this._requireCharCode($COMMA);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._beginToken(7 /* TokenType.RAW_TEXT */);
    const type = this._readUntil($COMMA);
    this._endToken([type]);
    this._requireCharCode($COMMA);
    this._attemptCharCodeUntilFn(isNotWhitespace);
  }
  _consumeExpansionCaseStart() {
    this._beginToken(20 /* TokenType.EXPANSION_CASE_VALUE */);
    const value = this._readUntil($LBRACE).trim();
    this._endToken([value]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._beginToken(21 /* TokenType.EXPANSION_CASE_EXP_START */);
    this._requireCharCode($LBRACE);
    this._endToken([]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._expansionCaseStack.push(21 /* TokenType.EXPANSION_CASE_EXP_START */);
  }

  _consumeExpansionCaseEnd() {
    this._beginToken(22 /* TokenType.EXPANSION_CASE_EXP_END */);
    this._requireCharCode($RBRACE);
    this._endToken([]);
    this._attemptCharCodeUntilFn(isNotWhitespace);
    this._expansionCaseStack.pop();
  }
  _consumeExpansionFormEnd() {
    this._beginToken(23 /* TokenType.EXPANSION_FORM_END */);
    this._requireCharCode($RBRACE);
    this._endToken([]);
    this._expansionCaseStack.pop();
  }
  /**
   * Consume a string that may contain interpolation expressions.
   *
   * The first token consumed will be of `tokenType` and then there will be alternating
   * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.
   *
   * If an interpolation token ends prematurely it will have no end marker in its `parts` array.
   *
   * @param textTokenType the kind of tokens to interleave around interpolation tokens.
   * @param interpolationTokenType the kind of tokens that contain interpolation.
   * @param endPredicate a function that should return true when we should stop consuming.
   * @param endInterpolation a function that should return true if there is a premature end to an
   *     interpolation expression - i.e. before we get to the normal interpolation closing marker.
   */
  _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {
    this._beginToken(textTokenType);
    const parts = [];
    while (!endPredicate()) {
      const current = this._cursor.clone();
      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
        this._endToken([this._processCarriageReturns(parts.join(''))], current);
        parts.length = 0;
        this._consumeInterpolation(interpolationTokenType, current, endInterpolation);
        this._beginToken(textTokenType);
      } else if (this._cursor.peek() === $AMPERSAND) {
        this._endToken([this._processCarriageReturns(parts.join(''))]);
        parts.length = 0;
        this._consumeEntity(textTokenType);
        this._beginToken(textTokenType);
      } else {
        parts.push(this._readChar());
      }
    }
    // It is possible that an interpolation was started but not ended inside this text token.
    // Make sure that we reset the state of the lexer correctly.
    this._inInterpolation = false;
    this._endToken([this._processCarriageReturns(parts.join(''))]);
  }
  /**
   * Consume a block of text that has been interpreted as an Angular interpolation.
   *
   * @param interpolationTokenType the type of the interpolation token to generate.
   * @param interpolationStart a cursor that points to the start of this interpolation.
   * @param prematureEndPredicate a function that should return true if the next characters indicate
   *     an end to the interpolation before its normal closing marker.
   */
  _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {
    const parts = [];
    this._beginToken(interpolationTokenType, interpolationStart);
    parts.push(this._interpolationConfig.start);
    // Find the end of the interpolation, ignoring content inside quotes.
    const expressionStart = this._cursor.clone();
    let inQuote = null;
    let inComment = false;
    while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {
      const current = this._cursor.clone();
      if (this._isTagStart()) {
        // We are starting what looks like an HTML element in the middle of this interpolation.
        // Reset the cursor to before the `<` character and end the interpolation token.
        // (This is actually wrong but here for backward compatibility).
        this._cursor = current;
        parts.push(this._getProcessedChars(expressionStart, current));
        this._endToken(parts);
        return;
      }
      if (inQuote === null) {
        if (this._attemptStr(this._interpolationConfig.end)) {
          // We are not in a string, and we hit the end interpolation marker
          parts.push(this._getProcessedChars(expressionStart, current));
          parts.push(this._interpolationConfig.end);
          this._endToken(parts);
          return;
        } else if (this._attemptStr('//')) {
          // Once we are in a comment we ignore any quotes
          inComment = true;
        }
      }
      const char = this._cursor.peek();
      this._cursor.advance();
      if (char === $BACKSLASH) {
        // Skip the next character because it was escaped.
        this._cursor.advance();
      } else if (char === inQuote) {
        // Exiting the current quoted string
        inQuote = null;
      } else if (!inComment && inQuote === null && isQuote(char)) {
        // Entering a new quoted string
        inQuote = char;
      }
    }
    // We hit EOF without finding a closing interpolation marker
    parts.push(this._getProcessedChars(expressionStart, this._cursor));
    this._endToken(parts);
  }
  _getProcessedChars(start, end) {
    return this._processCarriageReturns(end.getChars(start));
  }
  _isTextEnd() {
    if (this._isTagStart() || this._cursor.peek() === $EOF) {
      return true;
    }
    if (this._tokenizeIcu && !this._inInterpolation) {
      if (this.isExpansionFormStart()) {
        // start of an expansion form
        return true;
      }
      if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
        // end of and expansion case
        return true;
      }
    }
    return false;
  }
  /**
   * Returns true if the current cursor is pointing to the start of a tag
   * (opening/closing/comments/cdata/etc).
   */
  _isTagStart() {
    if (this._cursor.peek() === $LT) {
      // We assume that `<` followed by whitespace is not the start of an HTML element.
      const tmp = this._cursor.clone();
      tmp.advance();
      // If the next character is alphabetic, ! nor / then it is a tag start
      const code = tmp.peek();
      if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {
        return true;
      }
    }
    return false;
  }
  _readUntil(char) {
    const start = this._cursor.clone();
    this._attemptUntilChar(char);
    return this._cursor.getChars(start);
  }
  _isInExpansionCase() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21 /* TokenType.EXPANSION_CASE_EXP_START */;
  }

  _isInExpansionForm() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19 /* TokenType.EXPANSION_FORM_START */;
  }

  isExpansionFormStart() {
    if (this._cursor.peek() !== $LBRACE) {
      return false;
    }
    if (this._interpolationConfig) {
      const start = this._cursor.clone();
      const isInterpolation = this._attemptStr(this._interpolationConfig.start);
      this._cursor = start;
      return !isInterpolation;
    }
    return true;
  }
}
function isNotWhitespace(code) {
  return !isWhitespace(code) || code === $EOF;
}
function isNameEnd(code) {
  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;
}
function isPrefixEnd(code) {
  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);
}
function isExpansionCaseStart(peek) {
  return peek !== $RBRACE;
}
function compareCharCodeCaseInsensitive(code1, code2) {
  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
  return code >= $a && code <= $z ? code - $a + $A : code;
}
function mergeTextTokens(srcTokens) {
  const dstTokens = [];
  let lastDstToken = undefined;
  for (let i = 0; i < srcTokens.length; i++) {
    const token = srcTokens[i];
    if (lastDstToken && lastDstToken.type === 5 /* TokenType.TEXT */ && token.type === 5 /* TokenType.TEXT */ || lastDstToken && lastDstToken.type === 16 /* TokenType.ATTR_VALUE_TEXT */ && token.type === 16 /* TokenType.ATTR_VALUE_TEXT */) {
      lastDstToken.parts[0] += token.parts[0];
      lastDstToken.sourceSpan.end = token.sourceSpan.end;
    } else {
      lastDstToken = token;
      dstTokens.push(lastDstToken);
    }
  }
  return dstTokens;
}
class PlainCharacterCursor {
  constructor(fileOrCursor, range) {
    if (fileOrCursor instanceof PlainCharacterCursor) {
      this.file = fileOrCursor.file;
      this.input = fileOrCursor.input;
      this.end = fileOrCursor.end;
      const state = fileOrCursor.state;
      // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.
      // In ES5 bundles the object spread operator is translated into the `__assign` helper, which
      // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is
      // called in tight loops, this difference matters.
      this.state = {
        peek: state.peek,
        offset: state.offset,
        line: state.line,
        column: state.column
      };
    } else {
      if (!range) {
        throw new Error('Programming error: the range argument must be provided with a file argument.');
      }
      this.file = fileOrCursor;
      this.input = fileOrCursor.content;
      this.end = range.endPos;
      this.state = {
        peek: -1,
        offset: range.startPos,
        line: range.startLine,
        column: range.startCol
      };
    }
  }
  clone() {
    return new PlainCharacterCursor(this);
  }
  peek() {
    return this.state.peek;
  }
  charsLeft() {
    return this.end - this.state.offset;
  }
  diff(other) {
    return this.state.offset - other.state.offset;
  }
  advance() {
    this.advanceState(this.state);
  }
  init() {
    this.updatePeek(this.state);
  }
  getSpan(start, leadingTriviaCodePoints) {
    start = start || this;
    let fullStart = start;
    if (leadingTriviaCodePoints) {
      while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
        if (fullStart === start) {
          start = start.clone();
        }
        start.advance();
      }
    }
    const startLocation = this.locationFromCursor(start);
    const endLocation = this.locationFromCursor(this);
    const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;
    return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);
  }
  getChars(start) {
    return this.input.substring(start.state.offset, this.state.offset);
  }
  charAt(pos) {
    return this.input.charCodeAt(pos);
  }
  advanceState(state) {
    if (state.offset >= this.end) {
      this.state = state;
      throw new CursorError('Unexpected character "EOF"', this);
    }
    const currentChar = this.charAt(state.offset);
    if (currentChar === $LF) {
      state.line++;
      state.column = 0;
    } else if (!isNewLine(currentChar)) {
      state.column++;
    }
    state.offset++;
    this.updatePeek(state);
  }
  updatePeek(state) {
    state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
  }
  locationFromCursor(cursor) {
    return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);
  }
}
class EscapedCharacterCursor extends PlainCharacterCursor {
  constructor(fileOrCursor, range) {
    if (fileOrCursor instanceof EscapedCharacterCursor) {
      super(fileOrCursor);
      this.internalState = {
        ...fileOrCursor.internalState
      };
    } else {
      super(fileOrCursor, range);
      this.internalState = this.state;
    }
  }
  advance() {
    this.state = this.internalState;
    super.advance();
    this.processEscapeSequence();
  }
  init() {
    super.init();
    this.processEscapeSequence();
  }
  clone() {
    return new EscapedCharacterCursor(this);
  }
  getChars(start) {
    const cursor = start.clone();
    let chars = '';
    while (cursor.internalState.offset < this.internalState.offset) {
      chars += String.fromCodePoint(cursor.peek());
      cursor.advance();
    }
    return chars;
  }
  /**
   * Process the escape sequence that starts at the current position in the text.
   *
   * This method is called to ensure that `peek` has the unescaped value of escape sequences.
   */
  processEscapeSequence() {
    const peek = () => this.internalState.peek;
    if (peek() === $BACKSLASH) {
      // We have hit an escape sequence so we need the internal state to become independent
      // of the external state.
      this.internalState = {
        ...this.state
      };
      // Move past the backslash
      this.advanceState(this.internalState);
      // First check for standard control char sequences
      if (peek() === $n) {
        this.state.peek = $LF;
      } else if (peek() === $r) {
        this.state.peek = $CR;
      } else if (peek() === $v) {
        this.state.peek = $VTAB;
      } else if (peek() === $t) {
        this.state.peek = $TAB;
      } else if (peek() === $b) {
        this.state.peek = $BSPACE;
      } else if (peek() === $f) {
        this.state.peek = $FF;
      }
      // Now consider more complex sequences
      else if (peek() === $u) {
        // Unicode code-point sequence
        this.advanceState(this.internalState); // advance past the `u` char
        if (peek() === $LBRACE) {
          // Variable length Unicode, e.g. `\x{123}`
          this.advanceState(this.internalState); // advance past the `{` char
          // Advance past the variable number of hex digits until we hit a `}` char
          const digitStart = this.clone();
          let length = 0;
          while (peek() !== $RBRACE) {
            this.advanceState(this.internalState);
            length++;
          }
          this.state.peek = this.decodeHexDigits(digitStart, length);
        } else {
          // Fixed length Unicode, e.g. `\u1234`
          const digitStart = this.clone();
          this.advanceState(this.internalState);
          this.advanceState(this.internalState);
          this.advanceState(this.internalState);
          this.state.peek = this.decodeHexDigits(digitStart, 4);
        }
      } else if (peek() === $x) {
        // Hex char code, e.g. `\x2F`
        this.advanceState(this.internalState); // advance past the `x` char
        const digitStart = this.clone();
        this.advanceState(this.internalState);
        this.state.peek = this.decodeHexDigits(digitStart, 2);
      } else if (isOctalDigit(peek())) {
        // Octal char code, e.g. `\012`,
        let octal = '';
        let length = 0;
        let previous = this.clone();
        while (isOctalDigit(peek()) && length < 3) {
          previous = this.clone();
          octal += String.fromCodePoint(peek());
          this.advanceState(this.internalState);
          length++;
        }
        this.state.peek = parseInt(octal, 8);
        // Backup one char
        this.internalState = previous.internalState;
      } else if (isNewLine(this.internalState.peek)) {
        // Line continuation `\` followed by a new line
        this.advanceState(this.internalState); // advance over the newline
        this.state = this.internalState;
      } else {
        // If none of the `if` blocks were executed then we just have an escaped normal character.
        // In that case we just, effectively, skip the backslash from the character.
        this.state.peek = this.internalState.peek;
      }
    }
  }
  decodeHexDigits(start, length) {
    const hex = this.input.slice(start.internalState.offset, start.internalState.offset + length);
    const charCode = parseInt(hex, 16);
    if (!isNaN(charCode)) {
      return charCode;
    } else {
      start.state = start.internalState;
      throw new CursorError('Invalid hexadecimal escape sequence', start);
    }
  }
}
class CursorError {
  constructor(msg, cursor) {
    this.msg = msg;
    this.cursor = cursor;
  }
}
class TreeError extends ParseError {
  static create(elementName, span, msg) {
    return new TreeError(elementName, span, msg);
  }
  constructor(elementName, span, msg) {
    super(span, msg);
    this.elementName = elementName;
  }
}
class ParseTreeResult {
  constructor(rootNodes, errors) {
    this.rootNodes = rootNodes;
    this.errors = errors;
  }
}
class Parser {
  constructor(getTagDefinition) {
    this.getTagDefinition = getTagDefinition;
  }
  parse(source, url, options) {
    const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);
    const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);
    parser.build();
    return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));
  }
}
class _TreeBuilder {
  constructor(tokens, getTagDefinition) {
    this.tokens = tokens;
    this.getTagDefinition = getTagDefinition;
    this._index = -1;
    this._elementStack = [];
    this.rootNodes = [];
    this.errors = [];
    this._advance();
  }
  build() {
    while (this._peek.type !== 24 /* TokenType.EOF */) {
      if (this._peek.type === 0 /* TokenType.TAG_OPEN_START */ || this._peek.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {
        this._consumeStartTag(this._advance());
      } else if (this._peek.type === 3 /* TokenType.TAG_CLOSE */) {
        this._consumeEndTag(this._advance());
      } else if (this._peek.type === 12 /* TokenType.CDATA_START */) {
        this._closeVoidElement();
        this._consumeCdata(this._advance());
      } else if (this._peek.type === 10 /* TokenType.COMMENT_START */) {
        this._closeVoidElement();
        this._consumeComment(this._advance());
      } else if (this._peek.type === 5 /* TokenType.TEXT */ || this._peek.type === 7 /* TokenType.RAW_TEXT */ || this._peek.type === 6 /* TokenType.ESCAPABLE_RAW_TEXT */) {
        this._closeVoidElement();
        this._consumeText(this._advance());
      } else if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */) {
        this._consumeExpansion(this._advance());
      } else {
        // Skip all other tokens...
        this._advance();
      }
    }
  }
  _advance() {
    const prev = this._peek;
    if (this._index < this.tokens.length - 1) {
      // Note: there is always an EOF token at the end
      this._index++;
    }
    this._peek = this.tokens[this._index];
    return prev;
  }
  _advanceIf(type) {
    if (this._peek.type === type) {
      return this._advance();
    }
    return null;
  }
  _consumeCdata(_startToken) {
    this._consumeText(this._advance());
    this._advanceIf(13 /* TokenType.CDATA_END */);
  }

  _consumeComment(token) {
    const text = this._advanceIf(7 /* TokenType.RAW_TEXT */);
    this._advanceIf(11 /* TokenType.COMMENT_END */);
    const value = text != null ? text.parts[0].trim() : null;
    this._addToParent(new Comment(value, token.sourceSpan));
  }
  _consumeExpansion(token) {
    const switchValue = this._advance();
    const type = this._advance();
    const cases = [];
    // read =
    while (this._peek.type === 20 /* TokenType.EXPANSION_CASE_VALUE */) {
      const expCase = this._parseExpansionCase();
      if (!expCase) return; // error
      cases.push(expCase);
    }
    // read the final }
    if (this._peek.type !== 23 /* TokenType.EXPANSION_FORM_END */) {
      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));
      return;
    }
    const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);
    this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
    this._advance();
  }
  _parseExpansionCase() {
    const value = this._advance();
    // read {
    if (this._peek.type !== 21 /* TokenType.EXPANSION_CASE_EXP_START */) {
      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));
      return null;
    }
    // read until }
    const start = this._advance();
    const exp = this._collectExpansionExpTokens(start);
    if (!exp) return null;
    const end = this._advance();
    exp.push({
      type: 24 /* TokenType.EOF */,
      parts: [],
      sourceSpan: end.sourceSpan
    });
    // parse everything in between { and }
    const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);
    expansionCaseParser.build();
    if (expansionCaseParser.errors.length > 0) {
      this.errors = this.errors.concat(expansionCaseParser.errors);
      return null;
    }
    const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);
    const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);
    return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
  }
  _collectExpansionExpTokens(start) {
    const exp = [];
    const expansionFormStack = [21 /* TokenType.EXPANSION_CASE_EXP_START */];
    while (true) {
      if (this._peek.type === 19 /* TokenType.EXPANSION_FORM_START */ || this._peek.type === 21 /* TokenType.EXPANSION_CASE_EXP_START */) {
        expansionFormStack.push(this._peek.type);
      }
      if (this._peek.type === 22 /* TokenType.EXPANSION_CASE_EXP_END */) {
        if (lastOnStack(expansionFormStack, 21 /* TokenType.EXPANSION_CASE_EXP_START */)) {
          expansionFormStack.pop();
          if (expansionFormStack.length === 0) return exp;
        } else {
          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return null;
        }
      }
      if (this._peek.type === 23 /* TokenType.EXPANSION_FORM_END */) {
        if (lastOnStack(expansionFormStack, 19 /* TokenType.EXPANSION_FORM_START */)) {
          expansionFormStack.pop();
        } else {
          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
          return null;
        }
      }
      if (this._peek.type === 24 /* TokenType.EOF */) {
        this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));
        return null;
      }
      exp.push(this._advance());
    }
  }
  _consumeText(token) {
    const tokens = [token];
    const startSpan = token.sourceSpan;
    let text = token.parts[0];
    if (text.length > 0 && text[0] === '\n') {
      const parent = this._getParentElement();
      if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
        text = text.substring(1);
        tokens[0] = {
          type: token.type,
          sourceSpan: token.sourceSpan,
          parts: [text]
        };
      }
    }
    while (this._peek.type === 8 /* TokenType.INTERPOLATION */ || this._peek.type === 5 /* TokenType.TEXT */ || this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {
      token = this._advance();
      tokens.push(token);
      if (token.type === 8 /* TokenType.INTERPOLATION */) {
        // For backward compatibility we decode HTML entities that appear in interpolation
        // expressions. This is arguably a bug, but it could be a considerable breaking change to
        // fix it. It should be addressed in a larger project to refactor the entire parser/lexer
        // chain after View Engine has been removed.
        text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);
      } else if (token.type === 9 /* TokenType.ENCODED_ENTITY */) {
        text += token.parts[0];
      } else {
        text += token.parts.join('');
      }
    }
    if (text.length > 0) {
      const endSpan = token.sourceSpan;
      this._addToParent(new Text(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));
    }
  }
  _closeVoidElement() {
    const el = this._getParentElement();
    if (el && this.getTagDefinition(el.name).isVoid) {
      this._elementStack.pop();
    }
  }
  _consumeStartTag(startTagToken) {
    const [prefix, name] = startTagToken.parts;
    const attrs = [];
    while (this._peek.type === 14 /* TokenType.ATTR_NAME */) {
      attrs.push(this._consumeAttr(this._advance()));
    }
    const fullName = this._getElementFullName(prefix, name, this._getParentElement());
    let selfClosing = false;
    // Note: There could have been a tokenizer error
    // so that we don't get a token for the end tag...
    if (this._peek.type === 2 /* TokenType.TAG_OPEN_END_VOID */) {
      this._advance();
      selfClosing = true;
      const tagDef = this.getTagDefinition(fullName);
      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
        this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void, custom and foreign elements can be self closed "${startTagToken.parts[1]}"`));
      }
    } else if (this._peek.type === 1 /* TokenType.TAG_OPEN_END */) {
      this._advance();
      selfClosing = false;
    }
    const end = this._peek.sourceSpan.fullStart;
    const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
    // Create a separate `startSpan` because `span` will be modified when there is an `end` span.
    const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);
    const el = new Element(fullName, attrs, [], span, startSpan, undefined);
    this._pushElement(el);
    if (selfClosing) {
      // Elements that are self-closed have their `endSourceSpan` set to the full span, as the
      // element start tag also represents the end tag.
      this._popElement(fullName, span);
    } else if (startTagToken.type === 4 /* TokenType.INCOMPLETE_TAG_OPEN */) {
      // We already know the opening tag is not complete, so it is unlikely it has a corresponding
      // close tag. Let's optimistically parse it as a full element and emit an error.
      this._popElement(fullName, null);
      this.errors.push(TreeError.create(fullName, span, `Opening tag "${fullName}" not terminated.`));
    }
  }
  _pushElement(el) {
    const parentEl = this._getParentElement();
    if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
      this._elementStack.pop();
    }
    this._addToParent(el);
    this._elementStack.push(el);
  }
  _consumeEndTag(endTagToken) {
    const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
    if (this.getTagDefinition(fullName).isVoid) {
      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags "${endTagToken.parts[1]}"`));
    } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {
      const errMsg = `Unexpected closing tag "${fullName}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
    }
  }
  /**
   * Closes the nearest element with the tag name `fullName` in the parse tree.
   * `endSourceSpan` is the span of the closing tag, or null if the element does
   * not have a closing tag (for example, this happens when an incomplete
   * opening tag is recovered).
   */
  _popElement(fullName, endSourceSpan) {
    let unexpectedCloseTagDetected = false;
    for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
      const el = this._elementStack[stackIndex];
      if (el.name === fullName) {
        // Record the parse span with the element that is being closed. Any elements that are
        // removed from the element stack at this point are closed implicitly, so they won't get
        // an end source span (as there is no explicit closing element).
        el.endSourceSpan = endSourceSpan;
        el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;
        this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
        return !unexpectedCloseTagDetected;
      }
      if (!this.getTagDefinition(el.name).closedByParent) {
        // Note that we encountered an unexpected close tag but continue processing the element
        // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this
        // end tag in the stack.
        unexpectedCloseTagDetected = true;
      }
    }
    return false;
  }
  _consumeAttr(attrName) {
    const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
    let attrEnd = attrName.sourceSpan.end;
    // Consume any quote
    if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {
      this._advance();
    }
    // Consume the attribute value
    let value = '';
    const valueTokens = [];
    let valueStartSpan = undefined;
    let valueEnd = undefined;
    // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of
    // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from
    // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not
    // able to see that `_advance()` will actually mutate `_peek`.
    const nextTokenType = this._peek.type;
    if (nextTokenType === 16 /* TokenType.ATTR_VALUE_TEXT */) {
      valueStartSpan = this._peek.sourceSpan;
      valueEnd = this._peek.sourceSpan.end;
      while (this._peek.type === 16 /* TokenType.ATTR_VALUE_TEXT */ || this._peek.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */ || this._peek.type === 9 /* TokenType.ENCODED_ENTITY */) {
        const valueToken = this._advance();
        valueTokens.push(valueToken);
        if (valueToken.type === 17 /* TokenType.ATTR_VALUE_INTERPOLATION */) {
          // For backward compatibility we decode HTML entities that appear in interpolation
          // expressions. This is arguably a bug, but it could be a considerable breaking change to
          // fix it. It should be addressed in a larger project to refactor the entire parser/lexer
          // chain after View Engine has been removed.
          value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);
        } else if (valueToken.type === 9 /* TokenType.ENCODED_ENTITY */) {
          value += valueToken.parts[0];
        } else {
          value += valueToken.parts.join('');
        }
        valueEnd = attrEnd = valueToken.sourceSpan.end;
      }
    }
    // Consume any quote
    if (this._peek.type === 15 /* TokenType.ATTR_QUOTE */) {
      const quoteToken = this._advance();
      attrEnd = quoteToken.sourceSpan.end;
    }
    const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);
    return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);
  }
  _getParentElement() {
    return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
  }
  _addToParent(node) {
    const parent = this._getParentElement();
    if (parent != null) {
      parent.children.push(node);
    } else {
      this.rootNodes.push(node);
    }
  }
  _getElementFullName(prefix, localName, parentElement) {
    if (prefix === '') {
      prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';
      if (prefix === '' && parentElement != null) {
        const parentTagName = splitNsName(parentElement.name)[1];
        const parentTagDefinition = this.getTagDefinition(parentTagName);
        if (!parentTagDefinition.preventNamespaceInheritance) {
          prefix = getNsPrefix(parentElement.name);
        }
      }
    }
    return mergeNsAndName(prefix, localName);
  }
}
function lastOnStack(stack, element) {
  return stack.length > 0 && stack[stack.length - 1] === element;
}
/**
 * Decode the `entity` string, which we believe is the contents of an HTML entity.
 *
 * If the string is not actually a valid/known entity then just return the original `match` string.
 */
function decodeEntity(match, entity) {
  if (NAMED_ENTITIES[entity] !== undefined) {
    return NAMED_ENTITIES[entity] || match;
  }
  if (/^#x[a-f0-9]+$/i.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(2), 16));
  }
  if (/^#\d+$/.test(entity)) {
    return String.fromCodePoint(parseInt(entity.slice(1), 10));
  }
  return match;
}
class HtmlParser extends Parser {
  constructor() {
    super(getHtmlTagDefinition);
  }
  parse(source, url, options) {
    return super.parse(source, url, options);
  }
}
const PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';
const SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);
// Equivalent to \s with \u00a0 (non-breaking space) excluded.
// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
const WS_CHARS = ' \f\n\r\t\v\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff';
const NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);
const WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');
function hasPreserveWhitespacesAttr(attrs) {
  return attrs.some(attr => attr.name === PRESERVE_WS_ATTR_NAME);
}
/**
 * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
 * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
 * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
 * and later on replaced by a space. We are re-implementing the same idea here.
 */
function replaceNgsp(value) {
  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE
  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');
}
/**
 * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:
 * - consider spaces, tabs and new lines as whitespace characters;
 * - drop text nodes consisting of whitespace characters only;
 * - for all other text nodes replace consecutive whitespace characters with one space;
 * - convert &ngsp; pseudo-entity to a single space;
 *
 * Removal and trimming of whitespaces have positive performance impact (less code to generate
 * while compiling templates, faster view creation). At the same time it can be "destructive"
 * in some cases (whitespaces can influence layout). Because of the potential of breaking layout
 * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for
 * whitespace removal. The default option for whitespace removal will be revisited in Angular 6
 * and might be changed to "on" by default.
 */
class WhitespaceVisitor {
  visitElement(element, context) {
    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {
      // don't descent into elements where we need to preserve whitespaces
      // but still visit all attributes to eliminate one used as a market to preserve WS
      return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
    }
    return new Element(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
  }
  visitAttribute(attribute, context) {
    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;
  }
  visitText(text, context) {
    const isNotBlank = text.value.match(NO_WS_REGEXP);
    const hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);
    if (isNotBlank || hasExpansionSibling) {
      // Process the whitespace in the tokens of this Text node
      const tokens = text.tokens.map(token => token.type === 5 /* TokenType.TEXT */ ? createWhitespaceProcessedTextToken(token) : token);
      // Process the whitespace of the value of this Text node
      const value = processWhitespace(text.value);
      return new Text(value, text.sourceSpan, tokens, text.i18n);
    }
    return null;
  }
  visitComment(comment, context) {
    return comment;
  }
  visitExpansion(expansion, context) {
    return expansion;
  }
  visitExpansionCase(expansionCase, context) {
    return expansionCase;
  }
}
function createWhitespaceProcessedTextToken({
  type,
  parts,
  sourceSpan
}) {
  return {
    type,
    parts: [processWhitespace(parts[0])],
    sourceSpan
  };
}
function processWhitespace(text) {
  return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');
}
function removeWhitespaces(htmlAstWithErrors) {
  return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);
}
function visitAllWithSiblings(visitor, nodes) {
  const result = [];
  nodes.forEach((ast, i) => {
    const context = {
      prev: nodes[i - 1],
      next: nodes[i + 1]
    };
    const astResult = ast.visit(visitor, context);
    if (astResult) {
      result.push(astResult);
    }
  });
  return result;
}
function mapEntry(key, value) {
  return {
    key,
    value,
    quoted: false
  };
}
function mapLiteral(obj, quoted = false) {
  return literalMap(Object.keys(obj).map(key => ({
    key,
    quoted,
    value: obj[key]
  })));
}

/**
 * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all
 * tags use '*'.
 *
 * Extracted from, and should be kept in sync with
 * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations
 */
const TRUSTED_TYPES_SINKS = new Set([
// NOTE: All strings in this set *must* be lowercase!
// TrustedHTML
'iframe|srcdoc', '*|innerhtml', '*|outerhtml',
// NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.
// TrustedScriptURL
'embed|src', 'object|codebase', 'object|data']);
/**
 * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types
 * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular
 * Trusted Type is required for values passed to the sink:
 * - SecurityContext.HTML corresponds to TrustedHTML
 * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL
 */
function isTrustedTypesSink(tagName, propName) {
  // Make sure comparisons are case insensitive, so that case differences between attribute and
  // property names do not have a security impact.
  tagName = tagName.toLowerCase();
  propName = propName.toLowerCase();
  return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);
}
const PROPERTY_PARTS_SEPARATOR = '.';
const ATTRIBUTE_PREFIX = 'attr';
const CLASS_PREFIX = 'class';
const STYLE_PREFIX = 'style';
const TEMPLATE_ATTR_PREFIX$1 = '*';
const ANIMATE_PROP_PREFIX = 'animate-';
/**
 * Parses bindings in templates and in the directive host area.
 */
class BindingParser {
  constructor(_exprParser, _interpolationConfig, _schemaRegistry, errors) {
    this._exprParser = _exprParser;
    this._interpolationConfig = _interpolationConfig;
    this._schemaRegistry = _schemaRegistry;
    this.errors = errors;
  }
  get interpolationConfig() {
    return this._interpolationConfig;
  }
  createBoundHostProperties(properties, sourceSpan) {
    const boundProps = [];
    for (const propName of Object.keys(properties)) {
      const expression = properties[propName];
      if (typeof expression === 'string') {
        this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [],
        // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the
        // sourceSpan, as it represents the sourceSpan of the host itself rather than the
        // source of the host binding (which doesn't exist in the template). Regardless,
        // neither of these values are used in Ivy but are only here to satisfy the function
        // signature. This should likely be refactored in the future so that `sourceSpan`
        // isn't being used inaccurately.
        boundProps, sourceSpan);
      } else {
        this._reportError(`Value of the host property binding "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
      }
    }
    return boundProps;
  }
  createDirectiveHostEventAsts(hostListeners, sourceSpan) {
    const targetEvents = [];
    for (const propName of Object.keys(hostListeners)) {
      const expression = hostListeners[propName];
      if (typeof expression === 'string') {
        // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but
        // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself
        // rather than the source of the host binding (which doesn't exist in the template).
        // Regardless, neither of these values are used in Ivy but are only here to satisfy the
        // function signature. This should likely be refactored in the future so that `sourceSpan`
        // isn't being used inaccurately.
        this.parseEvent(propName, expression, /* isAssignmentEvent */false, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);
      } else {
        this._reportError(`Value of the host listener "${propName}" needs to be a string representing an expression but got "${expression}" (${typeof expression})`, sourceSpan);
      }
    }
    return targetEvents;
  }
  parseInterpolation(value, sourceSpan, interpolatedTokens) {
    const sourceInfo = sourceSpan.start.toString();
    const absoluteOffset = sourceSpan.fullStart.offset;
    try {
      const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, interpolatedTokens, this._interpolationConfig);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
    }
  }
  /**
   * Similar to `parseInterpolation`, but treats the provided string as a single expression
   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).
   * This is used for parsing the switch expression in ICUs.
   */
  parseInterpolationExpression(expression, sourceSpan) {
    const sourceInfo = sourceSpan.start.toString();
    const absoluteOffset = sourceSpan.start.offset;
    try {
      const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
    }
  }
  /**
   * Parses the bindings in a microsyntax expression, and converts them to
   * `ParsedProperty` or `ParsedVariable`.
   *
   * @param tplKey template binding name
   * @param tplValue template binding value
   * @param sourceSpan span of template binding relative to entire the template
   * @param absoluteValueOffset start of the tplValue relative to the entire template
   * @param targetMatchableAttrs potential attributes to match in the template
   * @param targetProps target property bindings in the template
   * @param targetVars target variables in the template
   */
  parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {
    const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX$1.length;
    const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
    for (const binding of bindings) {
      // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular
      // binding within the microsyntax expression so it's more narrow than sourceSpan.
      const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
      const key = binding.key.source;
      const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);
      if (binding instanceof VariableBinding) {
        const value = binding.value ? binding.value.source : '$implicit';
        const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;
        targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
      } else if (binding.value) {
        const srcSpan = isIvyAst ? bindingSpan : sourceSpan;
        const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);
        this._parsePropertyAst(key, binding.value, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      } else {
        targetMatchableAttrs.push([key, '' /* value */]);
        // Since this is a literal attribute with no RHS, source span should be
        // just the key span.
        this.parseLiteralAttr(key, null /* value */, keySpan, absoluteValueOffset, undefined /* valueSpan */, targetMatchableAttrs, targetProps, keySpan);
      }
    }
  }
  /**
   * Parses the bindings in a microsyntax expression, e.g.
   * ```
   *    <tag *tplKey="let value1 = prop; let value2 = localVar">
   * ```
   *
   * @param tplKey template binding name
   * @param tplValue template binding value
   * @param sourceSpan span of template binding relative to entire the template
   * @param absoluteKeyOffset start of the `tplKey`
   * @param absoluteValueOffset start of the `tplValue`
   */
  _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
    const sourceInfo = sourceSpan.start.toString();
    try {
      const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);
      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
      bindingsResult.warnings.forEach(warning => {
        this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
      });
      return bindingsResult.templateBindings;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return [];
    }
  }
  parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
    if (isAnimationLabel(name)) {
      name = name.substring(1);
      if (keySpan !== undefined) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
      if (value) {
        this._reportError(`Assigning animation triggers via @prop="exp" attributes with an expression is invalid.` + ` Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);
      }
      this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    } else {
      targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));
    }
  }
  parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps, keySpan) {
    if (name.length === 0) {
      this._reportError(`Property name is missing in binding`, sourceSpan);
    }
    let isAnimationProp = false;
    if (name.startsWith(ANIMATE_PROP_PREFIX)) {
      isAnimationProp = true;
      name = name.substring(ANIMATE_PROP_PREFIX.length);
      if (keySpan !== undefined) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));
      }
    } else if (isAnimationLabel(name)) {
      isAnimationProp = true;
      name = name.substring(1);
      if (keySpan !== undefined) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
    }
    if (isAnimationProp) {
      this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    } else {
      this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
    }
  }
  parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps, keySpan, interpolatedTokens) {
    const expr = this.parseInterpolation(value, valueSpan || sourceSpan, interpolatedTokens);
    if (expr) {
      this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);
      return true;
    }
    return false;
  }
  _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
    targetMatchableAttrs.push([name, ast.source]);
    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));
  }
  _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {
    if (name.length === 0) {
      this._reportError('Animation trigger is missing', sourceSpan);
    }
    // This will occur when a @trigger is not paired with an expression.
    // For animations it is valid to not have an expression since */void
    // states will be applied by angular when the element is attached/detached
    const ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);
    targetMatchableAttrs.push([name, ast.source]);
    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));
  }
  _parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {
    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();
    try {
      const ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);
      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
    }
  }
  createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {
    if (boundProp.isAnimation) {
      return new BoundElementProperty(boundProp.name, 4 /* BindingType.Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
    }
    let unit = null;
    let bindingType = undefined;
    let boundPropertyName = null;
    const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
    let securityContexts = undefined;
    // Check for special cases (prefix style, attr, class)
    if (parts.length > 1) {
      if (parts[0] == ATTRIBUTE_PREFIX) {
        boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);
        if (!skipValidation) {
          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
        }
        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
        const nsSeparatorIdx = boundPropertyName.indexOf(':');
        if (nsSeparatorIdx > -1) {
          const ns = boundPropertyName.substring(0, nsSeparatorIdx);
          const name = boundPropertyName.substring(nsSeparatorIdx + 1);
          boundPropertyName = mergeNsAndName(ns, name);
        }
        bindingType = 1 /* BindingType.Attribute */;
      } else if (parts[0] == CLASS_PREFIX) {
        boundPropertyName = parts[1];
        bindingType = 2 /* BindingType.Class */;
        securityContexts = [SecurityContext.NONE];
      } else if (parts[0] == STYLE_PREFIX) {
        unit = parts.length > 2 ? parts[2] : null;
        boundPropertyName = parts[1];
        bindingType = 3 /* BindingType.Style */;
        securityContexts = [SecurityContext.STYLE];
      }
    }
    // If not a special case, use the full property name
    if (boundPropertyName === null) {
      const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);
      boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
      securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
      bindingType = 0 /* BindingType.Property */;
      if (!skipValidation) {
        this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
      }
    }
    return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);
  }
  // TODO: keySpan should be required but was made optional to avoid changing VE parser.
  parseEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
    if (name.length === 0) {
      this._reportError(`Event name is missing in binding`, sourceSpan);
    }
    if (isAnimationLabel(name)) {
      name = name.slice(1);
      if (keySpan !== undefined) {
        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));
      }
      this._parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan);
    } else {
      this._parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);
    }
  }
  calcPossibleSecurityContexts(selector, propName, isAttribute) {
    const prop = this._schemaRegistry.getMappedPropName(propName);
    return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
  }
  _parseAnimationEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetEvents, keySpan) {
    const matches = splitAtPeriod(name, [name, '']);
    const eventName = matches[0];
    const phase = matches[1].toLowerCase();
    const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);
    targetEvents.push(new ParsedEvent(eventName, phase, 1 /* ParsedEventType.Animation */, ast, sourceSpan, handlerSpan, keySpan));
    if (eventName.length === 0) {
      this._reportError(`Animation event name is missing in binding`, sourceSpan);
    }
    if (phase) {
      if (phase !== 'start' && phase !== 'done') {
        this._reportError(`The provided animation output phase value "${phase}" for "@${eventName}" is not supported (use start or done)`, sourceSpan);
      }
    } else {
      this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);
    }
  }
  _parseRegularEvent(name, expression, isAssignmentEvent, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {
    // long format: 'target: eventName'
    const [target, eventName] = splitAtColon(name, [null, name]);
    const ast = this._parseAction(expression, isAssignmentEvent, handlerSpan);
    targetMatchableAttrs.push([name, ast.source]);
    targetEvents.push(new ParsedEvent(eventName, target, 0 /* ParsedEventType.Regular */, ast, sourceSpan, handlerSpan, keySpan));
    // Don't detect directives for event names for now,
    // so don't add the event name to the matchableAttrs
  }

  _parseAction(value, isAssignmentEvent, sourceSpan) {
    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();
    const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;
    try {
      const ast = this._exprParser.parseAction(value, isAssignmentEvent, sourceInfo, absoluteOffset, this._interpolationConfig);
      if (ast) {
        this._reportExpressionParserErrors(ast.errors, sourceSpan);
      }
      if (!ast || ast.ast instanceof EmptyExpr) {
        this._reportError(`Empty expressions are not allowed`, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
      }
      return ast;
    } catch (e) {
      this._reportError(`${e}`, sourceSpan);
      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
    }
  }
  _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
    this.errors.push(new ParseError(sourceSpan, message, level));
  }
  _reportExpressionParserErrors(errors, sourceSpan) {
    for (const error of errors) {
      this._reportError(error.message, sourceSpan);
    }
  }
  /**
   * @param propName the name of the property / attribute
   * @param sourceSpan
   * @param isAttr true when binding to an attribute
   */
  _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
    const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
    if (report.error) {
      this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
    }
  }
}
class PipeCollector extends RecursiveAstVisitor {
  constructor() {
    super(...arguments);
    this.pipes = new Map();
  }
  visitPipe(ast, context) {
    this.pipes.set(ast.name, ast);
    ast.exp.visit(this);
    this.visitAll(ast.args, context);
    return null;
  }
}
function isAnimationLabel(name) {
  return name[0] == '@';
}
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
  const ctxs = [];
  CssSelector.parse(selector).forEach(selector => {
    const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
    const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector()).map(selector => selector.element));
    const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));
    ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));
  });
  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
}
/**
 * Compute a new ParseSourceSpan based off an original `sourceSpan` by using
 * absolute offsets from the specified `absoluteSpan`.
 *
 * @param sourceSpan original source span
 * @param absoluteSpan absolute source span to move to
 */
function moveParseSourceSpan(sourceSpan, absoluteSpan) {
  // The difference of two absolute offsets provide the relative offset
  const startDiff = absoluteSpan.start - sourceSpan.start.offset;
  const endDiff = absoluteSpan.end - sourceSpan.end.offset;
  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);
}

// Some of the code comes from WebComponents.JS
// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
function isStyleUrlResolvable(url) {
  if (url == null || url.length === 0 || url[0] == '/') return false;
  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
}
const URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
const NG_CONTENT_SELECT_ATTR$1 = 'select';
const LINK_ELEMENT = 'link';
const LINK_STYLE_REL_ATTR = 'rel';
const LINK_STYLE_HREF_ATTR = 'href';
const LINK_STYLE_REL_VALUE = 'stylesheet';
const STYLE_ELEMENT = 'style';
const SCRIPT_ELEMENT = 'script';
const NG_NON_BINDABLE_ATTR = 'ngNonBindable';
const NG_PROJECT_AS = 'ngProjectAs';
function preparseElement(ast) {
  let selectAttr = null;
  let hrefAttr = null;
  let relAttr = null;
  let nonBindable = false;
  let projectAs = '';
  ast.attrs.forEach(attr => {
    const lcAttrName = attr.name.toLowerCase();
    if (lcAttrName == NG_CONTENT_SELECT_ATTR$1) {
      selectAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
      hrefAttr = attr.value;
    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
      relAttr = attr.value;
    } else if (attr.name == NG_NON_BINDABLE_ATTR) {
      nonBindable = true;
    } else if (attr.name == NG_PROJECT_AS) {
      if (attr.value.length > 0) {
        projectAs = attr.value;
      }
    }
  });
  selectAttr = normalizeNgContentSelect(selectAttr);
  const nodeName = ast.name.toLowerCase();
  let type = PreparsedElementType.OTHER;
  if (isNgContent(nodeName)) {
    type = PreparsedElementType.NG_CONTENT;
  } else if (nodeName == STYLE_ELEMENT) {
    type = PreparsedElementType.STYLE;
  } else if (nodeName == SCRIPT_ELEMENT) {
    type = PreparsedElementType.SCRIPT;
  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
    type = PreparsedElementType.STYLESHEET;
  }
  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
var PreparsedElementType;
(function (PreparsedElementType) {
  PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
  PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
  PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
  PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
  PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
})(PreparsedElementType || (PreparsedElementType = {}));
class PreparsedElement {
  constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {
    this.type = type;
    this.selectAttr = selectAttr;
    this.hrefAttr = hrefAttr;
    this.nonBindable = nonBindable;
    this.projectAs = projectAs;
  }
}
function normalizeNgContentSelect(selectAttr) {
  if (selectAttr === null || selectAttr.length === 0) {
    return '*';
  }
  return selectAttr;
}
const BIND_NAME_REGEXP = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/;
// Group 1 = "bind-"
const KW_BIND_IDX = 1;
// Group 2 = "let-"
const KW_LET_IDX = 2;
// Group 3 = "ref-/#"
const KW_REF_IDX = 3;
// Group 4 = "on-"
const KW_ON_IDX = 4;
// Group 5 = "bindon-"
const KW_BINDON_IDX = 5;
// Group 6 = "@"
const KW_AT_IDX = 6;
// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
const IDENT_KW_IDX = 7;
const BINDING_DELIMS = {
  BANANA_BOX: {
    start: '[(',
    end: ')]'
  },
  PROPERTY: {
    start: '[',
    end: ']'
  },
  EVENT: {
    start: '(',
    end: ')'
  }
};
const TEMPLATE_ATTR_PREFIX = '*';
function htmlAstToRender3Ast(htmlNodes, bindingParser, options) {
  const transformer = new HtmlAstToIvyAst(bindingParser, options);
  const ivyNodes = visitAll(transformer, htmlNodes);
  // Errors might originate in either the binding parser or the html to ivy transformer
  const allErrors = bindingParser.errors.concat(transformer.errors);
  const result = {
    nodes: ivyNodes,
    errors: allErrors,
    styleUrls: transformer.styleUrls,
    styles: transformer.styles,
    ngContentSelectors: transformer.ngContentSelectors
  };
  if (options.collectCommentNodes) {
    result.commentNodes = transformer.commentNodes;
  }
  return result;
}
class HtmlAstToIvyAst {
  constructor(bindingParser, options) {
    this.bindingParser = bindingParser;
    this.options = options;
    this.errors = [];
    this.styles = [];
    this.styleUrls = [];
    this.ngContentSelectors = [];
    // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true
    this.commentNodes = [];
    this.inI18nBlock = false;
  }
  // HTML visitor
  visitElement(element) {
    const isI18nRootElement = isI18nRootNode(element.i18n);
    if (isI18nRootElement) {
      if (this.inI18nBlock) {
        this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);
      }
      this.inI18nBlock = true;
    }
    const preparsedElement = preparseElement(element);
    if (preparsedElement.type === PreparsedElementType.SCRIPT) {
      return null;
    } else if (preparsedElement.type === PreparsedElementType.STYLE) {
      const contents = textContents(element);
      if (contents !== null) {
        this.styles.push(contents);
      }
      return null;
    } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
      this.styleUrls.push(preparsedElement.hrefAttr);
      return null;
    }
    // Whether the element is a `<ng-template>`
    const isTemplateElement = isNgTemplate(element.name);
    const parsedProperties = [];
    const boundEvents = [];
    const variables = [];
    const references = [];
    const attributes = [];
    const i18nAttrsMeta = {};
    const templateParsedProperties = [];
    const templateVariables = [];
    // Whether the element has any *-attribute
    let elementHasInlineTemplate = false;
    for (const attribute of element.attrs) {
      let hasBinding = false;
      const normalizedName = normalizeAttributeName(attribute.name);
      // `*attr` defines template bindings
      let isTemplateBinding = false;
      if (attribute.i18n) {
        i18nAttrsMeta[attribute.name] = attribute.i18n;
      }
      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
        // *-attributes
        if (elementHasInlineTemplate) {
          this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);
        }
        isTemplateBinding = true;
        elementHasInlineTemplate = true;
        const templateValue = attribute.value;
        const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);
        const parsedVariables = [];
        const absoluteValueOffset = attribute.valueSpan ? attribute.valueSpan.start.offset :
        // If there is no value span the attribute does not have a value, like `attr` in
        //`<div attr></div>`. In this case, point to one character beyond the last character of
        // the attribute name.
        attribute.sourceSpan.start.offset + attribute.name.length;
        this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true /* isIvyAst */);
        templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));
      } else {
        // Check for variables, events, property bindings, interpolation
        hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);
      }
      if (!hasBinding && !isTemplateBinding) {
        // don't include the bindings as attributes as well in the AST
        attributes.push(this.visitAttribute(attribute));
      }
    }
    const children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children);
    let parsedElement;
    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
      // `<ng-content>`
      if (element.children && !element.children.every(node => isEmptyTextNode(node) || isCommentNode(node))) {
        this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);
      }
      const selector = preparsedElement.selectAttr;
      const attrs = element.attrs.map(attr => this.visitAttribute(attr));
      parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);
      this.ngContentSelectors.push(selector);
    } else if (isTemplateElement) {
      // `<ng-template>`
      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);
      parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [/* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
    } else {
      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);
      parsedElement = new Element$1(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
    }
    if (elementHasInlineTemplate) {
      // If this node is an inline-template (e.g. has *ngFor) then we need to create a template
      // node that contains this node.
      // Moreover, if the node is an element, then we need to hoist its attributes to the template
      // node for matching against content projection selectors.
      const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);
      const templateAttrs = [];
      attrs.literal.forEach(attr => templateAttrs.push(attr));
      attrs.bound.forEach(attr => templateAttrs.push(attr));
      const hoistedAttrs = parsedElement instanceof Element$1 ? {
        attributes: parsedElement.attributes,
        inputs: parsedElement.inputs,
        outputs: parsedElement.outputs
      } : {
        attributes: [],
        inputs: [],
        outputs: []
      };
      // For <ng-template>s with structural directives on them, avoid passing i18n information to
      // the wrapping template to prevent unnecessary i18n instructions from being generated. The
      // necessary i18n meta information will be extracted from child elements.
      const i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n;
      const name = parsedElement instanceof Template ? null : parsedElement.name;
      parsedElement = new Template(name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [/* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);
    }
    if (isI18nRootElement) {
      this.inI18nBlock = false;
    }
    return parsedElement;
  }
  visitAttribute(attribute) {
    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);
  }
  visitText(text) {
    return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.tokens, text.i18n);
  }
  visitExpansion(expansion) {
    if (!expansion.i18n) {
      // do not generate Icu in case it was created
      // outside of i18n block in a template
      return null;
    }
    if (!isI18nRootNode(expansion.i18n)) {
      throw new Error(`Invalid type "${expansion.i18n.constructor}" for "i18n" property of ${expansion.sourceSpan.toString()}. Expected a "Message"`);
    }
    const message = expansion.i18n;
    const vars = {};
    const placeholders = {};
    // extract VARs from ICUs - we process them separately while
    // assembling resulting message via goog.getMsg function, since
    // we need to pass them to top-level goog.getMsg call
    Object.keys(message.placeholders).forEach(key => {
      const value = message.placeholders[key];
      if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
        // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.
        // `{count, select , ...}`), these spaces are also included into the key names in ICU vars
        // (e.g. "VAR_SELECT "). These trailing spaces are not desirable, since they will later be
        // converted into `_` symbols while normalizing placeholder names, which might lead to
        // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).
        const formattedKey = key.trim();
        const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);
        vars[formattedKey] = new BoundText(ast, value.sourceSpan);
      } else {
        placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan, null);
      }
    });
    return new Icu$1(vars, placeholders, expansion.sourceSpan, message);
  }
  visitExpansionCase(expansionCase) {
    return null;
  }
  visitComment(comment) {
    if (this.options.collectCommentNodes) {
      this.commentNodes.push(new Comment$1(comment.value || '', comment.sourceSpan));
    }
    return null;
  }
  // convert view engine `ParsedProperty` to a format suitable for IVY
  extractAttributes(elementName, properties, i18nPropsMeta) {
    const bound = [];
    const literal = [];
    properties.forEach(prop => {
      const i18n = i18nPropsMeta[prop.name];
      if (prop.isLiteral) {
        literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));
      } else {
        // Note that validation is skipped and property mapping is disabled
        // due to the fact that we need to make sure a given prop is not an
        // input of a directive and directive matching happens at runtime.
        const bep = this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */true, /* mapPropertyName */false);
        bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));
      }
    });
    return {
      bound,
      literal
    };
  }
  parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {
    const name = normalizeAttributeName(attribute.name);
    const value = attribute.value;
    const srcSpan = attribute.sourceSpan;
    const absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;
    function createKeySpan(srcSpan, prefix, identifier) {
      // We need to adjust the start location for the keySpan to account for the removed 'data-'
      // prefix from `normalizeAttributeName`.
      const normalizationAdjustment = attribute.name.length - name.length;
      const keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);
      const keySpanEnd = keySpanStart.moveBy(identifier.length);
      return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);
    }
    const bindParts = name.match(BIND_NAME_REGEXP);
    if (bindParts) {
      if (bindParts[KW_BIND_IDX] != null) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX], identifier);
        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
      } else if (bindParts[KW_LET_IDX]) {
        if (isTemplateElement) {
          const identifier = bindParts[IDENT_KW_IDX];
          const keySpan = createKeySpan(srcSpan, bindParts[KW_LET_IDX], identifier);
          this.parseVariable(identifier, value, srcSpan, keySpan, attribute.valueSpan, variables);
        } else {
          this.reportError(`"let-" is only supported on ng-template elements.`, srcSpan);
        }
      } else if (bindParts[KW_REF_IDX]) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan = createKeySpan(srcSpan, bindParts[KW_REF_IDX], identifier);
        this.parseReference(identifier, value, srcSpan, keySpan, attribute.valueSpan, references);
      } else if (bindParts[KW_ON_IDX]) {
        const events = [];
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan = createKeySpan(srcSpan, bindParts[KW_ON_IDX], identifier);
        this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);
        addEvents(events, boundEvents);
      } else if (bindParts[KW_BINDON_IDX]) {
        const identifier = bindParts[IDENT_KW_IDX];
        const keySpan = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX], identifier);
        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);
      } else if (bindParts[KW_AT_IDX]) {
        const keySpan = createKeySpan(srcSpan, '', name);
        this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
      }
      return true;
    }
    // We didn't see a kw-prefixed property binding, but we have not yet checked
    // for the []/()/[()] syntax.
    let delims = null;
    if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {
      delims = BINDING_DELIMS.BANANA_BOX;
    } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {
      delims = BINDING_DELIMS.PROPERTY;
    } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {
      delims = BINDING_DELIMS.EVENT;
    }
    if (delims !== null &&
    // NOTE: older versions of the parser would match a start/end delimited
    // binding iff the property name was terminated by the ending delimiter
    // and the identifier in the binding was non-empty.
    // TODO(ayazhafiz): update this to handle malformed bindings.
    name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {
      const identifier = name.substring(delims.start.length, name.length - delims.end.length);
      const keySpan = createKeySpan(srcSpan, delims.start, identifier);
      if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {
        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);
      } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {
        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);
      } else {
        const events = [];
        this.bindingParser.parseEvent(identifier, value, /* isAssignmentEvent */false, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);
        addEvents(events, boundEvents);
      }
      return true;
    }
    // No explicit binding found.
    const keySpan = createKeySpan(srcSpan, '' /* prefix */, name);
    const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan, attribute.valueTokens ?? null);
    return hasBinding;
  }
  _visitTextWithInterpolation(value, sourceSpan, interpolatedTokens, i18n) {
    const valueNoNgsp = replaceNgsp(value);
    const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan, interpolatedTokens);
    return expr ? new BoundText(expr, sourceSpan, i18n) : new Text$3(valueNoNgsp, sourceSpan);
  }
  parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {
    if (identifier.indexOf('-') > -1) {
      this.reportError(`"-" is not allowed in variable names`, sourceSpan);
    } else if (identifier.length === 0) {
      this.reportError(`Variable does not have a name`, sourceSpan);
    }
    variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));
  }
  parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {
    if (identifier.indexOf('-') > -1) {
      this.reportError(`"-" is not allowed in reference names`, sourceSpan);
    } else if (identifier.length === 0) {
      this.reportError(`Reference does not have a name`, sourceSpan);
    } else if (references.some(reference => reference.name === identifier)) {
      this.reportError(`Reference "#${identifier}" is defined more than once`, sourceSpan);
    }
    references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));
  }
  parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {
    const events = [];
    this.bindingParser.parseEvent(`${name}Change`, `${expression} =$event`, /* isAssignmentEvent */true, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);
    addEvents(events, boundEvents);
  }
  reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {
    this.errors.push(new ParseError(sourceSpan, message, level));
  }
}
class NonBindableVisitor {
  visitElement(ast) {
    const preparsedElement = preparseElement(ast);
    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
      // Skipping <script> for security reasons
      // Skipping <style> and stylesheets as we already processed them
      // in the StyleCompiler
      return null;
    }
    const children = visitAll(this, ast.children, null);
    return new Element$1(ast.name, visitAll(this, ast.attrs), /* inputs */[], /* outputs */[], children, /* references */[], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
  }
  visitComment(comment) {
    return null;
  }
  visitAttribute(attribute) {
    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);
  }
  visitText(text) {
    return new Text$3(text.value, text.sourceSpan);
  }
  visitExpansion(expansion) {
    return null;
  }
  visitExpansionCase(expansionCase) {
    return null;
  }
}
const NON_BINDABLE_VISITOR = new NonBindableVisitor();
function normalizeAttributeName(attrName) {
  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
}
function addEvents(events, boundEvents) {
  boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));
}
function isEmptyTextNode(node) {
  return node instanceof Text && node.value.trim().length == 0;
}
function isCommentNode(node) {
  return node instanceof Comment;
}
function textContents(node) {
  if (node.children.length !== 1 || !(node.children[0] instanceof Text)) {
    return null;
  } else {
    return node.children[0].value;
  }
}
var TagType;
(function (TagType) {
  TagType[TagType["ELEMENT"] = 0] = "ELEMENT";
  TagType[TagType["TEMPLATE"] = 1] = "TEMPLATE";
})(TagType || (TagType = {}));
/**
 * Generates an object that is used as a shared state between parent and all child contexts.
 */
function setupRegistry() {
  return {
    getUniqueId: getSeqNumberGenerator(),
    icus: new Map()
  };
}
/**
 * I18nContext is a helper class which keeps track of all i18n-related aspects
 * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.
 *
 * When we enter a nested template, the top-level context is being passed down
 * to the nested component, which uses this context to generate a child instance
 * of I18nContext class (to handle nested template) and at the end, reconciles it back
 * with the parent context.
 *
 * @param index Instruction index of i18nStart, which initiates this context
 * @param ref Reference to a translation const that represents the content if thus context
 * @param level Nesting level defined for child contexts
 * @param templateIndex Instruction index of a template which this context belongs to
 * @param meta Meta information (id, meaning, description, etc) associated with this context
 */
class I18nContext {
  constructor(index, ref, level = 0, templateIndex = null, meta, registry) {
    this.index = index;
    this.ref = ref;
    this.level = level;
    this.templateIndex = templateIndex;
    this.meta = meta;
    this.registry = registry;
    this.bindings = new Set();
    this.placeholders = new Map();
    this.isEmitted = false;
    this._unresolvedCtxCount = 0;
    this._registry = registry || setupRegistry();
    this.id = this._registry.getUniqueId();
  }
  appendTag(type, node, index, closed) {
    if (node.isVoid && closed) {
      return; // ignore "close" for void tags
    }

    const ph = node.isVoid || !closed ? node.startName : node.closeName;
    const content = {
      type,
      index,
      ctx: this.id,
      isVoid: node.isVoid,
      closed
    };
    updatePlaceholderMap(this.placeholders, ph, content);
  }
  get icus() {
    return this._registry.icus;
  }
  get isRoot() {
    return this.level === 0;
  }
  get isResolved() {
    return this._unresolvedCtxCount === 0;
  }
  getSerializedPlaceholders() {
    const result = new Map();
    this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));
    return result;
  }
  // public API to accumulate i18n-related content
  appendBinding(binding) {
    this.bindings.add(binding);
  }
  appendIcu(name, ref) {
    updatePlaceholderMap(this._registry.icus, name, ref);
  }
  appendBoundText(node) {
    const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);
    phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));
  }
  appendTemplate(node, index) {
    // add open and close tags at the same time,
    // since we process nested templates separately
    this.appendTag(TagType.TEMPLATE, node, index, false);
    this.appendTag(TagType.TEMPLATE, node, index, true);
    this._unresolvedCtxCount++;
  }
  appendElement(node, index, closed) {
    this.appendTag(TagType.ELEMENT, node, index, closed);
  }
  appendProjection(node, index) {
    // Add open and close tags at the same time, since `<ng-content>` has no content,
    // so when we come across `<ng-content>` we can register both open and close tags.
    // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and
    // regular element tag placeholders, so we generate element placeholders for both types.
    this.appendTag(TagType.ELEMENT, node, index, false);
    this.appendTag(TagType.ELEMENT, node, index, true);
  }
  /**
   * Generates an instance of a child context based on the root one,
   * when we enter a nested template within I18n section.
   *
   * @param index Instruction index of corresponding i18nStart, which initiates this context
   * @param templateIndex Instruction index of a template which this context belongs to
   * @param meta Meta information (id, meaning, description, etc) associated with this context
   *
   * @returns I18nContext instance
   */
  forkChildContext(index, templateIndex, meta) {
    return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);
  }
  /**
   * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).
   *
   * @param context Child I18nContext instance to be reconciled with parent context.
   */
  reconcileChildContext(context) {
    // set the right context id for open and close
    // template tags, so we can use it as sub-block ids
    ['start', 'close'].forEach(op => {
      const key = context.meta[`${op}Name`];
      const phs = this.placeholders.get(key) || [];
      const tag = phs.find(findTemplateFn(this.id, context.templateIndex));
      if (tag) {
        tag.ctx = context.id;
      }
    });
    // reconcile placeholders
    const childPhs = context.placeholders;
    childPhs.forEach((values, key) => {
      const phs = this.placeholders.get(key);
      if (!phs) {
        this.placeholders.set(key, values);
        return;
      }
      // try to find matching template...
      const tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));
      if (tmplIdx >= 0) {
        // ... if found - replace it with nested template content
        const isCloseTag = key.startsWith('CLOSE');
        const isTemplateTag = key.endsWith('NG-TEMPLATE');
        if (isTemplateTag) {
          // current template's content is placed before or after
          // parent template tag, depending on the open/close attribute
          phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);
        } else {
          const idx = isCloseTag ? values.length - 1 : 0;
          values[idx].tmpl = phs[tmplIdx];
          phs.splice(tmplIdx, 1, ...values);
        }
      } else {
        // ... otherwise just append content to placeholder value
        phs.push(...values);
      }
      this.placeholders.set(key, phs);
    });
    this._unresolvedCtxCount--;
  }
}
//
// Helper methods
//
function wrap(symbol, index, contextId, closed) {
  const state = closed ? '/' : '';
  return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);
}
function wrapTag(symbol, {
  index,
  ctx,
  isVoid
}, closed) {
  return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);
}
function findTemplateFn(ctx, templateIndex) {
  return token => typeof token === 'object' && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;
}
function serializePlaceholderValue(value) {
  const element = (data, closed) => wrapTag('#', data, closed);
  const template = (data, closed) => wrapTag('*', data, closed);
  switch (value.type) {
    case TagType.ELEMENT:
      // close element tag
      if (value.closed) {
        return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');
      }
      // open element tag that also initiates a template
      if (value.tmpl) {
        return template(value.tmpl) + element(value) + (value.isVoid ? template(value.tmpl, true) : '');
      }
      return element(value);
    case TagType.TEMPLATE:
      return template(value, value.closed);
    default:
      return value;
  }
}
class IcuSerializerVisitor {
  visitText(text) {
    return text.value;
  }
  visitContainer(container) {
    return container.children.map(child => child.visit(this)).join('');
  }
  visitIcu(icu) {
    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
    const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;
    return result;
  }
  visitTagPlaceholder(ph) {
    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;
  }
  visitPlaceholder(ph) {
    return this.formatPh(ph.name);
  }
  visitIcuPlaceholder(ph, context) {
    return this.formatPh(ph.name);
  }
  formatPh(value) {
    return `{${formatI18nPlaceholderName(value, /* useCamelCase */false)}}`;
  }
}
const serializer = new IcuSerializerVisitor();
function serializeIcuNode(icu) {
  return icu.visit(serializer);
}
const TAG_TO_PLACEHOLDER_NAMES = {
  'A': 'LINK',
  'B': 'BOLD_TEXT',
  'BR': 'LINE_BREAK',
  'EM': 'EMPHASISED_TEXT',
  'H1': 'HEADING_LEVEL1',
  'H2': 'HEADING_LEVEL2',
  'H3': 'HEADING_LEVEL3',
  'H4': 'HEADING_LEVEL4',
  'H5': 'HEADING_LEVEL5',
  'H6': 'HEADING_LEVEL6',
  'HR': 'HORIZONTAL_RULE',
  'I': 'ITALIC_TEXT',
  'LI': 'LIST_ITEM',
  'LINK': 'MEDIA_LINK',
  'OL': 'ORDERED_LIST',
  'P': 'PARAGRAPH',
  'Q': 'QUOTATION',
  'S': 'STRIKETHROUGH_TEXT',
  'SMALL': 'SMALL_TEXT',
  'SUB': 'SUBSTRIPT',
  'SUP': 'SUPERSCRIPT',
  'TBODY': 'TABLE_BODY',
  'TD': 'TABLE_CELL',
  'TFOOT': 'TABLE_FOOTER',
  'TH': 'TABLE_HEADER_CELL',
  'THEAD': 'TABLE_HEADER',
  'TR': 'TABLE_ROW',
  'TT': 'MONOSPACED_TEXT',
  'U': 'UNDERLINED_TEXT',
  'UL': 'UNORDERED_LIST'
};
/**
 * Creates unique names for placeholder with different content.
 *
 * Returns the same placeholder name when the content is identical.
 */
class PlaceholderRegistry {
  constructor() {
    // Count the occurrence of the base name top generate a unique name
    this._placeHolderNameCounts = {};
    // Maps signature to placeholder names
    this._signatureToName = {};
  }
  getStartTagPlaceholderName(tag, attrs, isVoid) {
    const signature = this._hashTag(tag, attrs, isVoid);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const upperTag = tag.toUpperCase();
    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);
    this._signatureToName[signature] = name;
    return name;
  }
  getCloseTagPlaceholderName(tag) {
    const signature = this._hashClosingTag(tag);
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const upperTag = tag.toUpperCase();
    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;
    const name = this._generateUniqueName(`CLOSE_${baseName}`);
    this._signatureToName[signature] = name;
    return name;
  }
  getPlaceholderName(name, content) {
    const upperName = name.toUpperCase();
    const signature = `PH: ${upperName}=${content}`;
    if (this._signatureToName[signature]) {
      return this._signatureToName[signature];
    }
    const uniqueName = this._generateUniqueName(upperName);
    this._signatureToName[signature] = uniqueName;
    return uniqueName;
  }
  getUniquePlaceholder(name) {
    return this._generateUniqueName(name.toUpperCase());
  }
  // Generate a hash for a tag - does not take attribute order into account
  _hashTag(tag, attrs, isVoid) {
    const start = `<${tag}`;
    const strAttrs = Object.keys(attrs).sort().map(name => ` ${name}=${attrs[name]}`).join('');
    const end = isVoid ? '/>' : `></${tag}>`;
    return start + strAttrs + end;
  }
  _hashClosingTag(tag) {
    return this._hashTag(`/${tag}`, {}, false);
  }
  _generateUniqueName(base) {
    const seen = this._placeHolderNameCounts.hasOwnProperty(base);
    if (!seen) {
      this._placeHolderNameCounts[base] = 1;
      return base;
    }
    const id = this._placeHolderNameCounts[base];
    this._placeHolderNameCounts[base] = id + 1;
    return `${base}_${id}`;
  }
}
const _expParser = new Parser$1(new Lexer());
/**
 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
 */
function createI18nMessageFactory(interpolationConfig) {
  const visitor = new _I18nVisitor(_expParser, interpolationConfig);
  return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
}
function noopVisitNodeFn(_html, i18n) {
  return i18n;
}
class _I18nVisitor {
  constructor(_expressionParser, _interpolationConfig) {
    this._expressionParser = _expressionParser;
    this._interpolationConfig = _interpolationConfig;
  }
  toI18nMessage(nodes, meaning = '', description = '', customId = '', visitNodeFn) {
    const context = {
      isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
      icuDepth: 0,
      placeholderRegistry: new PlaceholderRegistry(),
      placeholderToContent: {},
      placeholderToMessage: {},
      visitNodeFn: visitNodeFn || noopVisitNodeFn
    };
    const i18nodes = visitAll(this, nodes, context);
    return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);
  }
  visitElement(el, context) {
    const children = visitAll(this, el.children, context);
    const attrs = {};
    el.attrs.forEach(attr => {
      // Do not visit the attributes, translatable ones are top-level ASTs
      attrs[attr.name] = attr.value;
    });
    const isVoid = getHtmlTagDefinition(el.name).isVoid;
    const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
    context.placeholderToContent[startPhName] = {
      text: el.startSourceSpan.toString(),
      sourceSpan: el.startSourceSpan
    };
    let closePhName = '';
    if (!isVoid) {
      closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);
      context.placeholderToContent[closePhName] = {
        text: `</${el.name}>`,
        sourceSpan: el.endSourceSpan ?? el.sourceSpan
      };
    }
    const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
    return context.visitNodeFn(el, node);
  }
  visitAttribute(attribute, context) {
    const node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ? new Text$2(attribute.value, attribute.valueSpan || attribute.sourceSpan) : this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);
    return context.visitNodeFn(attribute, node);
  }
  visitText(text, context) {
    const node = text.tokens.length === 1 ? new Text$2(text.value, text.sourceSpan) : this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);
    return context.visitNodeFn(text, node);
  }
  visitComment(comment, context) {
    return null;
  }
  visitExpansion(icu, context) {
    context.icuDepth++;
    const i18nIcuCases = {};
    const i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
    icu.cases.forEach(caze => {
      i18nIcuCases[caze.value] = new Container(caze.expression.map(node => node.visit(this, context)), caze.expSourceSpan);
    });
    context.icuDepth--;
    if (context.isIcu || context.icuDepth > 0) {
      // Returns an ICU node when:
      // - the message (vs a part of the message) is an ICU message, or
      // - the ICU message is nested.
      const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);
      i18nIcu.expressionPlaceholder = expPh;
      context.placeholderToContent[expPh] = {
        text: icu.switchValue,
        sourceSpan: icu.switchValueSourceSpan
      };
      return context.visitNodeFn(icu, i18nIcu);
    }
    // Else returns a placeholder
    // ICU placeholders should not be replaced with their original content but with the their
    // translations.
    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
    const phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
    context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);
    const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    return context.visitNodeFn(icu, node);
  }
  visitExpansionCase(_icuCase, _context) {
    throw new Error('Unreachable code');
  }
  /**
   * Convert, text and interpolated tokens up into text and placeholder pieces.
   *
   * @param tokens The text and interpolated tokens.
   * @param sourceSpan The span of the whole of the `text` string.
   * @param context The current context of the visitor, used to compute and store placeholders.
   * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.
   */
  _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {
    // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.
    const nodes = [];
    // We will only create a container if there are actually interpolations,
    // so this flag tracks that.
    let hasInterpolation = false;
    for (const token of tokens) {
      switch (token.type) {
        case 8 /* TokenType.INTERPOLATION */:
        case 17 /* TokenType.ATTR_VALUE_INTERPOLATION */:
          hasInterpolation = true;
          const expression = token.parts[1];
          const baseName = extractPlaceholderName(expression) || 'INTERPOLATION';
          const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);
          context.placeholderToContent[phName] = {
            text: token.parts.join(''),
            sourceSpan: token.sourceSpan
          };
          nodes.push(new Placeholder(expression, phName, token.sourceSpan));
          break;
        default:
          if (token.parts[0].length > 0) {
            // This token is text or an encoded entity.
            // If it is following on from a previous text node then merge it into that node
            // Otherwise, if it is following an interpolation, then add a new node.
            const previous = nodes[nodes.length - 1];
            if (previous instanceof Text$2) {
              previous.value += token.parts[0];
              previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);
            } else {
              nodes.push(new Text$2(token.parts[0], token.sourceSpan));
            }
          }
          break;
      }
    }
    if (hasInterpolation) {
      // Whitespace removal may have invalidated the interpolation source-spans.
      reusePreviousSourceSpans(nodes, previousI18n);
      return new Container(nodes, sourceSpan);
    } else {
      return nodes[0];
    }
  }
}
/**
 * Re-use the source-spans from `previousI18n` metadata for the `nodes`.
 *
 * Whitespace removal can invalidate the source-spans of interpolation nodes, so we
 * reuse the source-span stored from a previous pass before the whitespace was removed.
 *
 * @param nodes The `Text` and `Placeholder` nodes to be processed.
 * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.
 */
function reusePreviousSourceSpans(nodes, previousI18n) {
  if (previousI18n instanceof Message) {
    // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n
    // metadata. The `Message` should consist only of a single `Container` that contains the
    // parts (`Text` and `Placeholder`) to process.
    assertSingleContainerMessage(previousI18n);
    previousI18n = previousI18n.nodes[0];
  }
  if (previousI18n instanceof Container) {
    // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass
    // after whitespace has been removed from the AST nodes.
    assertEquivalentNodes(previousI18n.children, nodes);
    // Reuse the source-spans from the first pass.
    for (let i = 0; i < nodes.length; i++) {
      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;
    }
  }
}
/**
 * Asserts that the `message` contains exactly one `Container` node.
 */
function assertSingleContainerMessage(message) {
  const nodes = message.nodes;
  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {
    throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');
  }
}
/**
 * Asserts that the `previousNodes` and `node` collections have the same number of elements and
 * corresponding elements have the same node type.
 */
function assertEquivalentNodes(previousNodes, nodes) {
  if (previousNodes.length !== nodes.length) {
    throw new Error('The number of i18n message children changed between first and second pass.');
  }
  if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {
    throw new Error('The types of the i18n message children changed between first and second pass.');
  }
}
const _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
function extractPlaceholderName(input) {
  return input.split(_CUSTOM_PH_EXP)[2];
}

/**
 * An i18n error.
 */
class I18nError extends ParseError {
  constructor(span, msg) {
    super(span, msg);
  }
}
const setI18nRefs = (htmlNode, i18nNode) => {
  if (htmlNode instanceof NodeWithI18n) {
    if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {
      // This html node represents an ICU but this is a second processing pass, and the legacy id
      // was computed in the previous pass and stored in the `i18n` property as a message.
      // We are about to wipe out that property so capture the previous message to be reused when
      // generating the message for this ICU later. See `_generateI18nMessage()`.
      i18nNode.previousMessage = htmlNode.i18n;
    }
    htmlNode.i18n = i18nNode;
  }
  return i18nNode;
};
/**
 * This visitor walks over HTML parse tree and converts information stored in
 * i18n-related attributes ("i18n" and "i18n-*") into i18n meta object that is
 * stored with other element's and attribute's information.
 */
class I18nMetaVisitor {
  constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false) {
    this.interpolationConfig = interpolationConfig;
    this.keepI18nAttrs = keepI18nAttrs;
    this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;
    // whether visited nodes contain i18n information
    this.hasI18nMeta = false;
    this._errors = [];
    // i18n message generation factory
    this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);
  }
  _generateI18nMessage(nodes, meta = '', visitNodeFn) {
    const {
      meaning,
      description,
      customId
    } = this._parseMetadata(meta);
    const message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);
    this._setMessageId(message, meta);
    this._setLegacyIds(message, meta);
    return message;
  }
  visitAllWithErrors(nodes) {
    const result = nodes.map(node => node.visit(this, null));
    return new ParseTreeResult(result, this._errors);
  }
  visitElement(element) {
    let message = undefined;
    if (hasI18nAttrs(element)) {
      this.hasI18nMeta = true;
      const attrs = [];
      const attrsMeta = {};
      for (const attr of element.attrs) {
        if (attr.name === I18N_ATTR) {
          // root 'i18n' node attribute
          const i18n = element.i18n || attr.value;
          message = this._generateI18nMessage(element.children, i18n, setI18nRefs);
          if (message.nodes.length === 0) {
            // Ignore the message if it is empty.
            message = undefined;
          }
          // Store the message on the element
          element.i18n = message;
        } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
          // 'i18n-*' attributes
          const name = attr.name.slice(I18N_ATTR_PREFIX.length);
          if (isTrustedTypesSink(element.name, name)) {
            this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);
          } else {
            attrsMeta[name] = attr.value;
          }
        } else {
          // non-i18n attributes
          attrs.push(attr);
        }
      }
      // set i18n meta for attributes
      if (Object.keys(attrsMeta).length) {
        for (const attr of attrs) {
          const meta = attrsMeta[attr.name];
          // do not create translation for empty attributes
          if (meta !== undefined && attr.value) {
            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
          }
        }
      }
      if (!this.keepI18nAttrs) {
        // update element's attributes,
        // keeping only non-i18n related ones
        element.attrs = attrs;
      }
    }
    visitAll(this, element.children, message);
    return element;
  }
  visitExpansion(expansion, currentMessage) {
    let message;
    const meta = expansion.i18n;
    this.hasI18nMeta = true;
    if (meta instanceof IcuPlaceholder) {
      // set ICU placeholder name (e.g. "ICU_1"),
      // generated while processing root element contents,
      // so we can reference it when we output translation
      const name = meta.name;
      message = this._generateI18nMessage([expansion], meta);
      const icu = icuFromI18nMessage(message);
      icu.name = name;
      if (currentMessage !== null) {
        // Also update the placeholderToMessage map with this new message
        currentMessage.placeholderToMessage[name] = message;
      }
    } else {
      // ICU is a top level message, try to use metadata from container element if provided via
      // `context` argument. Note: context may not be available for standalone ICUs (without
      // wrapping element), so fallback to ICU metadata in this case.
      message = this._generateI18nMessage([expansion], currentMessage || meta);
    }
    expansion.i18n = message;
    return expansion;
  }
  visitText(text) {
    return text;
  }
  visitAttribute(attribute) {
    return attribute;
  }
  visitComment(comment) {
    return comment;
  }
  visitExpansionCase(expansionCase) {
    return expansionCase;
  }
  /**
   * Parse the general form `meta` passed into extract the explicit metadata needed to create a
   * `Message`.
   *
   * There are three possibilities for the `meta` variable
   * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
   * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
   * 4) other: ignore this and just process the message metadata as normal
   *
   * @param meta the bucket that holds information about the message
   * @returns the parsed metadata.
   */
  _parseMetadata(meta) {
    return typeof meta === 'string' ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};
  }
  /**
   * Generate (or restore) message id if not specified already.
   */
  _setMessageId(message, meta) {
    if (!message.id) {
      message.id = meta instanceof Message && meta.id || decimalDigest(message);
    }
  }
  /**
   * Update the `message` with a `legacyId` if necessary.
   *
   * @param message the message whose legacy id should be set
   * @param meta information about the message being processed
   */
  _setLegacyIds(message, meta) {
    if (this.enableI18nLegacyMessageIdFormat) {
      message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
    } else if (typeof meta !== 'string') {
      // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in
      // `packages/compiler/src/render3/view/template.ts`).
      // In that case we want to reuse the legacy message generated in the 1st pass (see
      // `setI18nRefs()`).
      const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;
      message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
    }
  }
  _reportError(node, msg) {
    this._errors.push(new I18nError(node.sourceSpan, msg));
  }
}
/** I18n separators for metadata **/
const I18N_MEANING_SEPARATOR = '|';
const I18N_ID_SEPARATOR = '@@';
/**
 * Parses i18n metas like:
 *  - "@@id",
 *  - "description[@@id]",
 *  - "meaning|description[@@id]"
 * and returns an object with parsed output.
 *
 * @param meta String that represents i18n meta
 * @returns Object with id, meaning and description fields
 */
function parseI18nMeta(meta = '') {
  let customId;
  let meaning;
  let description;
  meta = meta.trim();
  if (meta) {
    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);
    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
    let meaningAndDesc;
    [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];
    [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];
  }
  return {
    customId,
    meaning,
    description
  };
}
// Converts i18n meta information for a message (id, description, meaning)
// to a JsDoc statement formatted as expected by the Closure compiler.
function i18nMetaToJSDoc(meta) {
  const tags = [];
  if (meta.description) {
    tags.push({
      tagName: "desc" /* o.JSDocTagName.Desc */,
      text: meta.description
    });
  } else {
    // Suppress the JSCompiler warning that a `@desc` was not given for this message.
    tags.push({
      tagName: "suppress" /* o.JSDocTagName.Suppress */,
      text: '{msgDescriptions}'
    });
  }
  if (meta.meaning) {
    tags.push({
      tagName: "meaning" /* o.JSDocTagName.Meaning */,
      text: meta.meaning
    });
  }
  return jsDocComment(tags);
}

/** Closure uses `goog.getMsg(message)` to lookup translations */
const GOOG_GET_MSG = 'goog.getMsg';
/**
 * Generates a `goog.getMsg()` statement and reassignment. The template:
 *
 * ```html
 * <div i18n>Sent from {{ sender }} to <span class="receiver">{{ receiver }}</span></div>
 * ```
 *
 * Generates:
 *
 * ```typescript
 * const MSG_FOO = goog.getMsg(
 *   // Message template.
 *   'Sent from {$interpolation} to {$startTagSpan}{$interpolation_1}{$closeTagSpan}.',
 *   // Placeholder values, set to magic strings which get replaced by the Angular runtime.
 *   {
 *     'interpolation': '\uFFFD0\uFFFD',
 *     'startTagSpan': '\uFFFD1\uFFFD',
 *     'interpolation_1': '\uFFFD2\uFFFD',
 *     'closeTagSpan': '\uFFFD3\uFFFD',
 *   },
 *   // Options bag.
 *   {
 *     // Maps each placeholder to the original Angular source code which generates it's value.
 *     original_code: {
 *       'interpolation': '{{ sender }}',
 *       'startTagSpan': '<span class="receiver">',
 *       'interpolation_1': '{{ receiver }}',
 *       'closeTagSpan': '</span>',
 *     },
 *   },
 * );
 * const I18N_0 = MSG_FOO;
 * ```
 */
function createGoogleGetMsgStatements(variable$1, message, closureVar, placeholderValues) {
  const messageString = serializeI18nMessageForGetMsg(message);
  const args = [literal(messageString)];
  if (Object.keys(placeholderValues).length) {
    // Message template parameters containing the magic strings replaced by the Angular runtime with
    // real data, e.g. `{'interpolation': '\uFFFD0\uFFFD'}`.
    args.push(mapLiteral(formatI18nPlaceholderNamesInMap(placeholderValues, true /* useCamelCase */), true /* quoted */));
    // Message options object, which contains original source code for placeholders (as they are
    // present in a template, e.g.
    // `{original_code: {'interpolation': '{{ name }}', 'startTagSpan': '<span>'}}`.
    args.push(mapLiteral({
      original_code: literalMap(Object.keys(placeholderValues).map(param => ({
        key: formatI18nPlaceholderName(param),
        quoted: true,
        value: message.placeholders[param] ?
        // Get source span for typical placeholder if it exists.
        literal(message.placeholders[param].sourceSpan.toString()) :
        // Otherwise must be an ICU expression, get it's source span.
        literal(message.placeholderToMessage[param].nodes.map(node => node.sourceSpan.toString()).join(''))
      })))
    }));
  }
  // /**
  //  * @desc description of message
  //  * @meaning meaning of message
  //  */
  // const MSG_... = goog.getMsg(..);
  // I18N_X = MSG_...;
  const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();
  googGetMsgStmt.addLeadingComment(i18nMetaToJSDoc(message));
  const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));
  return [googGetMsgStmt, i18nAssignmentStmt];
}
/**
 * This visitor walks over i18n tree and generates its string representation, including ICUs and
 * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.
 */
class GetMsgSerializerVisitor {
  formatPh(value) {
    return `{$${formatI18nPlaceholderName(value)}}`;
  }
  visitText(text) {
    return text.value;
  }
  visitContainer(container) {
    return container.children.map(child => child.visit(this)).join('');
  }
  visitIcu(icu) {
    return serializeIcuNode(icu);
  }
  visitTagPlaceholder(ph) {
    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;
  }
  visitPlaceholder(ph) {
    return this.formatPh(ph.name);
  }
  visitIcuPlaceholder(ph, context) {
    return this.formatPh(ph.name);
  }
}
const serializerVisitor = new GetMsgSerializerVisitor();
function serializeI18nMessageForGetMsg(message) {
  return message.nodes.map(node => node.visit(serializerVisitor, null)).join('');
}
function createLocalizeStatements(variable, message, params) {
  const {
    messageParts,
    placeHolders
  } = serializeI18nMessageForLocalize(message);
  const sourceSpan = getSourceSpan(message);
  const expressions = placeHolders.map(ph => params[ph.text]);
  const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);
  const variableInitialization = variable.set(localizedString$1);
  return [new ExpressionStatement(variableInitialization)];
}
/**
 * This visitor walks over an i18n tree, capturing literal strings and placeholders.
 *
 * The result can be used for generating the `$localize` tagged template literals.
 */
class LocalizeSerializerVisitor {
  constructor(placeholderToMessage, pieces) {
    this.placeholderToMessage = placeholderToMessage;
    this.pieces = pieces;
  }
  visitText(text) {
    if (this.pieces[this.pieces.length - 1] instanceof LiteralPiece) {
      // Two literal pieces in a row means that there was some comment node in-between.
      this.pieces[this.pieces.length - 1].text += text.value;
    } else {
      const sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);
      this.pieces.push(new LiteralPiece(text.value, sourceSpan));
    }
  }
  visitContainer(container) {
    container.children.forEach(child => child.visit(this));
  }
  visitIcu(icu) {
    this.pieces.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));
  }
  visitTagPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.startName, ph.startSourceSpan ?? ph.sourceSpan));
    if (!ph.isVoid) {
      ph.children.forEach(child => child.visit(this));
      this.pieces.push(this.createPlaceholderPiece(ph.closeName, ph.endSourceSpan ?? ph.sourceSpan));
    }
  }
  visitPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));
  }
  visitIcuPlaceholder(ph) {
    this.pieces.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan, this.placeholderToMessage[ph.name]));
  }
  createPlaceholderPiece(name, sourceSpan, associatedMessage) {
    return new PlaceholderPiece(formatI18nPlaceholderName(name, /* useCamelCase */false), sourceSpan, associatedMessage);
  }
}
/**
 * Serialize an i18n message into two arrays: messageParts and placeholders.
 *
 * These arrays will be used to generate `$localize` tagged template literals.
 *
 * @param message The message to be serialized.
 * @returns an object containing the messageParts and placeholders.
 */
function serializeI18nMessageForLocalize(message) {
  const pieces = [];
  const serializerVisitor = new LocalizeSerializerVisitor(message.placeholderToMessage, pieces);
  message.nodes.forEach(node => node.visit(serializerVisitor));
  return processMessagePieces(pieces);
}
function getSourceSpan(message) {
  const startNode = message.nodes[0];
  const endNode = message.nodes[message.nodes.length - 1];
  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);
}
/**
 * Convert the list of serialized MessagePieces into two arrays.
 *
 * One contains the literal string pieces and the other the placeholders that will be replaced by
 * expressions when rendering `$localize` tagged template literals.
 *
 * @param pieces The pieces to process.
 * @returns an object containing the messageParts and placeholders.
 */
function processMessagePieces(pieces) {
  const messageParts = [];
  const placeHolders = [];
  if (pieces[0] instanceof PlaceholderPiece) {
    // The first piece was a placeholder so we need to add an initial empty message part.
    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));
  }
  for (let i = 0; i < pieces.length; i++) {
    const part = pieces[i];
    if (part instanceof LiteralPiece) {
      messageParts.push(part);
    } else {
      placeHolders.push(part);
      if (pieces[i - 1] instanceof PlaceholderPiece) {
        // There were two placeholders in a row, so we need to add an empty message part.
        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));
      }
    }
  }
  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
    // The last piece was a placeholder so we need to add a final empty message part.
    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));
  }
  return {
    messageParts,
    placeHolders
  };
}
function createEmptyMessagePart(location) {
  return new LiteralPiece('', new ParseSourceSpan(location, location));
}

// Selector attribute name of `<ng-content>`
const NG_CONTENT_SELECT_ATTR = 'select';
// Attribute name of `ngProjectAs`.
const NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';
// Global symbols available only inside event bindings.
const EVENT_BINDING_SCOPE_GLOBALS = new Set(['$event']);
// List of supported global targets for event listeners
const GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers.resolveWindow], ['document', Identifiers.resolveDocument], ['body', Identifiers.resolveBody]]);
const LEADING_TRIVIA_CHARS = [' ', '\n', '\r', '\t'];
//  if (rf & flags) { .. }
function renderFlagCheckIfStmt(flags, statements) {
  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);
}
function prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {
  const {
    type,
    name,
    target,
    phase,
    handler
  } = eventAst;
  if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {
    throw new Error(`Unexpected global target '${target}' defined for '${name}' event.
        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);
  }
  const eventArgumentName = '$event';
  const implicitReceiverAccesses = new Set();
  const implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);
  const bindingStatements = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);
  const statements = [];
  const variableDeclarations = scope?.variableDeclarations();
  const restoreViewStatement = scope?.restoreViewStatement();
  if (variableDeclarations) {
    // `variableDeclarations` needs to run first, because
    // `restoreViewStatement` depends on the result.
    statements.push(...variableDeclarations);
  }
  statements.push(...bindingStatements);
  if (restoreViewStatement) {
    statements.unshift(restoreViewStatement);
    // If there's a `restoreView` call, we need to reset the view at the end of the listener
    // in order to avoid a leak. If there's a `return` statement already, we wrap it in the
    // call, e.g. `return resetView(ctx.foo())`. Otherwise we add the call as the last statement.
    const lastStatement = statements[statements.length - 1];
    if (lastStatement instanceof ReturnStatement) {
      statements[statements.length - 1] = new ReturnStatement(invokeInstruction(lastStatement.value.sourceSpan, Identifiers.resetView, [lastStatement.value]));
    } else {
      statements.push(new ExpressionStatement(invokeInstruction(null, Identifiers.resetView, [])));
    }
  }
  const eventName = type === 1 /* ParsedEventType.Animation */ ? prepareSyntheticListenerName(name, phase) : name;
  const fnName = handlerName && sanitizeIdentifier(handlerName);
  const fnArgs = [];
  if (implicitReceiverAccesses.has(eventArgumentName)) {
    fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));
  }
  const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);
  const params = [literal(eventName), handlerFn];
  if (target) {
    params.push(literal(false),
    // `useCapture` flag, defaults to `false`
    importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));
  }
  return params;
}
function createComponentDefConsts() {
  return {
    prepareStatements: [],
    constExpressions: [],
    i18nVarRefsCache: new Map()
  };
}
class TemplateDefinitionBuilder {
  constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, _namespace, relativeContextFilePath, i18nUseExternalIds, _constants = createComponentDefConsts()) {
    this.constantPool = constantPool;
    this.level = level;
    this.contextName = contextName;
    this.i18nContext = i18nContext;
    this.templateIndex = templateIndex;
    this.templateName = templateName;
    this._namespace = _namespace;
    this.i18nUseExternalIds = i18nUseExternalIds;
    this._constants = _constants;
    this._dataIndex = 0;
    this._bindingContext = 0;
    this._prefixCode = [];
    /**
     * List of callbacks to generate creation mode instructions. We store them here as we process
     * the template so bindings in listeners are resolved only once all nodes have been visited.
     * This ensures all local refs and context variables are available for matching.
     */
    this._creationCodeFns = [];
    /**
     * List of callbacks to generate update mode instructions. We store them here as we process
     * the template so bindings are resolved only once all nodes have been visited. This ensures
     * all local refs and context variables are available for matching.
     */
    this._updateCodeFns = [];
    /** Index of the currently-selected node. */
    this._currentIndex = 0;
    /** Temporary variable declarations generated from visiting pipes, literals, etc. */
    this._tempVariables = [];
    /**
     * List of callbacks to build nested templates. Nested templates must not be visited until
     * after the parent template has finished visiting all of its nodes. This ensures that all
     * local ref bindings in nested templates are able to find local ref values if the refs
     * are defined after the template declaration.
     */
    this._nestedTemplateFns = [];
    // i18n context local to this template
    this.i18n = null;
    // Number of slots to reserve for pureFunctions
    this._pureFunctionSlots = 0;
    // Number of binding slots
    this._bindingSlots = 0;
    // Projection slots found in the template. Projection slots can distribute projected
    // nodes based on a selector, or can just use the wildcard selector to match
    // all nodes which aren't matching any selector.
    this._ngContentReservedSlots = [];
    // Number of non-default selectors found in all parent templates of this template. We need to
    // track it to properly adjust projection slot index in the `projection` instruction.
    this._ngContentSelectorsOffset = 0;
    // Expression that should be used as implicit receiver when converting template
    // expressions to output AST.
    this._implicitReceiverExpr = null;
    // These should be handled in the template or element directly.
    this.visitReference = invalid;
    this.visitVariable = invalid;
    this.visitTextAttribute = invalid;
    this.visitBoundAttribute = invalid;
    this.visitBoundEvent = invalid;
    this._bindingScope = parentBindingScope.nestedScope(level);
    // Turn the relative context file path into an identifier by replacing non-alphanumeric
    // characters with underscores.
    this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';
    this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), numSlots => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {
      this._bindingScope.set(this.level, localName, value);
      this.creationInstruction(null, Identifiers.pipe, [literal(slot), literal(name)]);
    });
  }
  buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n) {
    this._ngContentSelectorsOffset = ngContentSelectorsOffset;
    if (this._namespace !== Identifiers.namespaceHTML) {
      this.creationInstruction(null, this._namespace);
    }
    // Create variable bindings
    variables.forEach(v => this.registerContextVariables(v));
    // Initiate i18n context in case:
    // - this template has parent i18n context
    // - or the template has i18n meta associated with it,
    //   but it's not initiated by the Element (e.g. <ng-template i18n>)
    const initI18nContext = this.i18nContext || isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n);
    const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);
    if (initI18nContext) {
      this.i18nStart(null, i18n, selfClosingI18nInstruction);
    }
    // This is the initial pass through the nodes of this template. In this pass, we
    // queue all creation mode and update mode instructions for generation in the second
    // pass. It's necessary to separate the passes to ensure local refs are defined before
    // resolving bindings. We also count bindings in this pass as we walk bound expressions.
    visitAll$1(this, nodes);
    // Add total binding count to pure function count so pure function instructions are
    // generated with the correct slot offset when update instructions are processed.
    this._pureFunctionSlots += this._bindingSlots;
    // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and
    // `pipeBind` update instructions), so we have to update the slot offsets manually
    // to account for bindings.
    this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);
    // Nested templates must be processed before creation instructions so template()
    // instructions can be generated with the correct internal const count.
    this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn());
    // Output the `projectionDef` instruction when some `<ng-content>` tags are present.
    // The `projectionDef` instruction is only emitted for the component template and
    // is skipped for nested templates (<ng-template> tags).
    if (this.level === 0 && this._ngContentReservedSlots.length) {
      const parameters = [];
      // By default the `projectionDef` instructions creates one slot for the wildcard
      // selector if no parameters are passed. Therefore we only want to allocate a new
      // array for the projection slots if the default projection slot is not sufficient.
      if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {
        const r3ReservedSlots = this._ngContentReservedSlots.map(s => s !== '*' ? parseSelectorToR3Selector(s) : s);
        parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));
      }
      // Since we accumulate ngContent selectors while processing template elements,
      // we *prepend* `projectionDef` to creation instructions block, to put it before
      // any `projection` instructions
      this.creationInstruction(null, Identifiers.projectionDef, parameters, /* prepend */true);
    }
    if (initI18nContext) {
      this.i18nEnd(null, selfClosingI18nInstruction);
    }
    // Generate all the creation mode instructions (e.g. resolve bindings in listeners)
    const creationStatements = getInstructionStatements(this._creationCodeFns);
    // Generate all the update mode instructions (e.g. resolve property or text bindings)
    const updateStatements = getInstructionStatements(this._updateCodeFns);
    //  Variable declaration must occur after binding resolution so we can generate context
    //  instructions that build on each other.
    // e.g. const b = nextContext().$implicit(); const b = nextContext();
    const creationVariables = this._bindingScope.viewSnapshotStatements();
    const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);
    const creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, creationVariables.concat(creationStatements))] : [];
    const updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(updateStatements))] : [];
    return fn(
    // i.e. (rf: RenderFlags, ctx: any)
    [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [
    // Temporary variable declarations for query refresh (i.e. let _t: any;)
    ...this._prefixCode,
    // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })
    ...creationBlock,
    // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})
    ...updateBlock], INFERRED_TYPE, null, this.templateName);
  }
  // LocalResolver
  getLocal(name) {
    return this._bindingScope.get(name);
  }
  // LocalResolver
  notifyImplicitReceiverUse() {
    this._bindingScope.notifyImplicitReceiverUse();
  }
  // LocalResolver
  maybeRestoreView() {
    this._bindingScope.maybeRestoreView();
  }
  i18nTranslate(message, params = {}, ref, transformFn) {
    const _ref = ref || this.i18nGenerateMainBlockVar();
    // Closure Compiler requires const names to start with `MSG_` but disallows any other const to
    // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call
    const closureVar = this.i18nGenerateClosureVar(message.id);
    const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);
    this._constants.prepareStatements.push(...statements);
    return _ref;
  }
  registerContextVariables(variable$1) {
    const scopedName = this._bindingScope.freshReferenceName();
    const retrievalLevel = this.level;
    const lhs = variable(variable$1.name + scopedName);
    this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1 /* DeclarationPriority.CONTEXT */, (scope, relativeLevel) => {
      let rhs;
      if (scope.bindingLevel === retrievalLevel) {
        if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {
          // e.g. restoredCtx.
          // We have to get the context from a view reference, if one is available, because
          // the context that was passed in during creation may not be correct anymore.
          // For more information see: https://github.com/angular/angular/pull/40360.
          rhs = variable(RESTORED_VIEW_CONTEXT_NAME);
          scope.notifyRestoredViewContextUse();
        } else {
          // e.g. ctx
          rhs = variable(CONTEXT_NAME);
        }
      } else {
        const sharedCtxVar = scope.getSharedContextName(retrievalLevel);
        // e.g. ctx_r0   OR  x(2);
        rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);
      }
      // e.g. const $item$ = x(2).$implicit;
      return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];
    });
  }
  i18nAppendBindings(expressions) {
    if (expressions.length > 0) {
      expressions.forEach(expression => this.i18n.appendBinding(expression));
    }
  }
  i18nBindProps(props) {
    const bound = {};
    Object.keys(props).forEach(key => {
      const prop = props[key];
      if (prop instanceof Text$3) {
        bound[key] = literal(prop.value);
      } else {
        const value = prop.value.visit(this._valueConverter);
        this.allocateBindingSlots(value);
        if (value instanceof Interpolation) {
          const {
            strings,
            expressions
          } = value;
          const {
            id,
            bindings
          } = this.i18n;
          const label = assembleI18nBoundString(strings, bindings.size, id);
          this.i18nAppendBindings(expressions);
          bound[key] = literal(label);
        }
      }
    });
    return bound;
  }
  // Generates top level vars for i18n blocks (i.e. `i18n_N`).
  i18nGenerateMainBlockVar() {
    return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX));
  }
  // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).
  i18nGenerateClosureVar(messageId) {
    let name;
    const suffix = this.fileBasedI18nSuffix.toUpperCase();
    if (this.i18nUseExternalIds) {
      const prefix = getTranslationConstPrefix(`EXTERNAL_`);
      const uniqueSuffix = this.constantPool.uniqueName(suffix);
      name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;
    } else {
      const prefix = getTranslationConstPrefix(suffix);
      name = this.constantPool.uniqueName(prefix);
    }
    return variable(name);
  }
  i18nUpdateRef(context) {
    const {
      icus,
      meta,
      isRoot,
      isResolved,
      isEmitted
    } = context;
    if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {
      context.isEmitted = true;
      const placeholders = context.getSerializedPlaceholders();
      let icuMapping = {};
      let params = placeholders.size ? placeholdersToParams(placeholders) : {};
      if (icus.size) {
        icus.forEach((refs, key) => {
          if (refs.length === 1) {
            // if we have one ICU defined for a given
            // placeholder - just output its reference
            params[key] = refs[0];
          } else {
            // ... otherwise we need to activate post-processing
            // to replace ICU placeholders with proper values
            const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX}${key}`);
            params[key] = literal(placeholder);
            icuMapping[key] = literalArr(refs);
          }
        });
      }
      // translation requires post processing in 2 cases:
      // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])
      // - if we have multiple ICUs that refer to the same placeholder name
      const needsPostprocessing = Array.from(placeholders.values()).some(value => value.length > 1) || Object.keys(icuMapping).length;
      let transformFn;
      if (needsPostprocessing) {
        transformFn = raw => {
          const args = [raw];
          if (Object.keys(icuMapping).length) {
            args.push(mapLiteral(icuMapping, true));
          }
          return invokeInstruction(null, Identifiers.i18nPostprocess, args);
        };
      }
      this.i18nTranslate(meta, params, context.ref, transformFn);
    }
  }
  i18nStart(span = null, meta, selfClosing) {
    const index = this.allocateDataSlot();
    this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta);
    // generate i18nStart instruction
    const {
      id,
      ref
    } = this.i18n;
    const params = [literal(index), this.addToConsts(ref)];
    if (id > 0) {
      // do not push 3rd argument (sub-block id)
      // into i18nStart call for top level i18n context
      params.push(literal(id));
    }
    this.creationInstruction(span, selfClosing ? Identifiers.i18n : Identifiers.i18nStart, params);
  }
  i18nEnd(span = null, selfClosing) {
    if (!this.i18n) {
      throw new Error('i18nEnd is executed with no i18n context present');
    }
    if (this.i18nContext) {
      this.i18nContext.reconcileChildContext(this.i18n);
      this.i18nUpdateRef(this.i18nContext);
    } else {
      this.i18nUpdateRef(this.i18n);
    }
    // setup accumulated bindings
    const {
      index,
      bindings
    } = this.i18n;
    if (bindings.size) {
      for (const binding of bindings) {
        // for i18n block, advance to the most recent element index (by taking the current number of
        // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the
        // necessary lifecycle hooks of components/directives are properly flushed.
        this.updateInstructionWithAdvance(this.getConstCount() - 1, span, Identifiers.i18nExp, () => this.convertPropertyBinding(binding));
      }
      this.updateInstruction(span, Identifiers.i18nApply, [literal(index)]);
    }
    if (!selfClosing) {
      this.creationInstruction(span, Identifiers.i18nEnd);
    }
    this.i18n = null; // reset local i18n context
  }

  i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {
    let hasBindings = false;
    const i18nAttrArgs = [];
    attrs.forEach(attr => {
      const message = attr.i18n;
      const converted = attr.value.visit(this._valueConverter);
      this.allocateBindingSlots(converted);
      if (converted instanceof Interpolation) {
        const placeholders = assembleBoundTextPlaceholders(message);
        const params = placeholdersToParams(placeholders);
        i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));
        converted.expressions.forEach(expression => {
          hasBindings = true;
          this.updateInstructionWithAdvance(nodeIndex, sourceSpan, Identifiers.i18nExp, () => this.convertPropertyBinding(expression));
        });
      }
    });
    if (i18nAttrArgs.length > 0) {
      const index = literal(this.allocateDataSlot());
      const constIndex = this.addToConsts(literalArr(i18nAttrArgs));
      this.creationInstruction(sourceSpan, Identifiers.i18nAttributes, [index, constIndex]);
      if (hasBindings) {
        this.updateInstruction(sourceSpan, Identifiers.i18nApply, [index]);
      }
    }
  }
  getNamespaceInstruction(namespaceKey) {
    switch (namespaceKey) {
      case 'math':
        return Identifiers.namespaceMathML;
      case 'svg':
        return Identifiers.namespaceSVG;
      default:
        return Identifiers.namespaceHTML;
    }
  }
  addNamespaceInstruction(nsInstruction, element) {
    this._namespace = nsInstruction;
    this.creationInstruction(element.startSourceSpan, nsInstruction);
  }
  /**
   * Adds an update instruction for an interpolated property or attribute, such as
   * `prop="{{value}}"` or `attr.title="{{value}}"`
   */
  interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {
    this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);
  }
  visitContent(ngContent) {
    const slot = this.allocateDataSlot();
    const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;
    const parameters = [literal(slot)];
    this._ngContentReservedSlots.push(ngContent.selector);
    const nonContentSelectAttributes = ngContent.attributes.filter(attr => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR);
    const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);
    if (attributes.length > 0) {
      parameters.push(literal(projectionSlotIdx), literalArr(attributes));
    } else if (projectionSlotIdx !== 0) {
      parameters.push(literal(projectionSlotIdx));
    }
    this.creationInstruction(ngContent.sourceSpan, Identifiers.projection, parameters);
    if (this.i18n) {
      this.i18n.appendProjection(ngContent.i18n, slot);
    }
  }
  visitElement(element) {
    const elementIndex = this.allocateDataSlot();
    const stylingBuilder = new StylingBuilder(null);
    let isNonBindableMode = false;
    const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);
    const outputAttrs = [];
    const [namespaceKey, elementName] = splitNsName(element.name);
    const isNgContainer$1 = isNgContainer(element.name);
    // Handle styling, i18n, ngNonBindable attributes
    for (const attr of element.attributes) {
      const {
        name,
        value
      } = attr;
      if (name === NON_BINDABLE_ATTR) {
        isNonBindableMode = true;
      } else if (name === 'style') {
        stylingBuilder.registerStyleAttr(value);
      } else if (name === 'class') {
        stylingBuilder.registerClassAttr(value);
      } else {
        outputAttrs.push(attr);
      }
    }
    // Regular element or ng-container creation mode
    const parameters = [literal(elementIndex)];
    if (!isNgContainer$1) {
      parameters.push(literal(elementName));
    }
    // Add the attributes
    const allOtherInputs = [];
    const boundI18nAttrs = [];
    element.inputs.forEach(input => {
      const stylingInputWasSet = stylingBuilder.registerBoundInput(input);
      if (!stylingInputWasSet) {
        if (input.type === 0 /* BindingType.Property */ && input.i18n) {
          boundI18nAttrs.push(input);
        } else {
          allOtherInputs.push(input);
        }
      }
    });
    // add attributes for directive and projection matching purposes
    const attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);
    parameters.push(this.addAttrsToConsts(attributes));
    // local refs (ex.: <div #foo #bar="baz">)
    const refs = this.prepareRefsArray(element.references);
    parameters.push(this.addToConsts(refs));
    const wasInNamespace = this._namespace;
    const currentNamespace = this.getNamespaceInstruction(namespaceKey);
    // If the namespace is changing now, include an instruction to change it
    // during element creation.
    if (currentNamespace !== wasInNamespace) {
      this.addNamespaceInstruction(currentNamespace, element);
    }
    if (this.i18n) {
      this.i18n.appendElement(element.i18n, elementIndex);
    }
    // Note that we do not append text node instructions and ICUs inside i18n section,
    // so we exclude them while calculating whether current element has children
    const hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element.children) : element.children.length > 0;
    const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;
    const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);
    if (createSelfClosingInstruction) {
      this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers.elementContainer : Identifiers.element, trimTrailingNulls(parameters));
    } else {
      this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers.elementContainerStart : Identifiers.elementStart, trimTrailingNulls(parameters));
      if (isNonBindableMode) {
        this.creationInstruction(element.startSourceSpan, Identifiers.disableBindings);
      }
      if (boundI18nAttrs.length > 0) {
        this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, element.startSourceSpan ?? element.sourceSpan);
      }
      // Generate Listeners (outputs)
      if (element.outputs.length > 0) {
        for (const outputAst of element.outputs) {
          this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter(element.name, outputAst, elementIndex));
        }
      }
      // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and
      // listeners, to make sure i18nAttributes instruction targets current element at runtime.
      if (isI18nRootElement) {
        this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);
      }
    }
    // the code here will collect all update-level styling instructions and add them to the
    // update block of the template function AOT code. Instructions like `styleProp`,
    // `styleMap`, `classMap`, `classProp`
    // are all generated and assigned in the code below.
    const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);
    const limit = stylingInstructions.length - 1;
    for (let i = 0; i <= limit; i++) {
      const instruction = stylingInstructions[i];
      this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);
    }
    // the reason why `undefined` is used is because the renderer understands this as a
    // special value to symbolize that there is no RHS to this binding
    // TODO (matsko): revisit this once FW-959 is approached
    const emptyValueBindInstruction = literal(undefined);
    const propertyBindings = [];
    const attributeBindings = [];
    // Generate element input bindings
    allOtherInputs.forEach(input => {
      const inputType = input.type;
      if (inputType === 4 /* BindingType.Animation */) {
        const value = input.value.visit(this._valueConverter);
        // animation bindings can be presented in the following formats:
        // 1. [@binding]="fooExp"
        // 2. [@binding]="{value:fooExp, params:{...}}"
        // 3. [@binding]
        // 4. @binding
        // All formats will be valid for when a synthetic binding is created.
        // The reasoning for this is because the renderer should get each
        // synthetic binding value in the order of the array that they are
        // defined in...
        const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;
        this.allocateBindingSlots(value);
        propertyBindings.push({
          span: input.sourceSpan,
          paramsOrFn: getBindingFunctionParams(() => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction, prepareSyntheticPropertyName(input.name))
        });
      } else {
        // we must skip attributes with associated i18n context, since these attributes are handled
        // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated
        if (input.i18n) return;
        const value = input.value.visit(this._valueConverter);
        if (value !== undefined) {
          const params = [];
          const [attrNamespace, attrName] = splitNsName(input.name);
          const isAttributeBinding = inputType === 1 /* BindingType.Attribute */;
          let sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);
          if (!sanitizationRef) {
            // If there was no sanitization function found based on the security context
            // of an attribute/property - check whether this attribute/property is
            // one of the security-sensitive <iframe> attributes (and that the current
            // element is actually an <iframe>).
            if (isIframeElement(element.name) && isIframeSecuritySensitiveAttr(input.name)) {
              sanitizationRef = importExpr(Identifiers.validateIframeAttribute);
            }
          }
          if (sanitizationRef) {
            params.push(sanitizationRef);
          }
          if (attrNamespace) {
            const namespaceLiteral = literal(attrNamespace);
            if (sanitizationRef) {
              params.push(namespaceLiteral);
            } else {
              // If there wasn't a sanitization ref, we need to add
              // an extra param so that we can pass in the namespace.
              params.push(literal(null), namespaceLiteral);
            }
          }
          this.allocateBindingSlots(value);
          if (inputType === 0 /* BindingType.Property */) {
            if (value instanceof Interpolation) {
              // prop="{{value}}" and friends
              this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input, value, params);
            } else {
              // [prop]="value"
              // Collect all the properties so that we can chain into a single function at the end.
              propertyBindings.push({
                span: input.sourceSpan,
                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), attrName, params)
              });
            }
          } else if (inputType === 1 /* BindingType.Attribute */) {
            if (value instanceof Interpolation && getInterpolationArgsLength(value) > 1) {
              // attr.name="text{{value}}" and friends
              this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input, value, params);
            } else {
              const boundValue = value instanceof Interpolation ? value.expressions[0] : value;
              // [attr.name]="value" or attr.name="{{value}}"
              // Collect the attribute bindings so that they can be chained at the end.
              attributeBindings.push({
                span: input.sourceSpan,
                paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(boundValue), attrName, params)
              });
            }
          } else {
            // class prop
            this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers.classProp, () => {
              return [literal(elementIndex), literal(attrName), this.convertPropertyBinding(value), ...params];
            });
          }
        }
      }
    });
    for (const propertyBinding of propertyBindings) {
      this.updateInstructionWithAdvance(elementIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);
    }
    for (const attributeBinding of attributeBindings) {
      this.updateInstructionWithAdvance(elementIndex, attributeBinding.span, Identifiers.attribute, attributeBinding.paramsOrFn);
    }
    // Traverse element child nodes
    visitAll$1(this, element.children);
    if (!isI18nRootElement && this.i18n) {
      this.i18n.appendElement(element.i18n, elementIndex, true);
    }
    if (!createSelfClosingInstruction) {
      // Finish element construction mode.
      const span = element.endSourceSpan ?? element.sourceSpan;
      if (isI18nRootElement) {
        this.i18nEnd(span, createSelfClosingI18nInstruction);
      }
      if (isNonBindableMode) {
        this.creationInstruction(span, Identifiers.enableBindings);
      }
      this.creationInstruction(span, isNgContainer$1 ? Identifiers.elementContainerEnd : Identifiers.elementEnd);
    }
  }
  visitTemplate(template) {
    const NG_TEMPLATE_TAG_NAME = 'ng-template';
    const templateIndex = this.allocateDataSlot();
    if (this.i18n) {
      this.i18n.appendTemplate(template.i18n, templateIndex);
    }
    const tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;
    const contextName = `${this.contextName}${template.tagName ? '_' + sanitizeIdentifier(template.tagName) : ''}_${templateIndex}`;
    const templateName = `${contextName}_Template`;
    const parameters = [literal(templateIndex), variable(templateName),
    // We don't care about the tag's namespace here, because we infer
    // it based on the parent nodes inside the template instruction.
    literal(tagNameWithoutNamespace)];
    // prepare attributes parameter (including attributes used for directive matching)
    const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined /* styles */, template.templateAttrs);
    parameters.push(this.addAttrsToConsts(attrsExprs));
    // local refs (ex.: <ng-template #foo>)
    if (template.references && template.references.length) {
      const refs = this.prepareRefsArray(template.references);
      parameters.push(this.addToConsts(refs));
      parameters.push(importExpr(Identifiers.templateRefExtractor));
    }
    // Create the template function
    const templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants);
    // Nested templates must not be visited until after their parent templates have completed
    // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't
    // be able to support bindings in nested templates to local refs that occur after the
    // template definition. e.g. <div *ngIf="showing">{{ foo }}</div>  <div #foo></div>
    this._nestedTemplateFns.push(() => {
      const templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, template.i18n);
      this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));
      if (templateVisitor._ngContentReservedSlots.length) {
        this._ngContentReservedSlots.push(...templateVisitor._ngContentReservedSlots);
      }
    });
    // e.g. template(1, MyComp_Template_1)
    this.creationInstruction(template.sourceSpan, Identifiers.templateCreate, () => {
      parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));
      return trimTrailingNulls(parameters);
    });
    // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;
    this.templatePropertyBindings(templateIndex, template.templateAttrs);
    // Only add normal input/output binding instructions on explicit <ng-template> elements.
    if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {
      const [i18nInputs, inputs] = partitionArray(template.inputs, hasI18nMeta);
      // Add i18n attributes that may act as inputs to directives. If such attributes are present,
      // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>
      // elements, in case of inline templates, corresponding instructions will be generated in the
      // nested template function.
      if (i18nInputs.length > 0) {
        this.i18nAttributesInstruction(templateIndex, i18nInputs, template.startSourceSpan ?? template.sourceSpan);
      }
      // Add the input bindings
      if (inputs.length > 0) {
        this.templatePropertyBindings(templateIndex, inputs);
      }
      // Generate listeners for directive output
      for (const outputAst of template.outputs) {
        this.creationInstruction(outputAst.sourceSpan, Identifiers.listener, this.prepareListenerParameter('ng_template', outputAst, templateIndex));
      }
    }
  }
  visitBoundText(text) {
    if (this.i18n) {
      const value = text.value.visit(this._valueConverter);
      this.allocateBindingSlots(value);
      if (value instanceof Interpolation) {
        this.i18n.appendBoundText(text.i18n);
        this.i18nAppendBindings(value.expressions);
      }
      return;
    }
    const nodeIndex = this.allocateDataSlot();
    this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(nodeIndex)]);
    const value = text.value.visit(this._valueConverter);
    this.allocateBindingSlots(value);
    if (value instanceof Interpolation) {
      this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));
    } else {
      error('Text nodes should be interpolated and never bound directly.');
    }
  }
  visitText(text) {
    // when a text element is located within a translatable
    // block, we exclude this text element from instructions set,
    // since it will be captured in i18n content and processed at runtime
    if (!this.i18n) {
      this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(this.allocateDataSlot()), literal(text.value)]);
    }
  }
  visitIcu(icu) {
    let initWasInvoked = false;
    // if an ICU was created outside of i18n block, we still treat
    // it as a translatable entity and invoke i18nStart and i18nEnd
    // to generate i18n context and the necessary instructions
    if (!this.i18n) {
      initWasInvoked = true;
      this.i18nStart(null, icu.i18n, true);
    }
    const i18n = this.i18n;
    const vars = this.i18nBindProps(icu.vars);
    const placeholders = this.i18nBindProps(icu.placeholders);
    // output ICU directly and keep ICU reference in context
    const message = icu.i18n;
    // we always need post-processing function for ICUs, to make sure that:
    // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:
    // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders
    // inside ICUs)
    // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values
    const transformFn = raw => {
      const params = {
        ...vars,
        ...placeholders
      };
      const formatted = formatI18nPlaceholderNamesInMap(params, /* useCamelCase */false);
      return invokeInstruction(null, Identifiers.i18nPostprocess, [raw, mapLiteral(formatted, true)]);
    };
    // in case the whole i18n message is a single ICU - we do not need to
    // create a separate top-level translation, we can use the root ref instead
    // and make this ICU a top-level translation
    // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function
    // separately, so we do not pass placeholders into `i18nTranslate` function.
    if (isSingleI18nIcu(i18n.meta)) {
      this.i18nTranslate(message, /* placeholders */{}, i18n.ref, transformFn);
    } else {
      // output ICU directly and keep ICU reference in context
      const ref = this.i18nTranslate(message, /* placeholders */{}, /* ref */undefined, transformFn);
      i18n.appendIcu(icuFromI18nMessage(message).name, ref);
    }
    if (initWasInvoked) {
      this.i18nEnd(null, true);
    }
    return null;
  }
  allocateDataSlot() {
    return this._dataIndex++;
  }
  getConstCount() {
    return this._dataIndex;
  }
  getVarCount() {
    return this._pureFunctionSlots;
  }
  getConsts() {
    return this._constants;
  }
  getNgContentSelectors() {
    return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;
  }
  bindingContext() {
    return `${this._bindingContext++}`;
  }
  templatePropertyBindings(templateIndex, attrs) {
    const propertyBindings = [];
    for (const input of attrs) {
      if (!(input instanceof BoundAttribute)) {
        continue;
      }
      const value = input.value.visit(this._valueConverter);
      if (value === undefined) {
        continue;
      }
      this.allocateBindingSlots(value);
      if (value instanceof Interpolation) {
        // Params typically contain attribute namespace and value sanitizer, which is applicable
        // for regular HTML elements, but not applicable for <ng-template> (since props act as
        // inputs to directives), so keep params array empty.
        const params = [];
        // prop="{{value}}" case
        this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);
      } else {
        // [prop]="value" case
        propertyBindings.push({
          span: input.sourceSpan,
          paramsOrFn: getBindingFunctionParams(() => this.convertPropertyBinding(value), input.name)
        });
      }
    }
    for (const propertyBinding of propertyBindings) {
      this.updateInstructionWithAdvance(templateIndex, propertyBinding.span, Identifiers.property, propertyBinding.paramsOrFn);
    }
  }
  // Bindings must only be resolved after all local refs have been visited, so all
  // instructions are queued in callbacks that execute once the initial pass has completed.
  // Otherwise, we wouldn't be able to support local refs that are defined after their
  // bindings. e.g. {{ foo }} <div #foo></div>
  instructionFn(fns, span, reference, paramsOrFn, prepend = false) {
    fns[prepend ? 'unshift' : 'push']({
      span,
      reference,
      paramsOrFn
    });
  }
  processStylingUpdateInstruction(elementIndex, instruction) {
    let allocateBindingSlots = 0;
    if (instruction) {
      for (const call of instruction.calls) {
        allocateBindingSlots += call.allocateBindingSlots;
        this.updateInstructionWithAdvance(elementIndex, call.sourceSpan, instruction.reference, () => call.params(value => call.supportsInterpolation && value instanceof Interpolation ? this.getUpdateInstructionArguments(value) : this.convertPropertyBinding(value)));
      }
    }
    return allocateBindingSlots;
  }
  creationInstruction(span, reference, paramsOrFn, prepend) {
    this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);
  }
  updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {
    this.addAdvanceInstructionIfNecessary(nodeIndex, span);
    this.updateInstruction(span, reference, paramsOrFn);
  }
  updateInstruction(span, reference, paramsOrFn) {
    this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);
  }
  addAdvanceInstructionIfNecessary(nodeIndex, span) {
    if (nodeIndex !== this._currentIndex) {
      const delta = nodeIndex - this._currentIndex;
      if (delta < 1) {
        throw new Error('advance instruction can only go forwards');
      }
      this.instructionFn(this._updateCodeFns, span, Identifiers.advance, [literal(delta)]);
      this._currentIndex = nodeIndex;
    }
  }
  allocatePureFunctionSlots(numSlots) {
    const originalSlots = this._pureFunctionSlots;
    this._pureFunctionSlots += numSlots;
    return originalSlots;
  }
  allocateBindingSlots(value) {
    this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;
  }
  /**
   * Gets an expression that refers to the implicit receiver. The implicit
   * receiver is always the root level context.
   */
  getImplicitReceiverExpr() {
    if (this._implicitReceiverExpr) {
      return this._implicitReceiverExpr;
    }
    return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);
  }
  convertPropertyBinding(value) {
    const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext());
    const valExpr = convertedPropertyBinding.currValExpr;
    this._tempVariables.push(...convertedPropertyBinding.stmts);
    return valExpr;
  }
  /**
   * Gets a list of argument expressions to pass to an update instruction expression. Also updates
   * the temp variables state with temp variables that were identified as needing to be created
   * while visiting the arguments.
   * @param value The original expression we will be resolving an arguments list from.
   */
  getUpdateInstructionArguments(value) {
    const {
      args,
      stmts
    } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());
    this._tempVariables.push(...stmts);
    return args;
  }
  /**
   * Prepares all attribute expression values for the `TAttributes` array.
   *
   * The purpose of this function is to properly construct an attributes array that
   * is passed into the `elementStart` (or just `element`) functions. Because there
   * are many different types of attributes, the array needs to be constructed in a
   * special way so that `elementStart` can properly evaluate them.
   *
   * The format looks like this:
   *
   * ```
   * attrs = [prop, value, prop2, value2,
   *   PROJECT_AS, selector,
   *   CLASSES, class1, class2,
   *   STYLES, style1, value1, style2, value2,
   *   BINDINGS, name1, name2, name3,
   *   TEMPLATE, name4, name5, name6,
   *   I18N, name7, name8, ...]
   * ```
   *
   * Note that this function will fully ignore all synthetic (@foo) attribute values
   * because those values are intended to always be generated as property instructions.
   */
  getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles, templateAttrs = [], boundI18nAttrs = []) {
    const alreadySeen = new Set();
    const attrExprs = [];
    let ngProjectAsAttr;
    for (const attr of renderAttributes) {
      if (attr.name === NG_PROJECT_AS_ATTR_NAME) {
        ngProjectAsAttr = attr;
      }
      // Note that static i18n attributes aren't in the i18n array,
      // because they're treated in the same way as regular attributes.
      if (attr.i18n) {
        // When i18n attributes are present on elements with structural directives
        // (e.g. `<div *ngIf title="Hello" i18n-title>`), we want to avoid generating
        // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction
        // attributes. So we do a cache lookup to see if suitable i18n translation block
        // already exists.
        const {
          i18nVarRefsCache
        } = this._constants;
        let i18nVarRef;
        if (i18nVarRefsCache.has(attr.i18n)) {
          i18nVarRef = i18nVarRefsCache.get(attr.i18n);
        } else {
          i18nVarRef = this.i18nTranslate(attr.i18n);
          i18nVarRefsCache.set(attr.i18n, i18nVarRef);
        }
        attrExprs.push(literal(attr.name), i18nVarRef);
      } else {
        attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));
      }
    }
    // Keep ngProjectAs next to the other name, value pairs so we can verify that we match
    // ngProjectAs marker in the attribute name slot.
    if (ngProjectAsAttr) {
      attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));
    }
    function addAttrExpr(key, value) {
      if (typeof key === 'string') {
        if (!alreadySeen.has(key)) {
          attrExprs.push(...getAttributeNameLiterals(key));
          value !== undefined && attrExprs.push(value);
          alreadySeen.add(key);
        }
      } else {
        attrExprs.push(literal(key));
      }
    }
    // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`
    // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as
    // as single property value cell by cell.
    if (styles) {
      styles.populateInitialStylingAttrs(attrExprs);
    }
    if (inputs.length || outputs.length) {
      const attrsLengthBeforeInputs = attrExprs.length;
      for (let i = 0; i < inputs.length; i++) {
        const input = inputs[i];
        // We don't want the animation and attribute bindings in the
        // attributes array since they aren't used for directive matching.
        if (input.type !== 4 /* BindingType.Animation */ && input.type !== 1 /* BindingType.Attribute */) {
          addAttrExpr(input.name);
        }
      }
      for (let i = 0; i < outputs.length; i++) {
        const output = outputs[i];
        if (output.type !== 1 /* ParsedEventType.Animation */) {
          addAttrExpr(output.name);
        }
      }
      // this is a cheap way of adding the marker only after all the input/output
      // values have been filtered (by not including the animation ones) and added
      // to the expressions. The marker is important because it tells the runtime
      // code that this is where attributes without values start...
      if (attrExprs.length !== attrsLengthBeforeInputs) {
        attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3 /* core.AttributeMarker.Bindings */));
      }
    }

    if (templateAttrs.length) {
      attrExprs.push(literal(4 /* core.AttributeMarker.Template */));
      templateAttrs.forEach(attr => addAttrExpr(attr.name));
    }
    if (boundI18nAttrs.length) {
      attrExprs.push(literal(6 /* core.AttributeMarker.I18n */));
      boundI18nAttrs.forEach(attr => addAttrExpr(attr.name));
    }
    return attrExprs;
  }
  addToConsts(expression) {
    if (isNull(expression)) {
      return TYPED_NULL_EXPR;
    }
    const consts = this._constants.constExpressions;
    // Try to reuse a literal that's already in the array, if possible.
    for (let i = 0; i < consts.length; i++) {
      if (consts[i].isEquivalent(expression)) {
        return literal(i);
      }
    }
    return literal(consts.push(expression) - 1);
  }
  addAttrsToConsts(attrs) {
    return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;
  }
  prepareRefsArray(references) {
    if (!references || references.length === 0) {
      return TYPED_NULL_EXPR;
    }
    const refsParam = references.flatMap(reference => {
      const slot = this.allocateDataSlot();
      // Generate the update temporary.
      const variableName = this._bindingScope.freshReferenceName();
      const retrievalLevel = this.level;
      const lhs = variable(variableName);
      this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DeclarationPriority.DEFAULT */, (scope, relativeLevel) => {
        // e.g. nextContext(2);
        const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];
        // e.g. const $foo$ = reference(1);
        const refExpr = lhs.set(importExpr(Identifiers.reference).callFn([literal(slot)]));
        return nextContextStmt.concat(refExpr.toConstDecl());
      }, true);
      return [reference.name, reference.value];
    });
    return asLiteral(refsParam);
  }
  prepareListenerParameter(tagName, outputAst, index) {
    return () => {
      const eventName = outputAst.name;
      const bindingFnName = outputAst.type === 1 /* ParsedEventType.Animation */ ?
      // synthetic @listener.foo values are treated the exact same as are standard listeners
      prepareSyntheticListenerFunctionName(eventName, outputAst.phase) : sanitizeIdentifier(eventName);
      const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;
      const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);
      return prepareEventListenerParameters(outputAst, handlerName, scope);
    };
  }
}
class ValueConverter extends AstMemoryEfficientTransformer {
  constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {
    super();
    this.constantPool = constantPool;
    this.allocateSlot = allocateSlot;
    this.allocatePureFunctionSlots = allocatePureFunctionSlots;
    this.definePipe = definePipe;
    this._pipeBindExprs = [];
  }
  // AstMemoryEfficientTransformer
  visitPipe(pipe, context) {
    // Allocate a slot to create the pipe
    const slot = this.allocateSlot();
    const slotPseudoLocal = `PIPE:${slot}`;
    // Allocate one slot for the result plus one slot per pipe argument
    const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);
    const target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);
    const {
      identifier,
      isVarLength
    } = pipeBindingCallInfo(pipe.args);
    this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));
    const args = [pipe.exp, ...pipe.args];
    const convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) : this.visitAll(args);
    const pipeBindExpr = new Call(pipe.span, pipe.sourceSpan, target, [new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot), new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot), ...convertedArgs], null);
    this._pipeBindExprs.push(pipeBindExpr);
    return pipeBindExpr;
  }
  updatePipeSlotOffsets(bindingSlots) {
    this._pipeBindExprs.forEach(pipe => {
      // update the slot offset arg (index 1) to account for binding slots
      const slotOffset = pipe.args[1];
      slotOffset.value += bindingSlots;
    });
  }
  visitLiteralArray(array, context) {
    return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), values => {
      // If the literal has calculated (non-literal) elements transform it into
      // calls to literal factories that compose the literal and will cache intermediate
      // values.
      const literal = literalArr(values);
      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);
    });
  }
  visitLiteralMap(map, context) {
    return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), values => {
      // If the literal has calculated (non-literal) elements  transform it into
      // calls to literal factories that compose the literal and will cache intermediate
      // values.
      const literal = literalMap(values.map((value, index) => ({
        key: map.keys[index].key,
        value,
        quoted: map.keys[index].quoted
      })));
      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);
    });
  }
}
// Pipes always have at least one parameter, the value they operate on
const pipeBindingIdentifiers = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];
function pipeBindingCallInfo(args) {
  const identifier = pipeBindingIdentifiers[args.length];
  return {
    identifier: identifier || Identifiers.pipeBindV,
    isVarLength: !identifier
  };
}
const pureFunctionIdentifiers = [Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4, Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8];
function pureFunctionCallInfo(args) {
  const identifier = pureFunctionIdentifiers[args.length];
  return {
    identifier: identifier || Identifiers.pureFunctionV,
    isVarLength: !identifier
  };
}
// e.g. x(2);
function generateNextContextExpr(relativeLevelDiff) {
  return importExpr(Identifiers.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);
}
function getLiteralFactory(constantPool, literal$1, allocateSlots) {
  const {
    literalFactory,
    literalFactoryArguments
  } = constantPool.getLiteralFactory(literal$1);
  // Allocate 1 slot for the result plus 1 per argument
  const startSlot = allocateSlots(1 + literalFactoryArguments.length);
  const {
    identifier,
    isVarLength
  } = pureFunctionCallInfo(literalFactoryArguments);
  // Literal factories are pure functions that only need to be re-invoked when the parameters
  // change.
  const args = [literal(startSlot), literalFactory];
  if (isVarLength) {
    args.push(literalArr(literalFactoryArguments));
  } else {
    args.push(...literalFactoryArguments);
  }
  return importExpr(identifier).callFn(args);
}
/**
 * Gets an array of literals that can be added to an expression
 * to represent the name and namespace of an attribute. E.g.
 * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.
 *
 * @param name Name of the attribute, including the namespace.
 */
function getAttributeNameLiterals(name) {
  const [attributeNamespace, attributeName] = splitNsName(name);
  const nameLiteral = literal(attributeName);
  if (attributeNamespace) {
    return [literal(0 /* core.AttributeMarker.NamespaceURI */), literal(attributeNamespace), nameLiteral];
  }
  return [nameLiteral];
}
/** The prefix used to get a shared context in BindingScope's map. */
const SHARED_CONTEXT_KEY = '$$shared_ctx$$';
class BindingScope {
  static createRootScope() {
    return new BindingScope();
  }
  constructor(bindingLevel = 0, parent = null, globals) {
    this.bindingLevel = bindingLevel;
    this.parent = parent;
    this.globals = globals;
    /** Keeps a map from local variables to their BindingData. */
    this.map = new Map();
    this.referenceNameIndex = 0;
    this.restoreViewVariable = null;
    this.usesRestoredViewContext = false;
    if (globals !== undefined) {
      for (const name of globals) {
        this.set(0, name, variable(name));
      }
    }
  }
  get(name) {
    let current = this;
    while (current) {
      let value = current.map.get(name);
      if (value != null) {
        if (current !== this) {
          // make a local copy and reset the `declare` state
          value = {
            retrievalLevel: value.retrievalLevel,
            lhs: value.lhs,
            declareLocalCallback: value.declareLocalCallback,
            declare: false,
            priority: value.priority
          };
          // Cache the value locally.
          this.map.set(name, value);
          // Possibly generate a shared context var
          this.maybeGenerateSharedContextVar(value);
          this.maybeRestoreView();
        }
        if (value.declareLocalCallback && !value.declare) {
          value.declare = true;
        }
        return value.lhs;
      }
      current = current.parent;
    }
    // If we get to this point, we are looking for a property on the top level component
    // - If level === 0, we are on the top and don't need to re-declare `ctx`.
    // - If level > 0, we are in an embedded view. We need to retrieve the name of the
    // local var we used to store the component context, e.g. const $comp$ = x();
    return this.bindingLevel === 0 ? null : this.getComponentProperty(name);
  }
  /**
   * Create a local variable for later reference.
   *
   * @param retrievalLevel The level from which this value can be retrieved
   * @param name Name of the variable.
   * @param lhs AST representing the left hand side of the `let lhs = rhs;`.
   * @param priority The sorting priority of this var
   * @param declareLocalCallback The callback to invoke when declaring this local var
   * @param localRef Whether or not this is a local ref
   */
  set(retrievalLevel, name, lhs, priority = 0 /* DeclarationPriority.DEFAULT */, declareLocalCallback, localRef) {
    if (this.map.has(name)) {
      if (localRef) {
        // Do not throw an error if it's a local ref and do not update existing value,
        // so the first defined ref is always returned.
        return this;
      }
      error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);
    }
    this.map.set(name, {
      retrievalLevel: retrievalLevel,
      lhs: lhs,
      declare: false,
      declareLocalCallback: declareLocalCallback,
      priority: priority
    });
    return this;
  }
  // Implemented as part of LocalResolver.
  getLocal(name) {
    return this.get(name);
  }
  // Implemented as part of LocalResolver.
  notifyImplicitReceiverUse() {
    if (this.bindingLevel !== 0) {
      // Since the implicit receiver is accessed in an embedded view, we need to
      // ensure that we declare a shared context variable for the current template
      // in the update variables.
      this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;
    }
  }
  nestedScope(level, globals) {
    const newScope = new BindingScope(level, this, globals);
    if (level > 0) newScope.generateSharedContextVar(0);
    return newScope;
  }
  /**
   * Gets or creates a shared context variable and returns its expression. Note that
   * this does not mean that the shared variable will be declared. Variables in the
   * binding scope will be only declared if they are used.
   */
  getOrCreateSharedContextVar(retrievalLevel) {
    const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;
    if (!this.map.has(bindingKey)) {
      this.generateSharedContextVar(retrievalLevel);
    }
    // Shared context variables are always generated as "ReadVarExpr".
    return this.map.get(bindingKey).lhs;
  }
  getSharedContextName(retrievalLevel) {
    const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);
    // Shared context variables are always generated as "ReadVarExpr".
    return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;
  }
  maybeGenerateSharedContextVar(value) {
    if (value.priority === 1 /* DeclarationPriority.CONTEXT */ && value.retrievalLevel < this.bindingLevel) {
      const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);
      if (sharedCtxObj) {
        sharedCtxObj.declare = true;
      } else {
        this.generateSharedContextVar(value.retrievalLevel);
      }
    }
  }
  generateSharedContextVar(retrievalLevel) {
    const lhs = variable(CONTEXT_NAME + this.freshReferenceName());
    this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {
      retrievalLevel: retrievalLevel,
      lhs: lhs,
      declareLocalCallback: (scope, relativeLevel) => {
        // const ctx_r0 = nextContext(2);
        return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];
      },
      declare: false,
      priority: 2 /* DeclarationPriority.SHARED_CONTEXT */
    });
  }

  getComponentProperty(name) {
    const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);
    componentValue.declare = true;
    this.maybeRestoreView();
    return componentValue.lhs.prop(name);
  }
  maybeRestoreView() {
    // View restoration is required for listener instructions inside embedded views, because
    // they only run in creation mode and they can have references to the context object.
    // If the context object changes in update mode, the reference will be incorrect, because
    // it was established during creation.
    if (this.isListenerScope()) {
      if (!this.parent.restoreViewVariable) {
        // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction
        this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());
      }
      this.restoreViewVariable = this.parent.restoreViewVariable;
    }
  }
  restoreViewStatement() {
    if (this.restoreViewVariable) {
      const restoreCall = invokeInstruction(null, Identifiers.restoreView, [this.restoreViewVariable]);
      // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`
      // depending on whether it is being used.
      return this.usesRestoredViewContext ? variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() : restoreCall.toStmt();
    }
    return null;
  }
  viewSnapshotStatements() {
    // const $state$ = getCurrentView();
    return this.restoreViewVariable ? [this.restoreViewVariable.set(invokeInstruction(null, Identifiers.getCurrentView, [])).toConstDecl()] : [];
  }
  isListenerScope() {
    return this.parent && this.parent.bindingLevel === this.bindingLevel;
  }
  variableDeclarations() {
    let currentContextLevel = 0;
    return Array.from(this.map.values()).filter(value => value.declare).sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority).reduce((stmts, value) => {
      const levelDiff = this.bindingLevel - value.retrievalLevel;
      const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);
      currentContextLevel = levelDiff;
      return stmts.concat(currStmts);
    }, []);
  }
  freshReferenceName() {
    let current = this;
    // Find the top scope as it maintains the global reference count
    while (current.parent) current = current.parent;
    const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;
    return ref;
  }
  hasRestoreViewVariable() {
    return !!this.restoreViewVariable;
  }
  notifyRestoredViewContextUse() {
    this.usesRestoredViewContext = true;
  }
}
/**
 * Creates a `CssSelector` given a tag name and a map of attributes
 */
function createCssSelector(elementName, attributes) {
  const cssSelector = new CssSelector();
  const elementNameNoNs = splitNsName(elementName)[1];
  cssSelector.setElement(elementNameNoNs);
  Object.getOwnPropertyNames(attributes).forEach(name => {
    const nameNoNs = splitNsName(name)[1];
    const value = attributes[name];
    cssSelector.addAttribute(nameNoNs, value);
    if (name.toLowerCase() === 'class') {
      const classes = value.trim().split(/\s+/);
      classes.forEach(className => cssSelector.addClassName(className));
    }
  });
  return cssSelector;
}
/**
 * Creates an array of expressions out of an `ngProjectAs` attributes
 * which can be added to the instruction parameters.
 */
function getNgProjectAsLiteral(attribute) {
  // Parse the attribute value into a CssSelectorList. Note that we only take the
  // first selector, because we don't support multiple selectors in ngProjectAs.
  const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];
  return [literal(5 /* core.AttributeMarker.ProjectAs */), asLiteral(parsedR3Selector)];
}
/**
 * Gets the instruction to generate for an interpolated property
 * @param interpolation An Interpolation AST
 */
function getPropertyInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 1:
      return Identifiers.propertyInterpolate;
    case 3:
      return Identifiers.propertyInterpolate1;
    case 5:
      return Identifiers.propertyInterpolate2;
    case 7:
      return Identifiers.propertyInterpolate3;
    case 9:
      return Identifiers.propertyInterpolate4;
    case 11:
      return Identifiers.propertyInterpolate5;
    case 13:
      return Identifiers.propertyInterpolate6;
    case 15:
      return Identifiers.propertyInterpolate7;
    case 17:
      return Identifiers.propertyInterpolate8;
    default:
      return Identifiers.propertyInterpolateV;
  }
}
/**
 * Gets the instruction to generate for an interpolated attribute
 * @param interpolation An Interpolation AST
 */
function getAttributeInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 3:
      return Identifiers.attributeInterpolate1;
    case 5:
      return Identifiers.attributeInterpolate2;
    case 7:
      return Identifiers.attributeInterpolate3;
    case 9:
      return Identifiers.attributeInterpolate4;
    case 11:
      return Identifiers.attributeInterpolate5;
    case 13:
      return Identifiers.attributeInterpolate6;
    case 15:
      return Identifiers.attributeInterpolate7;
    case 17:
      return Identifiers.attributeInterpolate8;
    default:
      return Identifiers.attributeInterpolateV;
  }
}
/**
 * Gets the instruction to generate for interpolated text.
 * @param interpolation An Interpolation AST
 */
function getTextInterpolationExpression(interpolation) {
  switch (getInterpolationArgsLength(interpolation)) {
    case 1:
      return Identifiers.textInterpolate;
    case 3:
      return Identifiers.textInterpolate1;
    case 5:
      return Identifiers.textInterpolate2;
    case 7:
      return Identifiers.textInterpolate3;
    case 9:
      return Identifiers.textInterpolate4;
    case 11:
      return Identifiers.textInterpolate5;
    case 13:
      return Identifiers.textInterpolate6;
    case 15:
      return Identifiers.textInterpolate7;
    case 17:
      return Identifiers.textInterpolate8;
    default:
      return Identifiers.textInterpolateV;
  }
}
/**
 * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.
 *
 * @param template text of the template to parse
 * @param templateUrl URL to use for source mapping of the parsed template
 * @param options options to modify how the template is parsed
 */
function parseTemplate(template, templateUrl, options = {}) {
  const {
    interpolationConfig,
    preserveWhitespaces,
    enableI18nLegacyMessageIdFormat
  } = options;
  const bindingParser = makeBindingParser(interpolationConfig);
  const htmlParser = new HtmlParser();
  const parseResult = htmlParser.parse(template, templateUrl, {
    leadingTriviaChars: LEADING_TRIVIA_CHARS,
    ...options,
    tokenizeExpansionForms: true
  });
  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {
    const parsedTemplate = {
      interpolationConfig,
      preserveWhitespaces,
      errors: parseResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate.commentNodes = [];
    }
    return parsedTemplate;
  }
  let rootNodes = parseResult.rootNodes;
  // process i18n meta information (scan attributes, generate ids)
  // before we run whitespace removal process, because existing i18n
  // extraction process (ng extract-i18n) relies on a raw content to generate
  // message ids
  const i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */!preserveWhitespaces, enableI18nLegacyMessageIdFormat);
  const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);
  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {
    const parsedTemplate = {
      interpolationConfig,
      preserveWhitespaces,
      errors: i18nMetaResult.errors,
      nodes: [],
      styleUrls: [],
      styles: [],
      ngContentSelectors: []
    };
    if (options.collectCommentNodes) {
      parsedTemplate.commentNodes = [];
    }
    return parsedTemplate;
  }
  rootNodes = i18nMetaResult.rootNodes;
  if (!preserveWhitespaces) {
    rootNodes = visitAll(new WhitespaceVisitor(), rootNodes);
    // run i18n meta visitor again in case whitespaces are removed (because that might affect
    // generated i18n message content) and first pass indicated that i18n content is present in a
    // template. During this pass i18n IDs generated at the first pass will be preserved, so we can
    // mimic existing extraction process (ng extract-i18n)
    if (i18nMetaVisitor.hasI18nMeta) {
      rootNodes = visitAll(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */false), rootNodes);
    }
  }
  const {
    nodes,
    errors,
    styleUrls,
    styles,
    ngContentSelectors,
    commentNodes
  } = htmlAstToRender3Ast(rootNodes, bindingParser, {
    collectCommentNodes: !!options.collectCommentNodes
  });
  errors.push(...parseResult.errors, ...i18nMetaResult.errors);
  const parsedTemplate = {
    interpolationConfig,
    preserveWhitespaces,
    errors: errors.length > 0 ? errors : null,
    nodes,
    styleUrls,
    styles,
    ngContentSelectors
  };
  if (options.collectCommentNodes) {
    parsedTemplate.commentNodes = commentNodes;
  }
  return parsedTemplate;
}
const elementRegistry = new DomElementSchemaRegistry();
/**
 * Construct a `BindingParser` with a default configuration.
 */
function makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {
  return new BindingParser(new Parser$1(new Lexer()), interpolationConfig, elementRegistry, []);
}
function resolveSanitizationFn(context, isAttribute) {
  switch (context) {
    case SecurityContext.HTML:
      return importExpr(Identifiers.sanitizeHtml);
    case SecurityContext.SCRIPT:
      return importExpr(Identifiers.sanitizeScript);
    case SecurityContext.STYLE:
      // the compiler does not fill in an instruction for [style.prop?] binding
      // values because the style algorithm knows internally what props are subject
      // to sanitization (only [attr.style] values are explicitly sanitized)
      return isAttribute ? importExpr(Identifiers.sanitizeStyle) : null;
    case SecurityContext.URL:
      return importExpr(Identifiers.sanitizeUrl);
    case SecurityContext.RESOURCE_URL:
      return importExpr(Identifiers.sanitizeResourceUrl);
    default:
      return null;
  }
}
function trustedConstAttribute(tagName, attr) {
  const value = asLiteral(attr.value);
  if (isTrustedTypesSink(tagName, attr.name)) {
    switch (elementRegistry.securityContext(tagName, attr.name, /* isAttribute */true)) {
      case SecurityContext.HTML:
        return taggedTemplate(importExpr(Identifiers.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);
      // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.
      case SecurityContext.RESOURCE_URL:
        return taggedTemplate(importExpr(Identifiers.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);
      default:
        return value;
    }
  } else {
    return value;
  }
}
function isSingleElementTemplate(children) {
  return children.length === 1 && children[0] instanceof Element$1;
}
function isTextNode(node) {
  return node instanceof Text$3 || node instanceof BoundText || node instanceof Icu$1;
}
function isIframeElement(tagName) {
  return tagName.toLowerCase() === 'iframe';
}
function hasTextChildrenOnly(children) {
  return children.every(isTextNode);
}
function getBindingFunctionParams(deferredParams, name, eagerParams) {
  return () => {
    const value = deferredParams();
    const fnParams = Array.isArray(value) ? value : [value];
    if (eagerParams) {
      fnParams.push(...eagerParams);
    }
    if (name) {
      // We want the property name to always be the first function parameter.
      fnParams.unshift(literal(name));
    }
    return fnParams;
  };
}
/** Name of the global variable that is used to determine if we use Closure translations or not */
const NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';
/**
 * Generate statements that define a given translation message.
 *
 * ```
 * var I18N_1;
 * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {
 *     var MSG_EXTERNAL_XXX = goog.getMsg(
 *          "Some message with {$interpolation}!",
 *          { "interpolation": "\uFFFD0\uFFFD" }
 *     );
 *     I18N_1 = MSG_EXTERNAL_XXX;
 * }
 * else {
 *     I18N_1 = $localize`Some message with ${'\uFFFD0\uFFFD'}!`;
 * }
 * ```
 *
 * @param message The original i18n AST message node
 * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.
 * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.
 * @param params Object mapping placeholder names to their values (e.g.
 * `{ "interpolation": "\uFFFD0\uFFFD" }`).
 * @param transformFn Optional transformation function that will be applied to the translation (e.g.
 * post-processing).
 * @returns An array of statements that defined a given translation.
 */
function getTranslationDeclStmts(message, variable, closureVar, params = {}, transformFn) {
  const statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, params), createLocalizeStatements(variable, message, formatI18nPlaceholderNamesInMap(params, /* useCamelCase */false)))];
  if (transformFn) {
    statements.push(new ExpressionStatement(variable.set(transformFn(variable))));
  }
  return statements;
}
/**
 * Create the expression that will be used to guard the closure mode block
 * It is equivalent to:
 *
 * ```
 * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode
 * ```
 */
function createClosureModeGuard() {
  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));
}

// This regex matches any binding names that contain the "attr." prefix, e.g. "attr.required"
// If there is a match, the first matching group will contain the attribute name to bind.
const ATTR_REGEX = /attr\.([^\]]+)/;
const COMPONENT_VARIABLE = '%COMP%';
const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
function baseDirectiveFields(meta, constantPool, bindingParser) {
  const definitionMap = new DefinitionMap();
  const selectors = parseSelectorToR3Selector(meta.selector);
  // e.g. `type: MyDirective`
  definitionMap.set('type', meta.internalType);
  // e.g. `selectors: [['', 'someDir', '']]`
  if (selectors.length > 0) {
    definitionMap.set('selectors', asLiteral(selectors));
  }
  if (meta.queries.length > 0) {
    // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }
    definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));
  }
  if (meta.viewQueries.length) {
    definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
  }
  // e.g. `hostBindings: (rf, ctx) => { ... }
  definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));
  // e.g 'inputs: {a: 'a'}`
  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));
  // e.g 'outputs: {a: 'a'}`
  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));
  if (meta.exportAs !== null) {
    definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));
  }
  if (meta.isStandalone) {
    definitionMap.set('standalone', literal(true));
  }
  return definitionMap;
}
/**
 * Add features to the definition map.
 */
function addFeatures(definitionMap, meta) {
  // e.g. `features: [NgOnChangesFeature]`
  const features = [];
  const providers = meta.providers;
  const viewProviders = meta.viewProviders;
  if (providers || viewProviders) {
    const args = [providers || new LiteralArrayExpr([])];
    if (viewProviders) {
      args.push(viewProviders);
    }
    features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));
  }
  if (meta.usesInheritance) {
    features.push(importExpr(Identifiers.InheritDefinitionFeature));
  }
  if (meta.fullInheritance) {
    features.push(importExpr(Identifiers.CopyDefinitionFeature));
  }
  if (meta.lifecycle.usesOnChanges) {
    features.push(importExpr(Identifiers.NgOnChangesFeature));
  }
  // TODO: better way of differentiating component vs directive metadata.
  if (meta.hasOwnProperty('template') && meta.isStandalone) {
    features.push(importExpr(Identifiers.StandaloneFeature));
  }
  if (meta.hostDirectives?.length) {
    features.push(importExpr(Identifiers.HostDirectivesFeature).callFn([createHostDirectivesFeatureArg(meta.hostDirectives)]));
  }
  if (features.length) {
    definitionMap.set('features', literalArr(features));
  }
}
/**
 * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.
 */
function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);
  const type = createDirectiveType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.
 */
function compileComponentFromMetadata(meta, constantPool, bindingParser) {
  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
  addFeatures(definitionMap, meta);
  const selector = meta.selector && CssSelector.parse(meta.selector);
  const firstSelector = selector && selector[0];
  // e.g. `attr: ["class", ".my.app"]`
  // This is optional an only included if the first selector of a component specifies attributes.
  if (firstSelector) {
    const selectorAttributes = firstSelector.getAttrs();
    if (selectorAttributes.length) {
      definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))), /* forceShared */true));
    }
  }
  // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`
  const templateTypeName = meta.name;
  const templateName = templateTypeName ? `${templateTypeName}_Template` : null;
  const changeDetection = meta.changeDetection;
  const template = meta.template;
  const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);
  const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);
  // We need to provide this so that dynamically generated components know what
  // projected content blocks to pass through to the component when it is instantiated.
  const ngContentSelectors = templateBuilder.getNgContentSelectors();
  if (ngContentSelectors) {
    definitionMap.set('ngContentSelectors', ngContentSelectors);
  }
  // e.g. `decls: 2`
  definitionMap.set('decls', literal(templateBuilder.getConstCount()));
  // e.g. `vars: 2`
  definitionMap.set('vars', literal(templateBuilder.getVarCount()));
  // Generate `consts` section of ComponentDef:
  // - either as an array:
  //   `consts: [['one', 'two'], ['three', 'four']]`
  // - or as a factory function in case additional statements are present (to support i18n):
  //   `consts: function() { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0]; }`
  const {
    constExpressions,
    prepareStatements
  } = templateBuilder.getConsts();
  if (constExpressions.length > 0) {
    let constsExpr = literalArr(constExpressions);
    // Prepare statements are present - turn `consts` into a function.
    if (prepareStatements.length > 0) {
      constsExpr = fn([], [...prepareStatements, new ReturnStatement(constsExpr)]);
    }
    definitionMap.set('consts', constsExpr);
  }
  definitionMap.set('template', templateFunctionExpression);
  if (meta.declarations.length > 0) {
    definitionMap.set('dependencies', compileDeclarationList(literalArr(meta.declarations.map(decl => decl.type)), meta.declarationListEmitMode));
  }
  if (meta.encapsulation === null) {
    meta.encapsulation = ViewEncapsulation.Emulated;
  }
  // e.g. `styles: [str1, str2]`
  if (meta.styles && meta.styles.length) {
    const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;
    const styleNodes = styleValues.reduce((result, style) => {
      if (style.trim().length > 0) {
        result.push(constantPool.getConstLiteral(literal(style)));
      }
      return result;
    }, []);
    if (styleNodes.length > 0) {
      definitionMap.set('styles', literalArr(styleNodes));
    }
  } else if (meta.encapsulation === ViewEncapsulation.Emulated) {
    // If there is no style, don't generate css selectors on elements
    meta.encapsulation = ViewEncapsulation.None;
  }
  // Only set view encapsulation if it's not the default value
  if (meta.encapsulation !== ViewEncapsulation.Emulated) {
    definitionMap.set('encapsulation', literal(meta.encapsulation));
  }
  // e.g. `animation: [trigger('123', [])]`
  if (meta.animations !== null) {
    definitionMap.set('data', literalMap([{
      key: 'animation',
      value: meta.animations,
      quoted: false
    }]));
  }
  // Only set the change detection flag if it's defined and it's not the default.
  if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {
    definitionMap.set('changeDetection', literal(changeDetection));
  }
  const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);
  const type = createComponentType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Creates the type specification from the component meta. This type is inserted into .d.ts files
 * to be consumed by upstream compilations.
 */
function createComponentType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));
}
/**
 * Compiles the array literal of declarations into an expression according to the provided emit
 * mode.
 */
function compileDeclarationList(list, mode) {
  switch (mode) {
    case 0 /* DeclarationListEmitMode.Direct */:
      // directives: [MyDir],
      return list;
    case 1 /* DeclarationListEmitMode.Closure */:
      // directives: function () { return [MyDir]; }
      return fn([], [new ReturnStatement(list)]);
    case 2 /* DeclarationListEmitMode.ClosureResolved */:
      // directives: function () { return [MyDir].map(ng.resolveForwardRef); }
      const resolvedList = list.prop('map').callFn([importExpr(Identifiers.resolveForwardRef)]);
      return fn([], [new ReturnStatement(resolvedList)]);
  }
}
function prepareQueryParams(query, constantPool) {
  const parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];
  if (query.read) {
    parameters.push(query.read);
  }
  return parameters;
}
/**
 * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts
 * @param query
 */
function toQueryFlags(query) {
  return (query.descendants ? 1 /* QueryFlags.descendants */ : 0 /* QueryFlags.none */) | (query.static ? 2 /* QueryFlags.isStatic */ : 0 /* QueryFlags.none */) | (query.emitDistinctChangesOnly ? 4 /* QueryFlags.emitDistinctChangesOnly */ : 0 /* QueryFlags.none */);
}

function convertAttributesToExpressions(attributes) {
  const values = [];
  for (let key of Object.getOwnPropertyNames(attributes)) {
    const value = attributes[key];
    values.push(literal(key), value);
  }
  return values;
}
// Define and update any content queries
function createContentQueriesFunction(queries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);
  for (const query of queries) {
    // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);
    createStatements.push(importExpr(Identifiers.contentQuery).callFn([variable('dirIndex'), ...prepareQueryParams(query, constantPool)]).toStmt());
    // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  }
  const contentQueriesFnName = name ? `${name}_ContentQueries` : null;
  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam('dirIndex', null)], [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements), renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)], INFERRED_TYPE, null, contentQueriesFnName);
}
function stringAsType(str) {
  return expressionType(literal(str));
}
function stringMapAsLiteralExpression(map) {
  const mapValues = Object.keys(map).map(key => {
    const value = Array.isArray(map[key]) ? map[key][0] : map[key];
    return {
      key,
      value: literal(value),
      quoted: true
    };
  });
  return literalMap(mapValues);
}
function stringArrayAsType(arr) {
  return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) : NONE_TYPE;
}
function createBaseDirectiveTypeParams(meta) {
  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript
  // string literal, which must be on one line.
  const selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, '') : null;
  return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, expressionType(stringMapAsLiteralExpression(meta.inputs)), expressionType(stringMapAsLiteralExpression(meta.outputs)), stringArrayAsType(meta.queries.map(q => q.propertyName))];
}
/**
 * Creates the type specification from the directive meta. This type is inserted into .d.ts files
 * to be consumed by upstream compilations.
 */
function createDirectiveType(meta) {
  const typeParams = createBaseDirectiveTypeParams(meta);
  // Directives have no NgContentSelectors slot, but instead express a `never` type
  // so that future fields align.
  typeParams.push(NONE_TYPE);
  typeParams.push(expressionType(literal(meta.isStandalone)));
  typeParams.push(createHostDirectivesType(meta));
  return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));
}
// Define and update any view queries
function createViewQueriesFunction(viewQueries, constantPool, name) {
  const createStatements = [];
  const updateStatements = [];
  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);
  viewQueries.forEach(query => {
    // creation, e.g. r3.viewQuery(somePredicate, true);
    const queryDefinition = importExpr(Identifiers.viewQuery).callFn(prepareQueryParams(query, constantPool));
    createStatements.push(queryDefinition.toStmt());
    // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));
    const temporary = tempAllocator();
    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);
    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);
    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);
    updateStatements.push(refresh.and(updateDirective).toStmt());
  });
  const viewQueryFnName = name ? `${name}_Query` : null;
  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, createStatements), renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateStatements)], INFERRED_TYPE, null, viewQueryFnName);
}
// Return a host binding function or null if one is not necessary.
function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
  const bindingContext = variable(CONTEXT_NAME);
  const styleBuilder = new StylingBuilder(bindingContext);
  const {
    styleAttr,
    classAttr
  } = hostBindingsMetadata.specialAttributes;
  if (styleAttr !== undefined) {
    styleBuilder.registerStyleAttr(styleAttr);
  }
  if (classAttr !== undefined) {
    styleBuilder.registerClassAttr(classAttr);
  }
  const createInstructions = [];
  const updateInstructions = [];
  const updateVariables = [];
  const hostBindingSourceSpan = typeSourceSpan;
  // Calculate host event bindings
  const eventBindings = bindingParser.createDirectiveHostEventAsts(hostBindingsMetadata.listeners, hostBindingSourceSpan);
  if (eventBindings && eventBindings.length) {
    createInstructions.push(...createHostListeners(eventBindings, name));
  }
  // Calculate the host property bindings
  const bindings = bindingParser.createBoundHostProperties(hostBindingsMetadata.properties, hostBindingSourceSpan);
  const allOtherBindings = [];
  // We need to calculate the total amount of binding slots required by
  // all the instructions together before any value conversions happen.
  // Value conversions may require additional slots for interpolation and
  // bindings with pipes. These calculates happen after this block.
  let totalHostVarsCount = 0;
  bindings && bindings.forEach(binding => {
    const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);
    if (stylingInputWasSet) {
      totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;
    } else {
      allOtherBindings.push(binding);
      totalHostVarsCount++;
    }
  });
  let valueConverter;
  const getValueConverter = () => {
    if (!valueConverter) {
      const hostVarsCountFn = numSlots => {
        const originalVarsCount = totalHostVarsCount;
        totalHostVarsCount += numSlots;
        return originalVarsCount;
      };
      valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'),
      // new nodes are illegal here
      hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here
    }

    return valueConverter;
  };
  const propertyBindings = [];
  const attributeBindings = [];
  const syntheticHostBindings = [];
  for (const binding of allOtherBindings) {
    // resolve literal arrays and literal objects
    const value = binding.expression.visit(getValueConverter());
    const bindingExpr = bindingFn(bindingContext, value);
    const {
      bindingName,
      instruction,
      isAttribute
    } = getBindingNameAndInstruction(binding);
    const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter(context => context !== SecurityContext.NONE);
    let sanitizerFn = null;
    if (securityContexts.length) {
      if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext.URL) > -1 && securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {
        // Special case for some URL attributes (such as "src" and "href") that may be a part
        // of different security contexts. In this case we use special sanitization function and
        // select the actual sanitizer at runtime based on a tag name that is provided while
        // invoking sanitization function.
        sanitizerFn = importExpr(Identifiers.sanitizeUrlOrResourceUrl);
      } else {
        sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);
      }
    }
    const instructionParams = [literal(bindingName), bindingExpr.currValExpr];
    if (sanitizerFn) {
      instructionParams.push(sanitizerFn);
    } else {
      // If there was no sanitization function found based on the security context
      // of an attribute/property binding - check whether this attribute/property is
      // one of the security-sensitive <iframe> attributes.
      // Note: for host bindings defined on a directive, we do not try to find all
      // possible places where it can be matched, so we can not determine whether
      // the host element is an <iframe>. In this case, if an attribute/binding
      // name is in the `IFRAME_SECURITY_SENSITIVE_ATTRS` set - append a validation
      // function, which would be invoked at runtime and would have access to the
      // underlying DOM element, check if it's an <iframe> and if so - runs extra checks.
      if (isIframeSecuritySensitiveAttr(bindingName)) {
        instructionParams.push(importExpr(Identifiers.validateIframeAttribute));
      }
    }
    updateVariables.push(...bindingExpr.stmts);
    if (instruction === Identifiers.hostProperty) {
      propertyBindings.push(instructionParams);
    } else if (instruction === Identifiers.attribute) {
      attributeBindings.push(instructionParams);
    } else if (instruction === Identifiers.syntheticHostProperty) {
      syntheticHostBindings.push(instructionParams);
    } else {
      updateInstructions.push({
        reference: instruction,
        paramsOrFn: instructionParams,
        span: null
      });
    }
  }
  for (const bindingParams of propertyBindings) {
    updateInstructions.push({
      reference: Identifiers.hostProperty,
      paramsOrFn: bindingParams,
      span: null
    });
  }
  for (const bindingParams of attributeBindings) {
    updateInstructions.push({
      reference: Identifiers.attribute,
      paramsOrFn: bindingParams,
      span: null
    });
  }
  for (const bindingParams of syntheticHostBindings) {
    updateInstructions.push({
      reference: Identifiers.syntheticHostProperty,
      paramsOrFn: bindingParams,
      span: null
    });
  }
  // since we're dealing with directives/components and both have hostBinding
  // functions, we need to generate a special hostAttrs instruction that deals
  // with both the assignment of styling as well as static attributes to the host
  // element. The instruction below will instruct all initial styling (styling
  // that is inside of a host binding within a directive/component) to be attached
  // to the host element alongside any of the provided host attributes that were
  // collected earlier.
  const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);
  styleBuilder.assignHostAttrs(hostAttrs, definitionMap);
  if (styleBuilder.hasBindings) {
    // finally each binding that was registered in the statement above will need to be added to
    // the update block of a component/directive templateFn/hostBindingsFn so that the bindings
    // are evaluated and updated for the element.
    styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {
      for (const call of instruction.calls) {
        // we subtract a value of `1` here because the binding slot was already allocated
        // at the top of this method when all the input bindings were counted.
        totalHostVarsCount += Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);
        updateInstructions.push({
          reference: instruction.reference,
          paramsOrFn: convertStylingCall(call, bindingContext, bindingFn),
          span: null
        });
      }
    });
  }
  if (totalHostVarsCount) {
    definitionMap.set('hostVars', literal(totalHostVarsCount));
  }
  if (createInstructions.length > 0 || updateInstructions.length > 0) {
    const hostBindingsFnName = name ? `${name}_HostBindings` : null;
    const statements = [];
    if (createInstructions.length > 0) {
      statements.push(renderFlagCheckIfStmt(1 /* core.RenderFlags.Create */, getInstructionStatements(createInstructions)));
    }
    if (updateInstructions.length > 0) {
      statements.push(renderFlagCheckIfStmt(2 /* core.RenderFlags.Update */, updateVariables.concat(getInstructionStatements(updateInstructions))));
    }
    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);
  }
  return null;
}
function bindingFn(implicit, value) {
  return convertPropertyBinding(null, implicit, value, 'b');
}
function convertStylingCall(call, bindingContext, bindingFn) {
  return call.params(value => bindingFn(bindingContext, value).currValExpr);
}
function getBindingNameAndInstruction(binding) {
  let bindingName = binding.name;
  let instruction;
  // Check to see if this is an attr binding or a property binding
  const attrMatches = bindingName.match(ATTR_REGEX);
  if (attrMatches) {
    bindingName = attrMatches[1];
    instruction = Identifiers.attribute;
  } else {
    if (binding.isAnimation) {
      bindingName = prepareSyntheticPropertyName(bindingName);
      // host bindings that have a synthetic property (e.g. @foo) should always be rendered
      // in the context of the component and not the parent. Therefore there is a special
      // compatibility instruction available for this purpose.
      instruction = Identifiers.syntheticHostProperty;
    } else {
      instruction = Identifiers.hostProperty;
    }
  }
  return {
    bindingName,
    instruction,
    isAttribute: !!attrMatches
  };
}
function createHostListeners(eventBindings, name) {
  const listenerParams = [];
  const syntheticListenerParams = [];
  const instructions = [];
  for (const binding of eventBindings) {
    let bindingName = binding.name && sanitizeIdentifier(binding.name);
    const bindingFnName = binding.type === 1 /* ParsedEventType.Animation */ ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;
    const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;
    const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);
    if (binding.type == 1 /* ParsedEventType.Animation */) {
      syntheticListenerParams.push(params);
    } else {
      listenerParams.push(params);
    }
  }
  for (const params of syntheticListenerParams) {
    instructions.push({
      reference: Identifiers.syntheticHostListener,
      paramsOrFn: params,
      span: null
    });
  }
  for (const params of listenerParams) {
    instructions.push({
      reference: Identifiers.listener,
      paramsOrFn: params,
      span: null
    });
  }
  return instructions;
}
const HOST_REG_EXP = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
function parseHostBindings(host) {
  const attributes = {};
  const listeners = {};
  const properties = {};
  const specialAttributes = {};
  for (const key of Object.keys(host)) {
    const value = host[key];
    const matches = key.match(HOST_REG_EXP);
    if (matches === null) {
      switch (key) {
        case 'class':
          if (typeof value !== 'string') {
            // TODO(alxhub): make this a diagnostic.
            throw new Error(`Class binding must be string`);
          }
          specialAttributes.classAttr = value;
          break;
        case 'style':
          if (typeof value !== 'string') {
            // TODO(alxhub): make this a diagnostic.
            throw new Error(`Style binding must be string`);
          }
          specialAttributes.styleAttr = value;
          break;
        default:
          if (typeof value === 'string') {
            attributes[key] = literal(value);
          } else {
            attributes[key] = value;
          }
      }
    } else if (matches[1 /* HostBindingGroup.Binding */] != null) {
      if (typeof value !== 'string') {
        // TODO(alxhub): make this a diagnostic.
        throw new Error(`Property binding must be string`);
      }
      // synthetic properties (the ones that have a `@` as a prefix)
      // are still treated the same as regular properties. Therefore
      // there is no point in storing them in a separate map.
      properties[matches[1 /* HostBindingGroup.Binding */]] = value;
    } else if (matches[2 /* HostBindingGroup.Event */] != null) {
      if (typeof value !== 'string') {
        // TODO(alxhub): make this a diagnostic.
        throw new Error(`Event binding must be string`);
      }
      listeners[matches[2 /* HostBindingGroup.Event */]] = value;
    }
  }
  return {
    attributes,
    listeners,
    properties,
    specialAttributes
  };
}
/**
 * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a
 * given set of host bindings has no errors.
 *
 * @param bindings set of host bindings to verify.
 * @param sourceSpan source span where host bindings were defined.
 * @returns array of errors associated with a given set of host bindings.
 */
function verifyHostBindings(bindings, sourceSpan) {
  // TODO: abstract out host bindings verification logic and use it instead of
  // creating events and properties ASTs to detect errors (FW-996)
  const bindingParser = makeBindingParser();
  bindingParser.createDirectiveHostEventAsts(bindings.listeners, sourceSpan);
  bindingParser.createBoundHostProperties(bindings.properties, sourceSpan);
  return bindingParser.errors;
}
function compileStyles(styles, selector, hostSelector) {
  const shadowCss = new ShadowCss();
  return styles.map(style => {
    return shadowCss.shimCssText(style, selector, hostSelector);
  });
}
function createHostDirectivesType(meta) {
  if (!meta.hostDirectives?.length) {
    return NONE_TYPE;
  }
  return expressionType(literalArr(meta.hostDirectives.map(hostMeta => literalMap([{
    key: 'directive',
    value: typeofExpr(hostMeta.directive.type),
    quoted: false
  }, {
    key: 'inputs',
    value: stringMapAsLiteralExpression(hostMeta.inputs || {}),
    quoted: false
  }, {
    key: 'outputs',
    value: stringMapAsLiteralExpression(hostMeta.outputs || {}),
    quoted: false
  }]))));
}
function createHostDirectivesFeatureArg(hostDirectives) {
  const expressions = [];
  let hasForwardRef = false;
  for (const current of hostDirectives) {
    // Use a shorthand if there are no inputs or outputs.
    if (!current.inputs && !current.outputs) {
      expressions.push(current.directive.type);
    } else {
      const keys = [{
        key: 'directive',
        value: current.directive.type,
        quoted: false
      }];
      if (current.inputs) {
        const inputsLiteral = createHostDirectivesMappingArray(current.inputs);
        if (inputsLiteral) {
          keys.push({
            key: 'inputs',
            value: inputsLiteral,
            quoted: false
          });
        }
      }
      if (current.outputs) {
        const outputsLiteral = createHostDirectivesMappingArray(current.outputs);
        if (outputsLiteral) {
          keys.push({
            key: 'outputs',
            value: outputsLiteral,
            quoted: false
          });
        }
      }
      expressions.push(literalMap(keys));
    }
    if (current.isForwardReference) {
      hasForwardRef = true;
    }
  }
  // If there's a forward reference, we generate a `function() { return [HostDir] }`,
  // otherwise we can save some bytes by using a plain array, e.g. `[HostDir]`.
  return hasForwardRef ? new FunctionExpr([], [new ReturnStatement(literalArr(expressions))]) : literalArr(expressions);
}
/**
 * Converts an input/output mapping object literal into an array where the even keys are the
 * public name of the binding and the odd ones are the name it was aliased to. E.g.
 * `{inputOne: 'aliasOne', inputTwo: 'aliasTwo'}` will become
 * `['inputOne', 'aliasOne', 'inputTwo', 'aliasTwo']`.
 *
 * This conversion is necessary, because hosts bind to the public name of the host directive and
 * keeping the mapping in an object literal will break for apps using property renaming.
 */
function createHostDirectivesMappingArray(mapping) {
  const elements = [];
  for (const publicName in mapping) {
    if (mapping.hasOwnProperty(publicName)) {
      elements.push(literal(publicName), literal(mapping[publicName]));
    }
  }
  return elements.length > 0 ? literalArr(elements) : null;
}

/**
 * An interface for retrieving documents by URL that the compiler uses to
 * load templates.
 *
 * This is an abstract class, rather than an interface, so that it can be used
 * as injection token.
 */
class ResourceLoader {}
class CompilerFacadeImpl {
  constructor(jitEvaluator = new JitEvaluator()) {
    this.jitEvaluator = jitEvaluator;
    this.FactoryTarget = FactoryTarget$1;
    this.ResourceLoader = ResourceLoader;
    this.elementSchemaRegistry = new DomElementSchemaRegistry();
  }
  compilePipe(angularCoreEnv, sourceMapUrl, facade) {
    const metadata = {
      name: facade.name,
      type: wrapReference(facade.type),
      internalType: new WrappedNodeExpr(facade.type),
      typeArgumentCount: 0,
      deps: null,
      pipeName: facade.pipeName,
      pure: facade.pure,
      isStandalone: facade.isStandalone
    };
    const res = compilePipeFromMetadata(metadata);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const meta = convertDeclarePipeFacadeToMetadata(declaration);
    const res = compilePipeFromMetadata(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileInjectable(angularCoreEnv, sourceMapUrl, facade) {
    const {
      expression,
      statements
    } = compileInjectable({
      name: facade.name,
      type: wrapReference(facade.type),
      internalType: new WrappedNodeExpr(facade.type),
      typeArgumentCount: facade.typeArgumentCount,
      providedIn: computeProvidedIn(facade.providedIn),
      useClass: convertToProviderExpression(facade, 'useClass'),
      useFactory: wrapExpression(facade, 'useFactory'),
      useValue: convertToProviderExpression(facade, 'useValue'),
      useExisting: convertToProviderExpression(facade, 'useExisting'),
      deps: facade.deps?.map(convertR3DependencyMetadata)
    }, /* resolveForwardRefs */true);
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
  }
  compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {
    const {
      expression,
      statements
    } = compileInjectable({
      name: facade.type.name,
      type: wrapReference(facade.type),
      internalType: new WrappedNodeExpr(facade.type),
      typeArgumentCount: 0,
      providedIn: computeProvidedIn(facade.providedIn),
      useClass: convertToProviderExpression(facade, 'useClass'),
      useFactory: wrapExpression(facade, 'useFactory'),
      useValue: convertToProviderExpression(facade, 'useValue'),
      useExisting: convertToProviderExpression(facade, 'useExisting'),
      deps: facade.deps?.map(convertR3DeclareDependencyMetadata)
    }, /* resolveForwardRefs */true);
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
  }
  compileInjector(angularCoreEnv, sourceMapUrl, facade) {
    const meta = {
      name: facade.name,
      type: wrapReference(facade.type),
      internalType: new WrappedNodeExpr(facade.type),
      providers: facade.providers && facade.providers.length > 0 ? new WrappedNodeExpr(facade.providers) : null,
      imports: facade.imports.map(i => new WrappedNodeExpr(i))
    };
    const res = compileInjector(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const meta = convertDeclareInjectorFacadeToMetadata(declaration);
    const res = compileInjector(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileNgModule(angularCoreEnv, sourceMapUrl, facade) {
    const meta = {
      type: wrapReference(facade.type),
      internalType: new WrappedNodeExpr(facade.type),
      adjacentType: new WrappedNodeExpr(facade.type),
      bootstrap: facade.bootstrap.map(wrapReference),
      declarations: facade.declarations.map(wrapReference),
      publicDeclarationTypes: null,
      imports: facade.imports.map(wrapReference),
      includeImportTypes: true,
      exports: facade.exports.map(wrapReference),
      selectorScopeMode: R3SelectorScopeMode.Inline,
      containsForwardDecls: false,
      schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,
      id: facade.id ? new WrappedNodeExpr(facade.id) : null
    };
    const res = compileNgModule(meta);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const expression = compileNgModuleDeclarationExpression(declaration);
    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);
  }
  compileDirective(angularCoreEnv, sourceMapUrl, facade) {
    const meta = convertDirectiveFacadeToMetadata(facade);
    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);
    const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);
    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {
    const constantPool = new ConstantPool();
    const bindingParser = makeBindingParser();
    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
  }
  compileComponent(angularCoreEnv, sourceMapUrl, facade) {
    // Parse the template and check for errors.
    const {
      template,
      interpolation
    } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation);
    // Compile the component metadata, including template, into an expression.
    const meta = {
      ...facade,
      ...convertDirectiveFacadeToMetadata(facade),
      selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),
      template,
      declarations: facade.declarations.map(convertDeclarationFacadeToMetadata),
      declarationListEmitMode: 0 /* DeclarationListEmitMode.Direct */,
      styles: [...facade.styles, ...template.styles],
      encapsulation: facade.encapsulation,
      interpolation,
      changeDetection: facade.changeDetection,
      animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,
      viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,
      relativeContextFilePath: '',
      i18nUseExternalIds: true
    };
    const jitExpressionSourceMap = `ng:///${facade.name}.js`;
    return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);
  }
  compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {
    const typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);
    const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);
    return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);
  }
  compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {
    const constantPool = new ConstantPool();
    const bindingParser = makeBindingParser(meta.interpolation);
    const res = compileComponentFromMetadata(meta, constantPool, bindingParser);
    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
  }
  compileFactory(angularCoreEnv, sourceMapUrl, meta) {
    const factoryRes = compileFactoryFunction({
      name: meta.name,
      type: wrapReference(meta.type),
      internalType: new WrappedNodeExpr(meta.type),
      typeArgumentCount: meta.typeArgumentCount,
      deps: convertR3DependencyMetadataArray(meta.deps),
      target: meta.target
    });
    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);
  }
  compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {
    const factoryRes = compileFactoryFunction({
      name: meta.type.name,
      type: wrapReference(meta.type),
      internalType: new WrappedNodeExpr(meta.type),
      typeArgumentCount: 0,
      deps: Array.isArray(meta.deps) ? meta.deps.map(convertR3DeclareDependencyMetadata) : meta.deps,
      target: meta.target
    });
    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);
  }
  createParseSourceSpan(kind, typeName, sourceUrl) {
    return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
  }
  /**
   * JIT compiles an expression and returns the result of executing that expression.
   *
   * @param def the definition which will be compiled and executed to get the value to patch
   * @param context an object map of @angular/core symbol names to symbols which will be available
   * in the context of the compiled expression
   * @param sourceUrl a URL to use for the source map of the compiled expression
   * @param preStatements a collection of statements that should be evaluated before the expression.
   */
  jitExpression(def, context, sourceUrl, preStatements) {
    // The ConstantPool may contain Statements which declare variables used in the final expression.
    // Therefore, its statements need to precede the actual JIT operation. The final statement is a
    // declaration of $def which is set to the expression being compiled.
    const statements = [...preStatements, new DeclareVarStmt('$def', def, undefined, StmtModifier.Exported)];
    const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */true);
    return res['$def'];
  }
}
function convertToR3QueryMetadata(facade) {
  return {
    ...facade,
    predicate: convertQueryPredicate(facade.predicate),
    read: facade.read ? new WrappedNodeExpr(facade.read) : null,
    static: facade.static,
    emitDistinctChangesOnly: facade.emitDistinctChangesOnly
  };
}
function convertQueryDeclarationToMetadata(declaration) {
  return {
    propertyName: declaration.propertyName,
    first: declaration.first ?? false,
    predicate: convertQueryPredicate(declaration.predicate),
    descendants: declaration.descendants ?? false,
    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,
    static: declaration.static ?? false,
    emitDistinctChangesOnly: declaration.emitDistinctChangesOnly ?? true
  };
}
function convertQueryPredicate(predicate) {
  return Array.isArray(predicate) ?
  // The predicate is an array of strings so pass it through.
  predicate :
  // The predicate is a type - assume that we will need to unwrap any `forwardRef()` calls.
  createMayBeForwardRefExpression(new WrappedNodeExpr(predicate), 1 /* ForwardRefHandling.Wrapped */);
}

function convertDirectiveFacadeToMetadata(facade) {
  const inputsFromMetadata = parseInputOutputs(facade.inputs || []);
  const outputsFromMetadata = parseInputOutputs(facade.outputs || []);
  const propMetadata = facade.propMetadata;
  const inputsFromType = {};
  const outputsFromType = {};
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach(ann => {
        if (isInput(ann)) {
          inputsFromType[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;
        } else if (isOutput(ann)) {
          outputsFromType[field] = ann.bindingPropertyName || field;
        }
      });
    }
  }
  return {
    ...facade,
    typeArgumentCount: 0,
    typeSourceSpan: facade.typeSourceSpan,
    type: wrapReference(facade.type),
    internalType: new WrappedNodeExpr(facade.type),
    deps: null,
    host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),
    inputs: {
      ...inputsFromMetadata,
      ...inputsFromType
    },
    outputs: {
      ...outputsFromMetadata,
      ...outputsFromType
    },
    queries: facade.queries.map(convertToR3QueryMetadata),
    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,
    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),
    fullInheritance: false,
    hostDirectives: convertHostDirectivesToMetadata(facade)
  };
}
function convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    typeSourceSpan,
    internalType: new WrappedNodeExpr(declaration.type),
    selector: declaration.selector ?? null,
    inputs: declaration.inputs ?? {},
    outputs: declaration.outputs ?? {},
    host: convertHostDeclarationToMetadata(declaration.host),
    queries: (declaration.queries ?? []).map(convertQueryDeclarationToMetadata),
    viewQueries: (declaration.viewQueries ?? []).map(convertQueryDeclarationToMetadata),
    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,
    exportAs: declaration.exportAs ?? null,
    usesInheritance: declaration.usesInheritance ?? false,
    lifecycle: {
      usesOnChanges: declaration.usesOnChanges ?? false
    },
    deps: null,
    typeArgumentCount: 0,
    fullInheritance: false,
    isStandalone: declaration.isStandalone ?? false,
    hostDirectives: convertHostDirectivesToMetadata(declaration)
  };
}
function convertHostDeclarationToMetadata(host = {}) {
  return {
    attributes: convertOpaqueValuesToExpressions(host.attributes ?? {}),
    listeners: host.listeners ?? {},
    properties: host.properties ?? {},
    specialAttributes: {
      classAttr: host.classAttribute,
      styleAttr: host.styleAttribute
    }
  };
}
function convertHostDirectivesToMetadata(metadata) {
  if (metadata.hostDirectives?.length) {
    return metadata.hostDirectives.map(hostDirective => {
      return typeof hostDirective === 'function' ? {
        directive: wrapReference(hostDirective),
        inputs: null,
        outputs: null,
        isForwardReference: false
      } : {
        directive: wrapReference(hostDirective.directive),
        isForwardReference: false,
        inputs: hostDirective.inputs ? parseInputOutputs(hostDirective.inputs) : null,
        outputs: hostDirective.outputs ? parseInputOutputs(hostDirective.outputs) : null
      };
    });
  }
  return null;
}
function convertOpaqueValuesToExpressions(obj) {
  const result = {};
  for (const key of Object.keys(obj)) {
    result[key] = new WrappedNodeExpr(obj[key]);
  }
  return result;
}
function convertDeclareComponentFacadeToMetadata(decl, typeSourceSpan, sourceMapUrl) {
  const {
    template,
    interpolation
  } = parseJitTemplate(decl.template, decl.type.name, sourceMapUrl, decl.preserveWhitespaces ?? false, decl.interpolation);
  const declarations = [];
  if (decl.dependencies) {
    for (const innerDep of decl.dependencies) {
      switch (innerDep.kind) {
        case 'directive':
        case 'component':
          declarations.push(convertDirectiveDeclarationToMetadata(innerDep));
          break;
        case 'pipe':
          declarations.push(convertPipeDeclarationToMetadata(innerDep));
          break;
      }
    }
  } else if (decl.components || decl.directives || decl.pipes) {
    // Existing declarations on NPM may not be using the new `dependencies` merged field, and may
    // have separate fields for dependencies instead. Unify them for JIT compilation.
    decl.components && declarations.push(...decl.components.map(dir => convertDirectiveDeclarationToMetadata(dir, /* isComponent */true)));
    decl.directives && declarations.push(...decl.directives.map(dir => convertDirectiveDeclarationToMetadata(dir)));
    decl.pipes && declarations.push(...convertPipeMapToMetadata(decl.pipes));
  }
  return {
    ...convertDeclareDirectiveFacadeToMetadata(decl, typeSourceSpan),
    template,
    styles: decl.styles ?? [],
    declarations,
    viewProviders: decl.viewProviders !== undefined ? new WrappedNodeExpr(decl.viewProviders) : null,
    animations: decl.animations !== undefined ? new WrappedNodeExpr(decl.animations) : null,
    changeDetection: decl.changeDetection ?? ChangeDetectionStrategy.Default,
    encapsulation: decl.encapsulation ?? ViewEncapsulation.Emulated,
    interpolation,
    declarationListEmitMode: 2 /* DeclarationListEmitMode.ClosureResolved */,
    relativeContextFilePath: '',
    i18nUseExternalIds: true
  };
}
function convertDeclarationFacadeToMetadata(declaration) {
  return {
    ...declaration,
    type: new WrappedNodeExpr(declaration.type)
  };
}
function convertDirectiveDeclarationToMetadata(declaration, isComponent = null) {
  return {
    kind: R3TemplateDependencyKind.Directive,
    isComponent: isComponent || declaration.kind === 'component',
    selector: declaration.selector,
    type: new WrappedNodeExpr(declaration.type),
    inputs: declaration.inputs ?? [],
    outputs: declaration.outputs ?? [],
    exportAs: declaration.exportAs ?? null
  };
}
function convertPipeMapToMetadata(pipes) {
  if (!pipes) {
    return [];
  }
  return Object.keys(pipes).map(name => {
    return {
      kind: R3TemplateDependencyKind.Pipe,
      name,
      type: new WrappedNodeExpr(pipes[name])
    };
  });
}
function convertPipeDeclarationToMetadata(pipe) {
  return {
    kind: R3TemplateDependencyKind.Pipe,
    name: pipe.name,
    type: new WrappedNodeExpr(pipe.type)
  };
}
function parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {
  const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG;
  // Parse the template and check for errors.
  const parsed = parseTemplate(template, sourceMapUrl, {
    preserveWhitespaces,
    interpolationConfig
  });
  if (parsed.errors !== null) {
    const errors = parsed.errors.map(err => err.toString()).join(', ');
    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);
  }
  return {
    template: parsed,
    interpolation: interpolationConfig
  };
}
/**
 * Convert the expression, if present to an `R3ProviderExpression`.
 *
 * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,
 * if it is referencing a type that has not yet been defined, it will have already been wrapped in
 * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can
 * use `ForwardRefHandling.None`.
 */
function convertToProviderExpression(obj, property) {
  if (obj.hasOwnProperty(property)) {
    return createMayBeForwardRefExpression(new WrappedNodeExpr(obj[property]), 0 /* ForwardRefHandling.None */);
  } else {
    return undefined;
  }
}
function wrapExpression(obj, property) {
  if (obj.hasOwnProperty(property)) {
    return new WrappedNodeExpr(obj[property]);
  } else {
    return undefined;
  }
}
function computeProvidedIn(providedIn) {
  const expression = typeof providedIn === 'function' ? new WrappedNodeExpr(providedIn) : new LiteralExpr(providedIn ?? null);
  // See `convertToProviderExpression()` for why this uses `ForwardRefHandling.None`.
  return createMayBeForwardRefExpression(expression, 0 /* ForwardRefHandling.None */);
}

function convertR3DependencyMetadataArray(facades) {
  return facades == null ? null : facades.map(convertR3DependencyMetadata);
}
function convertR3DependencyMetadata(facade) {
  const isAttributeDep = facade.attribute != null; // both `null` and `undefined`
  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in
  // `attribute` rather than the `token`.
  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;
  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);
}
function convertR3DeclareDependencyMetadata(facade) {
  const isAttributeDep = facade.attribute ?? false;
  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);
  return createR3DependencyMetadata(token, isAttributeDep, facade.host ?? false, facade.optional ?? false, facade.self ?? false, facade.skipSelf ?? false);
}
function createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {
  // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.
  // But types are not available at runtime so we just use a literal `"<unknown>"` string as a dummy
  // marker.
  const attributeNameType = isAttributeDep ? literal('unknown') : null;
  return {
    token,
    attributeNameType,
    host,
    optional,
    self,
    skipSelf
  };
}
function extractHostBindings(propMetadata, sourceSpan, host) {
  // First parse the declarations from the metadata.
  const bindings = parseHostBindings(host || {});
  // After that check host bindings for errors
  const errors = verifyHostBindings(bindings, sourceSpan);
  if (errors.length) {
    throw new Error(errors.map(error => error.msg).join('\n'));
  }
  // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      propMetadata[field].forEach(ann => {
        if (isHostBinding(ann)) {
          // Since this is a decorator, we know that the value is a class member. Always access it
          // through `this` so that further down the line it can't be confused for a literal value
          // (e.g. if there's a property called `true`).
          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString('this', field);
        } else if (isHostListener(ann)) {
          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;
        }
      });
    }
  }
  return bindings;
}
function isHostBinding(value) {
  return value.ngMetadataName === 'HostBinding';
}
function isHostListener(value) {
  return value.ngMetadataName === 'HostListener';
}
function isInput(value) {
  return value.ngMetadataName === 'Input';
}
function isOutput(value) {
  return value.ngMetadataName === 'Output';
}
function parseInputOutputs(values) {
  return values.reduce((results, value) => {
    const [field, property] = value.split(':', 2).map(str => str.trim());
    results[field] = property || field;
    return results;
  }, {});
}
function convertDeclarePipeFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    internalType: new WrappedNodeExpr(declaration.type),
    typeArgumentCount: 0,
    pipeName: declaration.name,
    deps: null,
    pure: declaration.pure ?? true,
    isStandalone: declaration.isStandalone ?? false
  };
}
function convertDeclareInjectorFacadeToMetadata(declaration) {
  return {
    name: declaration.type.name,
    type: wrapReference(declaration.type),
    internalType: new WrappedNodeExpr(declaration.type),
    providers: declaration.providers !== undefined && declaration.providers.length > 0 ? new WrappedNodeExpr(declaration.providers) : null,
    imports: declaration.imports !== undefined ? declaration.imports.map(i => new WrappedNodeExpr(i)) : []
  };
}
function publishFacade(global) {
  const ng = global.ng || (global.ng = {});
  ng.ɵcompilerFacade = new CompilerFacadeImpl();
}

/**
 * @module
 * @description
 * Entry point for all public APIs of the compiler package.
 */
const VERSION = new Version('15.2.10');
class CompilerConfig {
  constructor({
    defaultEncapsulation = ViewEncapsulation.Emulated,
    useJit = true,
    missingTranslation = null,
    preserveWhitespaces,
    strictInjectionParameters
  } = {}) {
    this.defaultEncapsulation = defaultEncapsulation;
    this.useJit = !!useJit;
    this.missingTranslation = missingTranslation;
    this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));
    this.strictInjectionParameters = strictInjectionParameters === true;
  }
}
function preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {
  return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;
}
const _I18N_ATTR = 'i18n';
const _I18N_ATTR_PREFIX = 'i18n-';
const _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
const MEANING_SEPARATOR = '|';
const ID_SEPARATOR = '@@';
let i18nCommentsWarned = false;
/**
 * Extract translatable messages from an html AST
 */
function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
  const visitor = new _Visitor(implicitTags, implicitAttrs);
  return visitor.extract(nodes, interpolationConfig);
}
function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
  const visitor = new _Visitor(implicitTags, implicitAttrs);
  return visitor.merge(nodes, translations, interpolationConfig);
}
class ExtractionResult {
  constructor(messages, errors) {
    this.messages = messages;
    this.errors = errors;
  }
}
var _VisitorMode;
(function (_VisitorMode) {
  _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
  _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
})(_VisitorMode || (_VisitorMode = {}));
/**
 * This Visitor is used:
 * 1. to extract all the translatable strings from an html AST (see `extract()`),
 * 2. to replace the translatable strings with the actual translations (see `merge()`)
 *
 * @internal
 */
class _Visitor {
  constructor(_implicitTags, _implicitAttrs) {
    this._implicitTags = _implicitTags;
    this._implicitAttrs = _implicitAttrs;
  }
  /**
   * Extracts the messages from the tree
   */
  extract(nodes, interpolationConfig) {
    this._init(_VisitorMode.Extract, interpolationConfig);
    nodes.forEach(node => node.visit(this, null));
    if (this._inI18nBlock) {
      this._reportError(nodes[nodes.length - 1], 'Unclosed block');
    }
    return new ExtractionResult(this._messages, this._errors);
  }
  /**
   * Returns a tree where all translatable nodes are translated
   */
  merge(nodes, translations, interpolationConfig) {
    this._init(_VisitorMode.Merge, interpolationConfig);
    this._translations = translations;
    // Construct a single fake root element
    const wrapper = new Element('wrapper', [], nodes, undefined, undefined, undefined);
    const translatedNode = wrapper.visit(this, null);
    if (this._inI18nBlock) {
      this._reportError(nodes[nodes.length - 1], 'Unclosed block');
    }
    return new ParseTreeResult(translatedNode.children, this._errors);
  }
  visitExpansionCase(icuCase, context) {
    // Parse cases for translatable html attributes
    const expression = visitAll(this, icuCase.expression, context);
    if (this._mode === _VisitorMode.Merge) {
      return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
    }
  }
  visitExpansion(icu, context) {
    this._mayBeAddBlockChildren(icu);
    const wasInIcu = this._inIcu;
    if (!this._inIcu) {
      // nested ICU messages should not be extracted but top-level translated as a whole
      if (this._isInTranslatableSection) {
        this._addMessage([icu]);
      }
      this._inIcu = true;
    }
    const cases = visitAll(this, icu.cases, context);
    if (this._mode === _VisitorMode.Merge) {
      icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
    }
    this._inIcu = wasInIcu;
    return icu;
  }
  visitComment(comment, context) {
    const isOpening = _isOpeningComment(comment);
    if (isOpening && this._isInTranslatableSection) {
      this._reportError(comment, 'Could not start a block inside a translatable section');
      return;
    }
    const isClosing = _isClosingComment(comment);
    if (isClosing && !this._inI18nBlock) {
      this._reportError(comment, 'Trying to close an unopened block');
      return;
    }
    if (!this._inI18nNode && !this._inIcu) {
      if (!this._inI18nBlock) {
        if (isOpening) {
          // deprecated from v5 you should use <ng-container i18n> instead of i18n comments
          if (!i18nCommentsWarned && console && console.warn) {
            i18nCommentsWarned = true;
            const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';
            // TODO(ocombe): use a log service once there is a public one available
            console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);
          }
          this._inI18nBlock = true;
          this._blockStartDepth = this._depth;
          this._blockChildren = [];
          this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
          this._openTranslatableSection(comment);
        }
      } else {
        if (isClosing) {
          if (this._depth == this._blockStartDepth) {
            this._closeTranslatableSection(comment, this._blockChildren);
            this._inI18nBlock = false;
            const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
            // merge attributes in sections
            const nodes = this._translateMessage(comment, message);
            return visitAll(this, nodes);
          } else {
            this._reportError(comment, 'I18N blocks should not cross element boundaries');
            return;
          }
        }
      }
    }
  }
  visitText(text, context) {
    if (this._isInTranslatableSection) {
      this._mayBeAddBlockChildren(text);
    }
    return text;
  }
  visitElement(el, context) {
    this._mayBeAddBlockChildren(el);
    this._depth++;
    const wasInI18nNode = this._inI18nNode;
    const wasInImplicitNode = this._inImplicitNode;
    let childNodes = [];
    let translatedChildNodes = undefined;
    // Extract:
    // - top level nodes with the (implicit) "i18n" attribute if not already in a section
    // - ICU messages
    const i18nAttr = _getI18nAttr(el);
    const i18nMeta = i18nAttr ? i18nAttr.value : '';
    const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu && !this._isInTranslatableSection;
    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;
    this._inImplicitNode = wasInImplicitNode || isImplicit;
    if (!this._isInTranslatableSection && !this._inIcu) {
      if (i18nAttr || isTopLevelImplicit) {
        this._inI18nNode = true;
        const message = this._addMessage(el.children, i18nMeta);
        translatedChildNodes = this._translateMessage(el, message);
      }
      if (this._mode == _VisitorMode.Extract) {
        const isTranslatable = i18nAttr || isTopLevelImplicit;
        if (isTranslatable) this._openTranslatableSection(el);
        visitAll(this, el.children);
        if (isTranslatable) this._closeTranslatableSection(el, el.children);
      }
    } else {
      if (i18nAttr || isTopLevelImplicit) {
        this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
      }
      if (this._mode == _VisitorMode.Extract) {
        // Descend into child nodes for extraction
        visitAll(this, el.children);
      }
    }
    if (this._mode === _VisitorMode.Merge) {
      const visitNodes = translatedChildNodes || el.children;
      visitNodes.forEach(child => {
        const visited = child.visit(this, context);
        if (visited && !this._isInTranslatableSection) {
          // Do not add the children from translatable sections (= i18n blocks here)
          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
          childNodes = childNodes.concat(visited);
        }
      });
    }
    this._visitAttributesOf(el);
    this._depth--;
    this._inI18nNode = wasInI18nNode;
    this._inImplicitNode = wasInImplicitNode;
    if (this._mode === _VisitorMode.Merge) {
      const translatedAttrs = this._translateAttributes(el);
      return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
    }
    return null;
  }
  visitAttribute(attribute, context) {
    throw new Error('unreachable code');
  }
  _init(mode, interpolationConfig) {
    this._mode = mode;
    this._inI18nBlock = false;
    this._inI18nNode = false;
    this._depth = 0;
    this._inIcu = false;
    this._msgCountAtSectionStart = undefined;
    this._errors = [];
    this._messages = [];
    this._inImplicitNode = false;
    this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
  }
  // looks for translatable attributes
  _visitAttributesOf(el) {
    const explicitAttrNameToValue = {};
    const implicitAttrNames = this._implicitAttrs[el.name] || [];
    el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX)).forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value);
    el.attrs.forEach(attr => {
      if (attr.name in explicitAttrNameToValue) {
        this._addMessage([attr], explicitAttrNameToValue[attr.name]);
      } else if (implicitAttrNames.some(name => attr.name === name)) {
        this._addMessage([attr]);
      }
    });
  }
  // add a translatable message
  _addMessage(ast, msgMeta) {
    if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {
      // Do not create empty messages
      return null;
    }
    const {
      meaning,
      description,
      id
    } = _parseMessageMeta(msgMeta);
    const message = this._createI18nMessage(ast, meaning, description, id);
    this._messages.push(message);
    return message;
  }
  // Translates the given message given the `TranslationBundle`
  // This is used for translating elements / blocks - see `_translateAttributes` for attributes
  // no-op when called in extraction mode (returns [])
  _translateMessage(el, message) {
    if (message && this._mode === _VisitorMode.Merge) {
      const nodes = this._translations.get(message);
      if (nodes) {
        return nodes;
      }
      this._reportError(el, `Translation unavailable for message id="${this._translations.digest(message)}"`);
    }
    return [];
  }
  // translate the attributes of an element and remove i18n specific attributes
  _translateAttributes(el) {
    const attributes = el.attrs;
    const i18nParsedMessageMeta = {};
    attributes.forEach(attr => {
      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
        i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);
      }
    });
    const translatedAttributes = [];
    attributes.forEach(attr => {
      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
        // strip i18n specific attributes
        return;
      }
      if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
        const {
          meaning,
          description,
          id
        } = i18nParsedMessageMeta[attr.name];
        const message = this._createI18nMessage([attr], meaning, description, id);
        const nodes = this._translations.get(message);
        if (nodes) {
          if (nodes.length == 0) {
            translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));
          } else if (nodes[0] instanceof Text) {
            const value = nodes[0].value;
            translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined /* keySpan */, undefined /* valueSpan */, undefined /* valueTokens */, undefined /* i18n */));
          } else {
            this._reportError(el, `Unexpected translation for attribute "${attr.name}" (id="${id || this._translations.digest(message)}")`);
          }
        } else {
          this._reportError(el, `Translation unavailable for attribute "${attr.name}" (id="${id || this._translations.digest(message)}")`);
        }
      } else {
        translatedAttributes.push(attr);
      }
    });
    return translatedAttributes;
  }
  /**
   * Add the node as a child of the block when:
   * - we are in a block,
   * - we are not inside a ICU message (those are handled separately),
   * - the node is a "direct child" of the block
   */
  _mayBeAddBlockChildren(node) {
    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
      this._blockChildren.push(node);
    }
  }
  /**
   * Marks the start of a section, see `_closeTranslatableSection`
   */
  _openTranslatableSection(node) {
    if (this._isInTranslatableSection) {
      this._reportError(node, 'Unexpected section start');
    } else {
      this._msgCountAtSectionStart = this._messages.length;
    }
  }
  /**
   * A translatable section could be:
   * - the content of translatable element,
   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
   */
  get _isInTranslatableSection() {
    return this._msgCountAtSectionStart !== void 0;
  }
  /**
   * Terminates a section.
   *
   * If a section has only one significant children (comments not significant) then we should not
   * keep the message from this children:
   *
   * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
   * - one for the <p> content with meaning and description,
   * - another one for the ICU message.
   *
   * In this case the last message is discarded as it contains less information (the AST is
   * otherwise identical).
   *
   * Note that we should still keep messages extracted from attributes inside the section (ie in the
   * ICU message here)
   */
  _closeTranslatableSection(node, directChildren) {
    if (!this._isInTranslatableSection) {
      this._reportError(node, 'Unexpected section end');
      return;
    }
    const startIndex = this._msgCountAtSectionStart;
    const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);
    if (significantChildren == 1) {
      for (let i = this._messages.length - 1; i >= startIndex; i--) {
        const ast = this._messages[i].nodes;
        if (!(ast.length == 1 && ast[0] instanceof Text$2)) {
          this._messages.splice(i, 1);
          break;
        }
      }
    }
    this._msgCountAtSectionStart = undefined;
  }
  _reportError(node, msg) {
    this._errors.push(new I18nError(node.sourceSpan, msg));
  }
}
function _isOpeningComment(n) {
  return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));
}
function _isClosingComment(n) {
  return !!(n instanceof Comment && n.value && n.value === '/i18n');
}
function _getI18nAttr(p) {
  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;
}
function _parseMessageMeta(i18n) {
  if (!i18n) return {
    meaning: '',
    description: '',
    id: ''
  };
  const idIndex = i18n.indexOf(ID_SEPARATOR);
  const descIndex = i18n.indexOf(MEANING_SEPARATOR);
  const [meaningAndDesc, id] = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];
  const [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];
  return {
    meaning,
    description,
    id: id.trim()
  };
}
class XmlTagDefinition {
  constructor() {
    this.closedByParent = false;
    this.isVoid = false;
    this.ignoreFirstLf = false;
    this.canSelfClose = true;
    this.preventNamespaceInheritance = false;
  }
  requireExtraParent(currentParent) {
    return false;
  }
  isClosedByChild(name) {
    return false;
  }
  getContentType() {
    return TagContentType.PARSABLE_DATA;
  }
}
const _TAG_DEFINITION = new XmlTagDefinition();
function getXmlTagDefinition(tagName) {
  return _TAG_DEFINITION;
}
class XmlParser extends Parser {
  constructor() {
    super(getXmlTagDefinition);
  }
  parse(source, url, options) {
    return super.parse(source, url, options);
  }
}
const _VERSION$1 = '1.2';
const _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:1.2';
// TODO(vicb): make this a param (s/_/-/)
const _DEFAULT_SOURCE_LANG$1 = 'en';
const _PLACEHOLDER_TAG$2 = 'x';
const _MARKER_TAG$1 = 'mrk';
const _FILE_TAG = 'file';
const _SOURCE_TAG$1 = 'source';
const _SEGMENT_SOURCE_TAG = 'seg-source';
const _ALT_TRANS_TAG = 'alt-trans';
const _TARGET_TAG$1 = 'target';
const _UNIT_TAG$1 = 'trans-unit';
const _CONTEXT_GROUP_TAG = 'context-group';
const _CONTEXT_TAG = 'context';
// https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
class Xliff extends Serializer {
  write(messages, locale) {
    const visitor = new _WriteVisitor$1();
    const transUnits = [];
    messages.forEach(message => {
      let contextTags = [];
      message.sources.forEach(source => {
        let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {
          purpose: 'location'
        });
        contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {
          'context-type': 'sourcefile'
        }, [new Text$1(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, {
          'context-type': 'linenumber'
        }, [new Text$1(`${source.startLine}`)]), new CR(8));
        contextTags.push(new CR(8), contextGroupTag);
      });
      const transUnit = new Tag(_UNIT_TAG$1, {
        id: message.id,
        datatype: 'html'
      });
      transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);
      if (message.description) {
        transUnit.children.push(new CR(8), new Tag('note', {
          priority: '1',
          from: 'description'
        }, [new Text$1(message.description)]));
      }
      if (message.meaning) {
        transUnit.children.push(new CR(8), new Tag('note', {
          priority: '1',
          from: 'meaning'
        }, [new Text$1(message.meaning)]));
      }
      transUnit.children.push(new CR(6));
      transUnits.push(new CR(6), transUnit);
    });
    const body = new Tag('body', {}, [...transUnits, new CR(4)]);
    const file = new Tag('file', {
      'source-language': locale || _DEFAULT_SOURCE_LANG$1,
      datatype: 'plaintext',
      original: 'ng2.template'
    }, [new CR(4), body, new CR(2)]);
    const xliff = new Tag('xliff', {
      version: _VERSION$1,
      xmlns: _XMLNS$1
    }, [new CR(2), file, new CR()]);
    return serialize([new Declaration({
      version: '1.0',
      encoding: 'UTF-8'
    }), new CR(), xliff, new CR()]);
  }
  load(content, url) {
    // xliff to xml nodes
    const xliffParser = new XliffParser();
    const {
      locale,
      msgIdToHtml,
      errors
    } = xliffParser.parse(content, url);
    // xml nodes to i18n nodes
    const i18nNodesByMsgId = {};
    const converter = new XmlToI18n$2();
    Object.keys(msgIdToHtml).forEach(msgId => {
      const {
        i18nNodes,
        errors: e
      } = converter.convert(msgIdToHtml[msgId], url);
      errors.push(...e);
      i18nNodesByMsgId[msgId] = i18nNodes;
    });
    if (errors.length) {
      throw new Error(`xliff parse errors:\n${errors.join('\n')}`);
    }
    return {
      locale: locale,
      i18nNodesByMsgId
    };
  }
  digest(message) {
    return digest$1(message);
  }
}
class _WriteVisitor$1 {
  visitText(text, context) {
    return [new Text$1(text.value)];
  }
  visitContainer(container, context) {
    const nodes = [];
    container.children.forEach(node => nodes.push(...node.visit(this)));
    return nodes;
  }
  visitIcu(icu, context) {
    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];
    Object.keys(icu.cases).forEach(c => {
      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));
    });
    nodes.push(new Text$1(`}`));
    return nodes;
  }
  visitTagPlaceholder(ph, context) {
    const ctype = getCtypeForTag(ph.tag);
    if (ph.isVoid) {
      // void tags have no children nor closing tags
      return [new Tag(_PLACEHOLDER_TAG$2, {
        id: ph.startName,
        ctype,
        'equiv-text': `<${ph.tag}/>`
      })];
    }
    const startTagPh = new Tag(_PLACEHOLDER_TAG$2, {
      id: ph.startName,
      ctype,
      'equiv-text': `<${ph.tag}>`
    });
    const closeTagPh = new Tag(_PLACEHOLDER_TAG$2, {
      id: ph.closeName,
      ctype,
      'equiv-text': `</${ph.tag}>`
    });
    return [startTagPh, ...this.serialize(ph.children), closeTagPh];
  }
  visitPlaceholder(ph, context) {
    return [new Tag(_PLACEHOLDER_TAG$2, {
      id: ph.name,
      'equiv-text': `{{${ph.value}}}`
    })];
  }
  visitIcuPlaceholder(ph, context) {
    const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ')}}`;
    return [new Tag(_PLACEHOLDER_TAG$2, {
      id: ph.name,
      'equiv-text': equivText
    })];
  }
  serialize(nodes) {
    return [].concat(...nodes.map(node => node.visit(this)));
  }
}
// TODO(vicb): add error management (structure)
// Extract messages as xml nodes from the xliff file
class XliffParser {
  constructor() {
    this._locale = null;
  }
  parse(xliff, url) {
    this._unitMlString = null;
    this._msgIdToHtml = {};
    const xml = new XmlParser().parse(xliff, url);
    this._errors = xml.errors;
    visitAll(this, xml.rootNodes, null);
    return {
      msgIdToHtml: this._msgIdToHtml,
      errors: this._errors,
      locale: this._locale
    };
  }
  visitElement(element, context) {
    switch (element.name) {
      case _UNIT_TAG$1:
        this._unitMlString = null;
        const idAttr = element.attrs.find(attr => attr.name === 'id');
        if (!idAttr) {
          this._addError(element, `<${_UNIT_TAG$1}> misses the "id" attribute`);
        } else {
          const id = idAttr.value;
          if (this._msgIdToHtml.hasOwnProperty(id)) {
            this._addError(element, `Duplicated translations for msg ${id}`);
          } else {
            visitAll(this, element.children, null);
            if (typeof this._unitMlString === 'string') {
              this._msgIdToHtml[id] = this._unitMlString;
            } else {
              this._addError(element, `Message ${id} misses a translation`);
            }
          }
        }
        break;
      // ignore those tags
      case _SOURCE_TAG$1:
      case _SEGMENT_SOURCE_TAG:
      case _ALT_TRANS_TAG:
        break;
      case _TARGET_TAG$1:
        const innerTextStart = element.startSourceSpan.end.offset;
        const innerTextEnd = element.endSourceSpan.start.offset;
        const content = element.startSourceSpan.start.file.content;
        const innerText = content.slice(innerTextStart, innerTextEnd);
        this._unitMlString = innerText;
        break;
      case _FILE_TAG:
        const localeAttr = element.attrs.find(attr => attr.name === 'target-language');
        if (localeAttr) {
          this._locale = localeAttr.value;
        }
        visitAll(this, element.children, null);
        break;
      default:
        // TODO(vicb): assert file structure, xliff version
        // For now only recurse on unhandled nodes
        visitAll(this, element.children, null);
    }
  }
  visitAttribute(attribute, context) {}
  visitText(text, context) {}
  visitComment(comment, context) {}
  visitExpansion(expansion, context) {}
  visitExpansionCase(expansionCase, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}
// Convert ml nodes (xliff syntax) to i18n nodes
class XmlToI18n$2 {
  convert(message, url) {
    const xmlIcu = new XmlParser().parse(message, url, {
      tokenizeExpansionForms: true
    });
    this._errors = xmlIcu.errors;
    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll(this, xmlIcu.rootNodes));
    return {
      i18nNodes: i18nNodes,
      errors: this._errors
    };
  }
  visitText(text, context) {
    return new Text$2(text.value, text.sourceSpan);
  }
  visitElement(el, context) {
    if (el.name === _PLACEHOLDER_TAG$2) {
      const nameAttr = el.attrs.find(attr => attr.name === 'id');
      if (nameAttr) {
        return new Placeholder('', nameAttr.value, el.sourceSpan);
      }
      this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the "id" attribute`);
      return null;
    }
    if (el.name === _MARKER_TAG$1) {
      return [].concat(...visitAll(this, el.children));
    }
    this._addError(el, `Unexpected tag`);
    return null;
  }
  visitExpansion(icu, context) {
    const caseMap = {};
    visitAll(this, icu.cases).forEach(c => {
      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
    });
    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
  }
  visitExpansionCase(icuCase, context) {
    return {
      value: icuCase.value,
      nodes: visitAll(this, icuCase.expression)
    };
  }
  visitComment(comment, context) {}
  visitAttribute(attribute, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}
function getCtypeForTag(tag) {
  switch (tag.toLowerCase()) {
    case 'br':
      return 'lb';
    case 'img':
      return 'image';
    default:
      return `x-${tag}`;
  }
}
const _VERSION = '2.0';
const _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';
// TODO(vicb): make this a param (s/_/-/)
const _DEFAULT_SOURCE_LANG = 'en';
const _PLACEHOLDER_TAG$1 = 'ph';
const _PLACEHOLDER_SPANNING_TAG = 'pc';
const _MARKER_TAG = 'mrk';
const _XLIFF_TAG = 'xliff';
const _SOURCE_TAG = 'source';
const _TARGET_TAG = 'target';
const _UNIT_TAG = 'unit';
// https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html
class Xliff2 extends Serializer {
  write(messages, locale) {
    const visitor = new _WriteVisitor();
    const units = [];
    messages.forEach(message => {
      const unit = new Tag(_UNIT_TAG, {
        id: message.id
      });
      const notes = new Tag('notes');
      if (message.description || message.meaning) {
        if (message.description) {
          notes.children.push(new CR(8), new Tag('note', {
            category: 'description'
          }, [new Text$1(message.description)]));
        }
        if (message.meaning) {
          notes.children.push(new CR(8), new Tag('note', {
            category: 'meaning'
          }, [new Text$1(message.meaning)]));
        }
      }
      message.sources.forEach(source => {
        notes.children.push(new CR(8), new Tag('note', {
          category: 'location'
        }, [new Text$1(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));
      });
      notes.children.push(new CR(6));
      unit.children.push(new CR(6), notes);
      const segment = new Tag('segment');
      segment.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(6));
      unit.children.push(new CR(6), segment, new CR(4));
      units.push(new CR(4), unit);
    });
    const file = new Tag('file', {
      'original': 'ng.template',
      id: 'ngi18n'
    }, [...units, new CR(2)]);
    const xliff = new Tag(_XLIFF_TAG, {
      version: _VERSION,
      xmlns: _XMLNS,
      srcLang: locale || _DEFAULT_SOURCE_LANG
    }, [new CR(2), file, new CR()]);
    return serialize([new Declaration({
      version: '1.0',
      encoding: 'UTF-8'
    }), new CR(), xliff, new CR()]);
  }
  load(content, url) {
    // xliff to xml nodes
    const xliff2Parser = new Xliff2Parser();
    const {
      locale,
      msgIdToHtml,
      errors
    } = xliff2Parser.parse(content, url);
    // xml nodes to i18n nodes
    const i18nNodesByMsgId = {};
    const converter = new XmlToI18n$1();
    Object.keys(msgIdToHtml).forEach(msgId => {
      const {
        i18nNodes,
        errors: e
      } = converter.convert(msgIdToHtml[msgId], url);
      errors.push(...e);
      i18nNodesByMsgId[msgId] = i18nNodes;
    });
    if (errors.length) {
      throw new Error(`xliff2 parse errors:\n${errors.join('\n')}`);
    }
    return {
      locale: locale,
      i18nNodesByMsgId
    };
  }
  digest(message) {
    return decimalDigest(message);
  }
}
class _WriteVisitor {
  visitText(text, context) {
    return [new Text$1(text.value)];
  }
  visitContainer(container, context) {
    const nodes = [];
    container.children.forEach(node => nodes.push(...node.visit(this)));
    return nodes;
  }
  visitIcu(icu, context) {
    const nodes = [new Text$1(`{${icu.expressionPlaceholder}, ${icu.type}, `)];
    Object.keys(icu.cases).forEach(c => {
      nodes.push(new Text$1(`${c} {`), ...icu.cases[c].visit(this), new Text$1(`} `));
    });
    nodes.push(new Text$1(`}`));
    return nodes;
  }
  visitTagPlaceholder(ph, context) {
    const type = getTypeForTag(ph.tag);
    if (ph.isVoid) {
      const tagPh = new Tag(_PLACEHOLDER_TAG$1, {
        id: (this._nextPlaceholderId++).toString(),
        equiv: ph.startName,
        type: type,
        disp: `<${ph.tag}/>`
      });
      return [tagPh];
    }
    const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {
      id: (this._nextPlaceholderId++).toString(),
      equivStart: ph.startName,
      equivEnd: ph.closeName,
      type: type,
      dispStart: `<${ph.tag}>`,
      dispEnd: `</${ph.tag}>`
    });
    const nodes = [].concat(...ph.children.map(node => node.visit(this)));
    if (nodes.length) {
      nodes.forEach(node => tagPc.children.push(node));
    } else {
      tagPc.children.push(new Text$1(''));
    }
    return [tagPc];
  }
  visitPlaceholder(ph, context) {
    const idStr = (this._nextPlaceholderId++).toString();
    return [new Tag(_PLACEHOLDER_TAG$1, {
      id: idStr,
      equiv: ph.name,
      disp: `{{${ph.value}}}`
    })];
  }
  visitIcuPlaceholder(ph, context) {
    const cases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');
    const idStr = (this._nextPlaceholderId++).toString();
    return [new Tag(_PLACEHOLDER_TAG$1, {
      id: idStr,
      equiv: ph.name,
      disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}`
    })];
  }
  serialize(nodes) {
    this._nextPlaceholderId = 0;
    return [].concat(...nodes.map(node => node.visit(this)));
  }
}
// Extract messages as xml nodes from the xliff file
class Xliff2Parser {
  constructor() {
    this._locale = null;
  }
  parse(xliff, url) {
    this._unitMlString = null;
    this._msgIdToHtml = {};
    const xml = new XmlParser().parse(xliff, url);
    this._errors = xml.errors;
    visitAll(this, xml.rootNodes, null);
    return {
      msgIdToHtml: this._msgIdToHtml,
      errors: this._errors,
      locale: this._locale
    };
  }
  visitElement(element, context) {
    switch (element.name) {
      case _UNIT_TAG:
        this._unitMlString = null;
        const idAttr = element.attrs.find(attr => attr.name === 'id');
        if (!idAttr) {
          this._addError(element, `<${_UNIT_TAG}> misses the "id" attribute`);
        } else {
          const id = idAttr.value;
          if (this._msgIdToHtml.hasOwnProperty(id)) {
            this._addError(element, `Duplicated translations for msg ${id}`);
          } else {
            visitAll(this, element.children, null);
            if (typeof this._unitMlString === 'string') {
              this._msgIdToHtml[id] = this._unitMlString;
            } else {
              this._addError(element, `Message ${id} misses a translation`);
            }
          }
        }
        break;
      case _SOURCE_TAG:
        // ignore source message
        break;
      case _TARGET_TAG:
        const innerTextStart = element.startSourceSpan.end.offset;
        const innerTextEnd = element.endSourceSpan.start.offset;
        const content = element.startSourceSpan.start.file.content;
        const innerText = content.slice(innerTextStart, innerTextEnd);
        this._unitMlString = innerText;
        break;
      case _XLIFF_TAG:
        const localeAttr = element.attrs.find(attr => attr.name === 'trgLang');
        if (localeAttr) {
          this._locale = localeAttr.value;
        }
        const versionAttr = element.attrs.find(attr => attr.name === 'version');
        if (versionAttr) {
          const version = versionAttr.value;
          if (version !== '2.0') {
            this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);
          } else {
            visitAll(this, element.children, null);
          }
        }
        break;
      default:
        visitAll(this, element.children, null);
    }
  }
  visitAttribute(attribute, context) {}
  visitText(text, context) {}
  visitComment(comment, context) {}
  visitExpansion(expansion, context) {}
  visitExpansionCase(expansionCase, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}
// Convert ml nodes (xliff syntax) to i18n nodes
class XmlToI18n$1 {
  convert(message, url) {
    const xmlIcu = new XmlParser().parse(message, url, {
      tokenizeExpansionForms: true
    });
    this._errors = xmlIcu.errors;
    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll(this, xmlIcu.rootNodes));
    return {
      i18nNodes,
      errors: this._errors
    };
  }
  visitText(text, context) {
    return new Text$2(text.value, text.sourceSpan);
  }
  visitElement(el, context) {
    switch (el.name) {
      case _PLACEHOLDER_TAG$1:
        const nameAttr = el.attrs.find(attr => attr.name === 'equiv');
        if (nameAttr) {
          return [new Placeholder('', nameAttr.value, el.sourceSpan)];
        }
        this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the "equiv" attribute`);
        break;
      case _PLACEHOLDER_SPANNING_TAG:
        const startAttr = el.attrs.find(attr => attr.name === 'equivStart');
        const endAttr = el.attrs.find(attr => attr.name === 'equivEnd');
        if (!startAttr) {
          this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the "equivStart" attribute`);
        } else if (!endAttr) {
          this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the "equivEnd" attribute`);
        } else {
          const startId = startAttr.value;
          const endId = endAttr.value;
          const nodes = [];
          return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));
        }
        break;
      case _MARKER_TAG:
        return [].concat(...visitAll(this, el.children));
      default:
        this._addError(el, `Unexpected tag`);
    }
    return null;
  }
  visitExpansion(icu, context) {
    const caseMap = {};
    visitAll(this, icu.cases).forEach(c => {
      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
    });
    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
  }
  visitExpansionCase(icuCase, context) {
    return {
      value: icuCase.value,
      nodes: [].concat(...visitAll(this, icuCase.expression))
    };
  }
  visitComment(comment, context) {}
  visitAttribute(attribute, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}
function getTypeForTag(tag) {
  switch (tag.toLowerCase()) {
    case 'br':
    case 'b':
    case 'i':
    case 'u':
      return 'fmt';
    case 'img':
      return 'image';
    case 'a':
      return 'link';
    default:
      return 'other';
  }
}
const _TRANSLATIONS_TAG = 'translationbundle';
const _TRANSLATION_TAG = 'translation';
const _PLACEHOLDER_TAG = 'ph';
class Xtb extends Serializer {
  write(messages, locale) {
    throw new Error('Unsupported');
  }
  load(content, url) {
    // xtb to xml nodes
    const xtbParser = new XtbParser();
    const {
      locale,
      msgIdToHtml,
      errors
    } = xtbParser.parse(content, url);
    // xml nodes to i18n nodes
    const i18nNodesByMsgId = {};
    const converter = new XmlToI18n();
    // Because we should be able to load xtb files that rely on features not supported by angular,
    // we need to delay the conversion of html to i18n nodes so that non angular messages are not
    // converted
    Object.keys(msgIdToHtml).forEach(msgId => {
      const valueFn = function () {
        const {
          i18nNodes,
          errors
        } = converter.convert(msgIdToHtml[msgId], url);
        if (errors.length) {
          throw new Error(`xtb parse errors:\n${errors.join('\n')}`);
        }
        return i18nNodes;
      };
      createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
    });
    if (errors.length) {
      throw new Error(`xtb parse errors:\n${errors.join('\n')}`);
    }
    return {
      locale: locale,
      i18nNodesByMsgId
    };
  }
  digest(message) {
    return digest(message);
  }
  createNameMapper(message) {
    return new SimplePlaceholderMapper(message, toPublicName);
  }
}
function createLazyProperty(messages, id, valueFn) {
  Object.defineProperty(messages, id, {
    configurable: true,
    enumerable: true,
    get: function () {
      const value = valueFn();
      Object.defineProperty(messages, id, {
        enumerable: true,
        value
      });
      return value;
    },
    set: _ => {
      throw new Error('Could not overwrite an XTB translation');
    }
  });
}
// Extract messages as xml nodes from the xtb file
class XtbParser {
  constructor() {
    this._locale = null;
  }
  parse(xtb, url) {
    this._bundleDepth = 0;
    this._msgIdToHtml = {};
    // We can not parse the ICU messages at this point as some messages might not originate
    // from Angular that could not be lex'd.
    const xml = new XmlParser().parse(xtb, url);
    this._errors = xml.errors;
    visitAll(this, xml.rootNodes);
    return {
      msgIdToHtml: this._msgIdToHtml,
      errors: this._errors,
      locale: this._locale
    };
  }
  visitElement(element, context) {
    switch (element.name) {
      case _TRANSLATIONS_TAG:
        this._bundleDepth++;
        if (this._bundleDepth > 1) {
          this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);
        }
        const langAttr = element.attrs.find(attr => attr.name === 'lang');
        if (langAttr) {
          this._locale = langAttr.value;
        }
        visitAll(this, element.children, null);
        this._bundleDepth--;
        break;
      case _TRANSLATION_TAG:
        const idAttr = element.attrs.find(attr => attr.name === 'id');
        if (!idAttr) {
          this._addError(element, `<${_TRANSLATION_TAG}> misses the "id" attribute`);
        } else {
          const id = idAttr.value;
          if (this._msgIdToHtml.hasOwnProperty(id)) {
            this._addError(element, `Duplicated translations for msg ${id}`);
          } else {
            const innerTextStart = element.startSourceSpan.end.offset;
            const innerTextEnd = element.endSourceSpan.start.offset;
            const content = element.startSourceSpan.start.file.content;
            const innerText = content.slice(innerTextStart, innerTextEnd);
            this._msgIdToHtml[id] = innerText;
          }
        }
        break;
      default:
        this._addError(element, 'Unexpected tag');
    }
  }
  visitAttribute(attribute, context) {}
  visitText(text, context) {}
  visitComment(comment, context) {}
  visitExpansion(expansion, context) {}
  visitExpansionCase(expansionCase, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}
// Convert ml nodes (xtb syntax) to i18n nodes
class XmlToI18n {
  convert(message, url) {
    const xmlIcu = new XmlParser().parse(message, url, {
      tokenizeExpansionForms: true
    });
    this._errors = xmlIcu.errors;
    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);
    return {
      i18nNodes,
      errors: this._errors
    };
  }
  visitText(text, context) {
    return new Text$2(text.value, text.sourceSpan);
  }
  visitExpansion(icu, context) {
    const caseMap = {};
    visitAll(this, icu.cases).forEach(c => {
      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
    });
    return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
  }
  visitExpansionCase(icuCase, context) {
    return {
      value: icuCase.value,
      nodes: visitAll(this, icuCase.expression)
    };
  }
  visitElement(el, context) {
    if (el.name === _PLACEHOLDER_TAG) {
      const nameAttr = el.attrs.find(attr => attr.name === 'name');
      if (nameAttr) {
        return new Placeholder('', nameAttr.value, el.sourceSpan);
      }
      this._addError(el, `<${_PLACEHOLDER_TAG}> misses the "name" attribute`);
    } else {
      this._addError(el, `Unexpected tag`);
    }
    return null;
  }
  visitComment(comment, context) {}
  visitAttribute(attribute, context) {}
  _addError(node, message) {
    this._errors.push(new I18nError(node.sourceSpan, message));
  }
}

/**
 * A container for translated messages
 */
class TranslationBundle {
  constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {
    this._i18nNodesByMsgId = _i18nNodesByMsgId;
    this.digest = digest;
    this.mapperFactory = mapperFactory;
    this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
  }
  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.
  static load(content, url, serializer, missingTranslationStrategy, console) {
    const {
      locale,
      i18nNodesByMsgId
    } = serializer.load(content, url);
    const digestFn = m => serializer.digest(m);
    const mapperFactory = m => serializer.createNameMapper(m);
    return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
  }
  // Returns the translation as HTML nodes from the given source message.
  get(srcMsg) {
    const html = this._i18nToHtml.convert(srcMsg);
    if (html.errors.length) {
      throw new Error(html.errors.join('\n'));
    }
    return html.nodes;
  }
  has(srcMsg) {
    return this.digest(srcMsg) in this._i18nNodesByMsgId;
  }
}
class I18nToHtmlVisitor {
  constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
    this._i18nNodesByMsgId = _i18nNodesByMsgId;
    this._locale = _locale;
    this._digest = _digest;
    this._mapperFactory = _mapperFactory;
    this._missingTranslationStrategy = _missingTranslationStrategy;
    this._console = _console;
    this._contextStack = [];
    this._errors = [];
  }
  convert(srcMsg) {
    this._contextStack.length = 0;
    this._errors.length = 0;
    // i18n to text
    const text = this._convertToText(srcMsg);
    // text to html
    const url = srcMsg.nodes[0].sourceSpan.start.file.url;
    const html = new HtmlParser().parse(text, url, {
      tokenizeExpansionForms: true
    });
    return {
      nodes: html.rootNodes,
      errors: [...this._errors, ...html.errors]
    };
  }
  visitText(text, context) {
    // `convert()` uses an `HtmlParser` to return `html.Node`s
    // we should then make sure that any special characters are escaped
    return escapeXml(text.value);
  }
  visitContainer(container, context) {
    return container.children.map(n => n.visit(this)).join('');
  }
  visitIcu(icu, context) {
    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);
    // TODO(vicb): Once all format switch to using expression placeholders
    // we should throw when the placeholder is not in the source message
    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression].text : icu.expression;
    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;
  }
  visitPlaceholder(ph, context) {
    const phName = this._mapper(ph.name);
    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
      return this._srcMsg.placeholders[phName].text;
    }
    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
    }
    this._addError(ph, `Unknown placeholder "${ph.name}"`);
    return '';
  }
  // Loaded message contains only placeholders (vs tag and icu placeholders).
  // However when a translation can not be found, we need to serialize the source message
  // which can contain tag placeholders
  visitTagPlaceholder(ph, context) {
    const tag = `${ph.tag}`;
    const attrs = Object.keys(ph.attrs).map(name => `${name}="${ph.attrs[name]}"`).join(' ');
    if (ph.isVoid) {
      return `<${tag} ${attrs}/>`;
    }
    const children = ph.children.map(c => c.visit(this)).join('');
    return `<${tag} ${attrs}>${children}</${tag}>`;
  }
  // Loaded message contains only placeholders (vs tag and icu placeholders).
  // However when a translation can not be found, we need to serialize the source message
  // which can contain tag placeholders
  visitIcuPlaceholder(ph, context) {
    // An ICU placeholder references the source message to be serialized
    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
  }
  /**
   * Convert a source message to a translated text string:
   * - text nodes are replaced with their translation,
   * - placeholders are replaced with their content,
   * - ICU nodes are converted to ICU expressions.
   */
  _convertToText(srcMsg) {
    const id = this._digest(srcMsg);
    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
    let nodes;
    this._contextStack.push({
      msg: this._srcMsg,
      mapper: this._mapper
    });
    this._srcMsg = srcMsg;
    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
      // When there is a translation use its nodes as the source
      // And create a mapper to convert serialized placeholder names to internal names
      nodes = this._i18nNodesByMsgId[id];
      this._mapper = name => mapper ? mapper.toInternalName(name) : name;
    } else {
      // When no translation has been found
      // - report an error / a warning / nothing,
      // - use the nodes from the original message
      // - placeholders are already internal and need no mapper
      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {
        const ctx = this._locale ? ` for locale "${this._locale}"` : '';
        this._addError(srcMsg.nodes[0], `Missing translation for message "${id}"${ctx}`);
      } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {
        const ctx = this._locale ? ` for locale "${this._locale}"` : '';
        this._console.warn(`Missing translation for message "${id}"${ctx}`);
      }
      nodes = srcMsg.nodes;
      this._mapper = name => name;
    }
    const text = nodes.map(node => node.visit(this)).join('');
    const context = this._contextStack.pop();
    this._srcMsg = context.msg;
    this._mapper = context.mapper;
    return text;
  }
  _addError(el, msg) {
    this._errors.push(new I18nError(el.sourceSpan, msg));
  }
}
class I18NHtmlParser {
  constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {
    this._htmlParser = _htmlParser;
    if (translations) {
      const serializer = createSerializer(translationsFormat);
      this._translationBundle = TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
    } else {
      this._translationBundle = new TranslationBundle({}, null, digest$1, undefined, missingTranslation, console);
    }
  }
  parse(source, url, options = {}) {
    const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
    const parseResult = this._htmlParser.parse(source, url, {
      interpolationConfig,
      ...options
    });
    if (parseResult.errors.length) {
      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
    }
    return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
  }
}
function createSerializer(format) {
  format = (format || 'xlf').toLowerCase();
  switch (format) {
    case 'xmb':
      return new Xmb();
    case 'xtb':
      return new Xtb();
    case 'xliff2':
    case 'xlf2':
      return new Xliff2();
    case 'xliff':
    case 'xlf':
    default:
      return new Xliff();
  }
}

/**
 * A container for message extracted from the templates.
 */
class MessageBundle {
  constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {
    this._htmlParser = _htmlParser;
    this._implicitTags = _implicitTags;
    this._implicitAttrs = _implicitAttrs;
    this._locale = _locale;
    this._messages = [];
  }
  updateFromTemplate(html, url, interpolationConfig) {
    const htmlParserResult = this._htmlParser.parse(html, url, {
      tokenizeExpansionForms: true,
      interpolationConfig
    });
    if (htmlParserResult.errors.length) {
      return htmlParserResult.errors;
    }
    const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
    if (i18nParserResult.errors.length) {
      return i18nParserResult.errors;
    }
    this._messages.push(...i18nParserResult.messages);
    return [];
  }
  // Return the message in the internal format
  // The public (serialized) format might be different, see the `write` method.
  getMessages() {
    return this._messages;
  }
  write(serializer, filterSources) {
    const messages = {};
    const mapperVisitor = new MapPlaceholderNames();
    // Deduplicate messages based on their ID
    this._messages.forEach(message => {
      const id = serializer.digest(message);
      if (!messages.hasOwnProperty(id)) {
        messages[id] = message;
      } else {
        messages[id].sources.push(...message.sources);
      }
    });
    // Transform placeholder names using the serializer mapping
    const msgList = Object.keys(messages).map(id => {
      const mapper = serializer.createNameMapper(messages[id]);
      const src = messages[id];
      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
      let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);
      transformedMessage.sources = src.sources;
      if (filterSources) {
        transformedMessage.sources.forEach(source => source.filePath = filterSources(source.filePath));
      }
      return transformedMessage;
    });
    return serializer.write(msgList, this._locale);
  }
}
// Transform an i18n AST by renaming the placeholder nodes with the given mapper
class MapPlaceholderNames extends CloneVisitor {
  convert(nodes, mapper) {
    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;
  }
  visitTagPlaceholder(ph, mapper) {
    const startName = mapper.toPublicName(ph.startName);
    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
    const children = ph.children.map(n => n.visit(this, mapper));
    return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);
  }
  visitPlaceholder(ph, mapper) {
    return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
  }
  visitIcuPlaceholder(ph, mapper) {
    return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
  }
}
var FactoryTarget;
(function (FactoryTarget) {
  FactoryTarget[FactoryTarget["Directive"] = 0] = "Directive";
  FactoryTarget[FactoryTarget["Component"] = 1] = "Component";
  FactoryTarget[FactoryTarget["Injectable"] = 2] = "Injectable";
  FactoryTarget[FactoryTarget["Pipe"] = 3] = "Pipe";
  FactoryTarget[FactoryTarget["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));

/**
 * Processes `Target`s with a given set of directives and performs a binding operation, which
 * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the
 * target.
 */
class R3TargetBinder {
  constructor(directiveMatcher) {
    this.directiveMatcher = directiveMatcher;
  }
  /**
   * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains
   * metadata about the types referenced in the template.
   */
  bind(target) {
    if (!target.template) {
      // TODO(alxhub): handle targets which contain things like HostBindings, etc.
      throw new Error('Binding without a template not yet supported');
    }
    // First, parse the template into a `Scope` structure. This operation captures the syntactic
    // scopes in the template and makes them available for later use.
    const scope = Scope.apply(target.template);
    // Use the `Scope` to extract the entities present at every level of the template.
    const templateEntities = extractTemplateEntities(scope);
    // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:
    //   - directives: Map of nodes (elements & ng-templates) to the directives on them.
    //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims
    //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.
    //   - references: Map of #references to their targets.
    const {
      directives,
      bindings,
      references
    } = DirectiveBinder.apply(target.template, this.directiveMatcher);
    // Finally, run the TemplateBinder to bind references, variables, and other entities within the
    // template. This extracts all the metadata that doesn't depend on directive matching.
    const {
      expressions,
      symbols,
      nestingLevel,
      usedPipes
    } = TemplateBinder.applyWithScope(target.template, scope);
    return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes);
  }
}
/**
 * Represents a binding scope within a template.
 *
 * Any variables, references, or other named entities declared within the template will
 * be captured and available by name in `namedEntities`. Additionally, child templates will
 * be analyzed and have their child `Scope`s available in `childScopes`.
 */
class Scope {
  constructor(parentScope, template) {
    this.parentScope = parentScope;
    this.template = template;
    /**
     * Named members of the `Scope`, such as `Reference`s or `Variable`s.
     */
    this.namedEntities = new Map();
    /**
     * Child `Scope`s for immediately nested `Template`s.
     */
    this.childScopes = new Map();
  }
  static newRootScope() {
    return new Scope(null, null);
  }
  /**
   * Process a template (either as a `Template` sub-template with variables, or a plain array of
   * template `Node`s) and construct its `Scope`.
   */
  static apply(template) {
    const scope = Scope.newRootScope();
    scope.ingest(template);
    return scope;
  }
  /**
   * Internal method to process the template and populate the `Scope`.
   */
  ingest(template) {
    if (template instanceof Template) {
      // Variables on an <ng-template> are defined in the inner scope.
      template.variables.forEach(node => this.visitVariable(node));
      // Process the nodes of the template.
      template.children.forEach(node => node.visit(this));
    } else {
      // No overarching `Template` instance, so process the nodes directly.
      template.forEach(node => node.visit(this));
    }
  }
  visitElement(element) {
    // `Element`s in the template may have `Reference`s which are captured in the scope.
    element.references.forEach(node => this.visitReference(node));
    // Recurse into the `Element`'s children.
    element.children.forEach(node => node.visit(this));
  }
  visitTemplate(template) {
    // References on a <ng-template> are defined in the outer scope, so capture them before
    // processing the template's child scope.
    template.references.forEach(node => this.visitReference(node));
    // Next, create an inner scope and process the template within it.
    const scope = new Scope(this, template);
    scope.ingest(template);
    this.childScopes.set(template, scope);
  }
  visitVariable(variable) {
    // Declare the variable if it's not already.
    this.maybeDeclare(variable);
  }
  visitReference(reference) {
    // Declare the variable if it's not already.
    this.maybeDeclare(reference);
  }
  // Unused visitors.
  visitContent(content) {}
  visitBoundAttribute(attr) {}
  visitBoundEvent(event) {}
  visitBoundText(text) {}
  visitText(text) {}
  visitTextAttribute(attr) {}
  visitIcu(icu) {}
  maybeDeclare(thing) {
    // Declare something with a name, as long as that name isn't taken.
    if (!this.namedEntities.has(thing.name)) {
      this.namedEntities.set(thing.name, thing);
    }
  }
  /**
   * Look up a variable within this `Scope`.
   *
   * This can recurse into a parent `Scope` if it's available.
   */
  lookup(name) {
    if (this.namedEntities.has(name)) {
      // Found in the local scope.
      return this.namedEntities.get(name);
    } else if (this.parentScope !== null) {
      // Not in the local scope, but there's a parent scope so check there.
      return this.parentScope.lookup(name);
    } else {
      // At the top level and it wasn't found.
      return null;
    }
  }
  /**
   * Get the child scope for a `Template`.
   *
   * This should always be defined.
   */
  getChildScope(template) {
    const res = this.childScopes.get(template);
    if (res === undefined) {
      throw new Error(`Assertion error: child scope for ${template} not found`);
    }
    return res;
  }
}
/**
 * Processes a template and matches directives on nodes (elements and templates).
 *
 * Usually used via the static `apply()` method.
 */
class DirectiveBinder {
  constructor(matcher, directives, bindings, references) {
    this.matcher = matcher;
    this.directives = directives;
    this.bindings = bindings;
    this.references = references;
  }
  /**
   * Process a template (list of `Node`s) and perform directive matching against each node.
   *
   * @param template the list of template `Node`s to match (recursively).
   * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
   * this template.
   * @returns three maps which contain information about directives in the template: the
   * `directives` map which lists directives matched on each node, the `bindings` map which
   * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
   * map which resolves #references (`Reference`s) within the template to the named directive or
   * template node.
   */
  static apply(template, selectorMatcher) {
    const directives = new Map();
    const bindings = new Map();
    const references = new Map();
    const matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);
    matcher.ingest(template);
    return {
      directives,
      bindings,
      references
    };
  }
  ingest(template) {
    template.forEach(node => node.visit(this));
  }
  visitElement(element) {
    this.visitElementOrTemplate(element.name, element);
  }
  visitTemplate(template) {
    this.visitElementOrTemplate('ng-template', template);
  }
  visitElementOrTemplate(elementName, node) {
    // First, determine the HTML shape of the node for the purpose of directive matching.
    // Do this by building up a `CssSelector` for the node.
    const cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node));
    // Next, use the `SelectorMatcher` to get the list of directives on the node.
    const directives = [];
    this.matcher.match(cssSelector, (_selector, results) => directives.push(...results));
    if (directives.length > 0) {
      this.directives.set(node, directives);
    }
    // Resolve any references that are created on this node.
    node.references.forEach(ref => {
      let dirTarget = null;
      // If the reference expression is empty, then it matches the "primary" directive on the node
      // (if there is one). Otherwise it matches the host node itself (either an element or
      // <ng-template> node).
      if (ref.value.trim() === '') {
        // This could be a reference to a component if there is one.
        dirTarget = directives.find(dir => dir.isComponent) || null;
      } else {
        // This should be a reference to a directive exported via exportAs.
        dirTarget = directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) || null;
        // Check if a matching directive was found.
        if (dirTarget === null) {
          // No matching directive was found - this reference points to an unknown target. Leave it
          // unmapped.
          return;
        }
      }
      if (dirTarget !== null) {
        // This reference points to a directive.
        this.references.set(ref, {
          directive: dirTarget,
          node
        });
      } else {
        // This reference points to the node itself.
        this.references.set(ref, node);
      }
    });
    const setAttributeBinding = (attribute, ioType) => {
      const dir = directives.find(dir => dir[ioType].hasBindingPropertyName(attribute.name));
      const binding = dir !== undefined ? dir : node;
      this.bindings.set(attribute, binding);
    };
    // Node inputs (bound attributes) and text attributes can be bound to an
    // input on a directive.
    node.inputs.forEach(input => setAttributeBinding(input, 'inputs'));
    node.attributes.forEach(attr => setAttributeBinding(attr, 'inputs'));
    if (node instanceof Template) {
      node.templateAttrs.forEach(attr => setAttributeBinding(attr, 'inputs'));
    }
    // Node outputs (bound events) can be bound to an output on a directive.
    node.outputs.forEach(output => setAttributeBinding(output, 'outputs'));
    // Recurse into the node's children.
    node.children.forEach(child => child.visit(this));
  }
  // Unused visitors.
  visitContent(content) {}
  visitVariable(variable) {}
  visitReference(reference) {}
  visitTextAttribute(attribute) {}
  visitBoundAttribute(attribute) {}
  visitBoundEvent(attribute) {}
  visitBoundAttributeOrEvent(node) {}
  visitText(text) {}
  visitBoundText(text) {}
  visitIcu(icu) {}
}
/**
 * Processes a template and extract metadata about expressions and symbols within.
 *
 * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched
 * within the template in order to operate.
 *
 * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided
 * by overridden methods from that visitor.
 */
class TemplateBinder extends RecursiveAstVisitor {
  constructor(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {
    super();
    this.bindings = bindings;
    this.symbols = symbols;
    this.usedPipes = usedPipes;
    this.nestingLevel = nestingLevel;
    this.scope = scope;
    this.template = template;
    this.level = level;
    // Save a bit of processing time by constructing this closure in advance.
    this.visitNode = node => node.visit(this);
  }
  // This method is defined to reconcile the type of TemplateBinder since both
  // RecursiveAstVisitor and Visitor define the visit() method in their
  // interfaces.
  visit(node, context) {
    if (node instanceof AST) {
      node.visit(this, context);
    } else {
      node.visit(this);
    }
  }
  /**
   * Process a template and extract metadata about expressions and symbols within.
   *
   * @param template the nodes of the template to process
   * @param scope the `Scope` of the template being processed.
   * @returns three maps which contain metadata about the template: `expressions` which interprets
   * special `AST` nodes in expressions as pointing to references or variables declared within the
   * template, `symbols` which maps those variables and references to the nested `Template` which
   * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
   * nesting level (how many levels deep within the template structure the `Template` is), starting
   * at 1.
   */
  static applyWithScope(template, scope) {
    const expressions = new Map();
    const symbols = new Map();
    const nestingLevel = new Map();
    const usedPipes = new Set();
    // The top-level template has nesting level 0.
    const binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);
    binder.ingest(template);
    return {
      expressions,
      symbols,
      nestingLevel,
      usedPipes
    };
  }
  ingest(template) {
    if (template instanceof Template) {
      // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,
      // and references were all processed in the scope of the containing template.
      template.variables.forEach(this.visitNode);
      template.children.forEach(this.visitNode);
      // Set the nesting level.
      this.nestingLevel.set(template, this.level);
    } else {
      // Visit each node from the top-level template.
      template.forEach(this.visitNode);
    }
  }
  visitElement(element) {
    // Visit the inputs, outputs, and children of the element.
    element.inputs.forEach(this.visitNode);
    element.outputs.forEach(this.visitNode);
    element.children.forEach(this.visitNode);
  }
  visitTemplate(template) {
    // First, visit inputs, outputs and template attributes of the template node.
    template.inputs.forEach(this.visitNode);
    template.outputs.forEach(this.visitNode);
    template.templateAttrs.forEach(this.visitNode);
    // References are also evaluated in the outer context.
    template.references.forEach(this.visitNode);
    // Next, recurse into the template using its scope, and bumping the nesting level up by one.
    const childScope = this.scope.getChildScope(template);
    const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);
    binder.ingest(template);
  }
  visitVariable(variable) {
    // Register the `Variable` as a symbol in the current `Template`.
    if (this.template !== null) {
      this.symbols.set(variable, this.template);
    }
  }
  visitReference(reference) {
    // Register the `Reference` as a symbol in the current `Template`.
    if (this.template !== null) {
      this.symbols.set(reference, this.template);
    }
  }
  // Unused template visitors
  visitText(text) {}
  visitContent(content) {}
  visitTextAttribute(attribute) {}
  visitIcu(icu) {
    Object.keys(icu.vars).forEach(key => icu.vars[key].visit(this));
    Object.keys(icu.placeholders).forEach(key => icu.placeholders[key].visit(this));
  }
  // The remaining visitors are concerned with processing AST expressions within template bindings
  visitBoundAttribute(attribute) {
    attribute.value.visit(this);
  }
  visitBoundEvent(event) {
    event.handler.visit(this);
  }
  visitBoundText(text) {
    text.value.visit(this);
  }
  visitPipe(ast, context) {
    this.usedPipes.add(ast.name);
    return super.visitPipe(ast, context);
  }
  // These five types of AST expressions can refer to expression roots, which could be variables
  // or references in the current scope.
  visitPropertyRead(ast, context) {
    this.maybeMap(context, ast, ast.name);
    return super.visitPropertyRead(ast, context);
  }
  visitSafePropertyRead(ast, context) {
    this.maybeMap(context, ast, ast.name);
    return super.visitSafePropertyRead(ast, context);
  }
  visitPropertyWrite(ast, context) {
    this.maybeMap(context, ast, ast.name);
    return super.visitPropertyWrite(ast, context);
  }
  maybeMap(scope, ast, name) {
    // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an
    // `AST` expression that maps to a `Variable` or `Reference`.
    if (!(ast.receiver instanceof ImplicitReceiver)) {
      return;
    }
    // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is
    // probably a property on the top-level component context.
    let target = this.scope.lookup(name);
    if (target !== null) {
      this.bindings.set(ast, target);
    }
  }
}
/**
 * Metadata container for a `Target` that allows queries for specific bits of metadata.
 *
 * See `BoundTarget` for documentation on the individual methods.
 */
class R3BoundTarget {
  constructor(target, directives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes) {
    this.target = target;
    this.directives = directives;
    this.bindings = bindings;
    this.references = references;
    this.exprTargets = exprTargets;
    this.symbols = symbols;
    this.nestingLevel = nestingLevel;
    this.templateEntities = templateEntities;
    this.usedPipes = usedPipes;
  }
  getEntitiesInTemplateScope(template) {
    return this.templateEntities.get(template) ?? new Set();
  }
  getDirectivesOfNode(node) {
    return this.directives.get(node) || null;
  }
  getReferenceTarget(ref) {
    return this.references.get(ref) || null;
  }
  getConsumerOfBinding(binding) {
    return this.bindings.get(binding) || null;
  }
  getExpressionTarget(expr) {
    return this.exprTargets.get(expr) || null;
  }
  getTemplateOfSymbol(symbol) {
    return this.symbols.get(symbol) || null;
  }
  getNestingLevel(template) {
    return this.nestingLevel.get(template) || 0;
  }
  getUsedDirectives() {
    const set = new Set();
    this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));
    return Array.from(set.values());
  }
  getUsedPipes() {
    return Array.from(this.usedPipes);
  }
}
function extractTemplateEntities(rootScope) {
  const entityMap = new Map();
  function extractScopeEntities(scope) {
    if (entityMap.has(scope.template)) {
      return entityMap.get(scope.template);
    }
    const currentEntities = scope.namedEntities;
    let templateEntities;
    if (scope.parentScope !== null) {
      templateEntities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);
    } else {
      templateEntities = new Map(currentEntities);
    }
    entityMap.set(scope.template, templateEntities);
    return templateEntities;
  }
  const scopesToProcess = [rootScope];
  while (scopesToProcess.length > 0) {
    const scope = scopesToProcess.pop();
    for (const childScope of scope.childScopes.values()) {
      scopesToProcess.push(childScope);
    }
    extractScopeEntities(scope);
  }
  const templateEntities = new Map();
  for (const [template, entities] of entityMap) {
    templateEntities.set(template, new Set(entities.values()));
  }
  return templateEntities;
}
function compileClassMetadata(metadata) {
  // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its
  // metadata.
  const fnCall = importExpr(Identifiers.setClassMetadata).callFn([metadata.type, metadata.decorators, metadata.ctorParameters ?? literal(null), metadata.propDecorators ?? literal(null)]);
  const iife = fn([], [devOnlyGuardedExpression(fnCall).toStmt()]);
  return iife.callFn([]);
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$6 = '12.0.0';
function compileDeclareClassMetadata(metadata) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$6));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  definitionMap.set('type', metadata.type);
  definitionMap.set('decorators', metadata.decorators);
  definitionMap.set('ctorParameters', metadata.ctorParameters);
  definitionMap.set('propDecorators', metadata.propDecorators);
  return importExpr(Identifiers.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);
}

/**
 * Creates an array literal expression from the given array, mapping all values to an expression
 * using the provided mapping function. If the array is empty or null, then null is returned.
 *
 * @param values The array to transfer into literal array expression.
 * @param mapper The logic to use for creating an expression for the array's values.
 * @returns An array literal expression representing `values`, or null if `values` is empty or
 * is itself null.
 */
function toOptionalLiteralArray(values, mapper) {
  if (values === null || values.length === 0) {
    return null;
  }
  return literalArr(values.map(value => mapper(value)));
}
/**
 * Creates an object literal expression from the given object, mapping all values to an expression
 * using the provided mapping function. If the object has no keys, then null is returned.
 *
 * @param object The object to transfer into an object literal expression.
 * @param mapper The logic to use for creating an expression for the object's values.
 * @returns An object literal expression representing `object`, or null if `object` does not have
 * any keys.
 */
function toOptionalLiteralMap(object, mapper) {
  const entries = Object.keys(object).map(key => {
    const value = object[key];
    return {
      key,
      value: mapper(value),
      quoted: true
    };
  });
  if (entries.length > 0) {
    return literalMap(entries);
  } else {
    return null;
  }
}
function compileDependencies(deps) {
  if (deps === 'invalid') {
    // The `deps` can be set to the string "invalid"  by the `unwrapConstructorDependencies()`
    // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.
    return literal('invalid');
  } else if (deps === null) {
    return literal(null);
  } else {
    return literalArr(deps.map(compileDependency));
  }
}
function compileDependency(dep) {
  const depMeta = new DefinitionMap();
  depMeta.set('token', dep.token);
  if (dep.attributeNameType !== null) {
    depMeta.set('attribute', literal(true));
  }
  if (dep.host) {
    depMeta.set('host', literal(true));
  }
  if (dep.optional) {
    depMeta.set('optional', literal(true));
  }
  if (dep.self) {
    depMeta.set('self', literal(true));
  }
  if (dep.skipSelf) {
    depMeta.set('skipSelf', literal(true));
  }
  return depMeta.toLiteralMap();
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$5 = '14.0.0';
/**
 * Compile a directive declaration defined by the `R3DirectiveMetadata`.
 */
function compileDeclareDirectiveFromMetadata(meta) {
  const definitionMap = createDirectiveDefinitionMap(meta);
  const expression = importExpr(Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);
  const type = createDirectiveType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing
 * this logic for components, as they extend the directive metadata.
 */
function createDirectiveDefinitionMap(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));
  definitionMap.set('version', literal('15.2.10'));
  // e.g. `type: MyDirective`
  definitionMap.set('type', meta.internalType);
  if (meta.isStandalone) {
    definitionMap.set('isStandalone', literal(meta.isStandalone));
  }
  // e.g. `selector: 'some-dir'`
  if (meta.selector !== null) {
    definitionMap.set('selector', literal(meta.selector));
  }
  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));
  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));
  definitionMap.set('host', compileHostMetadata(meta.host));
  definitionMap.set('providers', meta.providers);
  if (meta.queries.length > 0) {
    definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));
  }
  if (meta.viewQueries.length > 0) {
    definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));
  }
  if (meta.exportAs !== null) {
    definitionMap.set('exportAs', asLiteral(meta.exportAs));
  }
  if (meta.usesInheritance) {
    definitionMap.set('usesInheritance', literal(true));
  }
  if (meta.lifecycle.usesOnChanges) {
    definitionMap.set('usesOnChanges', literal(true));
  }
  if (meta.hostDirectives?.length) {
    definitionMap.set('hostDirectives', createHostDirectives(meta.hostDirectives));
  }
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  return definitionMap;
}
/**
 * Compiles the metadata of a single query into its partial declaration form as declared
 * by `R3DeclareQueryMetadata`.
 */
function compileQuery(query) {
  const meta = new DefinitionMap();
  meta.set('propertyName', literal(query.propertyName));
  if (query.first) {
    meta.set('first', literal(true));
  }
  meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : convertFromMaybeForwardRefExpression(query.predicate));
  if (!query.emitDistinctChangesOnly) {
    // `emitDistinctChangesOnly` is special because we expect it to be `true`.
    // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.
    meta.set('emitDistinctChangesOnly', literal(false));
  } else {
    // The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.
  }
  if (query.descendants) {
    meta.set('descendants', literal(true));
  }
  meta.set('read', query.read);
  if (query.static) {
    meta.set('static', literal(true));
  }
  return meta.toLiteralMap();
}
/**
 * Compiles the host metadata into its partial declaration form as declared
 * in `R3DeclareDirectiveMetadata['host']`
 */
function compileHostMetadata(meta) {
  const hostMetadata = new DefinitionMap();
  hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));
  hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));
  hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));
  if (meta.specialAttributes.styleAttr) {
    hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));
  }
  if (meta.specialAttributes.classAttr) {
    hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));
  }
  if (hostMetadata.values.length > 0) {
    return hostMetadata.toLiteralMap();
  } else {
    return null;
  }
}
function createHostDirectives(hostDirectives) {
  const expressions = hostDirectives.map(current => {
    const keys = [{
      key: 'directive',
      value: current.isForwardReference ? generateForwardRef(current.directive.type) : current.directive.type,
      quoted: false
    }];
    const inputsLiteral = current.inputs ? createHostDirectivesMappingArray(current.inputs) : null;
    const outputsLiteral = current.outputs ? createHostDirectivesMappingArray(current.outputs) : null;
    if (inputsLiteral) {
      keys.push({
        key: 'inputs',
        value: inputsLiteral,
        quoted: false
      });
    }
    if (outputsLiteral) {
      keys.push({
        key: 'outputs',
        value: outputsLiteral,
        quoted: false
      });
    }
    return literalMap(keys);
  });
  // If there's a forward reference, we generate a `function() { return [{directive: HostDir}] }`,
  // otherwise we can save some bytes by using a plain array, e.g. `[{directive: HostDir}]`.
  return literalArr(expressions);
}

/**
 * Compile a component declaration defined by the `R3ComponentMetadata`.
 */
function compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {
  const definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);
  const expression = importExpr(Identifiers.declareComponent).callFn([definitionMap.toLiteralMap()]);
  const type = createComponentType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for a component into a `DefinitionMap`.
 */
function createComponentDefinitionMap(meta, template, templateInfo) {
  const definitionMap = createDirectiveDefinitionMap(meta);
  definitionMap.set('template', getTemplateExpression(template, templateInfo));
  if (templateInfo.isInline) {
    definitionMap.set('isInline', literal(true));
  }
  definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));
  definitionMap.set('dependencies', compileUsedDependenciesMetadata(meta));
  definitionMap.set('viewProviders', meta.viewProviders);
  definitionMap.set('animations', meta.animations);
  if (meta.changeDetection !== undefined) {
    definitionMap.set('changeDetection', importExpr(Identifiers.ChangeDetectionStrategy).prop(ChangeDetectionStrategy[meta.changeDetection]));
  }
  if (meta.encapsulation !== ViewEncapsulation.Emulated) {
    definitionMap.set('encapsulation', importExpr(Identifiers.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));
  }
  if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {
    definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));
  }
  if (template.preserveWhitespaces === true) {
    definitionMap.set('preserveWhitespaces', literal(true));
  }
  return definitionMap;
}
function getTemplateExpression(template, templateInfo) {
  // If the template has been defined using a direct literal, we use that expression directly
  // without any modifications. This is ensures proper source mapping from the partially
  // compiled code to the source file declaring the template. Note that this does not capture
  // template literals referenced indirectly through an identifier.
  if (templateInfo.inlineTemplateLiteralExpression !== null) {
    return templateInfo.inlineTemplateLiteralExpression;
  }
  // If the template is defined inline but not through a literal, the template has been resolved
  // through static interpretation. We create a literal but cannot provide any source span. Note
  // that we cannot use the expression defining the template because the linker expects the template
  // to be defined as a literal in the declaration.
  if (templateInfo.isInline) {
    return literal(templateInfo.content, null, null);
  }
  // The template is external so we must synthesize an expression node with
  // the appropriate source-span.
  const contents = templateInfo.content;
  const file = new ParseSourceFile(contents, templateInfo.sourceUrl);
  const start = new ParseLocation(file, 0, 0, 0);
  const end = computeEndLocation(file, contents);
  const span = new ParseSourceSpan(start, end);
  return literal(contents, null, span);
}
function computeEndLocation(file, contents) {
  const length = contents.length;
  let lineStart = 0;
  let lastLineStart = 0;
  let line = 0;
  do {
    lineStart = contents.indexOf('\n', lastLineStart);
    if (lineStart !== -1) {
      lastLineStart = lineStart + 1;
      line++;
    }
  } while (lineStart !== -1);
  return new ParseLocation(file, length, line, length - lastLineStart);
}
function compileUsedDependenciesMetadata(meta) {
  const wrapType = meta.declarationListEmitMode !== 0 /* DeclarationListEmitMode.Direct */ ? generateForwardRef : expr => expr;
  return toOptionalLiteralArray(meta.declarations, decl => {
    switch (decl.kind) {
      case R3TemplateDependencyKind.Directive:
        const dirMeta = new DefinitionMap();
        dirMeta.set('kind', literal(decl.isComponent ? 'component' : 'directive'));
        dirMeta.set('type', wrapType(decl.type));
        dirMeta.set('selector', literal(decl.selector));
        dirMeta.set('inputs', toOptionalLiteralArray(decl.inputs, literal));
        dirMeta.set('outputs', toOptionalLiteralArray(decl.outputs, literal));
        dirMeta.set('exportAs', toOptionalLiteralArray(decl.exportAs, literal));
        return dirMeta.toLiteralMap();
      case R3TemplateDependencyKind.Pipe:
        const pipeMeta = new DefinitionMap();
        pipeMeta.set('kind', literal('pipe'));
        pipeMeta.set('type', wrapType(decl.type));
        pipeMeta.set('name', literal(decl.name));
        return pipeMeta.toLiteralMap();
      case R3TemplateDependencyKind.NgModule:
        const ngModuleMeta = new DefinitionMap();
        ngModuleMeta.set('kind', literal('ngmodule'));
        ngModuleMeta.set('type', wrapType(decl.type));
        return ngModuleMeta.toLiteralMap();
    }
  });
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';
function compileDeclareFactoryFunction(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  definitionMap.set('type', meta.internalType);
  definitionMap.set('deps', compileDependencies(meta.deps));
  definitionMap.set('target', importExpr(Identifiers.FactoryTarget).prop(FactoryTarget$1[meta.target]));
  return {
    expression: importExpr(Identifiers.declareFactory).callFn([definitionMap.toLiteralMap()]),
    statements: [],
    type: createFactoryType(meta)
  };
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';
/**
 * Compile a Injectable declaration defined by the `R3InjectableMetadata`.
 */
function compileDeclareInjectableFromMetadata(meta) {
  const definitionMap = createInjectableDefinitionMap(meta);
  const expression = importExpr(Identifiers.declareInjectable).callFn([definitionMap.toLiteralMap()]);
  const type = createInjectableType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for a Injectable into a `DefinitionMap`.
 */
function createInjectableDefinitionMap(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  definitionMap.set('type', meta.internalType);
  // Only generate providedIn property if it has a non-null value
  if (meta.providedIn !== undefined) {
    const providedIn = convertFromMaybeForwardRefExpression(meta.providedIn);
    if (providedIn.value !== null) {
      definitionMap.set('providedIn', providedIn);
    }
  }
  if (meta.useClass !== undefined) {
    definitionMap.set('useClass', convertFromMaybeForwardRefExpression(meta.useClass));
  }
  if (meta.useExisting !== undefined) {
    definitionMap.set('useExisting', convertFromMaybeForwardRefExpression(meta.useExisting));
  }
  if (meta.useValue !== undefined) {
    definitionMap.set('useValue', convertFromMaybeForwardRefExpression(meta.useValue));
  }
  // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call
  // so the types will not be eagerly evaluated. Therefore we do not need to process this expression
  // with `convertFromProviderExpression()`.
  if (meta.useFactory !== undefined) {
    definitionMap.set('useFactory', meta.useFactory);
  }
  if (meta.deps !== undefined) {
    definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));
  }
  return definitionMap;
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';
function compileDeclareInjectorFromMetadata(meta) {
  const definitionMap = createInjectorDefinitionMap(meta);
  const expression = importExpr(Identifiers.declareInjector).callFn([definitionMap.toLiteralMap()]);
  const type = createInjectorType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for an Injector into a `DefinitionMap`.
 */
function createInjectorDefinitionMap(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  definitionMap.set('type', meta.internalType);
  definitionMap.set('providers', meta.providers);
  if (meta.imports.length > 0) {
    definitionMap.set('imports', literalArr(meta.imports));
  }
  return definitionMap;
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION$1 = '14.0.0';
function compileDeclareNgModuleFromMetadata(meta) {
  const definitionMap = createNgModuleDefinitionMap(meta);
  const expression = importExpr(Identifiers.declareNgModule).callFn([definitionMap.toLiteralMap()]);
  const type = createNgModuleType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for an NgModule into a `DefinitionMap`.
 */
function createNgModuleDefinitionMap(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  definitionMap.set('type', meta.internalType);
  // We only generate the keys in the metadata if the arrays contain values.
  // We must wrap the arrays inside a function if any of the values are a forward reference to a
  // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.
  // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.
  if (meta.bootstrap.length > 0) {
    definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));
  }
  if (meta.declarations.length > 0) {
    definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));
  }
  if (meta.imports.length > 0) {
    definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));
  }
  if (meta.exports.length > 0) {
    definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));
  }
  if (meta.schemas !== null && meta.schemas.length > 0) {
    definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));
  }
  if (meta.id !== null) {
    definitionMap.set('id', meta.id);
  }
  return definitionMap;
}

/**
 * Every time we make a breaking change to the declaration interface or partial-linker behavior, we
 * must update this constant to prevent old partial-linkers from incorrectly processing the
 * declaration.
 *
 * Do not include any prerelease in these versions as they are ignored.
 */
const MINIMUM_PARTIAL_LINKER_VERSION = '14.0.0';
/**
 * Compile a Pipe declaration defined by the `R3PipeMetadata`.
 */
function compileDeclarePipeFromMetadata(meta) {
  const definitionMap = createPipeDefinitionMap(meta);
  const expression = importExpr(Identifiers.declarePipe).callFn([definitionMap.toLiteralMap()]);
  const type = createPipeType(meta);
  return {
    expression,
    type,
    statements: []
  };
}
/**
 * Gathers the declaration fields for a Pipe into a `DefinitionMap`.
 */
function createPipeDefinitionMap(meta) {
  const definitionMap = new DefinitionMap();
  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));
  definitionMap.set('version', literal('15.2.10'));
  definitionMap.set('ngImport', importExpr(Identifiers.core));
  // e.g. `type: MyPipe`
  definitionMap.set('type', meta.internalType);
  if (meta.isStandalone) {
    definitionMap.set('isStandalone', literal(meta.isStandalone));
  }
  // e.g. `name: "myPipe"`
  definitionMap.set('name', literal(meta.pipeName));
  if (meta.pure === false) {
    // e.g. `pure: false`
    definitionMap.set('pure', literal(meta.pure));
  }
  return definitionMap;
}

//////////////////////////////////////
// This file only reexports content of the `src` folder. Keep it that way.
// This function call has a global side effects and publishes the compiler into global namespace for
// the late binding of the Compiler to the @angular/core for jit compilation.
publishFacade(_global);

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */
// This file only reexports content of the `src` folder. Keep it that way.

// This file is not used to build this module. It is only used during editing

// This file is not used to build this module. It is only used during editing



/***/ }),

/***/ 97190:
/*!****************************************************************************!*\
  !*** ./node_modules/@angular/platform-server/fesm2020/platform-server.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BEFORE_APP_SERIALIZED: function() { return /* binding */ BEFORE_APP_SERIALIZED; },
/* harmony export */   INITIAL_CONFIG: function() { return /* binding */ INITIAL_CONFIG; },
/* harmony export */   PlatformState: function() { return /* binding */ PlatformState; },
/* harmony export */   ServerModule: function() { return /* binding */ ServerModule; },
/* harmony export */   ServerTransferStateModule: function() { return /* binding */ ServerTransferStateModule; },
/* harmony export */   VERSION: function() { return /* binding */ VERSION; },
/* harmony export */   platformDynamicServer: function() { return /* binding */ platformDynamicServer; },
/* harmony export */   platformServer: function() { return /* binding */ platformServer; },
/* harmony export */   renderApplication: function() { return /* binding */ renderApplication; },
/* harmony export */   renderModule: function() { return /* binding */ renderModule; },
/* harmony export */   renderModuleFactory: function() { return /* binding */ renderModuleFactory; },
/* harmony export */   "ɵINTERNAL_SERVER_PLATFORM_PROVIDERS": function() { return /* binding */ INTERNAL_SERVER_PLATFORM_PROVIDERS; },
/* harmony export */   "ɵSERVER_CONTEXT": function() { return /* binding */ SERVER_CONTEXT; },
/* harmony export */   "ɵSERVER_RENDER_PROVIDERS": function() { return /* binding */ SERVER_RENDER_PROVIDERS; },
/* harmony export */   "ɵServerRendererFactory2": function() { return /* binding */ ServerRendererFactory2; },
/* harmony export */   "ɵsetDomTypes": function() { return /* binding */ setDomTypes; }
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ 15962);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 85216);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ 95989);
/* harmony import */ var domino__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! domino */ 44157);
/* harmony import */ var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/animations/browser */ 43882);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ 40104);
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ 77225);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/platform-browser/animations */ 32322);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 44866);
/* harmony import */ var xhr2__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! xhr2 */ 87421);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! url */ 87016);
/* harmony import */ var _angular_compiler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/compiler */ 75522);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 32778);
/**
 * @license Angular v15.2.10
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */
















function setDomTypes() {
  // Make all Domino types available in the global env.
  Object.assign(global, domino__WEBPACK_IMPORTED_MODULE_3__.impl);
  global['KeyboardEvent'] = domino__WEBPACK_IMPORTED_MODULE_3__.impl.Event;
}
/**
 * Parses a document string to a Document object.
 */
function parseDocument(html, url = '/') {
  let window = domino__WEBPACK_IMPORTED_MODULE_3__.createWindow(html, url);
  let doc = window.document;
  return doc;
}
/**
 * Serializes a document to string.
 */
function serializeDocument(doc) {
  return doc.serialize();
}
/**
 * DOM Adapter for the server platform based on https://github.com/fgnass/domino.
 */
class DominoAdapter extends _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵBrowserDomAdapter"] {
  constructor() {
    super(...arguments);
    this.supportsDOMEvents = false;
  }
  static makeCurrent() {
    setDomTypes();
    (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new DominoAdapter());
  }
  createHtmlDocument() {
    return parseDocument('<html><head><title>fakeTitle</title></head><body></body></html>');
  }
  getDefaultDocument() {
    if (!DominoAdapter.defaultDoc) {
      DominoAdapter.defaultDoc = domino__WEBPACK_IMPORTED_MODULE_3__.createDocument();
    }
    return DominoAdapter.defaultDoc;
  }
  isElementNode(node) {
    return node ? node.nodeType === DominoAdapter.defaultDoc.ELEMENT_NODE : false;
  }
  isShadowRoot(node) {
    return node.shadowRoot == node;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  getGlobalEventTarget(doc, target) {
    if (target === 'window') {
      return doc.defaultView;
    }
    if (target === 'document') {
      return doc;
    }
    if (target === 'body') {
      return doc.body;
    }
    return null;
  }
  getBaseHref(doc) {
    // TODO(alxhub): Need relative path logic from BrowserDomAdapter here?
    return doc.documentElement.querySelector('base')?.getAttribute('href') || '';
  }
  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
    // Dispatch the event to the window also.
    const doc = el.ownerDocument || el;
    const win = doc.defaultView;
    if (win) {
      win.dispatchEvent(evt);
    }
  }
  getUserAgent() {
    return 'Fake user agent';
  }
  getCookie(name) {
    throw new Error('getCookie has not been implemented');
  }
}

/**
 * Representation of the current platform state.
 *
 * @publicApi
 */
class PlatformState {
  constructor(_doc) {
    this._doc = _doc;
  }
  /**
   * Renders the current state of the platform to string.
   */
  renderToString() {
    return serializeDocument(this._doc);
  }
  /**
   * Returns the current DOM state.
   */
  getDocument() {
    return this._doc;
  }
}
PlatformState.ɵfac = function PlatformState_Factory(t) {
  return new (t || PlatformState)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
};
PlatformState.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: PlatformState,
  factory: PlatformState.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](PlatformState, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }]
    }];
  }, null);
})();

/**
 * The DI token for setting the initial config for the platform.
 *
 * @publicApi
 */
const INITIAL_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('Server.INITIAL_CONFIG');
/**
 * A function that will be executed when calling `renderApplication`, `renderModuleFactory` or
 * `renderModule` just before current platform state is rendered to string.
 *
 * @publicApi
 */
const BEFORE_APP_SERIALIZED = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('Server.RENDER_MODULE_HOOK');

// @see https://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#URI-syntax
const isAbsoluteUrl = /^[a-zA-Z\-\+.]+:\/\//;
class ServerXhr {
  build() {
    return new xhr2__WEBPACK_IMPORTED_MODULE_9__.XMLHttpRequest();
  }
}
ServerXhr.ɵfac = function ServerXhr_Factory(t) {
  return new (t || ServerXhr)();
};
ServerXhr.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ServerXhr,
  factory: ServerXhr.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerXhr, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], null, null);
})();
class ZoneMacroTaskWrapper {
  wrap(request) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable(observer => {
      let task = null;
      let scheduled = false;
      let sub = null;
      let savedResult = null;
      let savedError = null;
      const scheduleTask = _task => {
        task = _task;
        scheduled = true;
        const delegate = this.delegate(request);
        sub = delegate.subscribe(res => savedResult = res, err => {
          if (!scheduled) {
            throw new Error('An http observable was completed twice. This shouldn\'t happen, please file a bug.');
          }
          savedError = err;
          scheduled = false;
          task.invoke();
        }, () => {
          if (!scheduled) {
            throw new Error('An http observable was completed twice. This shouldn\'t happen, please file a bug.');
          }
          scheduled = false;
          task.invoke();
        });
      };
      const cancelTask = _task => {
        if (!scheduled) {
          return;
        }
        scheduled = false;
        if (sub) {
          sub.unsubscribe();
          sub = null;
        }
      };
      const onComplete = () => {
        if (savedError !== null) {
          observer.error(savedError);
        } else {
          observer.next(savedResult);
          observer.complete();
        }
      };
      // MockBackend for Http is synchronous, which means that if scheduleTask is by
      // scheduleMacroTask, the request will hit MockBackend and the response will be
      // sent, causing task.invoke() to be called.
      const _task = Zone.current.scheduleMacroTask('ZoneMacroTaskWrapper.subscribe', onComplete, {}, () => null, cancelTask);
      scheduleTask(_task);
      return () => {
        if (scheduled && task) {
          task.zone.cancelTask(task);
          scheduled = false;
        }
        if (sub) {
          sub.unsubscribe();
          sub = null;
        }
      };
    });
  }
}
class ZoneClientBackend extends ZoneMacroTaskWrapper {
  constructor(backend, platformLocation, config) {
    super();
    this.backend = backend;
    this.platformLocation = platformLocation;
    this.config = config;
  }
  handle(request) {
    const {
      href,
      protocol,
      hostname,
      port
    } = this.platformLocation;
    if (this.config.useAbsoluteUrl && !isAbsoluteUrl.test(request.url) && isAbsoluteUrl.test(href)) {
      const baseHref = this.platformLocation.getBaseHrefFromDOM() || href;
      const urlPrefix = `${protocol}//${hostname}` + (port ? `:${port}` : '');
      const baseUrl = new URL(baseHref, urlPrefix);
      const url = new URL(request.url, baseUrl);
      return this.wrap(request.clone({
        url: url.toString()
      }));
    }
    return this.wrap(request);
  }
  delegate(request) {
    return this.backend.handle(request);
  }
}
function zoneWrappedInterceptorHandler(platformLocation, config) {
  return new ZoneClientBackend(new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["ɵHttpInterceptorHandler"]((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpBackend), (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.EnvironmentInjector)), platformLocation, config);
}
const SERVER_HTTP_PROVIDERS = [{
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.XhrFactory,
  useClass: ServerXhr
}, {
  provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpHandler,
  useFactory: zoneWrappedInterceptorHandler,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.PlatformLocation, INITIAL_CONFIG]
}];
function parseUrl(urlStr) {
  const parsedUrl = url__WEBPACK_IMPORTED_MODULE_10__.parse(urlStr);
  return {
    hostname: parsedUrl.hostname || '',
    protocol: parsedUrl.protocol || '',
    port: parsedUrl.port || '',
    pathname: parsedUrl.pathname || '',
    search: parsedUrl.search || '',
    hash: parsedUrl.hash || ''
  };
}
/**
 * Server-side implementation of URL state. Implements `pathname`, `search`, and `hash`
 * but not the state stack.
 */
class ServerPlatformLocation {
  constructor(_doc, _config) {
    this._doc = _doc;
    this.href = '/';
    this.hostname = '/';
    this.protocol = '/';
    this.port = '/';
    this.pathname = '/';
    this.search = '';
    this.hash = '';
    this._hashUpdate = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();
    const config = _config;
    if (!config) {
      return;
    }
    if (config.url) {
      const url = parseUrl(config.url);
      this.protocol = url.protocol;
      this.hostname = url.hostname;
      this.port = url.port;
      this.pathname = url.pathname;
      this.search = url.search;
      this.hash = url.hash;
      this.href = _doc.location.href;
    }
    if (config.useAbsoluteUrl) {
      if (!config.baseUrl) {
        throw new Error(`"PlatformConfig.baseUrl" must be set if "useAbsoluteUrl" is true`);
      }
      const url = parseUrl(config.baseUrl);
      this.protocol = url.protocol;
      this.hostname = url.hostname;
      this.port = url.port;
    }
  }
  getBaseHrefFromDOM() {
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getBaseHref(this._doc);
  }
  onPopState(fn) {
    // No-op: a state stack is not implemented, so
    // no events will ever come.
    return () => {};
  }
  onHashChange(fn) {
    const subscription = this._hashUpdate.subscribe(fn);
    return () => subscription.unsubscribe();
  }
  get url() {
    return `${this.pathname}${this.search}${this.hash}`;
  }
  setHash(value, oldUrl) {
    if (this.hash === value) {
      // Don't fire events if the hash has not changed.
      return;
    }
    this.hash = value;
    const newUrl = this.url;
    scheduleMicroTask(() => this._hashUpdate.next({
      type: 'hashchange',
      state: null,
      oldUrl,
      newUrl
    }));
  }
  replaceState(state, title, newUrl) {
    const oldUrl = this.url;
    const parsedUrl = parseUrl(newUrl);
    this.pathname = parsedUrl.pathname;
    this.search = parsedUrl.search;
    this.setHash(parsedUrl.hash, oldUrl);
  }
  pushState(state, title, newUrl) {
    this.replaceState(state, title, newUrl);
  }
  forward() {
    throw new Error('Not implemented');
  }
  back() {
    throw new Error('Not implemented');
  }
  // History API isn't available on server, therefore return undefined
  getState() {
    return undefined;
  }
}
ServerPlatformLocation.ɵfac = function ServerPlatformLocation_Factory(t) {
  return new (t || ServerPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](INITIAL_CONFIG, 8));
};
ServerPlatformLocation.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ServerPlatformLocation,
  factory: ServerPlatformLocation.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerPlatformLocation, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [INITIAL_CONFIG]
      }]
    }];
  }, null);
})();
function scheduleMicroTask(fn) {
  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
class ServerEventManagerPlugin /* extends EventManagerPlugin which is private */ {
  constructor(doc) {
    this.doc = doc;
  }
  // Handle all events on the server.
  supports(eventName) {
    return true;
  }
  addEventListener(element, eventName, handler) {
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, eventName, handler);
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  addGlobalEventListener(element, eventName, handler) {
    const target = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this.doc, element);
    if (!target) {
      throw new Error(`Unsupported event target ${target} for event ${eventName}`);
    }
    return this.addEventListener(target, eventName, handler);
  }
}
ServerEventManagerPlugin.ɵfac = function ServerEventManagerPlugin_Factory(t) {
  return new (t || ServerEventManagerPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT));
};
ServerEventManagerPlugin.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ServerEventManagerPlugin,
  factory: ServerEventManagerPlugin.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerEventManagerPlugin, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }]
    }];
  }, null);
})();
const EMPTY_ARRAY = [];
const DEFAULT_SCHEMA = new _angular_compiler__WEBPACK_IMPORTED_MODULE_11__.DomElementSchemaRegistry();
class ServerRendererFactory2 {
  constructor(eventManager, ngZone, document, sharedStylesHost) {
    this.eventManager = eventManager;
    this.ngZone = ngZone;
    this.document = document;
    this.sharedStylesHost = sharedStylesHost;
    this.rendererByCompId = new Map();
    this.schema = DEFAULT_SCHEMA;
    this.defaultRenderer = new DefaultServerRenderer2(eventManager, document, ngZone, this.schema);
  }
  createRenderer(element, type) {
    if (!element || !type) {
      return this.defaultRenderer;
    }
    switch (type.encapsulation) {
      case _angular_core__WEBPACK_IMPORTED_MODULE_1__.ViewEncapsulation.Emulated:
        {
          let renderer = this.rendererByCompId.get(type.id);
          if (!renderer) {
            renderer = new EmulatedEncapsulationServerRenderer2(this.eventManager, this.document, this.ngZone, this.sharedStylesHost, this.schema, type);
            this.rendererByCompId.set(type.id, renderer);
          }
          renderer.applyToHost(element);
          return renderer;
        }
      default:
        {
          if (!this.rendererByCompId.has(type.id)) {
            const styles = (0,_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵflattenStyles"])(type.id, type.styles);
            this.sharedStylesHost.addStyles(styles);
            this.rendererByCompId.set(type.id, this.defaultRenderer);
          }
          return this.defaultRenderer;
        }
    }
  }
  begin() {}
  end() {}
}
ServerRendererFactory2.ɵfac = function ServerRendererFactory2_Factory(t) {
  return new (t || ServerRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵSharedStylesHost"]));
};
ServerRendererFactory2.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ServerRendererFactory2,
  factory: ServerRendererFactory2.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerRendererFactory2, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EventManager
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }]
    }, {
      type: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵSharedStylesHost"]
    }];
  }, null);
})();
class DefaultServerRenderer2 {
  constructor(eventManager, document, ngZone, schema) {
    this.eventManager = eventManager;
    this.document = document;
    this.ngZone = ngZone;
    this.schema = schema;
    this.data = Object.create(null);
    this.destroyNode = null;
  }
  destroy() {}
  createElement(name, namespace) {
    if (namespace) {
      const doc = this.document || (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getDefaultDocument();
      return doc.createElementNS(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵNAMESPACE_URIS"][namespace], name);
    }
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().createElement(name, this.document);
  }
  createComment(value) {
    return (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getDefaultDocument().createComment(value);
  }
  createText(value) {
    const doc = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getDefaultDocument();
    return doc.createTextNode(value);
  }
  appendChild(parent, newChild) {
    const targetParent = isTemplateNode(parent) ? parent.content : parent;
    targetParent.appendChild(newChild);
  }
  insertBefore(parent, newChild, refChild) {
    if (parent) {
      const targetParent = isTemplateNode(parent) ? parent.content : parent;
      targetParent.insertBefore(newChild, refChild);
    }
  }
  removeChild(parent, oldChild) {
    if (parent) {
      parent.removeChild(oldChild);
    }
  }
  selectRootElement(selectorOrNode, preserveContent) {
    const el = typeof selectorOrNode === 'string' ? this.document.querySelector(selectorOrNode) : selectorOrNode;
    if (!el) {
      throw new Error(`The selector "${selectorOrNode}" did not match any elements`);
    }
    if (!preserveContent) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    }
    return el;
  }
  parentNode(node) {
    return node.parentNode;
  }
  nextSibling(node) {
    return node.nextSibling;
  }
  setAttribute(el, name, value, namespace) {
    if (namespace) {
      el.setAttributeNS(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵNAMESPACE_URIS"][namespace], namespace + ':' + name, value);
    } else {
      el.setAttribute(name, value);
    }
  }
  removeAttribute(el, name, namespace) {
    if (namespace) {
      el.removeAttributeNS(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵNAMESPACE_URIS"][namespace], name);
    } else {
      el.removeAttribute(name);
    }
  }
  addClass(el, name) {
    el.classList.add(name);
  }
  removeClass(el, name) {
    el.classList.remove(name);
  }
  setStyle(el, style, value, flags) {
    style = style.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    value = value == null ? '' : `${value}`.trim();
    const styleMap = _readStyleAttribute(el);
    if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererStyleFlags2.Important) {
      value += ' !important';
    }
    styleMap[style] = value;
    _writeStyleAttribute(el, styleMap);
  }
  removeStyle(el, style, flags) {
    // IE requires '' instead of null
    // see https://github.com/angular/angular/issues/7916
    this.setStyle(el, style, '', flags);
  }
  // The value was validated already as a property binding, against the property name.
  // To know this value is safe to use as an attribute, the security context of the
  // attribute with the given name is checked against that security context of the
  // property.
  _isSafeToReflectProperty(tagName, propertyName) {
    return this.schema.securityContext(tagName, propertyName, true) === this.schema.securityContext(tagName, propertyName, false);
  }
  setProperty(el, name, value) {
    checkNoSyntheticProp(name, 'property');
    if (name === 'innerText') {
      // Domino does not support innerText. Just map it to textContent.
      el.textContent = value;
    }
    el[name] = value;
    // Mirror property values for known HTML element properties in the attributes.
    // Skip `innerhtml` which is conservatively marked as an attribute for security
    // purposes but is not actually an attribute.
    const tagName = el.tagName.toLowerCase();
    if (value != null && (typeof value === 'number' || typeof value == 'string') && name.toLowerCase() !== 'innerhtml' && this.schema.hasElement(tagName, EMPTY_ARRAY) && this.schema.hasProperty(tagName, name, EMPTY_ARRAY) && this._isSafeToReflectProperty(tagName, name)) {
      this.setAttribute(el, name, value.toString());
    }
  }
  setValue(node, value) {
    node.textContent = value;
  }
  listen(target, eventName, callback) {
    checkNoSyntheticProp(eventName, 'listener');
    if (typeof target === 'string') {
      return this.eventManager.addGlobalEventListener(target, eventName, this.decoratePreventDefault(callback));
    }
    return this.eventManager.addEventListener(target, eventName, this.decoratePreventDefault(callback));
  }
  decoratePreventDefault(eventHandler) {
    return event => {
      // Ivy uses `Function` as a special token that allows us to unwrap the function
      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
      if (event === Function) {
        return eventHandler;
      }
      // Run the event handler inside the ngZone because event handlers are not patched
      // by Zone on the server. This is required only for tests.
      const allowDefaultBehavior = this.ngZone.runGuarded(() => eventHandler(event));
      if (allowDefaultBehavior === false) {
        event.preventDefault();
        event.returnValue = false;
      }
      return undefined;
    };
  }
}
const AT_CHARCODE = '@'.charCodeAt(0);
function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Either \`BrowserAnimationsModule\` or \`NoopAnimationsModule\` are imported in your application.
  - There is corresponding configuration for the animation named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.io/api/core/Component#animations).`);
  }
}
function isTemplateNode(node) {
  return node.tagName === 'TEMPLATE' && node.content !== undefined;
}
class EmulatedEncapsulationServerRenderer2 extends DefaultServerRenderer2 {
  constructor(eventManager, document, ngZone, sharedStylesHost, schema, component) {
    super(eventManager, document, ngZone, schema);
    this.component = component;
    // Add a 's' prefix to style attributes to indicate server.
    const componentId = 's' + component.id;
    const styles = (0,_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵflattenStyles"])(componentId, component.styles);
    sharedStylesHost.addStyles(styles);
    this.contentAttr = (0,_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵshimContentAttribute"])(componentId);
    this.hostAttr = (0,_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵshimHostAttribute"])(componentId);
  }
  applyToHost(element) {
    super.setAttribute(element, this.hostAttr, '');
  }
  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, '');
    return el;
  }
}
function _readStyleAttribute(element) {
  const styleMap = {};
  const styleAttribute = element.getAttribute('style');
  if (styleAttribute) {
    const styleList = styleAttribute.split(/;+/g);
    for (let i = 0; i < styleList.length; i++) {
      const style = styleList[i].trim();
      if (style.length > 0) {
        const colonIndex = style.indexOf(':');
        if (colonIndex === -1) {
          throw new Error(`Invalid CSS style: ${style}`);
        }
        const name = style.slice(0, colonIndex).trim();
        styleMap[name] = style.slice(colonIndex + 1).trim();
      }
    }
  }
  return styleMap;
}
function _writeStyleAttribute(element, styleMap) {
  // We have to construct the `style` attribute ourselves, instead of going through
  // `element.style.setProperty` like the other renderers, because `setProperty` won't
  // write newer CSS properties that Domino doesn't know about like `clip-path`.
  let styleAttrValue = '';
  for (const key in styleMap) {
    const newValue = styleMap[key];
    if (newValue != null && newValue !== '') {
      styleAttrValue += key + ':' + newValue + ';';
    }
  }
  if (styleAttrValue) {
    element.setAttribute('style', styleAttrValue);
  } else {
    element.removeAttribute('style');
  }
}
class ServerStylesHost extends _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵSharedStylesHost"] {
  constructor(doc, transitionId) {
    super();
    this.doc = doc;
    this.transitionId = transitionId;
    this.head = null;
    this._styleNodes = new Set();
    this.head = doc.getElementsByTagName('head')[0];
  }
  onStyleAdded(style) {
    const adapter = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
    const el = adapter.createElement('style');
    el.textContent = style;
    if (!!this.transitionId) {
      el.setAttribute('ng-transition', this.transitionId);
    }
    this.head.appendChild(el);
    this._styleNodes.add(el);
  }
  ngOnDestroy() {
    this._styleNodes.forEach(styleNode => styleNode.remove());
    this._styleNodes.clear();
    super.ngOnDestroy();
  }
}
ServerStylesHost.ɵfac = function ServerStylesHost_Factory(t) {
  return new (t || ServerStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵTRANSITION_ID"], 8));
};
ServerStylesHost.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ServerStylesHost,
  factory: ServerStylesHost.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerStylesHost, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
      }]
    }, {
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,
        args: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵTRANSITION_ID"]]
      }]
    }];
  }, null);
})();
const TRANSFER_STATE_SERIALIZATION_PROVIDERS = [{
  provide: BEFORE_APP_SERIALIZED,
  useFactory: serializeTransferStateFactory,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, _angular_core__WEBPACK_IMPORTED_MODULE_1__.APP_ID, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.TransferState],
  multi: true
}];
function serializeTransferStateFactory(doc, appId, transferStore) {
  return () => {
    // The `.toJSON` here causes the `onSerialize` callbacks to be called.
    // These callbacks can be used to provide the value for a given key.
    const content = transferStore.toJson();
    if (transferStore.isEmpty) {
      // The state is empty, nothing to transfer,
      // avoid creating an extra `<script>` tag in this case.
      return;
    }
    const script = doc.createElement('script');
    script.id = appId + '-state';
    script.setAttribute('type', 'application/json');
    script.textContent = (0,_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵescapeHtml"])(content);
    // It is intentional that we add the script at the very bottom. Angular CLI script tags for
    // bundles are always `type="module"`. These are deferred by default and cause the transfer
    // transfer data to be queried only after the browser has finished parsing the DOM.
    doc.body.appendChild(script);
  };
}
/**
 * NgModule to install on the server side while using the `TransferState` to transfer state from
 * server to client.
 *
 * Note: this module is not needed if the `renderApplication` function is used.
 * The `renderApplication` makes all providers from this module available in the application.
 *
 * @publicApi
 * @deprecated no longer needed, you can inject the `TransferState` in an app without providing
 *     this module.
 */
class ServerTransferStateModule {}
ServerTransferStateModule.ɵfac = function ServerTransferStateModule_Factory(t) {
  return new (t || ServerTransferStateModule)();
};
ServerTransferStateModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: ServerTransferStateModule
});
ServerTransferStateModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerTransferStateModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{}]
  }], null, null);
})();
const INTERNAL_SERVER_PLATFORM_PROVIDERS = [{
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT,
  useFactory: _document,
  deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injector]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_ID,
  useValue: _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_SERVER_ID"]
}, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.PLATFORM_INITIALIZER,
  useFactory: initDominoAdapter,
  multi: true
}, {
  provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.PlatformLocation,
  useClass: ServerPlatformLocation,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT, [_angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional, INITIAL_CONFIG]]
}, {
  provide: PlatformState,
  deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT]
},
// Add special provider that allows multiple instances of platformServer* to be created.
{
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵALLOW_MULTIPLE_PLATFORMS"],
  useValue: true
}];
function initDominoAdapter() {
  return () => {
    DominoAdapter.makeCurrent();
  };
}
function instantiateServerRendererFactory(renderer, engine, zone) {
  return new _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__["ɵAnimationRendererFactory"](renderer, engine, zone);
}
const SERVER_RENDER_PROVIDERS = [ServerRendererFactory2, {
  provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.RendererFactory2,
  useFactory: instantiateServerRendererFactory,
  deps: [ServerRendererFactory2, _angular_animations_browser__WEBPACK_IMPORTED_MODULE_4__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgZone]
}, ServerStylesHost, {
  provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵSharedStylesHost"],
  useExisting: ServerStylesHost
}, {
  provide: _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.EVENT_MANAGER_PLUGINS,
  multi: true,
  useClass: ServerEventManagerPlugin
}];
/**
 * The ng module for the server.
 *
 * @publicApi
 */
class ServerModule {}
ServerModule.ɵfac = function ServerModule_Factory(t) {
  return new (t || ServerModule)();
};
ServerModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: ServerModule
});
ServerModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  providers: [TRANSFER_STATE_SERIALIZATION_PROVIDERS, SERVER_RENDER_PROVIDERS, SERVER_HTTP_PROVIDERS, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
    useValue: null
  }, {
    provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵTESTABILITY"],
    useValue: null
  }, {
    provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.ViewportScroller,
    useClass: _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵNullViewportScroller"]
  }],
  imports: [_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpClientModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__.NoopAnimationsModule, _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.BrowserModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServerModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.BrowserModule],
      imports: [_angular_common_http__WEBPACK_IMPORTED_MODULE_5__.HttpClientModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__.NoopAnimationsModule],
      providers: [TRANSFER_STATE_SERIALIZATION_PROVIDERS, SERVER_RENDER_PROVIDERS, SERVER_HTTP_PROVIDERS, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Testability,
        useValue: null
      }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵTESTABILITY"],
        useValue: null
      }, {
        provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__.ViewportScroller,
        useClass: _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵNullViewportScroller"]
      }]
    }]
  }], null, null);
})();
function _document(injector) {
  const config = injector.get(INITIAL_CONFIG, null);
  let document;
  if (config && config.document) {
    document = typeof config.document === 'string' ? parseDocument(config.document, config.url) : config.document;
  } else {
    document = (0,_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().createHtmlDocument();
  }
  // Tell ivy about the global document
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
  return document;
}
/**
 * @publicApi
 */
const platformServer = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.createPlatformFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_1__.platformCore, 'server', INTERNAL_SERVER_PLATFORM_PROVIDERS);
/**
 * The server platform that supports the runtime compiler.
 *
 * @publicApi
 */
const platformDynamicServer = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.createPlatformFactory)(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_6__["ɵplatformCoreDynamic"], 'serverDynamic', INTERNAL_SERVER_PLATFORM_PROVIDERS);
function _getPlatform(platformFactory, options) {
  const extraProviders = options.platformProviders ?? [];
  return platformFactory([{
    provide: INITIAL_CONFIG,
    useValue: {
      document: options.document,
      url: options.url
    }
  }, extraProviders]);
}
/**
 * Adds the `ng-server-context` attribute to host elements of all bootstrapped components
 * within a given application.
 */
function appendServerContextInfo(serverContext, applicationRef) {
  applicationRef.components.forEach(componentRef => {
    const renderer = componentRef.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.Renderer2);
    const element = componentRef.location.nativeElement;
    if (element) {
      renderer.setAttribute(element, 'ng-server-context', serverContext);
    }
  });
}
function _render(platform, bootstrapPromise) {
  return bootstrapPromise.then(moduleOrApplicationRef => {
    const environmentInjector = moduleOrApplicationRef.injector;
    const transitionId = environmentInjector.get(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["ɵTRANSITION_ID"], null);
    if (!transitionId) {
      throw new Error(`renderModule[Factory]() requires the use of BrowserModule.withServerTransition() to ensure
the server-rendered app can be properly bootstrapped into a client app.`);
    }
    const applicationRef = moduleOrApplicationRef instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationRef ? moduleOrApplicationRef : environmentInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__.ApplicationRef);
    const serverContext = sanitizeServerContext(environmentInjector.get(SERVER_CONTEXT, DEFAULT_SERVER_CONTEXT));
    return applicationRef.isStable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.first)(isStable => isStable)).toPromise().then(() => {
      appendServerContextInfo(serverContext, applicationRef);
      const platformState = platform.injector.get(PlatformState);
      const asyncPromises = [];
      // Run any BEFORE_APP_SERIALIZED callbacks just before rendering to string.
      const callbacks = environmentInjector.get(BEFORE_APP_SERIALIZED, null);
      if (callbacks) {
        for (const callback of callbacks) {
          try {
            const callbackResult = callback();
            if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵisPromise"])(callbackResult)) {
              // TODO: in TS3.7, callbackResult is void.
              asyncPromises.push(callbackResult);
            }
          } catch (e) {
            // Ignore exceptions.
            console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);
          }
        }
      }
      const complete = () => {
        const output = platformState.renderToString();
        platform.destroy();
        return output;
      };
      if (asyncPromises.length === 0) {
        return complete();
      }
      return Promise.all(asyncPromises.map(asyncPromise => {
        return asyncPromise.catch(e => {
          console.warn('Ignoring BEFORE_APP_SERIALIZED Exception: ', e);
        });
      })).then(complete);
    });
  });
}
/**
 * Specifies the value that should be used if no server context value has been provided.
 */
const DEFAULT_SERVER_CONTEXT = 'other';
/**
 * An internal token that allows providing extra information about the server context
 * (e.g. whether SSR or SSG was used). The value is a string and characters other
 * than [a-zA-Z0-9\-] are removed. See the default value in `DEFAULT_SERVER_CONTEXT` const.
 */
const SERVER_CONTEXT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('SERVER_CONTEXT');
/**
 * Sanitizes provided server context:
 * - removes all characters other than a-z, A-Z, 0-9 and `-`
 * - returns `other` if nothing is provided or the string is empty after sanitization
 */
function sanitizeServerContext(serverContext) {
  const context = serverContext.replace(/[^a-zA-Z0-9\-]/g, '');
  return context.length > 0 ? context : DEFAULT_SERVER_CONTEXT;
}
/**
 * Bootstraps an application using provided NgModule and serializes the page content to string.
 *
 * @param moduleType A reference to an NgModule that should be used for bootstrap.
 * @param options Additional configuration for the render operation:
 *  - `document` - the document of the page to render, either as an HTML string or
 *                 as a reference to the `document` instance.
 *  - `url` - the URL for the current render request.
 *  - `extraProviders` - set of platform level providers for the current render request.
 *
 * @publicApi
 */
function renderModule(moduleType, options) {
  const {
    document,
    url,
    extraProviders: platformProviders
  } = options;
  const platform = _getPlatform(platformDynamicServer, {
    document,
    url,
    platformProviders
  });
  return _render(platform, platform.bootstrapModule(moduleType));
}
/**
 * Bootstraps an instance of an Angular application and renders it to a string.
 *
 * Note: the root component passed into this function *must* be a standalone one (should have the
 * `standalone: true` flag in the `@Component` decorator config).
 *
 * ```typescript
 * @Component({
 *   standalone: true,
 *   template: 'Hello world!'
 * })
 * class RootComponent {}
 *
 * const output: string = await renderApplication(RootComponent, {appId: 'server-app'});
 * ```
 *
 * @param rootComponent A reference to a Standalone Component that should be rendered.
 * @param options Additional configuration for the render operation:
 *  - `appId` - a string identifier of this application. The appId is used to prefix all
 *              server-generated stylings and state keys of the application in TransferState
 *              use-cases.
 *  - `document` - the document of the page to render, either as an HTML string or
 *                 as a reference to the `document` instance.
 *  - `url` - the URL for the current render request.
 *  - `providers` - set of application level providers for the current render request.
 *  - `platformProviders` - the platform level providers for the current render request.
 *
 * @returns A Promise, that returns serialized (to a string) rendered page, once resolved.
 *
 * @publicApi
 * @developerPreview
 */
function renderApplication(rootComponent, options) {
  const {
    document,
    url,
    platformProviders,
    appId
  } = options;
  const platform = _getPlatform(platformDynamicServer, {
    document,
    url,
    platformProviders
  });
  const appProviders = [(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.importProvidersFrom)(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__.BrowserModule.withServerTransition({
    appId
  })), (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.importProvidersFrom)(ServerModule), ...(options.providers ?? [])];
  return _render(platform, (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵinternalCreateApplication"])({
    rootComponent,
    appProviders
  }));
}
/**
 * Bootstraps an application using provided {@link NgModuleFactory} and serializes the page content
 * to string.
 *
 * @param moduleFactory An instance of the {@link NgModuleFactory} that should be used for
 *     bootstrap.
 * @param options Additional configuration for the render operation:
 *  - `document` - the document of the page to render, either as an HTML string or
 *                 as a reference to the `document` instance.
 *  - `url` - the URL for the current render request.
 *  - `extraProviders` - set of platform level providers for the current render request.
 *
 * @publicApi
 *
 * @deprecated
 * This symbol is no longer necessary as of Angular v13.
 * Use {@link renderModule} API instead.
 */
function renderModuleFactory(moduleFactory, options) {
  const {
    document,
    url,
    extraProviders: platformProviders
  } = options;
  const platform = _getPlatform(platformServer, {
    document,
    url,
    platformProviders
  });
  return _render(platform, platform.bootstrapModuleFactory(moduleFactory));
}

/**
 * @module
 * @description
 * Entry point for all public APIs of the platform-server package.
 */
/**
 * @publicApi
 */
const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.Version('15.2.10');

/// <reference types="node" />
// This file only reexports content of the `src` folder. Keep it that way.

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

};
;
//# sourceMappingURL=node_modules_angular_platform-server_fesm2020_platform-server_mjs.js.map