{"version":3,"file":"node_modules_angular_fire_fesm2015_angular-fire-app-check_js-_1cd91.js","mappings":"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","sources":["./node_modules/@angular/fire/fesm2015/angular-fire-app-check.js","./node_modules/@firebase/app-check/dist/esm/index.esm2017.js","./node_modules/firebase/app/dist/esm/index.esm.js"],"sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\n\nconst APP_CHECK_PROVIDER_NAME = 'app-check';\nclass AppCheck {\n    constructor(appCheck) {\n        return appCheck;\n    }\n}\nclass AppCheckInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME);\n    }\n}\nconst appCheckInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_APP_CHECK_INSTANCES = new InjectionToken('angularfire2.app-check-instances');\nconst APP_CHECK_NAMESPACE_SYMBOL = Symbol('angularfire2.app-check.namespace');\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n    const defaultAppCheck = ɵgetDefaultInstanceOf(APP_CHECK_PROVIDER_NAME, provided, defaultApp);\n    return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\nconst LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nconst isLocalhost = typeof window !== 'undefined' && LOCALHOSTS.includes(window.location.hostname);\nfunction appCheckInstanceFactory(fn) {\n    // tslint:disable-next-line:ban-types\n    return (zone, injector, platformId) => {\n        var _a;\n        // Node should use admin token provider, browser devmode and localhost should use debug token\n        if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n            (_a = globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN) !== null && _a !== void 0 ? _a : (globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN = true);\n        }\n        const appCheck = zone.runOutsideAngular(() => fn(injector));\n        return new AppCheck(appCheck);\n    };\n}\nconst APP_CHECK_INSTANCES_PROVIDER = {\n    provide: AppCheckInstances,\n    deps: [\n        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],\n    ]\n};\nconst DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n    provide: AppCheck,\n    useFactory: defaultAppCheckInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_APP_CHECK_INSTANCES],\n        FirebaseApp,\n        PLATFORM_ID,\n    ]\n};\nclass AppCheckModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'app-check');\n    }\n}\nAppCheckModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAppCheckModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule });\nAppCheckModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, providers: [\n        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,\n        APP_CHECK_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AppCheckModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_APP_CHECK_INSTANCE_PROVIDER,\n                        APP_CHECK_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideAppCheck(fn, ...deps) {\n    return {\n        ngModule: AppCheckModule,\n        providers: [{\n                provide: PROVIDED_APP_CHECK_INSTANCES,\n                useFactory: appCheckInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    PLATFORM_ID,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getToken = ɵzoneWrap(getToken$1, true);\nconst initializeAppCheck = ɵzoneWrap(initializeAppCheck$1, true);\nconst onTokenChanged = ɵzoneWrap(onTokenChanged$1, true);\nconst setTokenAutoRefreshEnabled = ɵzoneWrap(setTokenAutoRefreshEnabled$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckInstances, AppCheckModule, appCheckInstance$, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled };\n","import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst APP_CHECK_STATES = new Map();\r\nconst DEFAULT_STATE = {\r\n    activated: false,\r\n    tokenObservers: []\r\n};\r\nconst DEBUG_STATE = {\r\n    initialized: false,\r\n    enabled: false\r\n};\r\n/**\r\n * Gets a reference to the state object.\r\n */\r\nfunction getStateReference(app) {\r\n    return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\r\n}\r\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\r\nfunction setInitialState(app, state) {\r\n    APP_CHECK_STATES.set(app, state);\r\n    return APP_CHECK_STATES.get(app);\r\n}\r\nfunction getDebugState() {\r\n    return DEBUG_STATE;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\r\nconst EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\r\nconst EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\r\nconst EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\r\nconst TOKEN_REFRESH_TIME = {\r\n    /**\r\n     * The offset time before token natural expiration to run the refresh.\r\n     * This is currently 5 minutes.\r\n     */\r\n    OFFSET_DURATION: 5 * 60 * 1000,\r\n    /**\r\n     * This is the first retrial wait after an error. This is currently\r\n     * 30 seconds.\r\n     */\r\n    RETRIAL_MIN_WAIT: 30 * 1000,\r\n    /**\r\n     * This is the maximum retrial wait, currently 16 minutes.\r\n     */\r\n    RETRIAL_MAX_WAIT: 16 * 60 * 1000\r\n};\r\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\r\nconst ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\r\n// TODO: move it to @firebase/util?\r\n// TODO: allow to config whether refresh should happen in the background\r\nclass Refresher {\r\n    constructor(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\r\n        this.operation = operation;\r\n        this.retryPolicy = retryPolicy;\r\n        this.getWaitDuration = getWaitDuration;\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.pending = null;\r\n        this.nextErrorWaitInterval = lowerBound;\r\n        if (lowerBound > upperBound) {\r\n            throw new Error('Proactive refresh lower bound greater than upper bound!');\r\n        }\r\n    }\r\n    start() {\r\n        this.nextErrorWaitInterval = this.lowerBound;\r\n        this.process(true).catch(() => {\r\n            /* we don't care about the result */\r\n        });\r\n    }\r\n    stop() {\r\n        if (this.pending) {\r\n            this.pending.reject('cancelled');\r\n            this.pending = null;\r\n        }\r\n    }\r\n    isRunning() {\r\n        return !!this.pending;\r\n    }\r\n    async process(hasSucceeded) {\r\n        this.stop();\r\n        try {\r\n            this.pending = new Deferred();\r\n            await sleep(this.getNextRun(hasSucceeded));\r\n            // Why do we resolve a promise, then immediate wait for it?\r\n            // We do it to make the promise chain cancellable.\r\n            // We can call stop() which rejects the promise before the following line execute, which makes\r\n            // the code jump to the catch block.\r\n            // TODO: unit test this\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.pending = new Deferred();\r\n            await this.operation();\r\n            this.pending.resolve();\r\n            await this.pending.promise;\r\n            this.process(true).catch(() => {\r\n                /* we don't care about the result */\r\n            });\r\n        }\r\n        catch (error) {\r\n            if (this.retryPolicy(error)) {\r\n                this.process(false).catch(() => {\r\n                    /* we don't care about the result */\r\n                });\r\n            }\r\n            else {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n    getNextRun(hasSucceeded) {\r\n        if (hasSucceeded) {\r\n            // If last operation succeeded, reset next error wait interval and return\r\n            // the default wait duration.\r\n            this.nextErrorWaitInterval = this.lowerBound;\r\n            // Return typical wait duration interval after a successful operation.\r\n            return this.getWaitDuration();\r\n        }\r\n        else {\r\n            // Get next error wait interval.\r\n            const currentErrorWaitInterval = this.nextErrorWaitInterval;\r\n            // Double interval for next consecutive error.\r\n            this.nextErrorWaitInterval *= 2;\r\n            // Make sure next wait interval does not exceed the maximum upper bound.\r\n            if (this.nextErrorWaitInterval > this.upperBound) {\r\n                this.nextErrorWaitInterval = this.upperBound;\r\n            }\r\n            return currentErrorWaitInterval;\r\n        }\r\n    }\r\n}\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */]: 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\r\n        'different options. To avoid this error, call initializeAppCheck() with the ' +\r\n        'same options as when it was originally called. This will return the ' +\r\n        'already initialized instance.',\r\n    [\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */]: 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\r\n        'Call initializeAppCheck() before instantiating other Firebase services.',\r\n    [\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */]: 'Fetch failed to connect to a network. Check Internet connection. ' +\r\n        'Original error: {$originalErrorMessage}.',\r\n    [\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"storage-open\" /* AppCheckError.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* AppCheckError.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* AppCheckError.STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */]: 'ReCAPTCHA error.',\r\n    [\"throttled\" /* AppCheckError.THROTTLED */]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getRecaptcha(isEnterprise = false) {\r\n    var _a;\r\n    if (isEnterprise) {\r\n        return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\r\n    }\r\n    return self.grecaptcha;\r\n}\r\nfunction ensureActivated(app) {\r\n    if (!getStateReference(app).activated) {\r\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* AppCheckError.USE_BEFORE_ACTIVATION */, {\r\n            appName: app.name\r\n        });\r\n    }\r\n}\r\nfunction getDurationString(durationInMillis) {\r\n    const totalSeconds = Math.round(durationInMillis / 1000);\r\n    const days = Math.floor(totalSeconds / (3600 * 24));\r\n    const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\r\n    const minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\r\n    const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\r\n    let result = '';\r\n    if (days) {\r\n        result += pad(days) + 'd:';\r\n    }\r\n    if (hours) {\r\n        result += pad(hours) + 'h:';\r\n    }\r\n    result += pad(minutes) + 'm:' + pad(seconds) + 's';\r\n    return result;\r\n}\r\nfunction pad(value) {\r\n    if (value === 0) {\r\n        return '00';\r\n    }\r\n    return value >= 10 ? value.toString() : '0' + value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function exchangeToken({ url, body }, heartbeatServiceProvider) {\r\n    const headers = {\r\n        'Content-Type': 'application/json'\r\n    };\r\n    // If heartbeat service exists, add heartbeat header string to the header.\r\n    const heartbeatService = heartbeatServiceProvider.getImmediate({\r\n        optional: true\r\n    });\r\n    if (heartbeatService) {\r\n        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\r\n        if (heartbeatsHeader) {\r\n            headers['X-Firebase-Client'] = heartbeatsHeader;\r\n        }\r\n    }\r\n    const options = {\r\n        method: 'POST',\r\n        body: JSON.stringify(body),\r\n        headers\r\n    };\r\n    let response;\r\n    try {\r\n        response = await fetch(url, options);\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-network-error\" /* AppCheckError.FETCH_NETWORK_ERROR */, {\r\n            originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n        });\r\n    }\r\n    if (response.status !== 200) {\r\n        throw ERROR_FACTORY.create(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */, {\r\n            httpStatus: response.status\r\n        });\r\n    }\r\n    let responseBody;\r\n    try {\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        responseBody = await response.json();\r\n    }\r\n    catch (originalError) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n        });\r\n    }\r\n    // Protobuf duration format.\r\n    // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\r\n    const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\r\n    if (!match || !match[2] || isNaN(Number(match[1]))) {\r\n        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* AppCheckError.FETCH_PARSE_ERROR */, {\r\n            originalErrorMessage: `ttl field (timeToLive) is not in standard Protobuf Duration ` +\r\n                `format: ${responseBody.ttl}`\r\n        });\r\n    }\r\n    const timeToLiveAsNumber = Number(match[1]) * 1000;\r\n    const now = Date.now();\r\n    return {\r\n        token: responseBody.token,\r\n        expireTimeMillis: now + timeToLiveAsNumber,\r\n        issuedAtTimeMillis: now\r\n    };\r\n}\r\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_v3_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            'recaptcha_enterprise_token': reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeDebugTokenRequest(app, debugToken) {\r\n    const { projectId, appId, apiKey } = app.options;\r\n    return {\r\n        url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\r\n        body: {\r\n            // eslint-disable-next-line\r\n            debug_token: debugToken\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-app-check-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-app-check-store';\r\nconst DEBUG_TOKEN_KEY = 'debug-token';\r\nlet dbPromise = null;\r\nfunction getDBPromise() {\r\n    if (dbPromise) {\r\n        return dbPromise;\r\n    }\r\n    dbPromise = new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onerror = event => {\r\n                var _a;\r\n                reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\r\n                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* AppCheckError.STORAGE_OPEN */, {\r\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n            }));\r\n        }\r\n    });\r\n    return dbPromise;\r\n}\r\nfunction readTokenFromIndexedDB(app) {\r\n    return read(computeKey(app));\r\n}\r\nfunction writeTokenToIndexedDB(app, token) {\r\n    return write(computeKey(app), token);\r\n}\r\nfunction writeDebugTokenToIndexedDB(token) {\r\n    return write(DEBUG_TOKEN_KEY, token);\r\n}\r\nfunction readDebugTokenFromIndexedDB() {\r\n    return read(DEBUG_TOKEN_KEY);\r\n}\r\nasync function write(key, value) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.put({\r\n        compositeKey: key,\r\n        value\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = _event => {\r\n            resolve();\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-set\" /* AppCheckError.STORAGE_WRITE */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nasync function read(key) {\r\n    const db = await getDBPromise();\r\n    const transaction = db.transaction(STORE_NAME, 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const request = store.get(key);\r\n    return new Promise((resolve, reject) => {\r\n        request.onsuccess = event => {\r\n            const result = event.target.result;\r\n            if (result) {\r\n                resolve(result.value);\r\n            }\r\n            else {\r\n                resolve(undefined);\r\n            }\r\n        };\r\n        transaction.onerror = event => {\r\n            var _a;\r\n            reject(ERROR_FACTORY.create(\"storage-get\" /* AppCheckError.STORAGE_GET */, {\r\n                originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n            }));\r\n        };\r\n    });\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.options.appId}-${app.name}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\r\nasync function readTokenFromStorage(app) {\r\n    if (isIndexedDBAvailable()) {\r\n        let token = undefined;\r\n        try {\r\n            token = await readTokenFromIndexedDB(app);\r\n        }\r\n        catch (e) {\r\n            // swallow the error and return undefined\r\n            logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\r\n        }\r\n        return token;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\r\nfunction writeTokenToStorage(app, token) {\r\n    if (isIndexedDBAvailable()) {\r\n        return writeTokenToIndexedDB(app, token).catch(e => {\r\n            // swallow the error and resolve the promise\r\n            logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\nasync function readOrCreateDebugTokenFromStorage() {\r\n    /**\r\n     * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n     * But it won't happen here, because this function will be called exactly once.\r\n     */\r\n    let existingDebugToken = undefined;\r\n    try {\r\n        existingDebugToken = await readDebugTokenFromIndexedDB();\r\n    }\r\n    catch (_e) {\r\n        // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\r\n    }\r\n    if (!existingDebugToken) {\r\n        // create a new debug token\r\n        const newToken = uuidv4();\r\n        // We don't need to block on writing to indexeddb\r\n        // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\r\n        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\r\n        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\r\n        // You should switch to a different browser that supports indexeddb\r\n        writeDebugTokenToIndexedDB(newToken).catch(e => logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`));\r\n        return newToken;\r\n    }\r\n    else {\r\n        return existingDebugToken;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isDebugMode() {\r\n    const debugState = getDebugState();\r\n    return debugState.enabled;\r\n}\r\nasync function getDebugToken() {\r\n    const state = getDebugState();\r\n    if (state.enabled && state.token) {\r\n        return state.token.promise;\r\n    }\r\n    else {\r\n        // should not happen!\r\n        throw Error(`\n            Can't get debug token in production mode.\n        `);\r\n    }\r\n}\r\nfunction initializeDebugMode() {\r\n    const globals = getGlobal();\r\n    const debugState = getDebugState();\r\n    // Set to true if this function has been called, whether or not\r\n    // it enabled debug mode.\r\n    debugState.initialized = true;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\r\n        globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\r\n        return;\r\n    }\r\n    debugState.enabled = true;\r\n    const deferredToken = new Deferred();\r\n    debugState.token = deferredToken;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\r\n        deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\r\n    }\r\n    else {\r\n        deferredToken.resolve(readOrCreateDebugTokenFromStorage());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Initial hardcoded value agreed upon across platforms for initial launch.\r\n// Format left open for possible dynamic error values and other fields in the future.\r\nconst defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\r\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\r\nfunction formatDummyToken(tokenErrorData) {\r\n    return base64.encodeString(JSON.stringify(tokenErrorData), \r\n    /* webSafe= */ false);\r\n}\r\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\r\nasync function getToken$2(appCheck, forceRefresh = false) {\r\n    const app = appCheck.app;\r\n    ensureActivated(app);\r\n    const state = getStateReference(app);\r\n    /**\r\n     * First check if there is a token in memory from a previous `getToken()` call.\r\n     */\r\n    let token = state.token;\r\n    let error = undefined;\r\n    /**\r\n     * If an invalid token was found in memory, clear token from\r\n     * memory and unset the local variable `token`.\r\n     */\r\n    if (token && !isValid(token)) {\r\n        state.token = undefined;\r\n        token = undefined;\r\n    }\r\n    /**\r\n     * If there is no valid token in memory, try to load token from indexedDB.\r\n     */\r\n    if (!token) {\r\n        // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\r\n        const cachedToken = await state.cachedTokenPromise;\r\n        if (cachedToken) {\r\n            if (isValid(cachedToken)) {\r\n                token = cachedToken;\r\n            }\r\n            else {\r\n                // If there was an invalid token in the indexedDB cache, clear it.\r\n                await writeTokenToStorage(app, undefined);\r\n            }\r\n        }\r\n    }\r\n    // Return the cached token (from either memory or indexedDB) if it's valid\r\n    if (!forceRefresh && token && isValid(token)) {\r\n        return {\r\n            token: token.token\r\n        };\r\n    }\r\n    // Only set to true if this `getToken()` call is making the actual\r\n    // REST call to the exchange endpoint, versus waiting for an already\r\n    // in-flight call (see debug and regular exchange endpoint paths below)\r\n    let shouldCallListeners = false;\r\n    /**\r\n     * DEBUG MODE\r\n     * If debug mode is set, and there is no cached token, fetch a new App\r\n     * Check token using the debug token, and return it directly.\r\n     */\r\n    if (isDebugMode()) {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            state.exchangeTokenPromise = exchangeToken(getExchangeDebugTokenRequest(app, await getDebugToken()), appCheck.heartbeatServiceProvider).finally(() => {\r\n                // Clear promise when settled - either resolved or rejected.\r\n                state.exchangeTokenPromise = undefined;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        const tokenFromDebugExchange = await state.exchangeTokenPromise;\r\n        // Write debug token to indexedDB.\r\n        await writeTokenToStorage(app, tokenFromDebugExchange);\r\n        // Write debug token to state.\r\n        state.token = tokenFromDebugExchange;\r\n        return { token: tokenFromDebugExchange.token };\r\n    }\r\n    /**\r\n     * There are no valid tokens in memory or indexedDB and we are not in\r\n     * debug mode.\r\n     * Request a new token from the exchange endpoint.\r\n     */\r\n    try {\r\n        // Avoid making another call to the exchange endpoint if one is in flight.\r\n        if (!state.exchangeTokenPromise) {\r\n            // state.provider is populated in initializeAppCheck()\r\n            // ensureActivated() at the top of this function checks that\r\n            // initializeAppCheck() has been called.\r\n            state.exchangeTokenPromise = state.provider.getToken().finally(() => {\r\n                // Clear promise when settled - either resolved or rejected.\r\n                state.exchangeTokenPromise = undefined;\r\n            });\r\n            shouldCallListeners = true;\r\n        }\r\n        token = await getStateReference(app).exchangeTokenPromise;\r\n    }\r\n    catch (e) {\r\n        if (e.code === `appCheck/${\"throttled\" /* AppCheckError.THROTTLED */}`) {\r\n            // Warn if throttled, but do not treat it as an error.\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            // `getToken()` should never throw, but logging error text to console will aid debugging.\r\n            logger.error(e);\r\n        }\r\n        // Always save error to be added to dummy token.\r\n        error = e;\r\n    }\r\n    let interopTokenResult;\r\n    if (!token) {\r\n        // If token is undefined, there must be an error.\r\n        // Return a dummy token along with the error.\r\n        interopTokenResult = makeDummyTokenResult(error);\r\n    }\r\n    else if (error) {\r\n        if (isValid(token)) {\r\n            // It's also possible a valid token exists, but there's also an error.\r\n            // (Such as if the token is almost expired, tries to refresh, and\r\n            // the exchange request fails.)\r\n            // We add a special error property here so that the refresher will\r\n            // count this as a failed attempt and use the backoff instead of\r\n            // retrying repeatedly with no delay, but any 3P listeners will not\r\n            // be hindered in getting the still-valid token.\r\n            interopTokenResult = {\r\n                token: token.token,\r\n                internalError: error\r\n            };\r\n        }\r\n        else {\r\n            // No invalid tokens should make it to this step. Memory and cached tokens\r\n            // are checked. Other tokens are from fresh exchanges. But just in case.\r\n            interopTokenResult = makeDummyTokenResult(error);\r\n        }\r\n    }\r\n    else {\r\n        interopTokenResult = {\r\n            token: token.token\r\n        };\r\n        // write the new token to the memory state as well as the persistent storage.\r\n        // Only do it if we got a valid new token\r\n        state.token = token;\r\n        await writeTokenToStorage(app, token);\r\n    }\r\n    if (shouldCallListeners) {\r\n        notifyTokenListeners(app, interopTokenResult);\r\n    }\r\n    return interopTokenResult;\r\n}\r\n/**\r\n * Internal API for limited use tokens. Skips all FAC state and simply calls\r\n * the underlying provider.\r\n */\r\nasync function getLimitedUseToken$1(appCheck) {\r\n    const app = appCheck.app;\r\n    ensureActivated(app);\r\n    const { provider } = getStateReference(app);\r\n    if (isDebugMode()) {\r\n        const debugToken = await getDebugToken();\r\n        const { token } = await exchangeToken(getExchangeDebugTokenRequest(app, debugToken), appCheck.heartbeatServiceProvider);\r\n        return { token };\r\n    }\r\n    else {\r\n        // provider is definitely valid since we ensure AppCheck was activated\r\n        const { token } = await provider.getToken();\r\n        return { token };\r\n    }\r\n}\r\nfunction addTokenListener(appCheck, type, listener, onError) {\r\n    const { app } = appCheck;\r\n    const state = getStateReference(app);\r\n    const tokenObserver = {\r\n        next: listener,\r\n        error: onError,\r\n        type\r\n    };\r\n    state.tokenObservers = [...state.tokenObservers, tokenObserver];\r\n    // Invoke the listener async immediately if there is a valid token\r\n    // in memory.\r\n    if (state.token && isValid(state.token)) {\r\n        const validToken = state.token;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            listener({ token: validToken.token });\r\n            initTokenRefresher(appCheck);\r\n        })\r\n            .catch(() => {\r\n            /* we don't care about exceptions thrown in listeners */\r\n        });\r\n    }\r\n    /**\r\n     * Wait for any cached token promise to resolve before starting the token\r\n     * refresher. The refresher checks to see if there is an existing token\r\n     * in state and calls the exchange endpoint if not. We should first let the\r\n     * IndexedDB check have a chance to populate state if it can.\r\n     *\r\n     * Listener call isn't needed here because cachedTokenPromise will call any\r\n     * listeners that exist when it resolves.\r\n     */\r\n    // state.cachedTokenPromise is always populated in `activate()`.\r\n    void state.cachedTokenPromise.then(() => initTokenRefresher(appCheck));\r\n}\r\nfunction removeTokenListener(app, listener) {\r\n    const state = getStateReference(app);\r\n    const newObservers = state.tokenObservers.filter(tokenObserver => tokenObserver.next !== listener);\r\n    if (newObservers.length === 0 &&\r\n        state.tokenRefresher &&\r\n        state.tokenRefresher.isRunning()) {\r\n        state.tokenRefresher.stop();\r\n    }\r\n    state.tokenObservers = newObservers;\r\n}\r\n/**\r\n * Logic to create and start refresher as needed.\r\n */\r\nfunction initTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    const state = getStateReference(app);\r\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\r\n    // is not true.\r\n    let refresher = state.tokenRefresher;\r\n    if (!refresher) {\r\n        refresher = createTokenRefresher(appCheck);\r\n        state.tokenRefresher = refresher;\r\n    }\r\n    if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\r\n        refresher.start();\r\n    }\r\n}\r\nfunction createTokenRefresher(appCheck) {\r\n    const { app } = appCheck;\r\n    return new Refresher(\r\n    // Keep in mind when this fails for any reason other than the ones\r\n    // for which we should retry, it will effectively stop the proactive refresh.\r\n    async () => {\r\n        const state = getStateReference(app);\r\n        // If there is no token, we will try to load it from storage and use it\r\n        // If there is a token, we force refresh it because we know it's going to expire soon\r\n        let result;\r\n        if (!state.token) {\r\n            result = await getToken$2(appCheck);\r\n        }\r\n        else {\r\n            result = await getToken$2(appCheck, true);\r\n        }\r\n        /**\r\n         * getToken() always resolves. In case the result has an error field defined, it means\r\n         * the operation failed, and we should retry.\r\n         */\r\n        if (result.error) {\r\n            throw result.error;\r\n        }\r\n        /**\r\n         * A special `internalError` field reflects that there was an error\r\n         * getting a new token from the exchange endpoint, but there's still a\r\n         * previous token that's valid for now and this should be passed to 2P/3P\r\n         * requests for a token. But we want this callback (`this.operation` in\r\n         * `Refresher`) to throw in order to kick off the Refresher's retry\r\n         * backoff. (Setting `hasSucceeded` to false.)\r\n         */\r\n        if (result.internalError) {\r\n            throw result.internalError;\r\n        }\r\n    }, () => {\r\n        return true;\r\n    }, () => {\r\n        const state = getStateReference(app);\r\n        if (state.token) {\r\n            // issuedAtTime + (50% * total TTL) + 5 minutes\r\n            let nextRefreshTimeMillis = state.token.issuedAtTimeMillis +\r\n                (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\r\n                    0.5 +\r\n                5 * 60 * 1000;\r\n            // Do not allow refresh time to be past (expireTime - 5 minutes)\r\n            const latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\r\n            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\r\n            return Math.max(0, nextRefreshTimeMillis - Date.now());\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\r\n}\r\nfunction notifyTokenListeners(app, token) {\r\n    const observers = getStateReference(app).tokenObservers;\r\n    for (const observer of observers) {\r\n        try {\r\n            if (observer.type === \"EXTERNAL\" /* ListenerType.EXTERNAL */ && token.error != null) {\r\n                // If this listener was added by a 3P call, send any token error to\r\n                // the supplied error handler. A 3P observer always has an error\r\n                // handler.\r\n                observer.error(token.error);\r\n            }\r\n            else {\r\n                // If the token has no error field, always return the token.\r\n                // If this is a 2P listener, return the token, whether or not it\r\n                // has an error field.\r\n                observer.next(token);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Errors in the listener function itself are always ignored.\r\n        }\r\n    }\r\n}\r\nfunction isValid(token) {\r\n    return token.expireTimeMillis - Date.now() > 0;\r\n}\r\nfunction makeDummyTokenResult(error) {\r\n    return {\r\n        token: formatDummyToken(defaultTokenErrorData),\r\n        error\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * AppCheck Service class.\r\n */\r\nclass AppCheckService {\r\n    constructor(app, heartbeatServiceProvider) {\r\n        this.app = app;\r\n        this.heartbeatServiceProvider = heartbeatServiceProvider;\r\n    }\r\n    _delete() {\r\n        const { tokenObservers } = getStateReference(this.app);\r\n        for (const tokenObserver of tokenObservers) {\r\n            removeTokenListener(this.app, tokenObserver.next);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nfunction factory(app, heartbeatServiceProvider) {\r\n    return new AppCheckService(app, heartbeatServiceProvider);\r\n}\r\nfunction internalFactory(appCheck) {\r\n    return {\r\n        getToken: forceRefresh => getToken$2(appCheck, forceRefresh),\r\n        getLimitedUseToken: () => getLimitedUseToken$1(appCheck),\r\n        addTokenListener: listener => addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, listener),\r\n        removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\r\n    };\r\n}\n\nconst name = \"@firebase/app-check\";\nconst version = \"0.8.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\r\nconst RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\r\nfunction initializeV3(app, siteKey) {\r\n    const initialized = new Deferred();\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = { initialized };\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(false);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAV3Script(() => {\r\n            const grecaptcha = getRecaptcha(false);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\nfunction initializeEnterprise(app, siteKey) {\r\n    const initialized = new Deferred();\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = { initialized };\r\n    const divId = makeDiv(app);\r\n    const grecaptcha = getRecaptcha(true);\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAEnterpriseScript(() => {\r\n            const grecaptcha = getRecaptcha(true);\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n        });\r\n    }\r\n    else {\r\n        queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\r\n    }\r\n    return initialized.promise;\r\n}\r\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\r\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\r\n    grecaptcha.ready(() => {\r\n        // Invisible widgets allow us to set a different siteKey for each widget,\r\n        // so we use them to support multiple apps\r\n        renderInvisibleWidget(app, siteKey, grecaptcha, container);\r\n        initialized.resolve(grecaptcha);\r\n    });\r\n}\r\n/**\r\n * Add invisible div to page.\r\n */\r\nfunction makeDiv(app) {\r\n    const divId = `fire_app_check_${app.name}`;\r\n    const invisibleDiv = document.createElement('div');\r\n    invisibleDiv.id = divId;\r\n    invisibleDiv.style.display = 'none';\r\n    document.body.appendChild(invisibleDiv);\r\n    return divId;\r\n}\r\nasync function getToken$1(app) {\r\n    ensureActivated(app);\r\n    // ensureActivated() guarantees that reCAPTCHAState is set\r\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\r\n    const recaptcha = await reCAPTCHAState.initialized.promise;\r\n    return new Promise((resolve, _reject) => {\r\n        // Updated after initialization is complete.\r\n        const reCAPTCHAState = getStateReference(app).reCAPTCHAState;\r\n        recaptcha.ready(() => {\r\n            resolve(\r\n            // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\r\n            recaptcha.execute(reCAPTCHAState.widgetId, {\r\n                action: 'fire_app_check'\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\r\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\r\n    const widgetId = grecaptcha.render(container, {\r\n        sitekey: siteKey,\r\n        size: 'invisible',\r\n        // Success callback - set state\r\n        callback: () => {\r\n            getStateReference(app).reCAPTCHAState.succeeded = true;\r\n        },\r\n        // Failure callback - set state\r\n        'error-callback': () => {\r\n            getStateReference(app).reCAPTCHAState.succeeded = false;\r\n        }\r\n    });\r\n    const state = getStateReference(app);\r\n    state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), { // state.reCAPTCHAState is set in the initialize()\r\n        widgetId });\r\n}\r\nfunction loadReCAPTCHAV3Script(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\r\nfunction loadReCAPTCHAEnterpriseScript(onload) {\r\n    const script = document.createElement('script');\r\n    script.src = RECAPTCHA_ENTERPRISE_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaV3Provider {\r\n    /**\r\n     * Create a ReCaptchaV3Provider instance.\r\n     * @param siteKey - ReCAPTCHA V3 siteKey.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b, _c;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        });\r\n        // Check if a failure state was set by the recaptcha \"error-callback\".\r\n        if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        }\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeV3(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaV3Provider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\r\nclass ReCaptchaEnterpriseProvider {\r\n    /**\r\n     * Create a ReCaptchaEnterpriseProvider instance.\r\n     * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n     */\r\n    constructor(_siteKey) {\r\n        this._siteKey = _siteKey;\r\n        /**\r\n         * Throttle requests on certain error codes to prevent too many retries\r\n         * in a short time.\r\n         */\r\n        this._throttleData = null;\r\n    }\r\n    /**\r\n     * Returns an App Check token.\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        var _a, _b, _c;\r\n        throwIfThrottled(this._throttleData);\r\n        // Top-level `getToken()` has already checked that App Check is initialized\r\n        // and therefore this._app and this._heartbeatServiceProvider are available.\r\n        const attestedClaimsToken = await getToken$1(this._app).catch(_e => {\r\n            // reCaptcha.execute() throws null which is not very descriptive.\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        });\r\n        // Check if a failure state was set by the recaptcha \"error-callback\".\r\n        if (!((_a = getStateReference(this._app).reCAPTCHAState) === null || _a === void 0 ? void 0 : _a.succeeded)) {\r\n            throw ERROR_FACTORY.create(\"recaptcha-error\" /* AppCheckError.RECAPTCHA_ERROR */);\r\n        }\r\n        let result;\r\n        try {\r\n            result = await exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\r\n        }\r\n        catch (e) {\r\n            if ((_b = e.code) === null || _b === void 0 ? void 0 : _b.includes(\"fetch-status-error\" /* AppCheckError.FETCH_STATUS_ERROR */)) {\r\n                this._throttleData = setBackoff(Number((_c = e.customData) === null || _c === void 0 ? void 0 : _c.httpStatus), this._throttleData);\r\n                throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                    time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\r\n                    httpStatus: this._throttleData.httpStatus\r\n                });\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        // If successful, clear throttle data.\r\n        this._throttleData = null;\r\n        return result;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n        this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\r\n        initializeEnterprise(app, this._siteKey).catch(() => {\r\n            /* we don't care about the initialization result */\r\n        });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\r\n            return this._siteKey === otherProvider._siteKey;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Custom provider class.\r\n * @public\r\n */\r\nclass CustomProvider {\r\n    constructor(_customProviderOptions) {\r\n        this._customProviderOptions = _customProviderOptions;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    async getToken() {\r\n        // custom provider\r\n        const customToken = await this._customProviderOptions.getToken();\r\n        // Try to extract IAT from custom token, in case this token is not\r\n        // being newly issued. JWT timestamps are in seconds since epoch.\r\n        const issuedAtTimeSeconds = issuedAtTime(customToken.token);\r\n        // Very basic validation, use current timestamp as IAT if JWT\r\n        // has no `iat` field or value is out of bounds.\r\n        const issuedAtTimeMillis = issuedAtTimeSeconds !== null &&\r\n            issuedAtTimeSeconds < Date.now() &&\r\n            issuedAtTimeSeconds > 0\r\n            ? issuedAtTimeSeconds * 1000\r\n            : Date.now();\r\n        return Object.assign(Object.assign({}, customToken), { issuedAtTimeMillis });\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    initialize(app) {\r\n        this._app = app;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    isEqual(otherProvider) {\r\n        if (otherProvider instanceof CustomProvider) {\r\n            return (this._customProviderOptions.getToken.toString() ===\r\n                otherProvider._customProviderOptions.getToken.toString());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\r\nfunction setBackoff(httpStatus, throttleData) {\r\n    /**\r\n     * Block retries for 1 day for the following error codes:\r\n     *\r\n     * 404: Likely malformed URL.\r\n     *\r\n     * 403:\r\n     * - Attestation failed\r\n     * - Wrong API key\r\n     * - Project deleted\r\n     */\r\n    if (httpStatus === 404 || httpStatus === 403) {\r\n        return {\r\n            backoffCount: 1,\r\n            allowRequestsAfter: Date.now() + ONE_DAY,\r\n            httpStatus\r\n        };\r\n    }\r\n    else {\r\n        /**\r\n         * For all other error codes, the time when it is ok to retry again\r\n         * is based on exponential backoff.\r\n         */\r\n        const backoffCount = throttleData ? throttleData.backoffCount : 0;\r\n        const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\r\n        return {\r\n            backoffCount: backoffCount + 1,\r\n            allowRequestsAfter: Date.now() + backoffMillis,\r\n            httpStatus\r\n        };\r\n    }\r\n}\r\nfunction throwIfThrottled(throttleData) {\r\n    if (throttleData) {\r\n        if (Date.now() - throttleData.allowRequestsAfter <= 0) {\r\n            // If before, throw.\r\n            throw ERROR_FACTORY.create(\"throttled\" /* AppCheckError.THROTTLED */, {\r\n                time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\r\n                httpStatus: throttleData.httpStatus\r\n            });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\r\nfunction initializeAppCheck(app = getApp(), options) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'app-check');\r\n    // Ensure initializeDebugMode() is only called once.\r\n    if (!getDebugState().initialized) {\r\n        initializeDebugMode();\r\n    }\r\n    // Log a message containing the debug token when `initializeAppCheck()`\r\n    // is called in debug mode.\r\n    if (isDebugMode()) {\r\n        // Do not block initialization to get the token for the message.\r\n        void getDebugToken().then(token => \r\n        // Not using logger because I don't think we ever want this accidentally hidden.\r\n        console.log(`App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`));\r\n    }\r\n    if (provider.isInitialized()) {\r\n        const existingInstance = provider.getImmediate();\r\n        const initialOptions = provider.getOptions();\r\n        if (initialOptions.isTokenAutoRefreshEnabled ===\r\n            options.isTokenAutoRefreshEnabled &&\r\n            initialOptions.provider.isEqual(options.provider)) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AppCheckError.ALREADY_INITIALIZED */, {\r\n                appName: app.name\r\n            });\r\n        }\r\n    }\r\n    const appCheck = provider.initialize({ options });\r\n    _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\r\n    // If isTokenAutoRefreshEnabled is false, do not send any requests to the\r\n    // exchange endpoint without an explicit call from the user either directly\r\n    // or through another Firebase library (storage, functions, etc.)\r\n    if (getStateReference(app).isTokenAutoRefreshEnabled) {\r\n        // Adding a listener will start the refresher and fetch a token if needed.\r\n        // This gets a token ready and prevents a delay when an internal library\r\n        // requests the token.\r\n        // Listener function does not need to do anything, its base functionality\r\n        // of calling getToken() already fetches token and writes it to memory/storage.\r\n        addTokenListener(appCheck, \"INTERNAL\" /* ListenerType.INTERNAL */, () => { });\r\n    }\r\n    return appCheck;\r\n}\r\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\r\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\r\n    // Create an entry in the APP_CHECK_STATES map. Further changes should\r\n    // directly mutate this object.\r\n    const state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\r\n    state.activated = true;\r\n    state.provider = provider; // Read cached token from storage if it exists and store it in memory.\r\n    state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\r\n        if (cachedToken && isValid(cachedToken)) {\r\n            state.token = cachedToken;\r\n            // notify all listeners with the cached token\r\n            notifyTokenListeners(app, { token: cachedToken.token });\r\n        }\r\n        return cachedToken;\r\n    });\r\n    // Use value of global `automaticDataCollectionEnabled` (which\r\n    // itself defaults to false if not specified in config) if\r\n    // `isTokenAutoRefreshEnabled` param was not provided by user.\r\n    state.isTokenAutoRefreshEnabled =\r\n        isTokenAutoRefreshEnabled === undefined\r\n            ? app.automaticDataCollectionEnabled\r\n            : isTokenAutoRefreshEnabled;\r\n    state.provider.initialize(app);\r\n}\r\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\r\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\r\n    const app = appCheckInstance.app;\r\n    const state = getStateReference(app);\r\n    // This will exist if any product libraries have called\r\n    // `addTokenListener()`\r\n    if (state.tokenRefresher) {\r\n        if (isTokenAutoRefreshEnabled === true) {\r\n            state.tokenRefresher.start();\r\n        }\r\n        else {\r\n            state.tokenRefresher.stop();\r\n        }\r\n    }\r\n    state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\r\n}\r\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\r\nasync function getToken(appCheckInstance, forceRefresh) {\r\n    const result = await getToken$2(appCheckInstance, forceRefresh);\r\n    if (result.error) {\r\n        throw result.error;\r\n    }\r\n    return { token: result.token };\r\n}\r\n/**\r\n * Requests a Firebase App Check token. This method should be used\r\n * only if you need to authorize requests to a non-Firebase backend.\r\n *\r\n * Returns limited-use tokens that are intended for use with your\r\n * non-Firebase backend endpoints that are protected with\r\n * <a href=\"https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection\">\r\n * Replay Protection</a>. This method\r\n * does not affect the token generation behavior of the\r\n * #getAppCheckToken() method.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @returns The limited use token.\r\n * @public\r\n */\r\nfunction getLimitedUseToken(appCheckInstance) {\r\n    return getLimitedUseToken$1(appCheckInstance);\r\n}\r\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\r\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError, \r\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nonCompletion) {\r\n    let nextFn = () => { };\r\n    let errorFn = () => { };\r\n    if (onNextOrObserver.next != null) {\r\n        nextFn = onNextOrObserver.next.bind(onNextOrObserver);\r\n    }\r\n    else {\r\n        nextFn = onNextOrObserver;\r\n    }\r\n    if (onNextOrObserver.error != null) {\r\n        errorFn = onNextOrObserver.error.bind(onNextOrObserver);\r\n    }\r\n    else if (onError) {\r\n        errorFn = onError;\r\n    }\r\n    addTokenListener(appCheckInstance, \"EXTERNAL\" /* ListenerType.EXTERNAL */, nextFn, errorFn);\r\n    return () => removeTokenListener(appCheckInstance.app, nextFn);\r\n}\n\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\r\nconst APP_CHECK_NAME = 'app-check';\r\nconst APP_CHECK_NAME_INTERNAL = 'app-check-internal';\r\nfunction registerAppCheck() {\r\n    // The public interface\r\n    _registerComponent(new Component(APP_CHECK_NAME, container => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\r\n        return factory(app, heartbeatServiceProvider);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\r\n        /**\r\n         * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n         * other Firebase SDKs\r\n         */\r\n        .setInstanceCreatedCallback((container, _identifier, _appcheckService) => {\r\n        container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\r\n    }));\r\n    // The internal interface used by other Firebase products\r\n    _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, container => {\r\n        const appCheck = container.getProvider('app-check').getImmediate();\r\n        return internalFactory(appCheck);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\r\n    registerVersion(name, version);\r\n}\r\nregisterAppCheck();\n\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getLimitedUseToken, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.23.0\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n"],"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","isDevMode","Optional","PLATFORM_ID","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","registerVersion","isPlatformServer","getToken","getToken$1","initializeAppCheck","initializeAppCheck$1","onTokenChanged","onTokenChanged$1","setTokenAutoRefreshEnabled","setTokenAutoRefreshEnabled$1","APP_CHECK_PROVIDER_NAME","AppCheck","constructor","appCheck","AppCheckInstances","appCheckInstance$","pipe","PROVIDED_APP_CHECK_INSTANCES","APP_CHECK_NAMESPACE_SYMBOL","Symbol","defaultAppCheckInstanceFactory","provided","defaultApp","defaultAppCheck","LOCALHOSTS","isLocalhost","window","includes","location","hostname","appCheckInstanceFactory","fn","zone","injector","platformId","_a","globalThis","FIREBASE_APPCHECK_DEBUG_TOKEN","runOutsideAngular","APP_CHECK_INSTANCES_PROVIDER","provide","deps","DEFAULT_APP_CHECK_INSTANCE_PROVIDER","useFactory","AppCheckModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideAppCheck","ngModule","multi","_getProvider","getApp","_registerComponent","Component","Deferred","ErrorFactory","isIndexedDBAvailable","uuidv4","getGlobal","base64","issuedAtTime","calculateBackoffMillis","getModularInstance","Logger","APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getStateReference","app","get","Object","assign","setInitialState","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","pending","nextErrorWaitInterval","Error","start","process","catch","stop","reject","isRunning","hasSucceeded","sleep","getNextRun","resolve","promise","error","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","getRecaptcha","isEnterprise","self","grecaptcha","enterprise","ensureActivated","create","appName","name","getDurationString","durationInMillis","totalSeconds","Math","round","days","floor","hours","minutes","seconds","result","pad","value","toString","exchangeToken","url","body","heartbeatServiceProvider","headers","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","options","method","JSON","stringify","response","fetch","originalError","originalErrorMessage","message","status","httpStatus","responseBody","json","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","getExchangeRecaptchaV3TokenRequest","reCAPTCHAToken","projectId","appId","apiKey","getExchangeRecaptchaEnterpriseTokenRequest","getExchangeDebugTokenRequest","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","writeTokenToIndexedDB","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","_event","undefined","logger","readTokenFromStorage","warn","writeTokenToStorage","readOrCreateDebugTokenFromStorage","existingDebugToken","_e","newToken","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","encodeString","getToken$2","forceRefresh","isValid","cachedToken","cachedTokenPromise","shouldCallListeners","exchangeTokenPromise","finally","tokenFromDebugExchange","provider","code","interopTokenResult","makeDummyTokenResult","internalError","notifyTokenListeners","getLimitedUseToken$1","addTokenListener","listener","onError","tokenObserver","next","validToken","then","initTokenRefresher","removeTokenListener","newObservers","filter","length","tokenRefresher","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","_delete","factory","internalFactory","getLimitedUseToken","version","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","initializeV3","siteKey","reCAPTCHAState","divId","makeDiv","loadReCAPTCHAV3Script","queueWidgetRender","initializeEnterprise","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","callback","succeeded","onload","script","src","head","ReCaptchaV3Provider","_siteKey","_throttleData","_b","_c","throwIfThrottled","attestedClaimsToken","_app","_heartbeatServiceProvider","setBackoff","customData","time","allowRequestsAfter","initialize","isEqual","otherProvider","ReCaptchaEnterpriseProvider","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","throttleData","backoffCount","backoffMillis","console","log","isInitialized","existingInstance","initialOptions","getOptions","_activate","automaticDataCollectionEnabled","appCheckInstance","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","getProvider","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2]}